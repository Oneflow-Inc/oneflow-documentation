{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"OneFlow \u5168\u65b0\u4e00\u4ee3\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6 \u00b6 OneFlow \u662f\u4ec0\u4e48 \u00b6 OneFlow \u662f\u5f00\u6e90\u7684\u3001\u91c7\u7528\u5168\u65b0\u67b6\u6784\u8bbe\u8ba1\uff0c\u4e16\u754c\u9886\u5148\u7684\u5de5\u4e1a\u7ea7\u901a\u7528\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002 \u4e3a\u4ec0\u4e48\u662fOneFlow \u00b6 \u5206\u5e03\u5f0f\u8bad\u7ec3\u5168\u65b0\u4f53\u9a8c\uff0c\u591a\u673a\u591a\u5361\u5982\u5355\u673a\u5355\u5361\u4e00\u6837\u7b80\u5355 \u5b8c\u7f8e\u5951\u5408\u4e00\u7ad9\u5f0f\u5e73\u53f0(k8s + docker) \u539f\u751f\u652f\u6301\u8d85\u5927\u6a21\u578b \u8fd1\u96f6\u8fd0\u884c\u65f6\u5f00\u9500\u3001\u7ebf\u6027\u52a0\u901f\u6bd4 \u7075\u6d3b\u652f\u6301\u591a\u79cd\u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u5668 \u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6 \u4e2d\u7acb\u5f00\u653e\uff0c\u5408\u4f5c\u9762\u5e7f \u6301\u7eed\u5b8c\u5584\u7684\u7b97\u5b50\u96c6\u3001\u6a21\u578b\u5e93 \u6211\u4eec\u81f4\u529b\u4e8e\u6253\u9020\u4e00\u6b3e\u6ee1\u8db3\u5f00\u53d1\u8005\u6240\u6709\u7f8e\u597d\u60f3\u8c61\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u671f\u5f85\u5e7f\u5927\u5f00\u53d1\u8005\u8bd5\u7528\u3001\u53cd\u9988\u3001\u5408\u4f5c\u3002 \u4ece\u54ea\u5f00\u59cb \u00b6 \u53ef\u4ee5\u5728 \u5feb\u901f\u4e0a\u624b \u5b66\u4e60\u5982\u4f55\u5b89\u88c5\u5e76\u5feb\u901f\u8fd0\u884c OneFlow\u3002 \u5728 \u57fa\u7840\u4e13\u9898 \u4e2d\u6211\u4eec\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 OneFlow \u5b8c\u6210\u673a\u5668\u5b66\u4e60\u7684\u5e38\u89c1\u4efb\u52a1\uff0c\u5982\u642d\u5efa\u7f51\u7edc\u3001\u914d\u7f6e\u8d85\u53c2\u3001\u52a0\u8f7d\u6570\u636e\u3001\u5206\u5e03\u5f0f\u8bad\u7ec3\u7b49\u3002 \u5728 \u6269\u5c55\u4e13\u9898 \u4e2d\u6211\u4eec\u4ecb\u7ecd\u4e86\u5177\u6709 OneFlow \u81ea\u8eab\u7279\u70b9\u7684\u8bdd\u9898\uff0c\u5982 OneFlow \u6570\u636e\u96c6\u683c\u5f0f\u3001OneFlow \u7684\u5e76\u884c\u89c2\u3001\u5f00\u53d1\u8005\u5982\u4f55\u4f7f\u7528 VS Code \u8c03\u8bd5 OneFlow \u6846\u67b6\u7b49\u3002 \u9ad8\u7ea7\u5e94\u7528\u5b9e\u4f8b \u4e2d\u7684\u6587\u7ae0\uff0c\u5bf9\u5e94\u4e86 OneFlow Model Zoo \u4ed3\u5e93 \u4e2d\u7684\u5404\u4e2a\u6a21\u578b\u4ecb\u7ecd\uff0c\u6709\u52a9\u4e0e\u8bfb\u8005\u7406\u89e3\u6a21\u578b\u811a\u672c\u53ca\u76f8\u5173\u7ec6\u8282\u3002 \u6700\u540e\uff0c\u671f\u5f85\u5e7f\u5927\u5f00\u53d1\u8005\u3001\u673a\u5668\u5b66\u4e60\u7231\u597d\u8005\u53c2\u4e0e OneFlow \u5f00\u6e90\u8ba1\u5212 \uff0c\u5171\u521b\u3001\u5171\u4eab\uff0c\u4e00\u8d77\u6253\u9020\u8fc8\u5411\u5b8c\u7f8e\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002","title":"\u9996\u9875"},{"location":"index.html#oneflow","text":"","title":"OneFlow \u5168\u65b0\u4e00\u4ee3\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6"},{"location":"index.html#oneflow_1","text":"OneFlow \u662f\u5f00\u6e90\u7684\u3001\u91c7\u7528\u5168\u65b0\u67b6\u6784\u8bbe\u8ba1\uff0c\u4e16\u754c\u9886\u5148\u7684\u5de5\u4e1a\u7ea7\u901a\u7528\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002","title":"OneFlow \u662f\u4ec0\u4e48"},{"location":"index.html#oneflow_2","text":"\u5206\u5e03\u5f0f\u8bad\u7ec3\u5168\u65b0\u4f53\u9a8c\uff0c\u591a\u673a\u591a\u5361\u5982\u5355\u673a\u5355\u5361\u4e00\u6837\u7b80\u5355 \u5b8c\u7f8e\u5951\u5408\u4e00\u7ad9\u5f0f\u5e73\u53f0(k8s + docker) \u539f\u751f\u652f\u6301\u8d85\u5927\u6a21\u578b \u8fd1\u96f6\u8fd0\u884c\u65f6\u5f00\u9500\u3001\u7ebf\u6027\u52a0\u901f\u6bd4 \u7075\u6d3b\u652f\u6301\u591a\u79cd\u6df1\u5ea6\u5b66\u4e60\u7f16\u8bd1\u5668 \u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6 \u4e2d\u7acb\u5f00\u653e\uff0c\u5408\u4f5c\u9762\u5e7f \u6301\u7eed\u5b8c\u5584\u7684\u7b97\u5b50\u96c6\u3001\u6a21\u578b\u5e93 \u6211\u4eec\u81f4\u529b\u4e8e\u6253\u9020\u4e00\u6b3e\u6ee1\u8db3\u5f00\u53d1\u8005\u6240\u6709\u7f8e\u597d\u60f3\u8c61\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u671f\u5f85\u5e7f\u5927\u5f00\u53d1\u8005\u8bd5\u7528\u3001\u53cd\u9988\u3001\u5408\u4f5c\u3002","title":"\u4e3a\u4ec0\u4e48\u662fOneFlow"},{"location":"index.html#_1","text":"\u53ef\u4ee5\u5728 \u5feb\u901f\u4e0a\u624b \u5b66\u4e60\u5982\u4f55\u5b89\u88c5\u5e76\u5feb\u901f\u8fd0\u884c OneFlow\u3002 \u5728 \u57fa\u7840\u4e13\u9898 \u4e2d\u6211\u4eec\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 OneFlow \u5b8c\u6210\u673a\u5668\u5b66\u4e60\u7684\u5e38\u89c1\u4efb\u52a1\uff0c\u5982\u642d\u5efa\u7f51\u7edc\u3001\u914d\u7f6e\u8d85\u53c2\u3001\u52a0\u8f7d\u6570\u636e\u3001\u5206\u5e03\u5f0f\u8bad\u7ec3\u7b49\u3002 \u5728 \u6269\u5c55\u4e13\u9898 \u4e2d\u6211\u4eec\u4ecb\u7ecd\u4e86\u5177\u6709 OneFlow \u81ea\u8eab\u7279\u70b9\u7684\u8bdd\u9898\uff0c\u5982 OneFlow \u6570\u636e\u96c6\u683c\u5f0f\u3001OneFlow \u7684\u5e76\u884c\u89c2\u3001\u5f00\u53d1\u8005\u5982\u4f55\u4f7f\u7528 VS Code \u8c03\u8bd5 OneFlow \u6846\u67b6\u7b49\u3002 \u9ad8\u7ea7\u5e94\u7528\u5b9e\u4f8b \u4e2d\u7684\u6587\u7ae0\uff0c\u5bf9\u5e94\u4e86 OneFlow Model Zoo \u4ed3\u5e93 \u4e2d\u7684\u5404\u4e2a\u6a21\u578b\u4ecb\u7ecd\uff0c\u6709\u52a9\u4e0e\u8bfb\u8005\u7406\u89e3\u6a21\u578b\u811a\u672c\u53ca\u76f8\u5173\u7ec6\u8282\u3002 \u6700\u540e\uff0c\u671f\u5f85\u5e7f\u5927\u5f00\u53d1\u8005\u3001\u673a\u5668\u5b66\u4e60\u7231\u597d\u8005\u53c2\u4e0e OneFlow \u5f00\u6e90\u8ba1\u5212 \uff0c\u5171\u521b\u3001\u5171\u4eab\uff0c\u4e00\u8d77\u6253\u9020\u8fc8\u5411\u5b8c\u7f8e\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002","title":"\u4ece\u54ea\u5f00\u59cb"},{"location":"adv_examples/alexnet.html","text":"","title":"Alexnet"},{"location":"adv_examples/bert.html","text":"\u6a21\u578b\u6982\u8ff0 \u00b6 BERT(Bidirectional Encoder Representations from Transformers)\u662fNLP\u9886\u57df\u7684\u4e00\u79cd\u9884\u8bad\u7ec3\u6a21\u578b\u3002\u672c\u6848\u4f8b\u4e2d\uff0c\u57fa\u4e8e\u8bba\u6587 BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding \u5b9e\u73b0\u4e86BERT\u6a21\u578b\u7684OneFlow\u7248\u672c\u3002 \u6a21\u578b\u67b6\u6784 \u00b6 Model Hidden layers Hidden unit size Attention heads Feedforward filter size Max sequence length Parameters BERTBASE 12 encoder 768 12 4 x 768 512 110M BERT \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5f80\u5f80\u5206\u4e3a\u4e24\u6b65\uff1a \u9996\u5148\uff0c\u9884\u8bad\u7ec3\u5f97\u5230 BERT \u8bed\u8a00\u6a21\u578b\uff1b \u7136\u540e\uff0c\u4e3a\u6ee1\u8db3\u4e0b\u6e38\u5e94\u7528\uff0c\u5728\u5f97\u5230\u7684 BERT \u8bed\u8a00\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u591a\u52a0\u4e00\u5c42\u7f51\u7edc\uff0c\u5e76\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u4e0b\u6e38\u5e94\u7528\u3002 \u5feb\u901f\u5f00\u59cb \u00b6 \u83b7\u53d6\u76f8\u5173\u6570\u636e\u96c6 \u00b6 \u6211\u4eec\u63d0\u4f9b\u4e86\u5b8c\u6210 BERT \u9884\u8bad\u7ec3\u53ca SQuAD \u5fae\u8c03\u7684 OFRecord \u6570\u636e\u96c6\u53ca\u76f8\u5173\u6570\u636e\u6587\u4ef6 \uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u5e76\u89e3\u538b\uff1a wget https://oneflow-static.oss-cn-beijing.aliyuncs.com/oneflow-tutorial-attachments/bert_squad_dataset.zip unzip bert_squad_dataset.zip \u89e3\u538b\u540e\u7684\u6587\u4ef6\u76ee\u5f55\u6e05\u5355\u5982\u4e0b\uff1a bert_config.json\u3001vocab.txt\uff1a\u5236\u4f5c prediction json \u6587\u4ef6\u9700\u8981\u7684\u6587\u4ef6\uff0c\u6765\u81ea google bert dev-v1.1/\u3001dev-v1.1.json\uff1aSQuAD \u68c0\u9a8c\u96c6\uff0c\u7528\u4e8e\u6253\u5206 part-0\uff1a\u9884\u8bad\u7ec3\u96c6\u6837\u672c\uff0840\u4e2a\u6837\u672c\uff09 train-v1.1\uff1aSQuAD \u8bad\u7ec3\u96c6\uff0c\u5df2\u7ecf\u8f6c\u4e3a ofrecord \u6570\u636e\u96c6\u683c\u5f0f \u4ee5\u4e0a\u5404\u4e2a\u6587\u4ef6\u5c06\u5728\u4e0b\u6587\u7684\u9884\u8bad\u7ec3\u4efb\u52a1\u3001SQuAD \u5fae\u8c03\u4e2d\u4f7f\u7528\u5230\u3002 \u8bad\u7ec3 BERT \u6a21\u578b \u00b6 \u9996\u5148\uff0c\u514b\u9686 OneFlow-Benchmark \u4ed3\u5e93\u3002 git clone https://github.com/Oneflow-Inc/OneFlow-Benchmark.git cd OneFlow-Benchmark/LanguageModeling/BERT/ \u7136\u540e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\uff0c\u4f7f\u7528\u6211\u4eec\u9884\u8bad\u7ec3\u597d\u7684 pretrain \u6a21\u578b\u4ee5\u53ca\u5c0f\u578b\u6837\u672c\u96c6\u5408\uff0c\u5f00\u59cb BERT \u9884\u8bad\u7ec3\u67e5\u770b\u6548\u679c\uff1a python ./run_pretraining.py \\ --gpu_num_per_node = 1 \\ --learning_rate = 3e-5 \\ --batch_size_per_device = 1 \\ --iter_num = 3 \\ --loss_print_every_n_iter = 50 \\ --seq_length = 128 \\ --max_predictions_per_seq = 20 \\ --num_hidden_layers = 12 \\ --num_attention_heads = 12 \\ --max_position_embeddings = 512 \\ --type_vocab_size = 2 \\ --vocab_size = 30522 \\ --attention_probs_dropout_prob = 0 .0 \\ --hidden_dropout_prob = 0 .0 \\ --hidden_size_per_head = 64 \\ --use_boxing_v2 = True \\ --data_dir = ./dataset/ \\ --data_part_num = 1 \\ --log_dir = ./bert_regresssioin_test/of \\ --loss_print_every_n_iter = 5 \\ --model_save_dir = ./bert_regresssioin_test/of \\ --warmup_batches 831 \\ --save_last_snapshot True \u6211\u4eec\u5c06\u83b7\u5f97\u7c7b\u4f3c\u4ee5\u4e0b\u8f93\u51fa\uff1a ================================================================== Running bert: num_gpu_per_node = 1, num_nodes = 1. ================================================================== gpu_num_per_node = 1 node_num = 1 node_list = None learning_rate = 3e-05 weight_decay_rate = 0.01 batch_size_per_device = 1 iter_num = 20 warmup_batches = 831 log_every_n_iter = 1 data_dir = ./dataset/ data_part_num = 1 use_fp16 = None use_boxing_v2 = True loss_print_every_n_iter = 5 model_save_every_n_iter = 10000 model_save_dir = ./bert_regresssioin_test/of save_last_snapshot = True model_load_dir = None log_dir = ./bert_regresssioin_test/of seq_length = 128 max_predictions_per_seq = 20 num_hidden_layers = 12 num_attention_heads = 12 max_position_embeddings = 512 type_vocab_size = 2 vocab_size = 30522 attention_probs_dropout_prob = 0.0 hidden_dropout_prob = 0.0 hidden_size_per_head = 64 ------------------------------------------------------------------ Time stamp: 2020-07-06-19:09:29 I0706 19:09:29.605840639 34801 ev_epoll_linux.c:82] Use of signals is disabled. Epoll engine will not be used Init model on demand iter 4, total_loss: 11.032, mlm_loss: 10.281, nsp_loss: 0.751, speed: 33.086(sec/batch), 0.151(sentences/sec) iter 9, total_loss: 11.548, mlm_loss: 10.584, nsp_loss: 0.965, speed: 0.861(sec/batch), 5.806(sentences/sec) iter 14, total_loss: 10.697, mlm_loss: 10.249, nsp_loss: 0.448, speed: 0.915(sec/batch), 5.463(sentences/sec) iter 19, total_loss: 10.685, mlm_loss: 10.266, nsp_loss: 0.419, speed: 1.087(sec/batch), 4.602(sentences/sec) Saving model to ./bert_regresssioin_test/of/last_snapshot. ------------------------------------------------------------------ average speed: 0.556(sentences/sec) ------------------------------------------------------------------ \u8be6\u7ec6\u8bf4\u660e \u00b6 \u811a\u672c\u8bf4\u660e \u00b6 \u5206\u7c7b \u8bf4\u660e \u6240\u5c5e pretrain.py\u3001bert.py \u5b9a\u4e49\u4e86 BERT \u7f51\u7edc\u6a21\u578b\uff1b BERT run_pretraining.py \u542f\u52a8BERT\u8bad\u7ec3\u7684\u7528\u6237\u811a\u672c\uff0c\u7528\u6237\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u8fdb\u884cBERT\u8bad\u7ec3\u7684\u8bad\u7ec3\u73af\u5883\u53ca\u8d85\u53c2\u914d\u7f6e\uff0c\u5404\u4e2a\u53c2\u6570\u7684\u5177\u4f53\u4f5c\u7528\u5c06\u5728\u4e0b\u6587 \u811a\u672c\u53c2\u6570 \u4e2d\u8bf4\u660e\u3002 BERT squad.py \u5b9a\u4e49\u4e86squad\u7f51\u7edc\uff1b SQuAD run_squad.py \u7528\u4e8e\u542f\u52a8SQuAD\u7684\u8bad\u7ec3 SQuAD run_squad_predict.py \u4f7f\u7528\u8bad\u7ec3\u597d\u7684SQuAD\u6a21\u578b\u8fdb\u884c\u9884\u6d4b SQuAD npy2json.py \u5c06OneFlow\u7684\u9884\u6d4b\u7ed3\u679c\u8f6c\u5316\u4e3aprediction json\u683c\u5f0f\u7684\u5fc5\u8981\u811a\u672c SQuAD convert_tf_ckpt_to_of.py \u5c06TensorFlow\u6a21\u578b\u8f6c\u4e3aOneFlow\u7684\u6a21\u578b\u683c\u5f0f BERT/SQuAD \u811a\u672c\u53c2\u6570 \u00b6 run_pretraining.py \u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u914d\u7f6e\u5305\u62ec\u8d85\u53c2\u5728\u5185\u7684\u8bad\u7ec3\u73af\u5883\uff0c\u53ef\u4ee5\u901a\u8fc7 run_pretraining.py --help \u67e5\u770b\uff0c\u4ee5\u4e0b\u662f\u8fd9\u4e9b\u53c2\u6570\u4f5c\u7528\u7684\u5177\u4f53\u8bf4\u660e\uff1a gpu_num_per_node\uff1a \u6bcf\u4e2a\u8282\u70b9\u4e0a GPU \u7684\u6570\u76ee\uff0cOneFlow \u8981\u6c42\u6bcf\u4e2a\u8282\u70b9\u7684 GPU \u6570\u76ee\u5fc5\u987b\u4e00\u81f4 node_num\uff1a \u8282\u70b9\u6570\u76ee\uff0c\u5373\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\u7684\u4e3b\u673a\u6570\u76ee node_list\uff1a \u8282\u70b9\u5217\u8868\uff0c\u5982\u679c\u8282\u70b9\u6570\u5927\u4e8e1\uff0c\u5219\u9700\u8981\u901a\u8fc7 node_list \u6307\u5b9a\u8282\u70b9\u5217\u8868\uff0c\u8282\u70b9\u5217\u8868\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\uff0c\u91c7\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982 --node_num=2 --node_list=\"192.168.1.12,192.168.1.14\" learning_rate\uff1a Learning rate weight_decay_rate\uff1a\u8bbe\u7f6e\u6743\u91cd\u8870\u51cf\u7387 batch_size_per_device\uff1a \u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684batch\u5927\u5c0f iter_num ITER_NUM\uff1a \u8bad\u7ec3\u7684\u603b\u8f6e\u6570 warmup_batches\uff1a \u9884\u70ed\u8f6e\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a10000 data_dir\uff1a OFRecord\u6570\u636e\u96c6\u7684\u8def\u5f84 data_part_num\uff1aOFRecord\u6570\u636e\u96c6\u76ee\u5f55\u4e0b\u7684\u6570\u636e\u6587\u4ef6\u6570\u76ee use_fp16\uff1a \u662f\u5426\u4f7f\u7528fp16 use_boxing_v2\uff1a \u662f\u5426\u4f7f\u7528boxing v2 loss_print_every_n_iter\uff1a\u8bad\u7ec3\u4e2d\u6bcf\u9694\u591a\u5c11\u8f6e\u6253\u5370\u4e00\u6b21\u8bad\u7ec3\u4fe1\u606f\uff08loss\u4fe1\u606f\uff09 model_save_every_n_iter\uff1a \u8bad\u7ec3\u4e2d\u6bcf\u9694\u591a\u5c11\u8f6e\u4fdd\u5b58\u4e00\u6b21\u6a21\u578b model_save_dir\uff1a \u6a21\u578b\u5b58\u50a8\u8def\u5f84 save_last_snapshot\uff1a\u6307\u5b9a\u6700\u540e\u4e00\u8f6e\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u6a21\u578b\u4fdd\u5b58\u8def\u5f84 model_load_dir\uff1a\u6307\u5b9a\u6a21\u578b\u52a0\u8f7d\u8def\u5f84 log_dir LOG_DIR\uff1a\u6307\u5b9a\u65e5\u5fd7\u8def\u5f84 seq_length\uff1a \u6307\u5b9aBERT\u53e5\u5b50\u957f\u5ea6\uff0c\u9ed8\u8ba4\u503c\u4e3a512 max_predictions_per_seq\uff1a \u9ed8\u8ba4\u503c\u4e3a80 num_hidden_layers\uff1a\u9690\u85cf\u5c42\u6570\u76ee\uff0c\u9ed8\u8ba4\u503c\u4e3a24 num_attention_heads\uff1a Attention\u5934\u6570\u76ee\uff0c\u9ed8\u8ba4\u503c\u4e3a16 \u4f7f\u7528\u5b8c\u6574\u7684 Wikipedia + BookCorpus \u6570\u636e\u96c6 \u00b6 \u5982\u679c\u9700\u8981\u4ece\u65e0\u5230\u6709\u8fdb\u884c BERT \u7684 pretrain \u8bad\u7ec3\uff0c\u5219\u9700\u8981\u4f7f\u7528\u8f83\u5927\u7684\u8bad\u7ec3\u96c6\u3002 \u5982\u679c\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u901a\u8fc7 google-research BERT \u7684\u9875\u9762\uff0c\u4e0b\u8f7d tfrecord \u683c\u5f0f\u7684\u6570\u636e\u96c6\u3002\u518d\u6839\u636e \u52a0\u8f7d\u4e0e\u51c6\u5907OFRecord\u6570\u636e\u96c6 \u4e2d\u7684\u65b9\u6cd5\uff0c\u5c06 TFRecord \u6570\u636e\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6\u4f7f\u7528\u3002 \u5c06 Tensorflow \u7684 BERT \u6a21\u578b\u8f6c\u4e3a OneFlow \u6a21\u578b\u683c\u5f0f \u00b6 \u5982\u679c\u60f3\u76f4\u63a5\u4f7f\u7528\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684 pretrained \u6a21\u578b\u505a fine-tune \u4efb\u52a1\uff08\u5982\u4ee5\u4e0b\u5c06\u5c55\u793a\u7684SQuAD\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u4ece google-research BERT \u9875\u9762\u4e0b\u8f7d\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684 BERT \u6a21\u578b\u3002 \u518d\u5229\u7528\u6211\u4eec\u63d0\u4f9b\u7684 convert_tf_ckpt_to_of.py \u811a\u672c\uff0c\u5c06\u5176\u8f6c\u4e3a OneFlow \u6a21\u578b\u683c\u5f0f\u3002\u8f6c\u6362\u8fc7\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u4e0b\u8f7d\u5e76\u89e3\u538b\u67d0\u4e2a\u7248\u672c\u7684 BERT \u6a21\u578b\uff0c\u5982 uncased_L-12_H-768_A-12 \u3002 wget https://storage.googleapis.com/bert_models/2020_02_20/uncased_L-12_H-768_A-12.zip unzip uncased_L-12_H-768_A-12.zip -d uncased_L-12_H-768_A-12 \u7136\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a cd uncased_L-12_H-768_A-12/ cat > checkpoint <<ONEFLOW model_checkpoint_path: \"bert_model.ckpt\" all_model_checkpoint_paths: \"bert_model.ckpt\" ONEFLOW \u8be5\u547d\u4ee4\u5c06\u5728\u89e3\u538b\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a checkpoint \u6587\u4ef6\uff0c\u5e76\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a model_checkpoint_path: \"bert_model.ckpt\" all_model_checkpoint_paths: \"bert_model.ckpt\" \u6b64\u65f6\uff0c\u5df2\u7ecf\u51c6\u5907\u597d\u5f85\u8f6c\u5316\u7684 TensorFlow \u6a21\u578b\u76ee\u5f55\uff0c\u6574\u4e2a\u6a21\u578b\u76ee\u5f55\u7684\u7ed3\u6784\u5982\u4e0b\uff1a uncased_L-12_H-768_A-12 \u251c\u2500\u2500 bert_config.json \u251c\u2500\u2500 bert_model.ckpt.data-00000-of-00001 \u251c\u2500\u2500 bert_model.ckpt.index \u251c\u2500\u2500 checkpoint \u2514\u2500\u2500 vocab.txt \u6211\u4eec\u63a5\u7740\u4f7f\u7528 convert_tf_ckpt_to_of.py \u5c06 TensorFlow \u6a21\u578b\u8f6c\u4e3a OneFlow \u6a21\u578b\uff1a python convert_tf_ckpt_to_of.py \\ --tf_checkpoint_path ./uncased_L-12_H-768_A-12 \\ --of_dump_path ./uncased_L-12_H-768_A-12-oneflow \u4ee5\u4e0a\u547d\u4ee4\uff0c\u5c06\u8f6c\u5316\u597d\u7684 OneFlow \u683c\u5f0f\u7684\u6a21\u578b\u4fdd\u5b58\u5728 ./uncased_L-12_H-768_A-12-oneflow \u76ee\u5f55\u4e0b\uff0c\u4f9b\u540e\u7eed\u5fae\u8c03\u8bad\u7ec3(\u5982\uff1aSQuAD)\u4f7f\u7528\u3002 \u5fae\u8c03\uff1aSQuAD \u95ee\u7b54\u4efb\u52a1 \u00b6 \u5c06 pretrained \u6a21\u578b\u4fee\u6539\u4e3a SQuAD \u6a21\u578b \u00b6 \u6211\u4eec\u53ea\u9700\u8981\u5728 BERT \u7684 backbone \u57fa\u7840\u4e0a\uff0c\u52a0\u4e0a\u4e00\u5c42 output \u5c42\uff0c\u5e76\u4fee\u6539 loss \u7684\u8868\u8fbe\u5f0f\u5373\u53ef\uff0c\u5b8c\u6574\u7684\u4ee3\u7801\u53ef\u4ee5\u67e5\u770b squad.py \u811a\u672c\uff0c\u4ee5\u4e0b\u662f\u51e0\u5904\u5173\u952e\u4fee\u6539\uff1a def SQuADTrain (): #... backbone = bert_util . BertBackbone () #\u5728BERT\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42 with flow . name_scope ( \"cls-squad\" ): final_hidden = backbone . sequence_output () final_hidden_matrix = flow . reshape ( final_hidden , [ - 1 , hidden_size ]) logits = bert_util . _FullyConnected ( final_hidden_matrix , hidden_size , units = 2 , weight_initializer = bert_util . CreateInitializer ( initializer_range ), name = 'output' ) logits = flow . reshape ( logits , [ - 1 , seq_length , 2 ]) start_logits = flow . slice ( logits , [ None , None , 0 ], [ None , None , 1 ]) end_logits = flow . slice ( logits , [ None , None , 1 ], [ None , None , 1 ]) #\u91cd\u65b0\u5b9a\u4e49SQuAD\u4efb\u52a1\u7684loss start_loss = _ComputeLoss ( start_logits , start_positions_blob , seq_length ) end_loss = _ComputeLoss ( end_logits , end_positions_blob , seq_length ) total_loss = 0.5 * ( start_loss + end_loss ) return total_loss \u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u521d\u59cb\u5316\u7684 squad \u6a21\u578b\uff0c\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u811a\u672c\u542f\u52a8 squad \u8bad\u7ec3\uff0c\u5e76\u4fdd\u5b58\u6a21\u578b\u3002 python ./run_squad.py\\ --gpu_num_per_node=1\\ --learning_rate=3e-5\\ --batch_size_per_device=2\\ --iter_num=50\\ --loss_print_every_n_iter=50\\ --seq_length=384\\ --max_predictions_per_seq=20\\ --num_hidden_layers=12\\ --num_attention_heads=12\\ --max_position_embeddings=512\\ --type_vocab_size=2\\ --vocab_size=30522\\ --attention_probs_dropout_prob=0.0\\ --hidden_dropout_prob=0.0\\ --hidden_size_per_head=64\\ --use_boxing_v2=True\\ --data_dir=./dataset/train-v1.1\\ --data_part_num=1\\ --log_dir=./bert_regresssioin_test/of\\ --model_save_dir=./bert_regresssioin_test/of\\ --warmup_batches 831\\ --save_last_snapshot True \u5b8c\u6210\u8bad\u7ec3\u540e\uff0c\u5728 ./bert_regresssioin_test/of/last_snapshot \u4e2d\u4fdd\u5b58\u6709\u521d\u59cb\u5316\u7684 SQuAD \u6a21\u578b\uff0c\u6211\u4eec\u5c06\u5176\u4e0e\u8bad\u7ec3\u597d\u7684 BERT \u5408\u5e76\u540e\uff0c\u8fdb\u884c\u5fae\u8c03\uff08fine-tune\uff09\u8bad\u7ec3\u3002 \u5408\u5e76 pretrained \u6a21\u578b\u4e3a SQuAD \u6a21\u578b \u00b6 SQuAD \u6a21\u578b\u662f\u5728 pretrained \u6a21\u578b\u57fa\u7840\u4e0a\u7684\u6269\u5145\uff0c\u6211\u4eec\u9700\u8981\u53c2\u7167 \u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58 \u4e2d\u7684\u201c\u6a21\u578b\u90e8\u5206\u521d\u59cb\u5316\u548c\u90e8\u5206\u5bfc\u5165\u201d\u65b9\u6cd5\uff0c\u5c06\u8bad\u7ec3\u597d\u7684 BERT pretrained \u6a21\u578b\u4e0e\u521d\u59cb\u5316\u7684 SQuAD \u6a21\u578b\u5408\u5e76\u3002 cp -R ./bert_regresssioin_test/of/last_snapshot ./squadModel cp -R --remove-destination ./dataset/uncased_L-12_H-768_A-12_oneflow/* ./squadModel/ OneFlow \u9884\u8bad\u7ec3\u6a21\u578b\u7684\u8bad\u7ec3\u6b21\u6570\u95ee\u9898 \u00b6 OneFlow \u751f\u6210\u7684\u6a21\u578b\u76ee\u5f55\u4e2d\uff0c\u4f1a\u6709\u4e00\u4e2a\u540d\u4e3a System-Train-TrainStep-xxx \u7684\u5b50\u76ee\u5f55(xxx\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u51fd\u6570\u540d)\uff0c\u8be5\u5b50\u76ee\u5f55\u4e0b\u7684 out \u6587\u4ef6\u4e2d\uff0c\u4fdd\u5b58\u6709\u8bad\u7ec3\u603b\u8fed\u4ee3\u6570\uff0c\u5e76\u4e14\u8fd9\u4e2a\u8fed\u4ee3\u6570\u4f1a\u7528\u4e8e\u52a8\u6001\u8c03\u8282\u8bad\u7ec3\u8fc7\u7a0b\u7684 learning rate \u3002 \u4e3a\u4e86\u9632\u6b62\u4fdd\u5b58\u7684\u8fed\u4ee3\u6570\u5f71\u54cd\u5230\u5fae\u8c03\u7684\u8bad\u7ec3\uff0c\u5e94\u8be5\u5c06out\u6587\u4ef6\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u6e05\u96f6\uff1a cd System-Train-TrainStep-xxx xxd -r > out <<ONEFLOW 00000000: 0000 0000 0000 0000 ONEFLOW \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u7531 TensorFlow \u8f6c\u8fc7\u6765\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5219\u53ef\u4ee5\u7701\u53bb\u8fd9\u4e2a\u6b65\u9aa4\u3002 \u5f00\u59cb SQuAD \u8bad\u7ec3 \u00b6 \u901a\u8fc7 run_suqad.py \u811a\u672c\uff0c\u5f00\u59cb\u8bad\u7ec3 SQuAD \u6a21\u578b\uff0c\u4e3b\u8981\u914d\u7f6e\u5982\u4e0b\uff1a \u4f7f\u7528\u4ee5\u4e0a\u5408\u5e76\u5f97\u5230\u7684 SQuAD \u6a21\u578b ./squadModel \u91c7\u7528 SQuAD v1.1 \u4f5c\u4e3a\u8bad\u7ec3\u96c6 epoch = 3 ( iternum = 88641*3/(4*8) = 8310 ) learning rate = 3e-5 python ./run_squad.py\\ --gpu_num_per_node=4\\ --learning_rate=3e-5\\ --batch_size_per_device=8\\ --iter_num=8310\\ --loss_print_every_n_iter=50\\ --seq_length=384\\ --max_predictions_per_seq=20\\ --num_hidden_layers=12\\ --num_attention_heads=12\\ --max_position_embeddings=512\\ --type_vocab_size=2\\ --vocab_size=30522\\ --attention_probs_dropout_prob=0.0\\ --hidden_dropout_prob=0.0\\ --hidden_size_per_head=64\\ --use_boxing_v2=True\\ --data_dir=./dataset/train-v1.1\\ --data_part_num=8\\ --log_dir=./bert_regresssioin_test/of\\ --model_save_dir=./bert_regresssioin_test/of\\ --warmup_batches 831\\ --save_last_snapshot True\\ --model_load_dir=./squadModel \u9884\u6d4b\u53ca\u6253\u5206 \u00b6 \u751f\u6210\u4e3a\u4e86\u751f\u6210 Preidiction File \u683c\u5f0f\u7684 json \u6587\u4ef6\uff0c\u6211\u4eec\u5148\u5c06\u9884\u6d4b\u7ed3\u679c\u4fdd\u5b58\u4e3a npy \u6587\u4ef6\uff0c\u518d\u4f7f\u7528 google BERT\u7684run_squad.py \u4e2d\u7684 write_predictions \u51fd\u6570\uff0c\u8f6c\u5316\u4e3a json \u683c\u5f0f\u3002 \u5229\u7528 run_squad_predict.py \u751f\u6210 all_results.npy \u6587\u4ef6\uff1a python run_squad_predict.py \\ --gpu_num_per_node = 1 \\ --batch_size_per_device = 4 \\ --iter_num = 2709 \\ --seq_length = 384 \\ --max_predictions_per_seq = 20 \\ --num_hidden_layers = 12 \\ --num_attention_heads = 12 \\ --max_position_embeddings = 512 \\ --type_vocab_size = 2 \\ --vocab_size = 30522 \\ --attention_probs_dropout_prob = 0 .0 \\ --hidden_dropout_prob = 0 .0 \\ --hidden_size_per_head = 64 \\ --use_boxing_v2 = True \\ --data_part_num = 1 \\ --data_dir = ./dataset/dev-v1.1 \\ --log_dir = ./bert_regresssioin_test/of \\ --model_load_dir = path/to/squadModel \\ --warmup_batches 831 \u6ce8\u610f\u5c06\u4ee5\u4e0a model_load_dir \u4fee\u6539\u4e3a \u8bad\u7ec3\u597d\u7684 squadModel\u3002 \u5f97\u5230 all_results.npy \u6587\u4ef6\u540e\uff0c\u5728 google bert \u4ed3\u5e93\u76ee\u5f55\u4e0b\uff08\u6ce8\u610f\u8be5\u4ed3\u5e93\u7684 tensorflow \u7248\u672c\u4e3a tensorflow v1 \uff09\uff0c\u8fd0\u884c\u6211\u4eec\u63d0\u4f9b\u7684 npy2json.py (\u7531 google bert \u4e2d\u7684 run_squand.py \u4fee\u6539\u5f97\u6765)\uff1a python npy2json.py\\ --vocab_file=./dataset/vocab.txt \\ --bert_config_file=./dataset/bert_config.json \\ --do_train=False \\ --do_predict=True \\ --all_results_file=./all_results.npy \\ --predict_file=./dataset/dev-v1.1.json \\ --max_seq_length=384 \\ --doc_stride=128 \\ --output_dir=./squad_base/ \u6ce8\u610f\u5c06 all_results_file \u4fee\u6539\u4e3a\u4e0a\u4e00\u6b65\u5f97\u5230\u7684 all_results.npy \u7684\u8def\u5f84\u3002 \u6700\u7ec8\uff0c\u5f97\u5230 predictions.json \u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 evaluate-v1.1.py \u8fdb\u884c\u6253\u5206\u3002 python evaluate-v1.1.py \\ ./dataset/dev-v1.1.json \\ path/to/squad_base/predictions.json \u5206\u5e03\u5f0f\u8bad\u7ec3 \u00b6 \u5982\u4e4b\u524d\u4ecb\u7ecd\u811a\u672c\u53c2\u6570\u65f6\u63cf\u8ff0\uff1a\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u53ea\u9700\u8981\u5728\u542f\u52a8\u8bad\u7ec3\u811a\u672c\u5f0f\u52a0\u5165 node_num \u9009\u9879\u6307\u5b9a\u4e3b\u673a\u6570\u76ee\u53ca node_list \u9009\u9879\u5373\u53ef\uff1a python run_squad_predict.py \\ --gpu_num_per_node = 1 \\ --batch_size_per_device = 4 \\ --iter_num = 2709 \\ --seq_length = 384 \\ --max_predictions_per_seq = 20 \\ --num_hidden_layers = 12 \\ --num_attention_heads = 12 \\ --max_position_embeddings = 512 \\ --type_vocab_size = 2 \\ --vocab_size = 30522 \\ --attention_probs_dropout_prob = 0 .0 \\ --hidden_dropout_prob = 0 .0 \\ --hidden_size_per_head = 64 \\ --use_boxing_v2 = True \\ --data_part_num = 1 \\ --data_dir = ./dataset/dev-v1.1 \\ --log_dir = ./bert_regresssioin_test/of \\ --model_load_dir = path/to/squadModel \\ --warmup_batches 831 \\ --node_num = 2 \\ --node_list = \"192.168.1.12,192.168.1.14\"","title":"BERT"},{"location":"adv_examples/bert.html#_1","text":"BERT(Bidirectional Encoder Representations from Transformers)\u662fNLP\u9886\u57df\u7684\u4e00\u79cd\u9884\u8bad\u7ec3\u6a21\u578b\u3002\u672c\u6848\u4f8b\u4e2d\uff0c\u57fa\u4e8e\u8bba\u6587 BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding \u5b9e\u73b0\u4e86BERT\u6a21\u578b\u7684OneFlow\u7248\u672c\u3002","title":"\u6a21\u578b\u6982\u8ff0"},{"location":"adv_examples/bert.html#_2","text":"Model Hidden layers Hidden unit size Attention heads Feedforward filter size Max sequence length Parameters BERTBASE 12 encoder 768 12 4 x 768 512 110M BERT \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u5f80\u5f80\u5206\u4e3a\u4e24\u6b65\uff1a \u9996\u5148\uff0c\u9884\u8bad\u7ec3\u5f97\u5230 BERT \u8bed\u8a00\u6a21\u578b\uff1b \u7136\u540e\uff0c\u4e3a\u6ee1\u8db3\u4e0b\u6e38\u5e94\u7528\uff0c\u5728\u5f97\u5230\u7684 BERT \u8bed\u8a00\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u591a\u52a0\u4e00\u5c42\u7f51\u7edc\uff0c\u5e76\u8fdb\u884c\u5fae\u8c03\uff0c\u5f97\u5230\u4e0b\u6e38\u5e94\u7528\u3002","title":"\u6a21\u578b\u67b6\u6784"},{"location":"adv_examples/bert.html#_3","text":"","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"adv_examples/bert.html#_4","text":"\u6211\u4eec\u63d0\u4f9b\u4e86\u5b8c\u6210 BERT \u9884\u8bad\u7ec3\u53ca SQuAD \u5fae\u8c03\u7684 OFRecord \u6570\u636e\u96c6\u53ca\u76f8\u5173\u6570\u636e\u6587\u4ef6 \uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d\u5e76\u89e3\u538b\uff1a wget https://oneflow-static.oss-cn-beijing.aliyuncs.com/oneflow-tutorial-attachments/bert_squad_dataset.zip unzip bert_squad_dataset.zip \u89e3\u538b\u540e\u7684\u6587\u4ef6\u76ee\u5f55\u6e05\u5355\u5982\u4e0b\uff1a bert_config.json\u3001vocab.txt\uff1a\u5236\u4f5c prediction json \u6587\u4ef6\u9700\u8981\u7684\u6587\u4ef6\uff0c\u6765\u81ea google bert dev-v1.1/\u3001dev-v1.1.json\uff1aSQuAD \u68c0\u9a8c\u96c6\uff0c\u7528\u4e8e\u6253\u5206 part-0\uff1a\u9884\u8bad\u7ec3\u96c6\u6837\u672c\uff0840\u4e2a\u6837\u672c\uff09 train-v1.1\uff1aSQuAD \u8bad\u7ec3\u96c6\uff0c\u5df2\u7ecf\u8f6c\u4e3a ofrecord \u6570\u636e\u96c6\u683c\u5f0f \u4ee5\u4e0a\u5404\u4e2a\u6587\u4ef6\u5c06\u5728\u4e0b\u6587\u7684\u9884\u8bad\u7ec3\u4efb\u52a1\u3001SQuAD \u5fae\u8c03\u4e2d\u4f7f\u7528\u5230\u3002","title":"\u83b7\u53d6\u76f8\u5173\u6570\u636e\u96c6"},{"location":"adv_examples/bert.html#bert","text":"\u9996\u5148\uff0c\u514b\u9686 OneFlow-Benchmark \u4ed3\u5e93\u3002 git clone https://github.com/Oneflow-Inc/OneFlow-Benchmark.git cd OneFlow-Benchmark/LanguageModeling/BERT/ \u7136\u540e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\uff0c\u4f7f\u7528\u6211\u4eec\u9884\u8bad\u7ec3\u597d\u7684 pretrain \u6a21\u578b\u4ee5\u53ca\u5c0f\u578b\u6837\u672c\u96c6\u5408\uff0c\u5f00\u59cb BERT \u9884\u8bad\u7ec3\u67e5\u770b\u6548\u679c\uff1a python ./run_pretraining.py \\ --gpu_num_per_node = 1 \\ --learning_rate = 3e-5 \\ --batch_size_per_device = 1 \\ --iter_num = 3 \\ --loss_print_every_n_iter = 50 \\ --seq_length = 128 \\ --max_predictions_per_seq = 20 \\ --num_hidden_layers = 12 \\ --num_attention_heads = 12 \\ --max_position_embeddings = 512 \\ --type_vocab_size = 2 \\ --vocab_size = 30522 \\ --attention_probs_dropout_prob = 0 .0 \\ --hidden_dropout_prob = 0 .0 \\ --hidden_size_per_head = 64 \\ --use_boxing_v2 = True \\ --data_dir = ./dataset/ \\ --data_part_num = 1 \\ --log_dir = ./bert_regresssioin_test/of \\ --loss_print_every_n_iter = 5 \\ --model_save_dir = ./bert_regresssioin_test/of \\ --warmup_batches 831 \\ --save_last_snapshot True \u6211\u4eec\u5c06\u83b7\u5f97\u7c7b\u4f3c\u4ee5\u4e0b\u8f93\u51fa\uff1a ================================================================== Running bert: num_gpu_per_node = 1, num_nodes = 1. ================================================================== gpu_num_per_node = 1 node_num = 1 node_list = None learning_rate = 3e-05 weight_decay_rate = 0.01 batch_size_per_device = 1 iter_num = 20 warmup_batches = 831 log_every_n_iter = 1 data_dir = ./dataset/ data_part_num = 1 use_fp16 = None use_boxing_v2 = True loss_print_every_n_iter = 5 model_save_every_n_iter = 10000 model_save_dir = ./bert_regresssioin_test/of save_last_snapshot = True model_load_dir = None log_dir = ./bert_regresssioin_test/of seq_length = 128 max_predictions_per_seq = 20 num_hidden_layers = 12 num_attention_heads = 12 max_position_embeddings = 512 type_vocab_size = 2 vocab_size = 30522 attention_probs_dropout_prob = 0.0 hidden_dropout_prob = 0.0 hidden_size_per_head = 64 ------------------------------------------------------------------ Time stamp: 2020-07-06-19:09:29 I0706 19:09:29.605840639 34801 ev_epoll_linux.c:82] Use of signals is disabled. Epoll engine will not be used Init model on demand iter 4, total_loss: 11.032, mlm_loss: 10.281, nsp_loss: 0.751, speed: 33.086(sec/batch), 0.151(sentences/sec) iter 9, total_loss: 11.548, mlm_loss: 10.584, nsp_loss: 0.965, speed: 0.861(sec/batch), 5.806(sentences/sec) iter 14, total_loss: 10.697, mlm_loss: 10.249, nsp_loss: 0.448, speed: 0.915(sec/batch), 5.463(sentences/sec) iter 19, total_loss: 10.685, mlm_loss: 10.266, nsp_loss: 0.419, speed: 1.087(sec/batch), 4.602(sentences/sec) Saving model to ./bert_regresssioin_test/of/last_snapshot. ------------------------------------------------------------------ average speed: 0.556(sentences/sec) ------------------------------------------------------------------","title":"\u8bad\u7ec3 BERT \u6a21\u578b"},{"location":"adv_examples/bert.html#_5","text":"","title":"\u8be6\u7ec6\u8bf4\u660e"},{"location":"adv_examples/bert.html#_6","text":"\u5206\u7c7b \u8bf4\u660e \u6240\u5c5e pretrain.py\u3001bert.py \u5b9a\u4e49\u4e86 BERT \u7f51\u7edc\u6a21\u578b\uff1b BERT run_pretraining.py \u542f\u52a8BERT\u8bad\u7ec3\u7684\u7528\u6237\u811a\u672c\uff0c\u7528\u6237\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u8fdb\u884cBERT\u8bad\u7ec3\u7684\u8bad\u7ec3\u73af\u5883\u53ca\u8d85\u53c2\u914d\u7f6e\uff0c\u5404\u4e2a\u53c2\u6570\u7684\u5177\u4f53\u4f5c\u7528\u5c06\u5728\u4e0b\u6587 \u811a\u672c\u53c2\u6570 \u4e2d\u8bf4\u660e\u3002 BERT squad.py \u5b9a\u4e49\u4e86squad\u7f51\u7edc\uff1b SQuAD run_squad.py \u7528\u4e8e\u542f\u52a8SQuAD\u7684\u8bad\u7ec3 SQuAD run_squad_predict.py \u4f7f\u7528\u8bad\u7ec3\u597d\u7684SQuAD\u6a21\u578b\u8fdb\u884c\u9884\u6d4b SQuAD npy2json.py \u5c06OneFlow\u7684\u9884\u6d4b\u7ed3\u679c\u8f6c\u5316\u4e3aprediction json\u683c\u5f0f\u7684\u5fc5\u8981\u811a\u672c SQuAD convert_tf_ckpt_to_of.py \u5c06TensorFlow\u6a21\u578b\u8f6c\u4e3aOneFlow\u7684\u6a21\u578b\u683c\u5f0f BERT/SQuAD","title":"\u811a\u672c\u8bf4\u660e"},{"location":"adv_examples/bert.html#_7","text":"run_pretraining.py \u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u914d\u7f6e\u5305\u62ec\u8d85\u53c2\u5728\u5185\u7684\u8bad\u7ec3\u73af\u5883\uff0c\u53ef\u4ee5\u901a\u8fc7 run_pretraining.py --help \u67e5\u770b\uff0c\u4ee5\u4e0b\u662f\u8fd9\u4e9b\u53c2\u6570\u4f5c\u7528\u7684\u5177\u4f53\u8bf4\u660e\uff1a gpu_num_per_node\uff1a \u6bcf\u4e2a\u8282\u70b9\u4e0a GPU \u7684\u6570\u76ee\uff0cOneFlow \u8981\u6c42\u6bcf\u4e2a\u8282\u70b9\u7684 GPU \u6570\u76ee\u5fc5\u987b\u4e00\u81f4 node_num\uff1a \u8282\u70b9\u6570\u76ee\uff0c\u5373\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\u7684\u4e3b\u673a\u6570\u76ee node_list\uff1a \u8282\u70b9\u5217\u8868\uff0c\u5982\u679c\u8282\u70b9\u6570\u5927\u4e8e1\uff0c\u5219\u9700\u8981\u901a\u8fc7 node_list \u6307\u5b9a\u8282\u70b9\u5217\u8868\uff0c\u8282\u70b9\u5217\u8868\u4e3a\u5b57\u7b26\u4e32\u5f62\u5f0f\uff0c\u91c7\u7528\u9017\u53f7\u5206\u9694\uff0c\u5982 --node_num=2 --node_list=\"192.168.1.12,192.168.1.14\" learning_rate\uff1a Learning rate weight_decay_rate\uff1a\u8bbe\u7f6e\u6743\u91cd\u8870\u51cf\u7387 batch_size_per_device\uff1a \u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684batch\u5927\u5c0f iter_num ITER_NUM\uff1a \u8bad\u7ec3\u7684\u603b\u8f6e\u6570 warmup_batches\uff1a \u9884\u70ed\u8f6e\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a10000 data_dir\uff1a OFRecord\u6570\u636e\u96c6\u7684\u8def\u5f84 data_part_num\uff1aOFRecord\u6570\u636e\u96c6\u76ee\u5f55\u4e0b\u7684\u6570\u636e\u6587\u4ef6\u6570\u76ee use_fp16\uff1a \u662f\u5426\u4f7f\u7528fp16 use_boxing_v2\uff1a \u662f\u5426\u4f7f\u7528boxing v2 loss_print_every_n_iter\uff1a\u8bad\u7ec3\u4e2d\u6bcf\u9694\u591a\u5c11\u8f6e\u6253\u5370\u4e00\u6b21\u8bad\u7ec3\u4fe1\u606f\uff08loss\u4fe1\u606f\uff09 model_save_every_n_iter\uff1a \u8bad\u7ec3\u4e2d\u6bcf\u9694\u591a\u5c11\u8f6e\u4fdd\u5b58\u4e00\u6b21\u6a21\u578b model_save_dir\uff1a \u6a21\u578b\u5b58\u50a8\u8def\u5f84 save_last_snapshot\uff1a\u6307\u5b9a\u6700\u540e\u4e00\u8f6e\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u6a21\u578b\u4fdd\u5b58\u8def\u5f84 model_load_dir\uff1a\u6307\u5b9a\u6a21\u578b\u52a0\u8f7d\u8def\u5f84 log_dir LOG_DIR\uff1a\u6307\u5b9a\u65e5\u5fd7\u8def\u5f84 seq_length\uff1a \u6307\u5b9aBERT\u53e5\u5b50\u957f\u5ea6\uff0c\u9ed8\u8ba4\u503c\u4e3a512 max_predictions_per_seq\uff1a \u9ed8\u8ba4\u503c\u4e3a80 num_hidden_layers\uff1a\u9690\u85cf\u5c42\u6570\u76ee\uff0c\u9ed8\u8ba4\u503c\u4e3a24 num_attention_heads\uff1a Attention\u5934\u6570\u76ee\uff0c\u9ed8\u8ba4\u503c\u4e3a16","title":"\u811a\u672c\u53c2\u6570"},{"location":"adv_examples/bert.html#wikipedia-bookcorpus","text":"\u5982\u679c\u9700\u8981\u4ece\u65e0\u5230\u6709\u8fdb\u884c BERT \u7684 pretrain \u8bad\u7ec3\uff0c\u5219\u9700\u8981\u4f7f\u7528\u8f83\u5927\u7684\u8bad\u7ec3\u96c6\u3002 \u5982\u679c\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u901a\u8fc7 google-research BERT \u7684\u9875\u9762\uff0c\u4e0b\u8f7d tfrecord \u683c\u5f0f\u7684\u6570\u636e\u96c6\u3002\u518d\u6839\u636e \u52a0\u8f7d\u4e0e\u51c6\u5907OFRecord\u6570\u636e\u96c6 \u4e2d\u7684\u65b9\u6cd5\uff0c\u5c06 TFRecord \u6570\u636e\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6\u4f7f\u7528\u3002","title":"\u4f7f\u7528\u5b8c\u6574\u7684 Wikipedia + BookCorpus \u6570\u636e\u96c6"},{"location":"adv_examples/bert.html#tensorflow-bert-oneflow","text":"\u5982\u679c\u60f3\u76f4\u63a5\u4f7f\u7528\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684 pretrained \u6a21\u578b\u505a fine-tune \u4efb\u52a1\uff08\u5982\u4ee5\u4e0b\u5c06\u5c55\u793a\u7684SQuAD\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u4ece google-research BERT \u9875\u9762\u4e0b\u8f7d\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684 BERT \u6a21\u578b\u3002 \u518d\u5229\u7528\u6211\u4eec\u63d0\u4f9b\u7684 convert_tf_ckpt_to_of.py \u811a\u672c\uff0c\u5c06\u5176\u8f6c\u4e3a OneFlow \u6a21\u578b\u683c\u5f0f\u3002\u8f6c\u6362\u8fc7\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u4e0b\u8f7d\u5e76\u89e3\u538b\u67d0\u4e2a\u7248\u672c\u7684 BERT \u6a21\u578b\uff0c\u5982 uncased_L-12_H-768_A-12 \u3002 wget https://storage.googleapis.com/bert_models/2020_02_20/uncased_L-12_H-768_A-12.zip unzip uncased_L-12_H-768_A-12.zip -d uncased_L-12_H-768_A-12 \u7136\u540e\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a cd uncased_L-12_H-768_A-12/ cat > checkpoint <<ONEFLOW model_checkpoint_path: \"bert_model.ckpt\" all_model_checkpoint_paths: \"bert_model.ckpt\" ONEFLOW \u8be5\u547d\u4ee4\u5c06\u5728\u89e3\u538b\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a checkpoint \u6587\u4ef6\uff0c\u5e76\u5199\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a model_checkpoint_path: \"bert_model.ckpt\" all_model_checkpoint_paths: \"bert_model.ckpt\" \u6b64\u65f6\uff0c\u5df2\u7ecf\u51c6\u5907\u597d\u5f85\u8f6c\u5316\u7684 TensorFlow \u6a21\u578b\u76ee\u5f55\uff0c\u6574\u4e2a\u6a21\u578b\u76ee\u5f55\u7684\u7ed3\u6784\u5982\u4e0b\uff1a uncased_L-12_H-768_A-12 \u251c\u2500\u2500 bert_config.json \u251c\u2500\u2500 bert_model.ckpt.data-00000-of-00001 \u251c\u2500\u2500 bert_model.ckpt.index \u251c\u2500\u2500 checkpoint \u2514\u2500\u2500 vocab.txt \u6211\u4eec\u63a5\u7740\u4f7f\u7528 convert_tf_ckpt_to_of.py \u5c06 TensorFlow \u6a21\u578b\u8f6c\u4e3a OneFlow \u6a21\u578b\uff1a python convert_tf_ckpt_to_of.py \\ --tf_checkpoint_path ./uncased_L-12_H-768_A-12 \\ --of_dump_path ./uncased_L-12_H-768_A-12-oneflow \u4ee5\u4e0a\u547d\u4ee4\uff0c\u5c06\u8f6c\u5316\u597d\u7684 OneFlow \u683c\u5f0f\u7684\u6a21\u578b\u4fdd\u5b58\u5728 ./uncased_L-12_H-768_A-12-oneflow \u76ee\u5f55\u4e0b\uff0c\u4f9b\u540e\u7eed\u5fae\u8c03\u8bad\u7ec3(\u5982\uff1aSQuAD)\u4f7f\u7528\u3002","title":"\u5c06 Tensorflow \u7684 BERT \u6a21\u578b\u8f6c\u4e3a OneFlow \u6a21\u578b\u683c\u5f0f"},{"location":"adv_examples/bert.html#squad","text":"","title":"\u5fae\u8c03\uff1aSQuAD \u95ee\u7b54\u4efb\u52a1"},{"location":"adv_examples/bert.html#pretrained-squad","text":"\u6211\u4eec\u53ea\u9700\u8981\u5728 BERT \u7684 backbone \u57fa\u7840\u4e0a\uff0c\u52a0\u4e0a\u4e00\u5c42 output \u5c42\uff0c\u5e76\u4fee\u6539 loss \u7684\u8868\u8fbe\u5f0f\u5373\u53ef\uff0c\u5b8c\u6574\u7684\u4ee3\u7801\u53ef\u4ee5\u67e5\u770b squad.py \u811a\u672c\uff0c\u4ee5\u4e0b\u662f\u51e0\u5904\u5173\u952e\u4fee\u6539\uff1a def SQuADTrain (): #... backbone = bert_util . BertBackbone () #\u5728BERT\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42 with flow . name_scope ( \"cls-squad\" ): final_hidden = backbone . sequence_output () final_hidden_matrix = flow . reshape ( final_hidden , [ - 1 , hidden_size ]) logits = bert_util . _FullyConnected ( final_hidden_matrix , hidden_size , units = 2 , weight_initializer = bert_util . CreateInitializer ( initializer_range ), name = 'output' ) logits = flow . reshape ( logits , [ - 1 , seq_length , 2 ]) start_logits = flow . slice ( logits , [ None , None , 0 ], [ None , None , 1 ]) end_logits = flow . slice ( logits , [ None , None , 1 ], [ None , None , 1 ]) #\u91cd\u65b0\u5b9a\u4e49SQuAD\u4efb\u52a1\u7684loss start_loss = _ComputeLoss ( start_logits , start_positions_blob , seq_length ) end_loss = _ComputeLoss ( end_logits , end_positions_blob , seq_length ) total_loss = 0.5 * ( start_loss + end_loss ) return total_loss \u4e3a\u4e86\u5f97\u5230\u4e00\u4e2a\u521d\u59cb\u5316\u7684 squad \u6a21\u578b\uff0c\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u811a\u672c\u542f\u52a8 squad \u8bad\u7ec3\uff0c\u5e76\u4fdd\u5b58\u6a21\u578b\u3002 python ./run_squad.py\\ --gpu_num_per_node=1\\ --learning_rate=3e-5\\ --batch_size_per_device=2\\ --iter_num=50\\ --loss_print_every_n_iter=50\\ --seq_length=384\\ --max_predictions_per_seq=20\\ --num_hidden_layers=12\\ --num_attention_heads=12\\ --max_position_embeddings=512\\ --type_vocab_size=2\\ --vocab_size=30522\\ --attention_probs_dropout_prob=0.0\\ --hidden_dropout_prob=0.0\\ --hidden_size_per_head=64\\ --use_boxing_v2=True\\ --data_dir=./dataset/train-v1.1\\ --data_part_num=1\\ --log_dir=./bert_regresssioin_test/of\\ --model_save_dir=./bert_regresssioin_test/of\\ --warmup_batches 831\\ --save_last_snapshot True \u5b8c\u6210\u8bad\u7ec3\u540e\uff0c\u5728 ./bert_regresssioin_test/of/last_snapshot \u4e2d\u4fdd\u5b58\u6709\u521d\u59cb\u5316\u7684 SQuAD \u6a21\u578b\uff0c\u6211\u4eec\u5c06\u5176\u4e0e\u8bad\u7ec3\u597d\u7684 BERT \u5408\u5e76\u540e\uff0c\u8fdb\u884c\u5fae\u8c03\uff08fine-tune\uff09\u8bad\u7ec3\u3002","title":"\u5c06 pretrained \u6a21\u578b\u4fee\u6539\u4e3a SQuAD \u6a21\u578b"},{"location":"adv_examples/bert.html#pretrained-squad_1","text":"SQuAD \u6a21\u578b\u662f\u5728 pretrained \u6a21\u578b\u57fa\u7840\u4e0a\u7684\u6269\u5145\uff0c\u6211\u4eec\u9700\u8981\u53c2\u7167 \u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58 \u4e2d\u7684\u201c\u6a21\u578b\u90e8\u5206\u521d\u59cb\u5316\u548c\u90e8\u5206\u5bfc\u5165\u201d\u65b9\u6cd5\uff0c\u5c06\u8bad\u7ec3\u597d\u7684 BERT pretrained \u6a21\u578b\u4e0e\u521d\u59cb\u5316\u7684 SQuAD \u6a21\u578b\u5408\u5e76\u3002 cp -R ./bert_regresssioin_test/of/last_snapshot ./squadModel cp -R --remove-destination ./dataset/uncased_L-12_H-768_A-12_oneflow/* ./squadModel/","title":"\u5408\u5e76 pretrained \u6a21\u578b\u4e3a SQuAD \u6a21\u578b"},{"location":"adv_examples/bert.html#oneflow","text":"OneFlow \u751f\u6210\u7684\u6a21\u578b\u76ee\u5f55\u4e2d\uff0c\u4f1a\u6709\u4e00\u4e2a\u540d\u4e3a System-Train-TrainStep-xxx \u7684\u5b50\u76ee\u5f55(xxx\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u51fd\u6570\u540d)\uff0c\u8be5\u5b50\u76ee\u5f55\u4e0b\u7684 out \u6587\u4ef6\u4e2d\uff0c\u4fdd\u5b58\u6709\u8bad\u7ec3\u603b\u8fed\u4ee3\u6570\uff0c\u5e76\u4e14\u8fd9\u4e2a\u8fed\u4ee3\u6570\u4f1a\u7528\u4e8e\u52a8\u6001\u8c03\u8282\u8bad\u7ec3\u8fc7\u7a0b\u7684 learning rate \u3002 \u4e3a\u4e86\u9632\u6b62\u4fdd\u5b58\u7684\u8fed\u4ee3\u6570\u5f71\u54cd\u5230\u5fae\u8c03\u7684\u8bad\u7ec3\uff0c\u5e94\u8be5\u5c06out\u6587\u4ef6\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u6e05\u96f6\uff1a cd System-Train-TrainStep-xxx xxd -r > out <<ONEFLOW 00000000: 0000 0000 0000 0000 ONEFLOW \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u7531 TensorFlow \u8f6c\u8fc7\u6765\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5219\u53ef\u4ee5\u7701\u53bb\u8fd9\u4e2a\u6b65\u9aa4\u3002","title":"OneFlow \u9884\u8bad\u7ec3\u6a21\u578b\u7684\u8bad\u7ec3\u6b21\u6570\u95ee\u9898"},{"location":"adv_examples/bert.html#squad_1","text":"\u901a\u8fc7 run_suqad.py \u811a\u672c\uff0c\u5f00\u59cb\u8bad\u7ec3 SQuAD \u6a21\u578b\uff0c\u4e3b\u8981\u914d\u7f6e\u5982\u4e0b\uff1a \u4f7f\u7528\u4ee5\u4e0a\u5408\u5e76\u5f97\u5230\u7684 SQuAD \u6a21\u578b ./squadModel \u91c7\u7528 SQuAD v1.1 \u4f5c\u4e3a\u8bad\u7ec3\u96c6 epoch = 3 ( iternum = 88641*3/(4*8) = 8310 ) learning rate = 3e-5 python ./run_squad.py\\ --gpu_num_per_node=4\\ --learning_rate=3e-5\\ --batch_size_per_device=8\\ --iter_num=8310\\ --loss_print_every_n_iter=50\\ --seq_length=384\\ --max_predictions_per_seq=20\\ --num_hidden_layers=12\\ --num_attention_heads=12\\ --max_position_embeddings=512\\ --type_vocab_size=2\\ --vocab_size=30522\\ --attention_probs_dropout_prob=0.0\\ --hidden_dropout_prob=0.0\\ --hidden_size_per_head=64\\ --use_boxing_v2=True\\ --data_dir=./dataset/train-v1.1\\ --data_part_num=8\\ --log_dir=./bert_regresssioin_test/of\\ --model_save_dir=./bert_regresssioin_test/of\\ --warmup_batches 831\\ --save_last_snapshot True\\ --model_load_dir=./squadModel","title":"\u5f00\u59cb SQuAD \u8bad\u7ec3"},{"location":"adv_examples/bert.html#_8","text":"\u751f\u6210\u4e3a\u4e86\u751f\u6210 Preidiction File \u683c\u5f0f\u7684 json \u6587\u4ef6\uff0c\u6211\u4eec\u5148\u5c06\u9884\u6d4b\u7ed3\u679c\u4fdd\u5b58\u4e3a npy \u6587\u4ef6\uff0c\u518d\u4f7f\u7528 google BERT\u7684run_squad.py \u4e2d\u7684 write_predictions \u51fd\u6570\uff0c\u8f6c\u5316\u4e3a json \u683c\u5f0f\u3002 \u5229\u7528 run_squad_predict.py \u751f\u6210 all_results.npy \u6587\u4ef6\uff1a python run_squad_predict.py \\ --gpu_num_per_node = 1 \\ --batch_size_per_device = 4 \\ --iter_num = 2709 \\ --seq_length = 384 \\ --max_predictions_per_seq = 20 \\ --num_hidden_layers = 12 \\ --num_attention_heads = 12 \\ --max_position_embeddings = 512 \\ --type_vocab_size = 2 \\ --vocab_size = 30522 \\ --attention_probs_dropout_prob = 0 .0 \\ --hidden_dropout_prob = 0 .0 \\ --hidden_size_per_head = 64 \\ --use_boxing_v2 = True \\ --data_part_num = 1 \\ --data_dir = ./dataset/dev-v1.1 \\ --log_dir = ./bert_regresssioin_test/of \\ --model_load_dir = path/to/squadModel \\ --warmup_batches 831 \u6ce8\u610f\u5c06\u4ee5\u4e0a model_load_dir \u4fee\u6539\u4e3a \u8bad\u7ec3\u597d\u7684 squadModel\u3002 \u5f97\u5230 all_results.npy \u6587\u4ef6\u540e\uff0c\u5728 google bert \u4ed3\u5e93\u76ee\u5f55\u4e0b\uff08\u6ce8\u610f\u8be5\u4ed3\u5e93\u7684 tensorflow \u7248\u672c\u4e3a tensorflow v1 \uff09\uff0c\u8fd0\u884c\u6211\u4eec\u63d0\u4f9b\u7684 npy2json.py (\u7531 google bert \u4e2d\u7684 run_squand.py \u4fee\u6539\u5f97\u6765)\uff1a python npy2json.py\\ --vocab_file=./dataset/vocab.txt \\ --bert_config_file=./dataset/bert_config.json \\ --do_train=False \\ --do_predict=True \\ --all_results_file=./all_results.npy \\ --predict_file=./dataset/dev-v1.1.json \\ --max_seq_length=384 \\ --doc_stride=128 \\ --output_dir=./squad_base/ \u6ce8\u610f\u5c06 all_results_file \u4fee\u6539\u4e3a\u4e0a\u4e00\u6b65\u5f97\u5230\u7684 all_results.npy \u7684\u8def\u5f84\u3002 \u6700\u7ec8\uff0c\u5f97\u5230 predictions.json \u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 evaluate-v1.1.py \u8fdb\u884c\u6253\u5206\u3002 python evaluate-v1.1.py \\ ./dataset/dev-v1.1.json \\ path/to/squad_base/predictions.json","title":"\u9884\u6d4b\u53ca\u6253\u5206"},{"location":"adv_examples/bert.html#_9","text":"\u5982\u4e4b\u524d\u4ecb\u7ecd\u811a\u672c\u53c2\u6570\u65f6\u63cf\u8ff0\uff1a\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u53ea\u9700\u8981\u5728\u542f\u52a8\u8bad\u7ec3\u811a\u672c\u5f0f\u52a0\u5165 node_num \u9009\u9879\u6307\u5b9a\u4e3b\u673a\u6570\u76ee\u53ca node_list \u9009\u9879\u5373\u53ef\uff1a python run_squad_predict.py \\ --gpu_num_per_node = 1 \\ --batch_size_per_device = 4 \\ --iter_num = 2709 \\ --seq_length = 384 \\ --max_predictions_per_seq = 20 \\ --num_hidden_layers = 12 \\ --num_attention_heads = 12 \\ --max_position_embeddings = 512 \\ --type_vocab_size = 2 \\ --vocab_size = 30522 \\ --attention_probs_dropout_prob = 0 .0 \\ --hidden_dropout_prob = 0 .0 \\ --hidden_size_per_head = 64 \\ --use_boxing_v2 = True \\ --data_part_num = 1 \\ --data_dir = ./dataset/dev-v1.1 \\ --log_dir = ./bert_regresssioin_test/of \\ --model_load_dir = path/to/squadModel \\ --warmup_batches 831 \\ --node_num = 2 \\ --node_list = \"192.168.1.12,192.168.1.14\"","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"adv_examples/dcgan.html","text":"DCGAN tutorial \u00b6 \u7b80\u4ecb \u00b6 \u751f\u6210\u5bf9\u6297\u7f51\u7edc(GANs)\u5c5e\u4e8e\u4e00\u79cd\u751f\u6210\u7f51\u7edc\uff0c\u5b83\u901a\u8fc7\u4e24\u4e2a\u7f51\u7edc\u7684\u76f8\u4e92\u535a\u5f08\u7684\u65b9\u5f0f\u6765\u5b66\u4e60\u7279\u5b9a\u7684\u6570\u636e\u5206\u5e03\u3002\u800cDCGAN\u5219\u662f\u4e00\u79cd\u57fa\u4e8e\u5377\u79ef/\u53cd\u5377\u79ef\u8fd0\u7b97\u7684\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff0c\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u56fe\u50cf\u751f\u6210\u9886\u57df \u672c\u4f8b\u7a0b\u5c06\u4e3b\u8981\u6f14\u793a\u5982\u4f55\u5728Oneflow\u4e2d\u8fd0\u884cDCGAN\u7f51\u7edc\uff0c\u800c\u4e0d\u91cd\u70b9\u8ba8\u8bba\u751f\u6210\u5bf9\u6297\u7f51\u7edc\u7684\u539f\u7406\u548c\u7ec6\u8282\u3002\u5982\u679c\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks NLPS 2016 tutorial:generative adversarial networks \u5bf9\u9f50\u6d4b\u8bd5 \u00b6 \u672c\u4f8b\u7a0b\u7684\u6838\u5fc3\u4ee3\u7801\u5728 dcgan.py \u6587\u4ef6\u4e2d\uff0c\u5176\u4e2d\u7684\u6a21\u578b\u7ed3\u6784\u548c\u53c2\u6570\u53c2\u8003\u4e86tensorflow\u7684 \u5b98\u65b9\u793a\u4f8b \u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\uff0c\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u9f50\u6d4b\u8bd5\uff0c\u4fdd\u8bc1oneflow\u7684\u6a21\u578b\u7ed3\u679c\u4e0etensorflow\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684 dcgan = DCGAN () dcgan . compare_with_tensorflow () \u6570\u636e\u96c6\u51c6\u5907 \u00b6 \u4f8b\u7a0b\u63d0\u4f9b\u4e86\u6570\u636e\u96c6\u4e0b\u8f7d\u811a\u672c\uff0c\u8fd0\u884c download.py \u4e0b\u8f7dmnist\u6570\u636e\u96c6\uff0c \u6570\u636e\u96c6\u9ed8\u8ba4\u4fdd\u5b58\u5728 ./data/minst \u76ee\u5f55\u4e2d python download.py mnist \u8bad\u7ec3 \u00b6 \u5728\u51c6\u5907\u597d\u6570\u636e\u96c6\u540e\uff0c\u53ef\u901a\u8fc7DCGAN\u5b9e\u4f8b\u7684 train \u65b9\u6cd5\u8fdb\u884cDCGAN\u7684\u8bad\u7ec3 dcgan . train ( epochs = 2 ) \u8bad\u7ec3\u5c06\u6bcf\u9694 self.eval_interval \u4e2abatch\u8f93\u51fa\u751f\u6210\u7684\u56fe\u50cf \u5bfc\u51fa\u52a8\u56fe \u00b6 \u518d\u5b8c\u6210\u8bad\u7ec3\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7DCGAN\u5b9e\u4f8b\u7684 save_to_gif \u65b9\u6cd5\u5c06\u56fe\u50cf\u5bfc\u51fa\u4e3a\u52a8\u56fe dcgan . save_to_gif ()","title":"DCGAN tutorial"},{"location":"adv_examples/dcgan.html#dcgan-tutorial","text":"","title":"DCGAN tutorial"},{"location":"adv_examples/dcgan.html#_1","text":"\u751f\u6210\u5bf9\u6297\u7f51\u7edc(GANs)\u5c5e\u4e8e\u4e00\u79cd\u751f\u6210\u7f51\u7edc\uff0c\u5b83\u901a\u8fc7\u4e24\u4e2a\u7f51\u7edc\u7684\u76f8\u4e92\u535a\u5f08\u7684\u65b9\u5f0f\u6765\u5b66\u4e60\u7279\u5b9a\u7684\u6570\u636e\u5206\u5e03\u3002\u800cDCGAN\u5219\u662f\u4e00\u79cd\u57fa\u4e8e\u5377\u79ef/\u53cd\u5377\u79ef\u8fd0\u7b97\u7684\u751f\u6210\u5bf9\u6297\u7f51\u7edc\uff0c\u88ab\u5e7f\u6cdb\u5e94\u7528\u4e8e\u56fe\u50cf\u751f\u6210\u9886\u57df \u672c\u4f8b\u7a0b\u5c06\u4e3b\u8981\u6f14\u793a\u5982\u4f55\u5728Oneflow\u4e2d\u8fd0\u884cDCGAN\u7f51\u7edc\uff0c\u800c\u4e0d\u91cd\u70b9\u8ba8\u8bba\u751f\u6210\u5bf9\u6297\u7f51\u7edc\u7684\u539f\u7406\u548c\u7ec6\u8282\u3002\u5982\u679c\u611f\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\uff1a Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks NLPS 2016 tutorial:generative adversarial networks","title":"\u7b80\u4ecb"},{"location":"adv_examples/dcgan.html#_2","text":"\u672c\u4f8b\u7a0b\u7684\u6838\u5fc3\u4ee3\u7801\u5728 dcgan.py \u6587\u4ef6\u4e2d\uff0c\u5176\u4e2d\u7684\u6a21\u578b\u7ed3\u6784\u548c\u53c2\u6570\u53c2\u8003\u4e86tensorflow\u7684 \u5b98\u65b9\u793a\u4f8b \u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\uff0c\u53ef\u4ee5\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u9f50\u6d4b\u8bd5\uff0c\u4fdd\u8bc1oneflow\u7684\u6a21\u578b\u7ed3\u679c\u4e0etensorflow\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684 dcgan = DCGAN () dcgan . compare_with_tensorflow ()","title":"\u5bf9\u9f50\u6d4b\u8bd5"},{"location":"adv_examples/dcgan.html#_3","text":"\u4f8b\u7a0b\u63d0\u4f9b\u4e86\u6570\u636e\u96c6\u4e0b\u8f7d\u811a\u672c\uff0c\u8fd0\u884c download.py \u4e0b\u8f7dmnist\u6570\u636e\u96c6\uff0c \u6570\u636e\u96c6\u9ed8\u8ba4\u4fdd\u5b58\u5728 ./data/minst \u76ee\u5f55\u4e2d python download.py mnist","title":"\u6570\u636e\u96c6\u51c6\u5907"},{"location":"adv_examples/dcgan.html#_4","text":"\u5728\u51c6\u5907\u597d\u6570\u636e\u96c6\u540e\uff0c\u53ef\u901a\u8fc7DCGAN\u5b9e\u4f8b\u7684 train \u65b9\u6cd5\u8fdb\u884cDCGAN\u7684\u8bad\u7ec3 dcgan . train ( epochs = 2 ) \u8bad\u7ec3\u5c06\u6bcf\u9694 self.eval_interval \u4e2abatch\u8f93\u51fa\u751f\u6210\u7684\u56fe\u50cf","title":"\u8bad\u7ec3"},{"location":"adv_examples/dcgan.html#_5","text":"\u518d\u5b8c\u6210\u8bad\u7ec3\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7DCGAN\u5b9e\u4f8b\u7684 save_to_gif \u65b9\u6cd5\u5c06\u56fe\u50cf\u5bfc\u51fa\u4e3a\u52a8\u56fe dcgan . save_to_gif ()","title":"\u5bfc\u51fa\u52a8\u56fe"},{"location":"adv_examples/mask_rcnn.html","text":"","title":"Mask rcnn"},{"location":"adv_examples/resnet.html","text":"\u7b80\u4ecb Introduction \u00b6 \u56fe\u50cf\u5206\u7c7b\u4e0eCNN \u00b6 \u56fe\u50cf\u5206\u7c7b \u662f\u6307\u5c06\u56fe\u50cf\u4fe1\u606f\u4e2d\u6240\u53cd\u6620\u7684\u4e0d\u540c\u7279\u5f81\uff0c\u628a\u4e0d\u540c\u7c7b\u522b\u7684\u76ee\u6807\u533a\u5206\u5f00\u6765\u7684\u56fe\u50cf\u5904\u7406\u65b9\u6cd5\uff0c\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u5176\u4ed6\u4efb\u52a1\uff0c\u6bd4\u5982\u76ee\u6807\u68c0\u6d4b\u3001\u8bed\u4e49\u5206\u5272\u3001\u4eba\u8138\u8bc6\u522b\u7b49\u9ad8\u5c42\u89c6\u89c9\u4efb\u52a1\u7684\u57fa\u7840\u3002 ImageNet \u5927\u89c4\u6a21\u89c6\u89c9\u8bc6\u522b\u6311\u6218\u8d5b\uff08ILSVRC\uff09\uff0c\u5e38\u79f0\u4e3a ImageNet \u7ade\u8d5b\uff0c\u5305\u62ec\u56fe\u50cf\u5206\u7c7b\u3001\u7269\u4f53\u5b9a\u4f4d\uff0c\u4ee5\u53ca\u7269\u4f53\u68c0\u6d4b\u7b49\u4efb\u52a1\uff0c\u662f\u63a8\u52a8\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u53d1\u5c55\u6700\u91cd\u8981\u7684\u6bd4\u8d5b\u4e4b\u4e00\u3002 \u57282012\u5e74\u7684 ImageNet \u7ade\u8d5b\u4e2d\uff0c\u6df1\u5ea6\u5377\u79ef\u7f51\u7edc AlexNet \u6a2a\u7a7a\u51fa\u4e16\u3002\u4ee5\u8d85\u51fa\u7b2c\u4e8c\u540d10%\u4ee5\u4e0a\u7684top-5\u51c6\u786e\u7387\uff0c\u52c7\u593a ImageNet2012 \u6bd4\u8d5b\u7684\u51a0\u519b\u3002\u4ece\u6b64\uff0c\u4ee5 CNN\uff08\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff09 \u4e3a\u4ee3\u8868\u7684\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u5f00\u59cb\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u7684\u5e94\u7528\u5f00\u59cb\u5927\u653e\u5f02\u5f69\uff0c\u66f4\u591a\u7684\u66f4\u6df1\u7684CNN\u7f51\u7edc\u88ab\u63d0\u51fa\uff0c\u6bd4\u5982 ImageNet2014 \u6bd4\u8d5b\u7684\u51a0\u519b VGGNet, ImageNet2015 \u6bd4\u8d5b\u7684\u51a0\u519b ResNet\u3002 ResNet \u00b6 ResNet \u662f2015\u5e74ImageNet\u7ade\u8d5b\u7684\u51a0\u519b\u3002\u76ee\u524d\uff0cResNet \u76f8\u5bf9\u5bf9\u4e8e\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u5206\u7c7b\u7b97\u6cd5\u800c\u8a00\uff0c\u6548\u679c\u5df2\u7ecf\u76f8\u5f53\u7684\u51fa\u8272\uff0c\u4e4b\u540e\u5927\u91cf\u7684\u68c0\u6d4b\uff0c\u5206\u5272\uff0c\u8bc6\u522b\u7b49\u4efb\u52a1\u4e5f\u90fd\u5728 ResNet \u57fa\u7840\u4e0a\u5b8c\u6210\u3002 OneFlow-Benchmark \u4ed3\u5e93\u4e2d\uff0c\u63d0\u4f9b ResNet50 v1.5 \u7684 OneFlow \u5b9e\u73b0\u3002\u6211\u4eec\u5728 ImageNet-2012 \u6570\u636e\u96c6\u4e0a\u8bad\u7ec390\u8f6e\u540e\uff0c\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u80fd\u591f\u8fbe\u5230\uff1a77.318%(top1)\uff0c93.622%(top5)\u3002 \u66f4\u8be6\u7ec6\u7684\u7f51\u7edc\u53c2\u6570\u5bf9\u9f50\u5de5\u4f5c\uff0c\u89c1 OneFlow-Benchmark\u7684cnns \u90e8\u5206 \u5173\u4e8e ResNet50 v1.5 \u7684\u8bf4\u660e\uff1a ResNet50 v1.5 \u662f\u539f\u59cb ResNet50 v1 \u7684\u4e00\u4e2a\u6539\u8fdb\u7248\u672c\uff0c\u76f8\u5bf9\u4e8e\u539f\u59cb\u7684\u6a21\u578b\uff0c\u7cbe\u5ea6\u7a0d\u6709\u63d0\u5347 (~0.5% top1)\uff0c\u8be6\u7ec6\u8bf4\u660e\u53c2\u89c1 \u8fd9\u91cc \u3002 \u51c6\u5907\u597d\u4eb2\u81ea\u52a8\u624b\uff0c\u590d\u73b0\u4e0a\u9762\u7684\u7ed3\u679c\u4e86\u5417\uff1f \u4e0b\u9762\uff0c\u672c\u6587\u5c31\u4ee5\u4e0a\u9762\u7684 ResNet50 \u4e3a\u4f8b\uff0c\u4e00\u6b65\u6b65\u5c55\u73b0\u5982\u4f55\u4f7f\u7528 OneFlow \u8fdb\u884c ResNet50 \u7f51\u7edc\u7684\u8bad\u7ec3\u548c\u9884\u6d4b\u3002 \u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a \u51c6\u5907\u5de5\u4f5c \u9879\u76ee\u5b89\u88c5\u548c\u51c6\u5907\u5de5\u4f5c \u5feb\u901f\u5f00\u59cb \u9884\u6d4b/\u63a8\u7406 \u8bad\u7ec3\u548c\u9a8c\u8bc1 \u8bc4\u4f30 \u66f4\u8be6\u7ec6\u7684\u8bf4\u660e \u5206\u5e03\u5f0f\u8bad\u7ec3 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u4e0e\u9884\u6d4b \u8fdb\u9636 \u53c2\u6570\u5bf9\u9f50 \u6570\u636e\u96c6\u5236\u4f5c(ImageNet2012) OneFlow \u6a21\u578b\u8f6c ONNX \u6a21\u578b \u51c6\u5907\u5de5\u4f5c Requirements \u00b6 \u522b\u62c5\u5fc3\uff0c\u4f7f\u7528 OneFlow \u975e\u5e38\u5bb9\u6613\uff0c\u53ea\u8981\u51c6\u5907\u597d\u4e0b\u9762\u4e09\u6b65\uff0c\u5373\u53ef\u5f00\u59cb OneFlow \u7684\u56fe\u50cf\u8bc6\u522b\u4e4b\u65c5\u3002 \u5b89\u88c5 OneFlow\uff0c\u5b89\u88c5\u65b9\u5f0f\u53c2\u8003 OneFlow\u9879\u76ee\u4e3b\u9875 \u514b\u9686/\u4e0b\u8f7d OneFlow-Benchmark \u4ed3\u5e93\u3002 git clone git@github.com:Oneflow-Inc/OneFlow-Benchmark.git cd OneFlow-Benchmark/Classification/cnns \u51c6\u5907\u6570\u636e\u96c6\uff08\u53ef\u9009\uff09 \u76f4\u63a5\u4f7f\u7528 synthetic \u865a\u62df\u5408\u6210\u6570\u636e\u96c6 \u4e0b\u8f7d\u6211\u4eec\u5236\u4f5c\u7684 Imagenet(2012) \u8ff7\u4f60\u6570\u636e\u96c6 \u89e3\u538b\u653e\u5165data\u76ee\u5f55 \u6216\u8005\uff1a\u5236\u4f5c\u5b8c\u6574 OFRecord \u683c\u5f0f\u7684 ImageNet \u6570\u636e\u96c6\uff08\u89c1\u4e0b\u6587\u8fdb\u9636\u90e8\u5206\uff09 \u6211\u4eec\u63d0\u4f9b\u4e86\u901a\u7528\u811a\u672c\uff1a train.sh \u548c inference.sh \uff0c\u5b83\u4eec\u9002\u7528\u4e8e\u6b64\u4ed3\u5e93\u4e0b\u6240\u6709cnn\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3\u3001\u9a8c\u8bc1\u3001\u63a8\u7406\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u578b\u3001\u6570\u636e\u96c6\u6765\u8bad\u7ec3/\u63a8\u7406\u3002 \u5173\u4e8e\u6a21\u578b\u7684\u8bf4\u660e\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528resnet50\uff0c\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6539\u52a8\u811a\u672c\u4e2d\u7684--model\u53c2\u6570\u6307\u5b9a\u5176\u4ed6\u6a21\u578b\uff0c\u5982\uff1a --model=\"resnet50\" \uff0c --model=\"vgg\" \u7b49\u3002 \u5173\u4e8e\u6570\u636e\u96c6\u7684\u8bf4\u660e\uff1a 1\uff09\u4e3a\u4e86\u4f7f\u8bfb\u8005\u5feb\u901f\u4e0a\u624b\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 synthetic \u865a\u62df\u5408\u6210\u6570\u636e\uff0c\u201c\u5408\u6210\u6570\u636e\u201d\u662f\u6307\u4e0d\u901a\u8fc7\u78c1\u76d8\u52a0\u8f7d\u6570\u636e\uff0c\u800c\u662f\u76f4\u63a5\u5728\u5185\u5b58\u4e2d\u751f\u6210\u4e00\u4e9b\u968f\u673a\u6570\u636e\uff0c\u4f5c\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u6570\u636e\u8f93\u5165\u6e90\u3002 2\uff09\u540c\u65f6\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c0f\u7684\u8ff7\u4f60\u793a\u4f8b\u6570\u636e\u96c6\u3002\u76f4\u63a5\u4e0b\u8f7d\u89e3\u538b\u81f3 cnn \u9879\u76ee\u7684 data \u76ee\u5f55\uff0c\u5373\u53ef\u5feb\u901f\u5f00\u59cb\u8bad\u7ec3\u3002\u8bfb\u8005\u53ef\u4ee5\u5728\u719f\u6089\u4e86\u6d41\u7a0b\u540e\uff0c\u53c2\u8003\u6570\u636e\u96c6\u5236\u4f5c\u90e8\u5206\uff0c\u5236\u4f5c\u5b8c\u6574\u7684 Imagenet2012 \u6570\u636e\u96c6\u3002 3\uff09\u4f7f\u7528 OFRcord \u683c\u5f0f\u7684\u6570\u636e\u96c6\u53ef\u4ee5\u63d0\u9ad8\u6570\u636e\u52a0\u8f7d\u6548\u7387\uff08\u4f46\u8fd9\u975e\u5fc5\u987b\uff0c\u53c2\u8003 \u6570\u636e\u8f93\u5165 \uff0cOneFlow \u652f\u6301\u76f4\u63a5\u52a0\u8f7d numpy \u6570\u636e\uff09\u3002 \u5feb\u901f\u5f00\u59cb Quick Start \u00b6 \u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u7acb\u9a6c\u5f00\u59cb OneFlow \u7684\u56fe\u50cf\u8bc6\u522b\u4e4b\u65c5\u5427\uff01 \u9996\u5148\uff0c\u5207\u6362\u5230\u76ee\u5f55\uff1a cd OneFlow-Benchmark/Classification/cnns \u9884\u8bad\u7ec3\u6a21\u578b \u00b6 resnet50 \u00b6 resnet50_v1.5_model (validation accuracy: 77.318% top1\uff0c93.622% top5 ) \u9884\u6d4b/\u63a8\u7406 \u00b6 \u4e0b\u8f7d\u597d\u9884\u8bad\u7ec3\u6a21\u578b\u540e\uff0c\u89e3\u538b\u540e\u653e\u5165\u5f53\u524d\u76ee\u5f55\uff0c\u7136\u540e\u6267\u884c\uff1a sh inference.sh \u6b64\u811a\u672c\u5c06\u8c03\u7528\u6a21\u578b\u5bf9\u8fd9\u5f20\u91d1\u9c7c\u56fe\u7247\u8fdb\u884c\u5206\u7c7b\uff1a \u82e5\u8f93\u51fa\u4e0b\u9762\u7684\u5185\u5bb9\uff0c\u5219\u8868\u793a\u9884\u6d4b\u6210\u529f\uff1a data/fish.jpg 0.87059885 goldfish, Carassius auratus \u53ef\u89c1\uff0c\u6a21\u578b\u5224\u65ad\u8fd9\u5f20\u56fe\u7247\u670987.05%\u7684\u6982\u7387\u662f\u91d1\u9c7c goldfish\u3002 \u8bad\u7ec3\u548c\u9a8c\u8bc1\uff08Train & Validation\uff09 \u00b6 \u8bad\u7ec3\u540c\u6837\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u6267\u884c\uff1a sh train.sh \u5373\u53ef\u5f00\u59cb\u6a21\u578b\u7684\u8bad\u7ec3\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a Loading synthetic data. Loading synthetic data. Saving model to ./output/snapshots/model_save-20200723124215/snapshot_initial_model. Init model on demand. train: epoch 0, iter 10, loss: 7.197278, top_1: 0.000000, top_k: 0.000000, samples/s: 61.569 train: epoch 0, iter 20, loss: 6.177684, top_1: 0.000000, top_k: 0.000000, samples/s: 122.555 Saving model to ./output/snapshots/model_save-20200723124215/snapshot_epoch_0. train: epoch 0, iter 30, loss: 3.988656, top_1: 0.525000, top_k: 0.812500, samples/s: 120.337 train: epoch 1, iter 10, loss: 1.185733, top_1: 1.000000, top_k: 1.000000, samples/s: 80.705 train: epoch 1, iter 20, loss: 1.042017, top_1: 1.000000, top_k: 1.000000, samples/s: 118.478 Saving model to ./output/snapshots/model_save-20200723124215/snapshot_epoch_1. ... \u4e3a\u4e86\u65b9\u4fbf\u8fd0\u884c\u6f14\u793a\uff0c\u6211\u4eec\u9ed8\u8ba4\u4f7f\u7528synthetic\u865a\u62df\u5408\u6210\u6570\u636e\u96c6\uff0c\u4f7f\u60a8\u53ef\u4ee5\u5feb\u901f\u770b\u5230\u6a21\u578b\u8fd0\u884c\u7684\u6548\u679c \u540c\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u8ff7\u4f60\u793a\u4f8b\u6570\u636e\u96c6 \uff0c\u4e0b\u8f7d\u89e3\u538b\u540e\u653e\u5165 cnn \u9879\u76ee\u7684 data \u76ee\u5f55\u5373\u53ef\uff0c\u7136\u540e\u4fee\u6539\u8bad\u7ec3\u811a\u672c\u5982\u4e0b\uff1a rm -rf core.* rm -rf ./output/snapshots/* DATA_ROOT=data/imagenet/ofrecord python3 of_cnn_train_val.py \\ --train_data_dir=$DATA_ROOT/train \\ --num_examples=50 \\ --train_data_part_num=1 \\ --val_data_dir=$DATA_ROOT/validation \\ --num_val_examples=50 \\ --val_data_part_num=1 \\ --num_nodes=1 \\ --gpu_num_per_node=1 \\ --model_update=\"momentum\" \\ --learning_rate=0.001 \\ --loss_print_every_n_iter=1 \\ --batch_size_per_device=16 \\ --val_batch_size_per_device=10 \\ --num_epoch=10 \\ --model=\"resnet50\" \u8fd0\u884c\u6b64\u811a\u672c\uff0c\u5c06\u5728\u4ec5\u670950\u5f20\u91d1\u9c7c\u56fe\u7247\u7684\u8ff7\u4f60 ImageNet \u6570\u636e\u96c6\u4e0a\uff0c\u8bad\u7ec3\u51fa\u4e00\u4e2a\u5206\u7c7b\u6a21\u578b\uff0c\u5229\u7528\u5b83\uff0c\u4f60\u53ef\u4ee5\u5bf9\u91d1\u9c7c\u56fe\u7247\u8fdb\u884c\u5206\u7c7b\u3002 \u4e0d\u8981\u7740\u6025\uff0c\u5982\u679c\u60a8\u9700\u8981\u5728\u5b8c\u6574\u7684 ImageNet2012 \u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bf7\u53c2\u8003\uff1a OneFlow-Benchmark \u4ed3\u5e93\u3002 \u8bc4\u4f30(Evaluate) \u00b6 \u4f60\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u6216\u8005\u6211\u4eec\u63d0\u4f9b\u7684 resnet50_v1.5_model \uff08\u89e3\u538b\u540e\u653e\u5165\u5f53\u524d\u76ee\u5f55\uff09\uff0c\u5bf9resnet50\u6a21\u578b\u7684\u7cbe\u5ea6\u8fdb\u884c\u8bc4\u4f30\u3002 \u53ea\u9700\u8fd0\u884c\uff1a sh evaluate.sh \u5373\u53ef\u83b7\u5f97\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u572850000\u5f20\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\uff1a Time stamp: 2020-07-27-09:28:28 Restoring model from resnet_v15_of_best_model_val_top1_77318. I0727 09:28:28.773988162 8411 ev_epoll_linux.c:82] Use of signals is disabled. Epoll engine will not be used Loading data from /dataset/ImageNet/ofrecord/validation validation: epoch 0, iter 195, top_1: 0.773277, top_k: 0.936058, samples/s: 1578.325 validation: epoch 0, iter 195, top_1: 0.773237, top_k: 0.936078, samples/s: 1692.303 validation: epoch 0, iter 195, top_1: 0.773297, top_k: 0.936018, samples/s: 1686.896 \u6267\u884c sh evaluate.sh \u524d\uff0c\u786e\u4fdd\u51c6\u5907\u4e86 ImageNet(2012) \u7684\u9a8c\u8bc1\u96c6\uff0c\u9a8c\u8bc1\u96c6\u5236\u4f5c\u65b9\u6cd5\u8bf7\u53c2\u8003\uff1a OneFlow-Benchmark \u4ed3\u5e93\u3002 \u4ece3\u8f6e\u7684\u8bc4\u4f30\u7ed3\u679c\u6765\u770b\uff0c\u6211\u4eec\u7684\u6a21\u578b\u5728 ImageNet(2012) \u4e0a\u5df2\u7ecf\u8fbe\u5230\u4e8677.32+%\u7684 top1 \u7cbe\u5ea6\u3002 \u6700\u540e\uff0c\u606d\u559c\u4f60\uff01\u5b8c\u6210\u4e86 Resnet \u6a21\u578b\u5728 ImageNet \u4e0a\u5b8c\u6574\u7684\u8bad\u7ec3/\u9a8c\u8bc1\u3001\u63a8\u7406\u548c\u8bc4\u4f30\uff0c\u4e3a\u81ea\u5df1\u9f13\u4e2a\u638c\u5427\uff01 \u66f4\u8be6\u7ec6\u7684\u8bf4\u660e Details \u00b6 \u5206\u5e03\u5f0f\u8bad\u7ec3 \u00b6 \u7b80\u5355\u800c\u6613\u7528\u7684\u5206\u5e03\u5f0f\uff0c\u662f OneFlow \u7684\u4e3b\u6253\u7279\u8272\u4e4b\u4e00\u3002 OneFlow \u6846\u67b6\u4ece\u5e95\u5c42\u8bbe\u8ba1\u4e0a\uff0c\u5c31\u539f\u751f\u652f\u6301\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u5c24\u5176\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u6570\u636e\u5e76\u884c\uff0c\u7528\u6237\u5b8c\u5168\u4e0d\u7528\u64cd\u5fc3\u7b97\u6cd5\u4ece\u5355\u673a\u5355\u5361\u6269\u5c55\u5230\u591a\u673a\u591a\u5361\u65f6\uff0c\u6570\u636e\u5982\u4f55\u5212\u5206\u4ee5\u53ca\u540c\u6b65\u7684\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528 OneFlow\uff0c\u7528\u6237\u4ee5\u5355\u673a\u5355\u5361\u7684\u89c6\u89d2\u5199\u597d\u7684\u4ee3\u7801\uff0c \u81ea\u52a8\u5177\u5907\u591a\u673a\u591a\u5361\u5206\u5e03\u5f0f\u6570\u636e\u5e76\u884c\u7684\u80fd\u529b\u3002 \u5982\u4f55\u914d\u7f6e\u5e76\u8fd0\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1f \u00b6 \u8fd8\u662f\u4ee5\u4e0a\u9762\"\u5feb\u901f\u5f00\u59cb\"\u90e8\u5206\u6f14\u793a\u7684\u4ee3\u7801\u4e3a\u4f8b\uff0c\u5728 train.sh \u4e2d\uff0c\u53ea\u8981\u7528 --num_nodes \u6307\u5b9a\u8282\u70b9\uff08\u673a\u5668\uff09\u4e2a\u6570\uff0c\u540c\u65f6\u7528 --node_ips \u6307\u5b9a\u8282\u70b9\u7684 IP \u5730\u5740\uff0c\u7136\u540e\u7528 --gpu_num_per_node \u6307\u5b9a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u4f7f\u7528\u7684\u5361\u6570\uff0c\u5c31\u8f7b\u677e\u5730\u5b8c\u6210\u4e86\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u57282\u673a8\u5361\u4e0a\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\u914d\u7f6e\uff1a # train.sh python3 of_cnn_train_val.py \\ --num_nodes=2 \\ --node_ips=\"192.168.1.1, 192.168.1.2\" --gpu_num_per_node=4 \\ ... --model=\"resnet50\" \u7136\u540e\u5206\u522b\u5728\u4e24\u53f0\u673a\u5668\u4e0a\uff0c\u540c\u65f6\u6267\u884c\uff1a ./train.sh \u7a0b\u5e8f\u542f\u52a8\u540e\uff0c\u901a\u8fc7 watch -n 0.1 nvidia-smi \u547d\u4ee4\u53ef\u4ee5\u770b\u5230\uff0c\u4e24\u53f0\u673a\u5668\u7684 GPU \u90fd\u5f00\u59cb\u4e86\u5de5\u4f5c\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u5728 --node_ips \u8bbe\u7f6e\u4e2d\u7684\u7b2c\u4e00\u53f0\u673a\u5668\u7684\u5c4f\u5e55\u4e0a\uff0c\u6253\u5370\u8f93\u51fa\u3002 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u4e0e\u9884\u6d4b \u00b6 \u76ee\u524d\uff0cOneFlow \u5df2\u7ecf\u539f\u751f\u652f\u6301 float16/float32 \u7684\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u3002\u8bad\u7ec3\u65f6\uff0c\u6a21\u578b\u53c2\u6570\uff08\u6743\u91cd\uff09\u4f7f\u7528 float16 \u8fdb\u884c\u8bad\u7ec3\uff0c\u540c\u65f6\u4fdd\u7559 float32 \u7528\u4f5c\u68af\u5ea6\u66f4\u65b0\u548c\u8ba1\u7b97\u8fc7\u7a0b\u3002\u7531\u4e8e\u53c2\u6570\u7684\u5b58\u50a8\u51cf\u534a\uff0c\u4f1a\u5e26\u6765\u8bad\u7ec3\u901f\u5ea6\u7684\u63d0\u5347\u3002 \u5728 OneFlow \u4e2d\u5f00\u542f float16/float32 \u7684\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u6a21\u5f0f\uff0cResNet50 \u7684\u8bad\u7ec3\u901f\u5ea6\u7406\u8bba\u4e0a\u80fd\u8fbe\u5230 1.7 \u500d\u7684\u52a0\u901f\u3002 \u5982\u4f55\u5f00\u542f float16 / float32 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\uff1f \u00b6 \u53ea\u9700\u8981\u5728 train.sh \u811a\u672c\u4e2d\u6dfb\u52a0\u53c2\u6570 --use_fp16=True \u5373\u53ef\u3002 \u6df7\u5408\u7cbe\u5ea6\u6a21\u578b \u00b6 \u6211\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5728 ImageNet2012 \u5b8c\u6574\u8bad\u7ec3\u4e8690\u4e2a epoch \u7684\u6df7\u5408\u7cbe\u5ea6\u6a21\u578b\uff0cTop_1\uff1a77.33% \u60a8\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u4f7f\u7528\uff1a resnet50_v15_fp16 \u8fdb\u9636 Advanced \u00b6 \u53c2\u6570\u5bf9\u9f50 \u00b6 OneFlow \u7684 ResNet50 \u5b9e\u73b0\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u548c \u82f1\u4f1f\u8fbe\u7684 Mxnet \u7248\u5b9e\u73b0 \u5bf9\u9f50\uff0c\u6211\u4eec\u4ece learning rate \u5b66\u4e60\u7387\uff0c\u4f18\u5316\u5668 Optimizer \u7684\u9009\u62e9\uff0c\u6570\u636e\u589e\u5f3a\u7684\u56fe\u50cf\u53c2\u6570\u8bbe\u5b9a\uff0c\u5230\u66f4\u7ec6\u7684\u6bcf\u4e00\u5c42\u7f51\u7edc\u7684\u5f62\u6001\uff0cbias\uff0cweight \u521d\u59cb\u5316\u7b49\u90fd\u505a\u4e86\u7ec6\u81f4\u4e14\u51e0\u4e4e\u5b8c\u5168\u4e00\u81f4\u7684\u5bf9\u9f50\u5de5\u4f5c\u3002\u5177\u4f53\u7684\u53c2\u6570\u5bf9\u9f50\u5de5\u4f5c\uff0c\u8bf7\u53c2\u8003\uff1a OneFlow-Benchmark \u4ed3\u5e93 \u6570\u636e\u96c6\u5236\u4f5c \u00b6 \u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6\u7b80\u4ecb \u00b6 \u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u7684\u516c\u5f00\u6570\u636e\u96c6\u6709CIFAR\uff0cImageNet \u7b49\u7b49\uff0c\u8fd9\u4e9b\u6570\u636e\u96c6\u4e2d\uff0c\u662f\u4ee5 jpeg \u7684\u683c\u5f0f\u63d0\u4f9b\u539f\u59cb\u7684\u56fe\u7247\u3002 CIFAR \u662f\u7531Hinton \u7684\u5b66\u751f Alex Krizhevsky \u548c Ilya Sutskever \u6574\u7406\u7684\u4e00\u4e2a\u7528\u4e8e\u8bc6\u522b\u666e\u9002\u7269\u4f53\u7684\u5c0f\u578b\u6570\u636e\u96c6\u3002\u5305\u62ecCIFAR-10\u548cCIFAR-100\u3002 ImageNet ImageNet \u6570\u636e\u96c6\uff0c\u4e00\u822c\u662f\u63072010-2017\u5e74\u95f4\u5927\u89c4\u6a21\u89c6\u89c9\u8bc6\u522b\u7ade\u8d5b (ILSVRC) \u7684\u6240\u4f7f\u7528\u7684\u6570\u636e\u96c6\u7684\u7edf\u79f0\u3002ImageNet \u6570\u636e\u4ece2010\u5e74\u6765\u7a0d\u6709\u53d8\u5316\uff0c\u5e38\u7528 ImageNet-2012 \u6570\u636e\u96c6\u5305\u542b1000\u4e2a\u7c7b\u522b\uff0c\u5176\u4e2d\u8bad\u7ec3\u96c6\u5305\u542b1,281,167\u5f20\u56fe\u7247\uff0c\u6bcf\u4e2a\u7c7b\u522b\u6570\u636e732\u81f31300\u5f20\u4e0d\u7b49\uff0c\u9a8c\u8bc1\u96c6\u5305\u542b50,000\u5f20\u56fe\u7247\uff0c\u5e73\u5747\u6bcf\u4e2a\u7c7b\u522b50\u5f20\u56fe\u7247\u3002 \u5b8c\u6574\u7684 ImageNet(2012)\u5236\u4f5c\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003 tools \u76ee\u5f55\u4e0b\u7684 README\u8bf4\u660e OneFlow \u6a21\u578b\u8f6c ONNX \u6a21\u578b \u00b6 \u7b80\u4ecb \u00b6 ONNX (Open Neural Network Exchange) \u662f\u4e00\u79cd\u8f83\u4e3a\u5e7f\u6cdb\u4f7f\u7528\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\u95f4\u683c\u5f0f\uff0c\u901a\u8fc7 ONNX \u683c\u5f0f\uff0cOneFlow \u6a21\u578b\u53ef\u4ee5\u88ab\u8bb8\u591a\u90e8\u7f72\u6846\u67b6\uff08\u5982 OpenVINO\u3001ONNX Runtime \u548c\u79fb\u52a8\u7aef\u7684 ncnn\u3001tnn\u3001TEngine \u7b49\uff09\u6240\u4f7f\u7528\u3002\u8fd9\u4e00\u8282\u4ecb\u7ecd\u5982\u4f55\u5c06\u8bad\u7ec3\u597d\u7684 ResNet50 v1.5 \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u5e76\u9a8c\u8bc1\u6b63\u786e\u6027\u3002 \u5feb\u901f\u4e0a\u624b \u00b6 \u6211\u4eec\u63d0\u4f9b\u4e86\u5b8c\u6574\u4ee3\u7801\uff1a resnet_to_onnx.py \u5e2e\u4f60\u8f7b\u677e\u5b8c\u6210\u6a21\u578b\u7684\u8f6c\u6362\u548c\u6d4b\u8bd5\u7684\u5de5\u4f5c \u6b65\u9aa4\u4e00\uff1a \u4e0b\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff1a resnet50_v1.5_model \uff0c\u89e3\u538b\u540e\u653e\u5165\u5f53\u524d\u76ee\u5f55 \u6b65\u9aa4\u4e8c\uff1a \u6267\u884c\uff1a python3 resnet_to_onnx.py \u6b64\u4ee3\u7801\u5c06\u5b8c\u6210 OneFlow \u6a21\u578b -> ONNX \u6a21\u578b\u7684\u8f6c\u5316\uff0c\u7136\u540e\u4f7f\u7528 ONNX Runtime \u52a0\u8f7d\u8f6c\u6362\u540e\u7684\u6a21\u578b\u5bf9\u5355\u5f20\u56fe\u7247\u8fdb\u884c\u6d4b\u8bd5\u3002\u6d4b\u8bd5\u56fe\u7247\u5982\u4e0b\uff1a \u200b \u56fe\u7247\u6765\u6e90\uff1a https://en.wikipedia.org/wiki/Tiger \u8f93\u51fa\uff1a Convert to onnx success ! >> onnx / model / resnet_v15_of_best_model_val_top1_77318 . onnx data / tiger . jpg Are the results equal ? Yes Class : tiger , Panthera tigris ; score : 0.8112028241157532 \u5982\u4f55\u751f\u6210 ONNX \u6a21\u578b \u00b6 \u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u8f6c\u6362 OneFlow \u7684 ResNet \u6a21\u578b\u81f3 ONNX \u6a21\u578b\uff0c\u5e76\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5229\u7528 onnx runtime \u8fdb\u884c\u9884\u6d4b\u7684\u4f8b\u5b50\uff0c\u540c\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u6b65\u9aa4\u6765\u5b8c\u6210\u81ea\u5df1\u8bad\u7ec3\u7684 ResNet \u6216\u5176\u4ed6\u6a21\u578b\u7684\u8f6c\u6362\u3002 \u6b65\u9aa4\u4e00\uff1a\u5c06\u6a21\u578b\u6743\u91cd\u4fdd\u5b58\u5230\u672c\u5730 \u9996\u5148\u6307\u5b9a\u5f85\u8f6c\u6362\u7684 OneFlow \u6a21\u578b\u8def\u5f84\uff0c\u7136\u540e\u6307\u5b9a\u8f6c\u6362\u540e\u7684 ONNX \u6a21\u578b\u5b58\u653e\u8def\u5f84\uff0c\u4f8b\u5982\u793a\u4f8b\u4e2d\uff1a #set up your model path flow_weights_path = 'resnet_v15_of_best_model_val_top1_77318' onnx_model_dir = 'onnx/model' \u6b65\u9aa4\u4e8c\uff1a\u65b0\u5efa\u4e00\u4e2a\u7528\u4e8e\u63a8\u7406\u7684 job function \u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u7528\u4e8e\u63a8\u7406\u7684 job function\uff0c\u5b83\u53ea\u5305\u542b\u7f51\u7edc\u7ed3\u6784\u672c\u8eab\uff0c\u4e0d\u5305\u542b\u8bfb\u53d6 OFRecord \u7684\u7b97\u5b50\uff0c\u5e76\u4e14\u76f4\u63a5\u63a5\u53d7 numpy \u6570\u7ec4\u5f62\u5f0f\u7684\u8f93\u5165\u3002\u53ef\u53c2\u8003 resnet\\_to\\_onnx.py \u4e2d\u7684 InferenceNet \u3002 \u6b65\u9aa4\u4e09\uff1a\u8c03\u7528 flow.onnx.export \u65b9\u6cd5 \u63a5\u4e0b\u6765\u4ee3\u7801\u4e2d\u4f1a\u8c03\u7528 oneflow_to_onnx() \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u5305\u542b\u4e86\u6838\u5fc3\u7684\u6a21\u578b\u8f6c\u6362\u65b9\u6cd5\uff1a flow.onnx.export() flow.onnx.export \u5c06\u4ece OneFlow \u7f51\u7edc\u5f97\u5230 ONNX \u6a21\u578b\uff0c\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e0a\u6587\u6240\u8bf4\u7684\u4e13\u7528\u4e8e\u63a8\u7406\u7684 job function\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f OneFlow \u6a21\u578b\u8def\u5f84\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\uff08\u8f6c\u6362\u540e\uff09ONNX \u6a21\u578b\u7684\u5b58\u653e\u8def\u5f84 onnx_model = oneflow_to_onnx ( InferenceNet , flow_weights_path , onnx_model_dir , external_data = False ) \u9a8c\u8bc1 ONNX \u6a21\u578b\u7684\u6b63\u786e\u6027 \u00b6 \u751f\u6210 ONNX \u6a21\u578b\u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528 ONNX Runtime \u8fd0\u884c ONNX \u6a21\u578b\uff0c\u4ee5\u9a8c\u8bc1 OneFlow \u6a21\u578b\u548c ONNX \u6a21\u578b\u80fd\u591f\u5728\u76f8\u540c\u7684\u8f93\u5165\u4e0b\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u3002\u76f8\u5e94\u7684\u4ee3\u7801\u5728 resnet_to_onnx.py \u7684 check_equality \u3002","title":"ResNet"},{"location":"adv_examples/resnet.html#introduction","text":"","title":"\u7b80\u4ecb Introduction"},{"location":"adv_examples/resnet.html#cnn","text":"\u56fe\u50cf\u5206\u7c7b \u662f\u6307\u5c06\u56fe\u50cf\u4fe1\u606f\u4e2d\u6240\u53cd\u6620\u7684\u4e0d\u540c\u7279\u5f81\uff0c\u628a\u4e0d\u540c\u7c7b\u522b\u7684\u76ee\u6807\u533a\u5206\u5f00\u6765\u7684\u56fe\u50cf\u5904\u7406\u65b9\u6cd5\uff0c\u662f\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u5176\u4ed6\u4efb\u52a1\uff0c\u6bd4\u5982\u76ee\u6807\u68c0\u6d4b\u3001\u8bed\u4e49\u5206\u5272\u3001\u4eba\u8138\u8bc6\u522b\u7b49\u9ad8\u5c42\u89c6\u89c9\u4efb\u52a1\u7684\u57fa\u7840\u3002 ImageNet \u5927\u89c4\u6a21\u89c6\u89c9\u8bc6\u522b\u6311\u6218\u8d5b\uff08ILSVRC\uff09\uff0c\u5e38\u79f0\u4e3a ImageNet \u7ade\u8d5b\uff0c\u5305\u62ec\u56fe\u50cf\u5206\u7c7b\u3001\u7269\u4f53\u5b9a\u4f4d\uff0c\u4ee5\u53ca\u7269\u4f53\u68c0\u6d4b\u7b49\u4efb\u52a1\uff0c\u662f\u63a8\u52a8\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u53d1\u5c55\u6700\u91cd\u8981\u7684\u6bd4\u8d5b\u4e4b\u4e00\u3002 \u57282012\u5e74\u7684 ImageNet \u7ade\u8d5b\u4e2d\uff0c\u6df1\u5ea6\u5377\u79ef\u7f51\u7edc AlexNet \u6a2a\u7a7a\u51fa\u4e16\u3002\u4ee5\u8d85\u51fa\u7b2c\u4e8c\u540d10%\u4ee5\u4e0a\u7684top-5\u51c6\u786e\u7387\uff0c\u52c7\u593a ImageNet2012 \u6bd4\u8d5b\u7684\u51a0\u519b\u3002\u4ece\u6b64\uff0c\u4ee5 CNN\uff08\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff09 \u4e3a\u4ee3\u8868\u7684\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u5f00\u59cb\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u7684\u5e94\u7528\u5f00\u59cb\u5927\u653e\u5f02\u5f69\uff0c\u66f4\u591a\u7684\u66f4\u6df1\u7684CNN\u7f51\u7edc\u88ab\u63d0\u51fa\uff0c\u6bd4\u5982 ImageNet2014 \u6bd4\u8d5b\u7684\u51a0\u519b VGGNet, ImageNet2015 \u6bd4\u8d5b\u7684\u51a0\u519b ResNet\u3002","title":"\u56fe\u50cf\u5206\u7c7b\u4e0eCNN"},{"location":"adv_examples/resnet.html#resnet","text":"ResNet \u662f2015\u5e74ImageNet\u7ade\u8d5b\u7684\u51a0\u519b\u3002\u76ee\u524d\uff0cResNet \u76f8\u5bf9\u5bf9\u4e8e\u4f20\u7edf\u7684\u673a\u5668\u5b66\u4e60\u5206\u7c7b\u7b97\u6cd5\u800c\u8a00\uff0c\u6548\u679c\u5df2\u7ecf\u76f8\u5f53\u7684\u51fa\u8272\uff0c\u4e4b\u540e\u5927\u91cf\u7684\u68c0\u6d4b\uff0c\u5206\u5272\uff0c\u8bc6\u522b\u7b49\u4efb\u52a1\u4e5f\u90fd\u5728 ResNet \u57fa\u7840\u4e0a\u5b8c\u6210\u3002 OneFlow-Benchmark \u4ed3\u5e93\u4e2d\uff0c\u63d0\u4f9b ResNet50 v1.5 \u7684 OneFlow \u5b9e\u73b0\u3002\u6211\u4eec\u5728 ImageNet-2012 \u6570\u636e\u96c6\u4e0a\u8bad\u7ec390\u8f6e\u540e\uff0c\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u80fd\u591f\u8fbe\u5230\uff1a77.318%(top1)\uff0c93.622%(top5)\u3002 \u66f4\u8be6\u7ec6\u7684\u7f51\u7edc\u53c2\u6570\u5bf9\u9f50\u5de5\u4f5c\uff0c\u89c1 OneFlow-Benchmark\u7684cnns \u90e8\u5206 \u5173\u4e8e ResNet50 v1.5 \u7684\u8bf4\u660e\uff1a ResNet50 v1.5 \u662f\u539f\u59cb ResNet50 v1 \u7684\u4e00\u4e2a\u6539\u8fdb\u7248\u672c\uff0c\u76f8\u5bf9\u4e8e\u539f\u59cb\u7684\u6a21\u578b\uff0c\u7cbe\u5ea6\u7a0d\u6709\u63d0\u5347 (~0.5% top1)\uff0c\u8be6\u7ec6\u8bf4\u660e\u53c2\u89c1 \u8fd9\u91cc \u3002 \u51c6\u5907\u597d\u4eb2\u81ea\u52a8\u624b\uff0c\u590d\u73b0\u4e0a\u9762\u7684\u7ed3\u679c\u4e86\u5417\uff1f \u4e0b\u9762\uff0c\u672c\u6587\u5c31\u4ee5\u4e0a\u9762\u7684 ResNet50 \u4e3a\u4f8b\uff0c\u4e00\u6b65\u6b65\u5c55\u73b0\u5982\u4f55\u4f7f\u7528 OneFlow \u8fdb\u884c ResNet50 \u7f51\u7edc\u7684\u8bad\u7ec3\u548c\u9884\u6d4b\u3002 \u4e3b\u8981\u5185\u5bb9\u5305\u62ec\uff1a \u51c6\u5907\u5de5\u4f5c \u9879\u76ee\u5b89\u88c5\u548c\u51c6\u5907\u5de5\u4f5c \u5feb\u901f\u5f00\u59cb \u9884\u6d4b/\u63a8\u7406 \u8bad\u7ec3\u548c\u9a8c\u8bc1 \u8bc4\u4f30 \u66f4\u8be6\u7ec6\u7684\u8bf4\u660e \u5206\u5e03\u5f0f\u8bad\u7ec3 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u4e0e\u9884\u6d4b \u8fdb\u9636 \u53c2\u6570\u5bf9\u9f50 \u6570\u636e\u96c6\u5236\u4f5c(ImageNet2012) OneFlow \u6a21\u578b\u8f6c ONNX \u6a21\u578b","title":"ResNet"},{"location":"adv_examples/resnet.html#requirements","text":"\u522b\u62c5\u5fc3\uff0c\u4f7f\u7528 OneFlow \u975e\u5e38\u5bb9\u6613\uff0c\u53ea\u8981\u51c6\u5907\u597d\u4e0b\u9762\u4e09\u6b65\uff0c\u5373\u53ef\u5f00\u59cb OneFlow \u7684\u56fe\u50cf\u8bc6\u522b\u4e4b\u65c5\u3002 \u5b89\u88c5 OneFlow\uff0c\u5b89\u88c5\u65b9\u5f0f\u53c2\u8003 OneFlow\u9879\u76ee\u4e3b\u9875 \u514b\u9686/\u4e0b\u8f7d OneFlow-Benchmark \u4ed3\u5e93\u3002 git clone git@github.com:Oneflow-Inc/OneFlow-Benchmark.git cd OneFlow-Benchmark/Classification/cnns \u51c6\u5907\u6570\u636e\u96c6\uff08\u53ef\u9009\uff09 \u76f4\u63a5\u4f7f\u7528 synthetic \u865a\u62df\u5408\u6210\u6570\u636e\u96c6 \u4e0b\u8f7d\u6211\u4eec\u5236\u4f5c\u7684 Imagenet(2012) \u8ff7\u4f60\u6570\u636e\u96c6 \u89e3\u538b\u653e\u5165data\u76ee\u5f55 \u6216\u8005\uff1a\u5236\u4f5c\u5b8c\u6574 OFRecord \u683c\u5f0f\u7684 ImageNet \u6570\u636e\u96c6\uff08\u89c1\u4e0b\u6587\u8fdb\u9636\u90e8\u5206\uff09 \u6211\u4eec\u63d0\u4f9b\u4e86\u901a\u7528\u811a\u672c\uff1a train.sh \u548c inference.sh \uff0c\u5b83\u4eec\u9002\u7528\u4e8e\u6b64\u4ed3\u5e93\u4e0b\u6240\u6709cnn\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3\u3001\u9a8c\u8bc1\u3001\u63a8\u7406\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570\u4f7f\u7528\u4e0d\u540c\u7684\u6a21\u578b\u3001\u6570\u636e\u96c6\u6765\u8bad\u7ec3/\u63a8\u7406\u3002 \u5173\u4e8e\u6a21\u578b\u7684\u8bf4\u660e\uff1a \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528resnet50\uff0c\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6539\u52a8\u811a\u672c\u4e2d\u7684--model\u53c2\u6570\u6307\u5b9a\u5176\u4ed6\u6a21\u578b\uff0c\u5982\uff1a --model=\"resnet50\" \uff0c --model=\"vgg\" \u7b49\u3002 \u5173\u4e8e\u6570\u636e\u96c6\u7684\u8bf4\u660e\uff1a 1\uff09\u4e3a\u4e86\u4f7f\u8bfb\u8005\u5feb\u901f\u4e0a\u624b\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 synthetic \u865a\u62df\u5408\u6210\u6570\u636e\uff0c\u201c\u5408\u6210\u6570\u636e\u201d\u662f\u6307\u4e0d\u901a\u8fc7\u78c1\u76d8\u52a0\u8f7d\u6570\u636e\uff0c\u800c\u662f\u76f4\u63a5\u5728\u5185\u5b58\u4e2d\u751f\u6210\u4e00\u4e9b\u968f\u673a\u6570\u636e\uff0c\u4f5c\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u6570\u636e\u8f93\u5165\u6e90\u3002 2\uff09\u540c\u65f6\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5c0f\u7684\u8ff7\u4f60\u793a\u4f8b\u6570\u636e\u96c6\u3002\u76f4\u63a5\u4e0b\u8f7d\u89e3\u538b\u81f3 cnn \u9879\u76ee\u7684 data \u76ee\u5f55\uff0c\u5373\u53ef\u5feb\u901f\u5f00\u59cb\u8bad\u7ec3\u3002\u8bfb\u8005\u53ef\u4ee5\u5728\u719f\u6089\u4e86\u6d41\u7a0b\u540e\uff0c\u53c2\u8003\u6570\u636e\u96c6\u5236\u4f5c\u90e8\u5206\uff0c\u5236\u4f5c\u5b8c\u6574\u7684 Imagenet2012 \u6570\u636e\u96c6\u3002 3\uff09\u4f7f\u7528 OFRcord \u683c\u5f0f\u7684\u6570\u636e\u96c6\u53ef\u4ee5\u63d0\u9ad8\u6570\u636e\u52a0\u8f7d\u6548\u7387\uff08\u4f46\u8fd9\u975e\u5fc5\u987b\uff0c\u53c2\u8003 \u6570\u636e\u8f93\u5165 \uff0cOneFlow \u652f\u6301\u76f4\u63a5\u52a0\u8f7d numpy \u6570\u636e\uff09\u3002","title":"\u51c6\u5907\u5de5\u4f5c Requirements"},{"location":"adv_examples/resnet.html#quick-start","text":"\u90a3\u4e48\u63a5\u4e0b\u6765\uff0c\u7acb\u9a6c\u5f00\u59cb OneFlow \u7684\u56fe\u50cf\u8bc6\u522b\u4e4b\u65c5\u5427\uff01 \u9996\u5148\uff0c\u5207\u6362\u5230\u76ee\u5f55\uff1a cd OneFlow-Benchmark/Classification/cnns","title":"\u5feb\u901f\u5f00\u59cb Quick Start"},{"location":"adv_examples/resnet.html#_1","text":"","title":"\u9884\u8bad\u7ec3\u6a21\u578b"},{"location":"adv_examples/resnet.html#resnet50","text":"resnet50_v1.5_model (validation accuracy: 77.318% top1\uff0c93.622% top5 )","title":"resnet50"},{"location":"adv_examples/resnet.html#_2","text":"\u4e0b\u8f7d\u597d\u9884\u8bad\u7ec3\u6a21\u578b\u540e\uff0c\u89e3\u538b\u540e\u653e\u5165\u5f53\u524d\u76ee\u5f55\uff0c\u7136\u540e\u6267\u884c\uff1a sh inference.sh \u6b64\u811a\u672c\u5c06\u8c03\u7528\u6a21\u578b\u5bf9\u8fd9\u5f20\u91d1\u9c7c\u56fe\u7247\u8fdb\u884c\u5206\u7c7b\uff1a \u82e5\u8f93\u51fa\u4e0b\u9762\u7684\u5185\u5bb9\uff0c\u5219\u8868\u793a\u9884\u6d4b\u6210\u529f\uff1a data/fish.jpg 0.87059885 goldfish, Carassius auratus \u53ef\u89c1\uff0c\u6a21\u578b\u5224\u65ad\u8fd9\u5f20\u56fe\u7247\u670987.05%\u7684\u6982\u7387\u662f\u91d1\u9c7c goldfish\u3002","title":"\u9884\u6d4b/\u63a8\u7406"},{"location":"adv_examples/resnet.html#train-validation","text":"\u8bad\u7ec3\u540c\u6837\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u6267\u884c\uff1a sh train.sh \u5373\u53ef\u5f00\u59cb\u6a21\u578b\u7684\u8bad\u7ec3\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a Loading synthetic data. Loading synthetic data. Saving model to ./output/snapshots/model_save-20200723124215/snapshot_initial_model. Init model on demand. train: epoch 0, iter 10, loss: 7.197278, top_1: 0.000000, top_k: 0.000000, samples/s: 61.569 train: epoch 0, iter 20, loss: 6.177684, top_1: 0.000000, top_k: 0.000000, samples/s: 122.555 Saving model to ./output/snapshots/model_save-20200723124215/snapshot_epoch_0. train: epoch 0, iter 30, loss: 3.988656, top_1: 0.525000, top_k: 0.812500, samples/s: 120.337 train: epoch 1, iter 10, loss: 1.185733, top_1: 1.000000, top_k: 1.000000, samples/s: 80.705 train: epoch 1, iter 20, loss: 1.042017, top_1: 1.000000, top_k: 1.000000, samples/s: 118.478 Saving model to ./output/snapshots/model_save-20200723124215/snapshot_epoch_1. ... \u4e3a\u4e86\u65b9\u4fbf\u8fd0\u884c\u6f14\u793a\uff0c\u6211\u4eec\u9ed8\u8ba4\u4f7f\u7528synthetic\u865a\u62df\u5408\u6210\u6570\u636e\u96c6\uff0c\u4f7f\u60a8\u53ef\u4ee5\u5feb\u901f\u770b\u5230\u6a21\u578b\u8fd0\u884c\u7684\u6548\u679c \u540c\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u8ff7\u4f60\u793a\u4f8b\u6570\u636e\u96c6 \uff0c\u4e0b\u8f7d\u89e3\u538b\u540e\u653e\u5165 cnn \u9879\u76ee\u7684 data \u76ee\u5f55\u5373\u53ef\uff0c\u7136\u540e\u4fee\u6539\u8bad\u7ec3\u811a\u672c\u5982\u4e0b\uff1a rm -rf core.* rm -rf ./output/snapshots/* DATA_ROOT=data/imagenet/ofrecord python3 of_cnn_train_val.py \\ --train_data_dir=$DATA_ROOT/train \\ --num_examples=50 \\ --train_data_part_num=1 \\ --val_data_dir=$DATA_ROOT/validation \\ --num_val_examples=50 \\ --val_data_part_num=1 \\ --num_nodes=1 \\ --gpu_num_per_node=1 \\ --model_update=\"momentum\" \\ --learning_rate=0.001 \\ --loss_print_every_n_iter=1 \\ --batch_size_per_device=16 \\ --val_batch_size_per_device=10 \\ --num_epoch=10 \\ --model=\"resnet50\" \u8fd0\u884c\u6b64\u811a\u672c\uff0c\u5c06\u5728\u4ec5\u670950\u5f20\u91d1\u9c7c\u56fe\u7247\u7684\u8ff7\u4f60 ImageNet \u6570\u636e\u96c6\u4e0a\uff0c\u8bad\u7ec3\u51fa\u4e00\u4e2a\u5206\u7c7b\u6a21\u578b\uff0c\u5229\u7528\u5b83\uff0c\u4f60\u53ef\u4ee5\u5bf9\u91d1\u9c7c\u56fe\u7247\u8fdb\u884c\u5206\u7c7b\u3002 \u4e0d\u8981\u7740\u6025\uff0c\u5982\u679c\u60a8\u9700\u8981\u5728\u5b8c\u6574\u7684 ImageNet2012 \u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u8bf7\u53c2\u8003\uff1a OneFlow-Benchmark \u4ed3\u5e93\u3002","title":"\u8bad\u7ec3\u548c\u9a8c\u8bc1\uff08Train &amp; Validation\uff09"},{"location":"adv_examples/resnet.html#evaluate","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u6216\u8005\u6211\u4eec\u63d0\u4f9b\u7684 resnet50_v1.5_model \uff08\u89e3\u538b\u540e\u653e\u5165\u5f53\u524d\u76ee\u5f55\uff09\uff0c\u5bf9resnet50\u6a21\u578b\u7684\u7cbe\u5ea6\u8fdb\u884c\u8bc4\u4f30\u3002 \u53ea\u9700\u8fd0\u884c\uff1a sh evaluate.sh \u5373\u53ef\u83b7\u5f97\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u572850000\u5f20\u9a8c\u8bc1\u96c6\u4e0a\u7684\u51c6\u786e\u7387\uff1a Time stamp: 2020-07-27-09:28:28 Restoring model from resnet_v15_of_best_model_val_top1_77318. I0727 09:28:28.773988162 8411 ev_epoll_linux.c:82] Use of signals is disabled. Epoll engine will not be used Loading data from /dataset/ImageNet/ofrecord/validation validation: epoch 0, iter 195, top_1: 0.773277, top_k: 0.936058, samples/s: 1578.325 validation: epoch 0, iter 195, top_1: 0.773237, top_k: 0.936078, samples/s: 1692.303 validation: epoch 0, iter 195, top_1: 0.773297, top_k: 0.936018, samples/s: 1686.896 \u6267\u884c sh evaluate.sh \u524d\uff0c\u786e\u4fdd\u51c6\u5907\u4e86 ImageNet(2012) \u7684\u9a8c\u8bc1\u96c6\uff0c\u9a8c\u8bc1\u96c6\u5236\u4f5c\u65b9\u6cd5\u8bf7\u53c2\u8003\uff1a OneFlow-Benchmark \u4ed3\u5e93\u3002 \u4ece3\u8f6e\u7684\u8bc4\u4f30\u7ed3\u679c\u6765\u770b\uff0c\u6211\u4eec\u7684\u6a21\u578b\u5728 ImageNet(2012) \u4e0a\u5df2\u7ecf\u8fbe\u5230\u4e8677.32+%\u7684 top1 \u7cbe\u5ea6\u3002 \u6700\u540e\uff0c\u606d\u559c\u4f60\uff01\u5b8c\u6210\u4e86 Resnet \u6a21\u578b\u5728 ImageNet \u4e0a\u5b8c\u6574\u7684\u8bad\u7ec3/\u9a8c\u8bc1\u3001\u63a8\u7406\u548c\u8bc4\u4f30\uff0c\u4e3a\u81ea\u5df1\u9f13\u4e2a\u638c\u5427\uff01","title":"\u8bc4\u4f30(Evaluate)"},{"location":"adv_examples/resnet.html#details","text":"","title":"\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e Details"},{"location":"adv_examples/resnet.html#_3","text":"\u7b80\u5355\u800c\u6613\u7528\u7684\u5206\u5e03\u5f0f\uff0c\u662f OneFlow \u7684\u4e3b\u6253\u7279\u8272\u4e4b\u4e00\u3002 OneFlow \u6846\u67b6\u4ece\u5e95\u5c42\u8bbe\u8ba1\u4e0a\uff0c\u5c31\u539f\u751f\u652f\u6301\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u5c24\u5176\u5bf9\u4e8e\u5206\u5e03\u5f0f\u7684\u6570\u636e\u5e76\u884c\uff0c\u7528\u6237\u5b8c\u5168\u4e0d\u7528\u64cd\u5fc3\u7b97\u6cd5\u4ece\u5355\u673a\u5355\u5361\u6269\u5c55\u5230\u591a\u673a\u591a\u5361\u65f6\uff0c\u6570\u636e\u5982\u4f55\u5212\u5206\u4ee5\u53ca\u540c\u6b65\u7684\u95ee\u9898\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528 OneFlow\uff0c\u7528\u6237\u4ee5\u5355\u673a\u5355\u5361\u7684\u89c6\u89d2\u5199\u597d\u7684\u4ee3\u7801\uff0c \u81ea\u52a8\u5177\u5907\u591a\u673a\u591a\u5361\u5206\u5e03\u5f0f\u6570\u636e\u5e76\u884c\u7684\u80fd\u529b\u3002","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"adv_examples/resnet.html#_4","text":"\u8fd8\u662f\u4ee5\u4e0a\u9762\"\u5feb\u901f\u5f00\u59cb\"\u90e8\u5206\u6f14\u793a\u7684\u4ee3\u7801\u4e3a\u4f8b\uff0c\u5728 train.sh \u4e2d\uff0c\u53ea\u8981\u7528 --num_nodes \u6307\u5b9a\u8282\u70b9\uff08\u673a\u5668\uff09\u4e2a\u6570\uff0c\u540c\u65f6\u7528 --node_ips \u6307\u5b9a\u8282\u70b9\u7684 IP \u5730\u5740\uff0c\u7136\u540e\u7528 --gpu_num_per_node \u6307\u5b9a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u4f7f\u7528\u7684\u5361\u6570\uff0c\u5c31\u8f7b\u677e\u5730\u5b8c\u6210\u4e86\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u57282\u673a8\u5361\u4e0a\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\u914d\u7f6e\uff1a # train.sh python3 of_cnn_train_val.py \\ --num_nodes=2 \\ --node_ips=\"192.168.1.1, 192.168.1.2\" --gpu_num_per_node=4 \\ ... --model=\"resnet50\" \u7136\u540e\u5206\u522b\u5728\u4e24\u53f0\u673a\u5668\u4e0a\uff0c\u540c\u65f6\u6267\u884c\uff1a ./train.sh \u7a0b\u5e8f\u542f\u52a8\u540e\uff0c\u901a\u8fc7 watch -n 0.1 nvidia-smi \u547d\u4ee4\u53ef\u4ee5\u770b\u5230\uff0c\u4e24\u53f0\u673a\u5668\u7684 GPU \u90fd\u5f00\u59cb\u4e86\u5de5\u4f5c\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4f1a\u5728 --node_ips \u8bbe\u7f6e\u4e2d\u7684\u7b2c\u4e00\u53f0\u673a\u5668\u7684\u5c4f\u5e55\u4e0a\uff0c\u6253\u5370\u8f93\u51fa\u3002","title":"\u5982\u4f55\u914d\u7f6e\u5e76\u8fd0\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1f"},{"location":"adv_examples/resnet.html#_5","text":"\u76ee\u524d\uff0cOneFlow \u5df2\u7ecf\u539f\u751f\u652f\u6301 float16/float32 \u7684\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u3002\u8bad\u7ec3\u65f6\uff0c\u6a21\u578b\u53c2\u6570\uff08\u6743\u91cd\uff09\u4f7f\u7528 float16 \u8fdb\u884c\u8bad\u7ec3\uff0c\u540c\u65f6\u4fdd\u7559 float32 \u7528\u4f5c\u68af\u5ea6\u66f4\u65b0\u548c\u8ba1\u7b97\u8fc7\u7a0b\u3002\u7531\u4e8e\u53c2\u6570\u7684\u5b58\u50a8\u51cf\u534a\uff0c\u4f1a\u5e26\u6765\u8bad\u7ec3\u901f\u5ea6\u7684\u63d0\u5347\u3002 \u5728 OneFlow \u4e2d\u5f00\u542f float16/float32 \u7684\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u6a21\u5f0f\uff0cResNet50 \u7684\u8bad\u7ec3\u901f\u5ea6\u7406\u8bba\u4e0a\u80fd\u8fbe\u5230 1.7 \u500d\u7684\u52a0\u901f\u3002","title":"\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u4e0e\u9884\u6d4b"},{"location":"adv_examples/resnet.html#float16-float32","text":"\u53ea\u9700\u8981\u5728 train.sh \u811a\u672c\u4e2d\u6dfb\u52a0\u53c2\u6570 --use_fp16=True \u5373\u53ef\u3002","title":"\u5982\u4f55\u5f00\u542f float16 / float32 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\uff1f"},{"location":"adv_examples/resnet.html#_6","text":"\u6211\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5728 ImageNet2012 \u5b8c\u6574\u8bad\u7ec3\u4e8690\u4e2a epoch \u7684\u6df7\u5408\u7cbe\u5ea6\u6a21\u578b\uff0cTop_1\uff1a77.33% \u60a8\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u4f7f\u7528\uff1a resnet50_v15_fp16","title":"\u6df7\u5408\u7cbe\u5ea6\u6a21\u578b"},{"location":"adv_examples/resnet.html#advanced","text":"","title":"\u8fdb\u9636 Advanced"},{"location":"adv_examples/resnet.html#_7","text":"OneFlow \u7684 ResNet50 \u5b9e\u73b0\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u548c \u82f1\u4f1f\u8fbe\u7684 Mxnet \u7248\u5b9e\u73b0 \u5bf9\u9f50\uff0c\u6211\u4eec\u4ece learning rate \u5b66\u4e60\u7387\uff0c\u4f18\u5316\u5668 Optimizer \u7684\u9009\u62e9\uff0c\u6570\u636e\u589e\u5f3a\u7684\u56fe\u50cf\u53c2\u6570\u8bbe\u5b9a\uff0c\u5230\u66f4\u7ec6\u7684\u6bcf\u4e00\u5c42\u7f51\u7edc\u7684\u5f62\u6001\uff0cbias\uff0cweight \u521d\u59cb\u5316\u7b49\u90fd\u505a\u4e86\u7ec6\u81f4\u4e14\u51e0\u4e4e\u5b8c\u5168\u4e00\u81f4\u7684\u5bf9\u9f50\u5de5\u4f5c\u3002\u5177\u4f53\u7684\u53c2\u6570\u5bf9\u9f50\u5de5\u4f5c\uff0c\u8bf7\u53c2\u8003\uff1a OneFlow-Benchmark \u4ed3\u5e93","title":"\u53c2\u6570\u5bf9\u9f50"},{"location":"adv_examples/resnet.html#_8","text":"","title":"\u6570\u636e\u96c6\u5236\u4f5c"},{"location":"adv_examples/resnet.html#_9","text":"\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u7684\u516c\u5f00\u6570\u636e\u96c6\u6709CIFAR\uff0cImageNet \u7b49\u7b49\uff0c\u8fd9\u4e9b\u6570\u636e\u96c6\u4e2d\uff0c\u662f\u4ee5 jpeg \u7684\u683c\u5f0f\u63d0\u4f9b\u539f\u59cb\u7684\u56fe\u7247\u3002 CIFAR \u662f\u7531Hinton \u7684\u5b66\u751f Alex Krizhevsky \u548c Ilya Sutskever \u6574\u7406\u7684\u4e00\u4e2a\u7528\u4e8e\u8bc6\u522b\u666e\u9002\u7269\u4f53\u7684\u5c0f\u578b\u6570\u636e\u96c6\u3002\u5305\u62ecCIFAR-10\u548cCIFAR-100\u3002 ImageNet ImageNet \u6570\u636e\u96c6\uff0c\u4e00\u822c\u662f\u63072010-2017\u5e74\u95f4\u5927\u89c4\u6a21\u89c6\u89c9\u8bc6\u522b\u7ade\u8d5b (ILSVRC) \u7684\u6240\u4f7f\u7528\u7684\u6570\u636e\u96c6\u7684\u7edf\u79f0\u3002ImageNet \u6570\u636e\u4ece2010\u5e74\u6765\u7a0d\u6709\u53d8\u5316\uff0c\u5e38\u7528 ImageNet-2012 \u6570\u636e\u96c6\u5305\u542b1000\u4e2a\u7c7b\u522b\uff0c\u5176\u4e2d\u8bad\u7ec3\u96c6\u5305\u542b1,281,167\u5f20\u56fe\u7247\uff0c\u6bcf\u4e2a\u7c7b\u522b\u6570\u636e732\u81f31300\u5f20\u4e0d\u7b49\uff0c\u9a8c\u8bc1\u96c6\u5305\u542b50,000\u5f20\u56fe\u7247\uff0c\u5e73\u5747\u6bcf\u4e2a\u7c7b\u522b50\u5f20\u56fe\u7247\u3002 \u5b8c\u6574\u7684 ImageNet(2012)\u5236\u4f5c\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003 tools \u76ee\u5f55\u4e0b\u7684 README\u8bf4\u660e","title":"\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u6570\u636e\u96c6\u7b80\u4ecb"},{"location":"adv_examples/resnet.html#oneflow-onnx","text":"","title":"OneFlow \u6a21\u578b\u8f6c ONNX \u6a21\u578b"},{"location":"adv_examples/resnet.html#_10","text":"ONNX (Open Neural Network Exchange) \u662f\u4e00\u79cd\u8f83\u4e3a\u5e7f\u6cdb\u4f7f\u7528\u7684\u795e\u7ecf\u7f51\u7edc\u4e2d\u95f4\u683c\u5f0f\uff0c\u901a\u8fc7 ONNX \u683c\u5f0f\uff0cOneFlow \u6a21\u578b\u53ef\u4ee5\u88ab\u8bb8\u591a\u90e8\u7f72\u6846\u67b6\uff08\u5982 OpenVINO\u3001ONNX Runtime \u548c\u79fb\u52a8\u7aef\u7684 ncnn\u3001tnn\u3001TEngine \u7b49\uff09\u6240\u4f7f\u7528\u3002\u8fd9\u4e00\u8282\u4ecb\u7ecd\u5982\u4f55\u5c06\u8bad\u7ec3\u597d\u7684 ResNet50 v1.5 \u6a21\u578b\u8f6c\u6362\u4e3a ONNX \u6a21\u578b\u5e76\u9a8c\u8bc1\u6b63\u786e\u6027\u3002","title":"\u7b80\u4ecb"},{"location":"adv_examples/resnet.html#_11","text":"\u6211\u4eec\u63d0\u4f9b\u4e86\u5b8c\u6574\u4ee3\u7801\uff1a resnet_to_onnx.py \u5e2e\u4f60\u8f7b\u677e\u5b8c\u6210\u6a21\u578b\u7684\u8f6c\u6362\u548c\u6d4b\u8bd5\u7684\u5de5\u4f5c \u6b65\u9aa4\u4e00\uff1a \u4e0b\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff1a resnet50_v1.5_model \uff0c\u89e3\u538b\u540e\u653e\u5165\u5f53\u524d\u76ee\u5f55 \u6b65\u9aa4\u4e8c\uff1a \u6267\u884c\uff1a python3 resnet_to_onnx.py \u6b64\u4ee3\u7801\u5c06\u5b8c\u6210 OneFlow \u6a21\u578b -> ONNX \u6a21\u578b\u7684\u8f6c\u5316\uff0c\u7136\u540e\u4f7f\u7528 ONNX Runtime \u52a0\u8f7d\u8f6c\u6362\u540e\u7684\u6a21\u578b\u5bf9\u5355\u5f20\u56fe\u7247\u8fdb\u884c\u6d4b\u8bd5\u3002\u6d4b\u8bd5\u56fe\u7247\u5982\u4e0b\uff1a \u200b \u56fe\u7247\u6765\u6e90\uff1a https://en.wikipedia.org/wiki/Tiger \u8f93\u51fa\uff1a Convert to onnx success ! >> onnx / model / resnet_v15_of_best_model_val_top1_77318 . onnx data / tiger . jpg Are the results equal ? Yes Class : tiger , Panthera tigris ; score : 0.8112028241157532","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"adv_examples/resnet.html#onnx","text":"\u4e0a\u9762\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u8f6c\u6362 OneFlow \u7684 ResNet \u6a21\u578b\u81f3 ONNX \u6a21\u578b\uff0c\u5e76\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5229\u7528 onnx runtime \u8fdb\u884c\u9884\u6d4b\u7684\u4f8b\u5b50\uff0c\u540c\u6837\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u6b65\u9aa4\u6765\u5b8c\u6210\u81ea\u5df1\u8bad\u7ec3\u7684 ResNet \u6216\u5176\u4ed6\u6a21\u578b\u7684\u8f6c\u6362\u3002 \u6b65\u9aa4\u4e00\uff1a\u5c06\u6a21\u578b\u6743\u91cd\u4fdd\u5b58\u5230\u672c\u5730 \u9996\u5148\u6307\u5b9a\u5f85\u8f6c\u6362\u7684 OneFlow \u6a21\u578b\u8def\u5f84\uff0c\u7136\u540e\u6307\u5b9a\u8f6c\u6362\u540e\u7684 ONNX \u6a21\u578b\u5b58\u653e\u8def\u5f84\uff0c\u4f8b\u5982\u793a\u4f8b\u4e2d\uff1a #set up your model path flow_weights_path = 'resnet_v15_of_best_model_val_top1_77318' onnx_model_dir = 'onnx/model' \u6b65\u9aa4\u4e8c\uff1a\u65b0\u5efa\u4e00\u4e2a\u7528\u4e8e\u63a8\u7406\u7684 job function \u7136\u540e\u65b0\u5efa\u4e00\u4e2a\u7528\u4e8e\u63a8\u7406\u7684 job function\uff0c\u5b83\u53ea\u5305\u542b\u7f51\u7edc\u7ed3\u6784\u672c\u8eab\uff0c\u4e0d\u5305\u542b\u8bfb\u53d6 OFRecord \u7684\u7b97\u5b50\uff0c\u5e76\u4e14\u76f4\u63a5\u63a5\u53d7 numpy \u6570\u7ec4\u5f62\u5f0f\u7684\u8f93\u5165\u3002\u53ef\u53c2\u8003 resnet\\_to\\_onnx.py \u4e2d\u7684 InferenceNet \u3002 \u6b65\u9aa4\u4e09\uff1a\u8c03\u7528 flow.onnx.export \u65b9\u6cd5 \u63a5\u4e0b\u6765\u4ee3\u7801\u4e2d\u4f1a\u8c03\u7528 oneflow_to_onnx() \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u5305\u542b\u4e86\u6838\u5fc3\u7684\u6a21\u578b\u8f6c\u6362\u65b9\u6cd5\uff1a flow.onnx.export() flow.onnx.export \u5c06\u4ece OneFlow \u7f51\u7edc\u5f97\u5230 ONNX \u6a21\u578b\uff0c\u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e0a\u6587\u6240\u8bf4\u7684\u4e13\u7528\u4e8e\u63a8\u7406\u7684 job function\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f OneFlow \u6a21\u578b\u8def\u5f84\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\uff08\u8f6c\u6362\u540e\uff09ONNX \u6a21\u578b\u7684\u5b58\u653e\u8def\u5f84 onnx_model = oneflow_to_onnx ( InferenceNet , flow_weights_path , onnx_model_dir , external_data = False )","title":"\u5982\u4f55\u751f\u6210 ONNX \u6a21\u578b"},{"location":"adv_examples/resnet.html#onnx_1","text":"\u751f\u6210 ONNX \u6a21\u578b\u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528 ONNX Runtime \u8fd0\u884c ONNX \u6a21\u578b\uff0c\u4ee5\u9a8c\u8bc1 OneFlow \u6a21\u578b\u548c ONNX \u6a21\u578b\u80fd\u591f\u5728\u76f8\u540c\u7684\u8f93\u5165\u4e0b\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u3002\u76f8\u5e94\u7684\u4ee3\u7801\u5728 resnet_to_onnx.py \u7684 check_equality \u3002","title":"\u9a8c\u8bc1 ONNX \u6a21\u578b\u7684\u6b63\u786e\u6027"},{"location":"adv_examples/wide_deep.html","text":"Wide & Deep \u00b6 HugeCTR \u662f\u82f1\u4f1f\u8fbe\u63d0\u4f9b\u7684\u4e00\u79cd\u9ad8\u6548\u7684GPU\u6846\u67b6\uff0c\u4e13\u4e3a\u70b9\u51fb\u7387\uff08CTR\uff09\u4f30\u8ba1\u8bad\u7ec3\u800c\u8bbe\u8ba1\u3002 OneFlow\u5bf9\u6807HugeCTR\u642d\u5efa\u4e86Wide & Deep \u5b66\u4e60\u7f51\u7edc\uff08WDL)\u3002OneFlow-WDL\u7f51\u7edc\u5b9e\u73b0\u4e86\u6a21\u578b\u5e76\u884c\u4e0e\u7a00\u758f\u66f4\u65b0\uff0c\u57288\u536112G TitanV\u7684\u670d\u52a1\u5668\u4e0a\u5b9e\u73b0\u652f\u6301\u8d85\u8fc74\u4ebf\u7684\u8bcd\u8868\u5927\u5c0f\uff0c\u800c\u4e14\u6027\u80fd\u6ca1\u6709\u635f\u5931\u4e0e\u5c0f\u8bcd\u8868\u6027\u80fd\u76f8\u5f53\u3002 \u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528OneFlow-WDL\u7f51\u7edc\u8fdb\u884c\u8bad\u7ec3\uff0c\u4ee5\u53ca\u4e00\u4e9b\u8bad\u7ec3\u7ed3\u679c\u53ca\u5206\u6790\u3002 \u73af\u5883\u548c\u51c6\u5907 \u00b6 \u8fd0\u884cOneFlow-WDL\u9700\u8981\u6709\u5b89\u88c5\u597dOneFlow\u7684python\u73af\u5883\uff0c\u5e76\u5b89\u88c5\u4e86 scikit-learn \u3002 \u8f6f\u4ef6\u8981\u6c42 \u00b6 python 3.x\uff08\u63a8\u8350\uff09 OneFlow 0.x scikit-learn \u6570\u636e\u51c6\u5907 \u00b6 \u6211\u4eec\u51c6\u5907\u4e86\u4e00\u4e2a\u5c0f\u7684 \u6837\u672c\u6570\u636e\u96c6 \uff0c\u53ef\u4ee5\u4e0b\u8f7d\u8fdb\u884c\u7b80\u5355\u6d4b\u8bd5\u3002 \u6216\u8005\u53c2\u8003 \u300a\u4f7f\u7528Spark\u521b\u5efaWDL\u6570\u636e\u96c6\u300b \u4e2d\u7684\u6b65\u9aa4\uff0c\u4eceCriteoLabs\u5b98\u7f51\u4e0b\u8f7d\u539f\u59cb\u6570\u636e\u96c6\u5e76\u5236\u4f5c\u6210OneFlow\u6240\u9700\u8981\u7684OFRecord\u683c\u5f0f\u7684\u6570\u636e\u96c6\u3002 OneFlow-WDL\u811a\u672c \u00b6 OneFlow-WDL\u811a\u672c\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6 wdl_train_eval.py \uff0c\u8bf7\u4ece \u8fd9\u91cc \u4e0b\u8f7d\u3002 \u8fd0\u884cOneFlow-WDL\u811a\u672c \u00b6 EMBD_SIZE=1603616 DATA_ROOT=/path/to/wdl/ofrecord python3 wdl_train_eval.py \\ --train_data_dir $DATA_ROOT/train \\ --train_data_part_num 256 \\ --train_part_name_suffix_length=5 \\ --eval_data_dir $DATA_ROOT/val \\ --eval_data_part_num 256 \\ --max_iter=300000 \\ --loss_print_every_n_iter=1000 \\ --eval_interval=1000 \\ --batch_size=16384 \\ --wide_vocab_size=$EMBD_SIZE \\ --deep_vocab_size=$EMBD_SIZE \\ --gpu_num 1 \u901a\u5e38\u914d\u7f6e\u597d\u6570\u636e\u96c6\u7684\u4f4d\u7f6e DATA_ROOT \u540e\uff0c\u4e0a\u9762\u7684shell\u811a\u672c\u5c31\u53ef\u4ee5\u88ab\u6267\u884c\u4e86\uff0c\u5982\u679c\u5c4f\u5e55\u4e0a\u80fd\u591f\u8f93\u51fa\u4e0b\u9762\u7c7b\u4f3c\u7684\u7ed3\u679c\uff0c\u5c31\u8868\u793a\u5df2\u7ecf\u6b63\u786e\u8fd0\u884c\u3002 1000 time 2020-07-08 00:28:08.066281 loss 0.503295350909233 1000 eval_loss 0.4846755236387253 eval_auc 0.7616240146992771 2000 time 2020-07-08 00:28:11.613961 loss 0.48661992555856703 2000 eval_loss 0.4816856697201729 eval_auc 0.765256583562705 3000 time 2020-07-08 00:28:15.149135 loss 0.48245503094792364 3000 eval_loss 0.47835959643125536 eval_auc 0.7715609382514008 4000 time 2020-07-08 00:28:18.686327 loss 0.47975033831596375 4000 eval_loss 0.47925308644771575 eval_auc 0.7781267916810946 \u6d4b\u8bd5\u7ed3\u679c\u53ca\u8bf4\u660e \u00b6 \u6211\u4eec\u5728\u4e00\u53f0\u67098\u575712G\u663e\u5b58\u7684TitanV\u7684\u670d\u52a1\u5668\u4e0a\u5bf9OneFlow-WDL\u8fdb\u884c\u4e86\u4e00\u7ec4\u6d4b\u8bd5\uff0c\u5e76\u4f7f\u7528HugeCTR\u63d0\u4f9b\u7684docker\u5bb9\u5668\u505a\u4e86\u540c\u6837\u53c2\u6570\u7684\u6d4b\u8bd5\u3002 \u591aGPU\u6027\u80fd\u6d4b\u8bd5 \u00b6 \u4e3b\u8981\u6d4b\u8bd5\u76ee\u7684\u662f\u5728batch size = 16384\u7684\u60c5\u51b5\u4e0b\uff0c\u6d4b\u91cf\u4e0d\u540cGPU\u6570\u91cf\u5904\u7406\u6bcf\u4e2a\u6279\u6b21\u7684\u5e73\u5747\u65f6\u5ef6\uff08latency\uff09\u3002 \u6d4b\u8bd5\u914d\u7f6e\u4e867\u4e2a1024\u795e\u7ecf\u5355\u5143\u7684\u9690\u85cf\u5c42\u3002 \u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u6211\u4eec\u540c\u65f6\u8bb0\u5f55\u4e86\uff0c\u6d4b\u8bd5\u65f6\u5b9e\u9645\u6700\u5927\u5360\u7528\u663e\u5b58\u7684\u5927\u5c0f\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u7efc\u5408\u4e0a\u9762\u7ed3\u679c\u8868\u660e\uff0c1\u5361\u52308\u5361\uff0cOneFlow-WDL\u5728\u5360\u7528\u8f83\u5c11\u7684\u663e\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u901f\u5ea6\u8981\u6bd4HugeCTR\u5feb\u3002 batch size=16384\u6bcf\u5361\uff0c\u591a\u5361\u6027\u80fd\u6d4b\u8bd5 \u00b6 \u4e3b\u8981\u6d4b\u8bd5\u76ee\u7684\u662f\u5728\u4fdd\u8bc1\u6bcfGPU\u5361\u5904\u740616384batch size\u60c5\u51b5\u4e0b\uff0c\u4f7f\u75281\u81f38GPU\u5361\u8fdb\u884c\u8bad\u7ec3\u6bcf\u4e2a\u6279\u6b21\u7684\u5e73\u5747\u65f6\u5ef6\uff08latency\uff09\u3002 \u6d4b\u8bd5\u914d\u7f6e\u4e867\u4e2a1024\u795e\u7ecf\u5355\u5143\u7684\u9690\u85cf\u5c42\u3002 \u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u6211\u4eec\u540c\u65f6\u8bb0\u5f55\u4e86\uff0c\u6d4b\u8bd5\u65f6\u5b9e\u9645\u6700\u5927\u5360\u7528\u663e\u5b58\u7684\u5927\u5c0f\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u7efc\u5408\u4e0a\u9762\u7ed3\u679c\u8868\u660e\uff0c\u968f\u7740\u5361\u6570\u7684\u589e\u52a0\uff0c\u65f6\u5ef6\u589e\u52a0\uff0cOneFlow-WDL\u5728\u5360\u7528\u8f83\u5c11\u7684\u663e\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u901f\u5ea6\u8981\u6bd4HugeCTR\u5feb\uff1b\u56e0\u4e3a\u6bcf\u5361\u4fdd\u8bc116384 batch size\uff0cOneFlow\u6bcf\u5361\u5360\u7528\u7684\u5185\u5b58\u5e76\u65e0\u663e\u8457\u53d8\u5316\u3002 \u5355GPU\u5361\u4e0d\u540cbatch size\u6027\u80fd\u6d4b\u8bd5 \u00b6 \u4e3b\u8981\u6d4b\u8bd5\u76ee\u7684\u662f\u5728\u4e00\u4e2aGPU\u5361\u60c5\u51b5\u4e0b\uff0c\u6d4b\u91cf\u4e0d\u540cbatch size\u6bcf\u4e2a\u6279\u6b21\u7684\u5e73\u5747\u65f6\u5ef6\uff08latency\uff09\u3002 \u6d4b\u8bd5\u914d\u7f6e\u4e862\u4e2a1024\u795e\u7ecf\u5355\u5143\u7684\u9690\u85cf\u5c42\u3002 \u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u8d85\u5927\u8bcd\u8868\u6d4b\u8bd5 \u00b6 OneFlow-WDL\u4e2d\u914d\u7f6e\u4e86\u4e24\u4e2aEmbedding Table\uff1a - wide_embedding \u5927\u5c0f\u662fvocab_size x 1 - deep_embedding \u5927\u5c0f\u662fvocab_size x 16 HugeCTR\u4e2d\u8bcd\u8868\u5927\u5c0f\uff08vocab_size\uff09\u662f1603616\u3002\u6211\u4eec\u4ece3200000\u5f00\u59cb\u6d4b\u8d77\uff0c\u4e00\u76f4\u5230\u652f\u63014\u4ebf\u7684\u8bcd\u8868\u5927\u5c0f\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u4e0a\u9762\u7684\u56fe\u4e2d\uff0c\u84dd\u8272\u67f1\u5b50\u662f\u6279\u6b21\u8bad\u7ec3\u7684\u5e73\u5747\u65f6\u5ef6\uff08latency\uff09\uff0c\u7ea2\u8272\u66f2\u7ebf\u4ee3\u8868GPU\u663e\u5b58\u7684\u5360\u7528\u3002 \u7ed3\u8bba\uff1a\u968f\u7740\u8bcd\u8868\u5927\u5c0f\u7684\u589e\u5927\uff0c\u5185\u5b58\u968f\u4e4b\u589e\u5927\uff0c\u4f46latency\u6ca1\u6709\u660e\u663e\u7684\u53d8\u5316\u3002 \u6536\u655b\u6027\u6d4b\u8bd51 \u00b6 \u6211\u4eec\u9009\u53d6\u4e86batch size=512\u8fdb\u884c\u4e86\u6536\u655b\u6027\u80fd\u7684\u6d4b\u8bd5\u3002 \u4e0b\u9762\u8fd9\u5f20\u56fe\u662f\uff0c\u524d500\u6b65\u7684\u7ed3\u679c\uff0c\u6bcf\u4e00\u6b65\u8bad\u7ec3\u90fd\u5728\u9a8c\u8bc1\u96c6\u4e2d\u9009\u53d620\u6761\u8bb0\u5f55\u8fdb\u884c\u9a8c\u8bc1\uff0c\u56fe\u4e2d\u7684\u66f2\u7ebf\u5206\u522b\u662floss\u548cAUC\uff1a \u7ed3\u8bba\uff1aAUC\u8fc5\u901f\u5c31\u589e\u957f\u5230\u8d85\u8fc7\u4e860.75\u3002 \u6536\u655b\u6027\u6d4b\u8bd52 \u00b6 \u548c\u6536\u655b\u6027\u6d4b\u8bd51\u540c\u6837\u7684\u60c5\u51b5\uff0c\u8fd9\u4e00\u6b21\u662f\u6bcf\u8bad\u7ec31000\u6b65\u6253\u5370\u8bad\u7ec3loss\u7684\u5e73\u5747\u503c\uff0c\u7136\u540e\u9009\u53d620\u6761\u9a8c\u8bc1\u96c6\u6570\u636e\u8fdb\u884c\u9a8c\u8bc1\uff0c\u4e00\u5171\u8bad\u7ec330\u4e07\u6b65\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u7ed3\u8bba\u4e0e\u5206\u6790\uff1a 1. \u84dd\u8272\u7684train loss\u66f2\u7ebf\u6709\u660e\u663e\u5411\u4e0b\u7684\u53f0\u9636\uff0c\u56e0\u4e3a\u6574\u4e2a\u8bad\u7ec3\u96c6\u670936674623\u6761\u6570\u636e\uff0cbatch_size=512\u7684\u60c5\u51b5\u4e0b\uff0c\u5927\u698271630\u6b65\u5c31\u8fc7\u4e86\u6574\u4e2a\u6570\u636e\u96c6\uff08\u4e00\u4e2aepoch\uff09\uff0c30\u4e07\u6b65\u5c31\u628a\u8bad\u7ec3\u6570\u636e\u96c6\u7528\u4e864\u6b21\u591a\uff0c\u84dd\u8272\u66f2\u7ebf\u7684\u53f0\u9636\u5370\u8bc1\u4e86\u8fd9\u4e9b\u3002OneFlow\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u652f\u6301\u6570\u636e\u7684\u6253\u4e71\uff0c\u6bcf\u5f53\u6570\u636e\u96c6\u88ab\u5b8c\u6574\u7684\u7528\u5b8c\u4e00\u904d\u4e4b\u540e\uff0c\u6570\u636e\u4f1a\u88ab\u91cd\u65b0\u6253\u4e71\uff0c\u51cf\u5c11\u8fc7\u62df\u5408\u3002 2. \u6a59\u8272\u7684\u66f2\u7ebf\u662f\u9a8c\u8bc1\u96c6loss\uff0c\u5728\u524d\u4e24\u4e2aepoch\u7684\u65f6\u5019\u57fa\u672c\u4fdd\u6301\u4e0b\u964d\u7684\u8d8b\u52bf\uff0c\u4ece\u7b2c\u4e09\u4e2aepoch\u5f00\u59cb\uff0closs\u5f00\u59cb\u6709\u4e0a\u5347\u7684\u8d8b\u52bf\uff0c\u8868\u660e\u5df2\u7ecf\u8fc7\u62df\u5408\u4e86\u3002 3. \u7070\u8272\u662f\u9a8c\u8bc1\u96c6\u7684AUC\uff0cAUC\u4e5f\u662f\u5728\u7b2c\u4e8c\u4e2aepoch\u7684\u65f6\u5019\u8fbe\u5230\u4e86\u5cf0\u503c\uff0c\u8d85\u8fc7\u4e860.8\uff0c\u540e\u9762\u51e0\u4e2aepoch\u5c31\u5f00\u59cb\u4e0b\u964d\u3002","title":"Wide & Deep"},{"location":"adv_examples/wide_deep.html#wide-deep","text":"HugeCTR \u662f\u82f1\u4f1f\u8fbe\u63d0\u4f9b\u7684\u4e00\u79cd\u9ad8\u6548\u7684GPU\u6846\u67b6\uff0c\u4e13\u4e3a\u70b9\u51fb\u7387\uff08CTR\uff09\u4f30\u8ba1\u8bad\u7ec3\u800c\u8bbe\u8ba1\u3002 OneFlow\u5bf9\u6807HugeCTR\u642d\u5efa\u4e86Wide & Deep \u5b66\u4e60\u7f51\u7edc\uff08WDL)\u3002OneFlow-WDL\u7f51\u7edc\u5b9e\u73b0\u4e86\u6a21\u578b\u5e76\u884c\u4e0e\u7a00\u758f\u66f4\u65b0\uff0c\u57288\u536112G TitanV\u7684\u670d\u52a1\u5668\u4e0a\u5b9e\u73b0\u652f\u6301\u8d85\u8fc74\u4ebf\u7684\u8bcd\u8868\u5927\u5c0f\uff0c\u800c\u4e14\u6027\u80fd\u6ca1\u6709\u635f\u5931\u4e0e\u5c0f\u8bcd\u8868\u6027\u80fd\u76f8\u5f53\u3002 \u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528OneFlow-WDL\u7f51\u7edc\u8fdb\u884c\u8bad\u7ec3\uff0c\u4ee5\u53ca\u4e00\u4e9b\u8bad\u7ec3\u7ed3\u679c\u53ca\u5206\u6790\u3002","title":"Wide &amp; Deep"},{"location":"adv_examples/wide_deep.html#_1","text":"\u8fd0\u884cOneFlow-WDL\u9700\u8981\u6709\u5b89\u88c5\u597dOneFlow\u7684python\u73af\u5883\uff0c\u5e76\u5b89\u88c5\u4e86 scikit-learn \u3002","title":"\u73af\u5883\u548c\u51c6\u5907"},{"location":"adv_examples/wide_deep.html#_2","text":"python 3.x\uff08\u63a8\u8350\uff09 OneFlow 0.x scikit-learn","title":"\u8f6f\u4ef6\u8981\u6c42"},{"location":"adv_examples/wide_deep.html#_3","text":"\u6211\u4eec\u51c6\u5907\u4e86\u4e00\u4e2a\u5c0f\u7684 \u6837\u672c\u6570\u636e\u96c6 \uff0c\u53ef\u4ee5\u4e0b\u8f7d\u8fdb\u884c\u7b80\u5355\u6d4b\u8bd5\u3002 \u6216\u8005\u53c2\u8003 \u300a\u4f7f\u7528Spark\u521b\u5efaWDL\u6570\u636e\u96c6\u300b \u4e2d\u7684\u6b65\u9aa4\uff0c\u4eceCriteoLabs\u5b98\u7f51\u4e0b\u8f7d\u539f\u59cb\u6570\u636e\u96c6\u5e76\u5236\u4f5c\u6210OneFlow\u6240\u9700\u8981\u7684OFRecord\u683c\u5f0f\u7684\u6570\u636e\u96c6\u3002","title":"\u6570\u636e\u51c6\u5907"},{"location":"adv_examples/wide_deep.html#oneflow-wdl","text":"OneFlow-WDL\u811a\u672c\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6 wdl_train_eval.py \uff0c\u8bf7\u4ece \u8fd9\u91cc \u4e0b\u8f7d\u3002","title":"OneFlow-WDL\u811a\u672c"},{"location":"adv_examples/wide_deep.html#oneflow-wdl_1","text":"EMBD_SIZE=1603616 DATA_ROOT=/path/to/wdl/ofrecord python3 wdl_train_eval.py \\ --train_data_dir $DATA_ROOT/train \\ --train_data_part_num 256 \\ --train_part_name_suffix_length=5 \\ --eval_data_dir $DATA_ROOT/val \\ --eval_data_part_num 256 \\ --max_iter=300000 \\ --loss_print_every_n_iter=1000 \\ --eval_interval=1000 \\ --batch_size=16384 \\ --wide_vocab_size=$EMBD_SIZE \\ --deep_vocab_size=$EMBD_SIZE \\ --gpu_num 1 \u901a\u5e38\u914d\u7f6e\u597d\u6570\u636e\u96c6\u7684\u4f4d\u7f6e DATA_ROOT \u540e\uff0c\u4e0a\u9762\u7684shell\u811a\u672c\u5c31\u53ef\u4ee5\u88ab\u6267\u884c\u4e86\uff0c\u5982\u679c\u5c4f\u5e55\u4e0a\u80fd\u591f\u8f93\u51fa\u4e0b\u9762\u7c7b\u4f3c\u7684\u7ed3\u679c\uff0c\u5c31\u8868\u793a\u5df2\u7ecf\u6b63\u786e\u8fd0\u884c\u3002 1000 time 2020-07-08 00:28:08.066281 loss 0.503295350909233 1000 eval_loss 0.4846755236387253 eval_auc 0.7616240146992771 2000 time 2020-07-08 00:28:11.613961 loss 0.48661992555856703 2000 eval_loss 0.4816856697201729 eval_auc 0.765256583562705 3000 time 2020-07-08 00:28:15.149135 loss 0.48245503094792364 3000 eval_loss 0.47835959643125536 eval_auc 0.7715609382514008 4000 time 2020-07-08 00:28:18.686327 loss 0.47975033831596375 4000 eval_loss 0.47925308644771575 eval_auc 0.7781267916810946","title":"\u8fd0\u884cOneFlow-WDL\u811a\u672c"},{"location":"adv_examples/wide_deep.html#_4","text":"\u6211\u4eec\u5728\u4e00\u53f0\u67098\u575712G\u663e\u5b58\u7684TitanV\u7684\u670d\u52a1\u5668\u4e0a\u5bf9OneFlow-WDL\u8fdb\u884c\u4e86\u4e00\u7ec4\u6d4b\u8bd5\uff0c\u5e76\u4f7f\u7528HugeCTR\u63d0\u4f9b\u7684docker\u5bb9\u5668\u505a\u4e86\u540c\u6837\u53c2\u6570\u7684\u6d4b\u8bd5\u3002","title":"\u6d4b\u8bd5\u7ed3\u679c\u53ca\u8bf4\u660e"},{"location":"adv_examples/wide_deep.html#gpu","text":"\u4e3b\u8981\u6d4b\u8bd5\u76ee\u7684\u662f\u5728batch size = 16384\u7684\u60c5\u51b5\u4e0b\uff0c\u6d4b\u91cf\u4e0d\u540cGPU\u6570\u91cf\u5904\u7406\u6bcf\u4e2a\u6279\u6b21\u7684\u5e73\u5747\u65f6\u5ef6\uff08latency\uff09\u3002 \u6d4b\u8bd5\u914d\u7f6e\u4e867\u4e2a1024\u795e\u7ecf\u5355\u5143\u7684\u9690\u85cf\u5c42\u3002 \u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u6211\u4eec\u540c\u65f6\u8bb0\u5f55\u4e86\uff0c\u6d4b\u8bd5\u65f6\u5b9e\u9645\u6700\u5927\u5360\u7528\u663e\u5b58\u7684\u5927\u5c0f\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u7efc\u5408\u4e0a\u9762\u7ed3\u679c\u8868\u660e\uff0c1\u5361\u52308\u5361\uff0cOneFlow-WDL\u5728\u5360\u7528\u8f83\u5c11\u7684\u663e\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u901f\u5ea6\u8981\u6bd4HugeCTR\u5feb\u3002","title":"\u591aGPU\u6027\u80fd\u6d4b\u8bd5"},{"location":"adv_examples/wide_deep.html#batch-size16384","text":"\u4e3b\u8981\u6d4b\u8bd5\u76ee\u7684\u662f\u5728\u4fdd\u8bc1\u6bcfGPU\u5361\u5904\u740616384batch size\u60c5\u51b5\u4e0b\uff0c\u4f7f\u75281\u81f38GPU\u5361\u8fdb\u884c\u8bad\u7ec3\u6bcf\u4e2a\u6279\u6b21\u7684\u5e73\u5747\u65f6\u5ef6\uff08latency\uff09\u3002 \u6d4b\u8bd5\u914d\u7f6e\u4e867\u4e2a1024\u795e\u7ecf\u5355\u5143\u7684\u9690\u85cf\u5c42\u3002 \u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u6211\u4eec\u540c\u65f6\u8bb0\u5f55\u4e86\uff0c\u6d4b\u8bd5\u65f6\u5b9e\u9645\u6700\u5927\u5360\u7528\u663e\u5b58\u7684\u5927\u5c0f\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u7efc\u5408\u4e0a\u9762\u7ed3\u679c\u8868\u660e\uff0c\u968f\u7740\u5361\u6570\u7684\u589e\u52a0\uff0c\u65f6\u5ef6\u589e\u52a0\uff0cOneFlow-WDL\u5728\u5360\u7528\u8f83\u5c11\u7684\u663e\u5b58\u7684\u60c5\u51b5\u4e0b\uff0c\u901f\u5ea6\u8981\u6bd4HugeCTR\u5feb\uff1b\u56e0\u4e3a\u6bcf\u5361\u4fdd\u8bc116384 batch size\uff0cOneFlow\u6bcf\u5361\u5360\u7528\u7684\u5185\u5b58\u5e76\u65e0\u663e\u8457\u53d8\u5316\u3002","title":"batch size=16384\u6bcf\u5361\uff0c\u591a\u5361\u6027\u80fd\u6d4b\u8bd5"},{"location":"adv_examples/wide_deep.html#gpubatch-size","text":"\u4e3b\u8981\u6d4b\u8bd5\u76ee\u7684\u662f\u5728\u4e00\u4e2aGPU\u5361\u60c5\u51b5\u4e0b\uff0c\u6d4b\u91cf\u4e0d\u540cbatch size\u6bcf\u4e2a\u6279\u6b21\u7684\u5e73\u5747\u65f6\u5ef6\uff08latency\uff09\u3002 \u6d4b\u8bd5\u914d\u7f6e\u4e862\u4e2a1024\u795e\u7ecf\u5355\u5143\u7684\u9690\u85cf\u5c42\u3002 \u7ed3\u679c\u5982\u4e0b\u56fe\uff1a","title":"\u5355GPU\u5361\u4e0d\u540cbatch size\u6027\u80fd\u6d4b\u8bd5"},{"location":"adv_examples/wide_deep.html#_5","text":"OneFlow-WDL\u4e2d\u914d\u7f6e\u4e86\u4e24\u4e2aEmbedding Table\uff1a - wide_embedding \u5927\u5c0f\u662fvocab_size x 1 - deep_embedding \u5927\u5c0f\u662fvocab_size x 16 HugeCTR\u4e2d\u8bcd\u8868\u5927\u5c0f\uff08vocab_size\uff09\u662f1603616\u3002\u6211\u4eec\u4ece3200000\u5f00\u59cb\u6d4b\u8d77\uff0c\u4e00\u76f4\u5230\u652f\u63014\u4ebf\u7684\u8bcd\u8868\u5927\u5c0f\uff0c\u7ed3\u679c\u5982\u4e0b\u56fe\uff1a \u4e0a\u9762\u7684\u56fe\u4e2d\uff0c\u84dd\u8272\u67f1\u5b50\u662f\u6279\u6b21\u8bad\u7ec3\u7684\u5e73\u5747\u65f6\u5ef6\uff08latency\uff09\uff0c\u7ea2\u8272\u66f2\u7ebf\u4ee3\u8868GPU\u663e\u5b58\u7684\u5360\u7528\u3002 \u7ed3\u8bba\uff1a\u968f\u7740\u8bcd\u8868\u5927\u5c0f\u7684\u589e\u5927\uff0c\u5185\u5b58\u968f\u4e4b\u589e\u5927\uff0c\u4f46latency\u6ca1\u6709\u660e\u663e\u7684\u53d8\u5316\u3002","title":"\u8d85\u5927\u8bcd\u8868\u6d4b\u8bd5"},{"location":"adv_examples/wide_deep.html#1","text":"\u6211\u4eec\u9009\u53d6\u4e86batch size=512\u8fdb\u884c\u4e86\u6536\u655b\u6027\u80fd\u7684\u6d4b\u8bd5\u3002 \u4e0b\u9762\u8fd9\u5f20\u56fe\u662f\uff0c\u524d500\u6b65\u7684\u7ed3\u679c\uff0c\u6bcf\u4e00\u6b65\u8bad\u7ec3\u90fd\u5728\u9a8c\u8bc1\u96c6\u4e2d\u9009\u53d620\u6761\u8bb0\u5f55\u8fdb\u884c\u9a8c\u8bc1\uff0c\u56fe\u4e2d\u7684\u66f2\u7ebf\u5206\u522b\u662floss\u548cAUC\uff1a \u7ed3\u8bba\uff1aAUC\u8fc5\u901f\u5c31\u589e\u957f\u5230\u8d85\u8fc7\u4e860.75\u3002","title":"\u6536\u655b\u6027\u6d4b\u8bd51"},{"location":"adv_examples/wide_deep.html#2","text":"\u548c\u6536\u655b\u6027\u6d4b\u8bd51\u540c\u6837\u7684\u60c5\u51b5\uff0c\u8fd9\u4e00\u6b21\u662f\u6bcf\u8bad\u7ec31000\u6b65\u6253\u5370\u8bad\u7ec3loss\u7684\u5e73\u5747\u503c\uff0c\u7136\u540e\u9009\u53d620\u6761\u9a8c\u8bc1\u96c6\u6570\u636e\u8fdb\u884c\u9a8c\u8bc1\uff0c\u4e00\u5171\u8bad\u7ec330\u4e07\u6b65\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a \u7ed3\u8bba\u4e0e\u5206\u6790\uff1a 1. \u84dd\u8272\u7684train loss\u66f2\u7ebf\u6709\u660e\u663e\u5411\u4e0b\u7684\u53f0\u9636\uff0c\u56e0\u4e3a\u6574\u4e2a\u8bad\u7ec3\u96c6\u670936674623\u6761\u6570\u636e\uff0cbatch_size=512\u7684\u60c5\u51b5\u4e0b\uff0c\u5927\u698271630\u6b65\u5c31\u8fc7\u4e86\u6574\u4e2a\u6570\u636e\u96c6\uff08\u4e00\u4e2aepoch\uff09\uff0c30\u4e07\u6b65\u5c31\u628a\u8bad\u7ec3\u6570\u636e\u96c6\u7528\u4e864\u6b21\u591a\uff0c\u84dd\u8272\u66f2\u7ebf\u7684\u53f0\u9636\u5370\u8bc1\u4e86\u8fd9\u4e9b\u3002OneFlow\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u652f\u6301\u6570\u636e\u7684\u6253\u4e71\uff0c\u6bcf\u5f53\u6570\u636e\u96c6\u88ab\u5b8c\u6574\u7684\u7528\u5b8c\u4e00\u904d\u4e4b\u540e\uff0c\u6570\u636e\u4f1a\u88ab\u91cd\u65b0\u6253\u4e71\uff0c\u51cf\u5c11\u8fc7\u62df\u5408\u3002 2. \u6a59\u8272\u7684\u66f2\u7ebf\u662f\u9a8c\u8bc1\u96c6loss\uff0c\u5728\u524d\u4e24\u4e2aepoch\u7684\u65f6\u5019\u57fa\u672c\u4fdd\u6301\u4e0b\u964d\u7684\u8d8b\u52bf\uff0c\u4ece\u7b2c\u4e09\u4e2aepoch\u5f00\u59cb\uff0closs\u5f00\u59cb\u6709\u4e0a\u5347\u7684\u8d8b\u52bf\uff0c\u8868\u660e\u5df2\u7ecf\u8fc7\u62df\u5408\u4e86\u3002 3. \u7070\u8272\u662f\u9a8c\u8bc1\u96c6\u7684AUC\uff0cAUC\u4e5f\u662f\u5728\u7b2c\u4e8c\u4e2aepoch\u7684\u65f6\u5019\u8fbe\u5230\u4e86\u5cf0\u503c\uff0c\u8d85\u8fc7\u4e860.8\uff0c\u540e\u9762\u51e0\u4e2aepoch\u5c31\u5f00\u59cb\u4e0b\u964d\u3002","title":"\u6536\u655b\u6027\u6d4b\u8bd52"},{"location":"adv_examples/yolov3.html","text":"YoloV3 \u00b6 1.\u7b80\u4ecb \u00b6 YOLO \u7cfb\u5217\u7684\u7b97\u6cd5(\u7ecf\u5178\u7684v1~v3)\uff0c\u662f\u5355\u9636\u6bb5\u76ee\u6807\u68c0\u6d4b\u7f51\u7edc\u7684\u5f00\u5c71\u9f3b\u7956\uff0cYOLO\u2014You only look once\uff0c\u8868\u660e\u5176\u5355\u9636\u6bb5\u7684\u7279\u5f81\uff0c\u6b63\u662f\u7531\u4e8e\u7f51\u7edc\u7b80\u5355\uff0c\u5355\u9636\u6bb5\u7684\u6548\u7387\u8f83\u5feb\uff0c\u4f7f\u5176\u533a\u522b\u4e8e Faster-RCNN \u4e3a\u4ee3\u8868\u7684\u4e24\u9636\u6bb5\u76ee\u6807\u68c0\u6d4b\u5668\uff0c\u4ece\u4e00\u5f00\u59cb\u63a8\u51fa\u81f3\u4eca\uff0c\u4fbf\u4ee5\u901f\u5ea6\u5feb\u548c\u8f83\u9ad8\u7684\u51c6\u786e\u7387\u800c\u98ce\u9761\u76ee\u6807\u68c0\u6d4b\u9886\u57df\uff0c\u53d7\u5230\u5e7f\u6cdb\u4f7f\u7528\u548c\u597d\u8bc4\u3002 \u800cYolov3\u662f\u5176\u4e2d\u7684\u7ecf\u5178\u548c\u96c6\u5927\u6210\u8005(\u5f53\u7136\u5b98\u65b9\u6700\u8fd1\u4e5f\u63a8\u51fa\u4e86 Yolov4 )\uff0c\u5176\u4ee5\u878d\u5408\u4e86\u6b8b\u5dee\u7f51\u7edc\u7684 Darknet-53 \u4e3a\u9aa8\u5e72\u7f51\u7edc\uff0c\u878d\u5408\u4e86\u591a\u5c3a\u5ea6\uff0c3\u8def\u8f93\u51fa\u7684 feature map\uff0c\u4e0a\u91c7\u6837\u7b49\u7279\u70b9\uff0c\u4f7f\u5176\u6a21\u578b\u7cbe\u5ea6\u548c\u5bf9\u5c0f\u76ee\u6807\u68c0\u6d4b\u80fd\u529b\u90fd\u5927\u4e3a\u63d0\u5347\u3002 \u672c\u6587\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 Yolov3 \u7684 OneFlow \u7248\u5b9e\u73b0\uff0c\u548c\u5176\u4ed6\u7248\u672c\u5b9e\u73b0\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6211\u4eec\u5c06\u8f93\u51fa\u7279\u5f81\u7684 nms \u8fc7\u7a0b\u5199\u8fdb\u4e86 C++ \u4ee3\u7801\u4e2d\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49 user op \u7684\u65b9\u5f0f\u6765\u8c03\u7528\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u540c\u65f6\u652f\u6301\u76f4\u63a5\u4f7f\u7528 python \u4ee3\u7801\u5904\u7406 nms\u3002 2.\u5feb\u901f\u5f00\u59cb \u00b6 \u5f00\u59cb\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u6b63\u786e\u5b89\u88c5\u4e86 oneflow \uff0c\u5e76\u4e14\u5728python3\u73af\u5883\u4e0b\u53ef\u4ee5\u6210\u529fimport oneflow\u3002 git clone \u6b64\u4ed3\u5e93 \u5230\u672c\u5730 git clone --recursive https://github.com/Oneflow-Inc/oneflow_yolov3.git 2. \u5b89\u88c5 python \u4f9d\u8d56\u5e93 pip install -r requirements.txt 3. \u5728\u9879\u76ee root \u76ee\u5f55\u4e0b\uff0c\u6267\u884c: ./scripts/build.sh \u6267\u884c\u6b64\u811a\u672c\uff0c\u5c06 cpp \u4ee3\u7801\u4e2d\u81ea\u5b9a\u4e49\u7684 op \u7b97\u5b50\u7f16\u8bd1\u6210\u53ef\u8c03\u7528\u6267\u884c\u7684 .so \u6587\u4ef6\uff0c\u60a8\u5c06\u5728\u9879\u76ee\u8def\u5f84\u4e0b\u770b\u5230\uff1a libdarknet.so liboneflow_yolov3.so \u9884\u8bad\u7ec3\u6a21\u578b \u00b6 \u6211\u4eec\u4f7f\u7528\u4e86 Yolov3 \u539f\u4f5c\u8005\u63d0\u4f9b\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u2014 yolov3.weight \uff0c\u7ecf\u8f6c\u6362\u540e\u751f\u6210\u4e86 OneFlow \u683c\u5f0f\u7684\u6a21\u578b\u3002\u4e0b\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff1a of_model_yolov3.zip \uff0c\u5e76\u5c06\u89e3\u538b\u540e\u7684 of_model \u6587\u4ef6\u5939\u653e\u7f6e\u5728\u9879\u76ee root \u76ee\u5f55\u4e0b\uff0c\u5373\u53ef\u4f7f\u7528\u3002 3. \u9884\u6d4b/\u63a8\u7406 \u00b6 \u8fd0\u884c\uff1a sh yolo_predict.sh \u6216\u8005\uff1a sh yolo_predict_python_data_preprocess.sh \u8fd0\u884c\u811a\u672c\u540e\uff0c\u5c06\u5728 data/result \u4e0b\u751f\u6210\u68c0\u6d4b\u540e\u5e26 bbox \u6807\u8bb0\u6846\u7684\u56fe\u7247\uff1a \u53c2\u6570\u8bf4\u660e - --pretrained_model \u9884\u8bad\u7ec3\u6a21\u578b\u8def\u5f84 --label_path coco \u7c7b\u522b\u6807\u7b7e\u8def\u5f84(coco.name) --input_dir \u5f85\u68c0\u6d4b\u56fe\u7247\u6587\u4ef6\u5939\u8def\u5f84 --output_dir \u68c0\u6d4b\u7ed3\u6784\u8f93\u51fa\u8def\u5f84 --image_paths \u5355\u4e2a/\u591a\u4e2a\u5f85\u68c0\u6d4b\u56fe\u7247\u8def\u5f84\uff0c\u5982\uff1a --image_paths 'data/images/000002.jpg' 'data/images/000004.jpg' \u8bad\u7ec3\u540c\u6837\u5f88\u7b80\u5355\uff0c\u51c6\u5907\u597d\u6570\u636e\u96c6\u540e\uff0c\u53ea\u9700\u8981\u6267\u884c\uff1a sh yolo_train.sh \u5373\u53ef\uff0c\u6570\u636e\u96c6\u5236\u4f5c\u8fc7\u7a0b\u89c1\u4e0b\u6587\u3010\u6570\u636e\u96c6\u5236\u4f5c\u3011\u90e8\u5206\u3002 4. \u6570\u636e\u96c6\u5236\u4f5c \u00b6 Yolov3 \u652f\u6301\u4efb\u610f\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u4e0b\u9762\u6211\u4eec\u4ee5 COCO2014 \u5236\u4f5c\u8fc7\u7a0b\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u8bad\u7ec3/\u9a8c\u8bc1\u6240\u9700\u7684\u6570\u636e\u96c6\u5236\u4f5c\uff0c\u5176\u5b83\u6570\u636e\u96c6\u5982 PASCAL VOC \u6216\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7b49\uff0c\u90fd\u53ef\u4ee5\u91c7\u7528\u76f8\u540c\u683c\u5f0f\u3002 \u8d44\u6e90\u6587\u4ef6 \u00b6 \u4e0b\u8f7d COCO2014 \u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u56fe\u7247\uff0c\u5c06\u89e3\u538b\u540e\u7684 train2014 \u548c val2014 \u653e\u5728 data/COCO/images \u76ee\u5f55\u4e0b \uff08\u5982\u679c\u672c\u5730\u5df2\u4e0b\u8f7d\u8fc7 COCO2014 \u6570\u636e\u96c6\uff0c\u53ef\u4ee5 ln \u8f6f\u94fe\u63a5 images \u81f3\u672c\u5730 train2014 \u548c val2014 \u7684\u7236\u76ee\u5f55\uff09 \u51c6\u5907\u8d44\u6e90\u6587\u4ef6\uff1a labels \uff0c 5k.part \uff0c trainvalno5k.part wget -c https://pjreddie.com/media/files/coco/5k.part wget -c https://pjreddie.com/media/files/coco/trainvalno5k.part wget -c https://pjreddie.com/media/files/coco/labels.tgz \u811a\u672c \u00b6 \u5728 data/COCO \u76ee\u5f55\u4e0b\u6267\u884c\u811a\u672c\uff1a # get label file tar xzf labels.tgz # set up image list paste <(awk \"{print \\\"$PWD\\\"}\" <5k.part) 5k.part | tr -d '\\t' > 5k.txt paste <(awk \"{print \\\"$PWD\\\"}\" <trainvalno5k.part) trainvalno5k.part | tr -d '\\t' > trainvalno5k.txt # copy label txt to image dir find labels/train2014/ -name \"*.txt\" | xargs -i cp {} images/train2014/ find labels/val2014/ -name \"*.txt\" | xargs -i cp {} images/val2014/ \u6267\u884c\u811a\u672c\u5c06\u81ea\u52a8\u89e3\u538b\u7f29 labels.tgz \u6587\u4ef6\uff0c\u5e76\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210 5k.txt \u548c trainvalno5k.txt \uff0c\u7136\u540e\u5c06 labels/train2014 \u548c labels/val2014 \u7684\u6240\u6709 label.txt \u6587\u4ef6\u590d\u5236\u5230\u5bf9\u5e94\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u6587\u4ef6\u5939\u4e2d( \u4fdd\u8bc1\u56fe\u7247\u548c label \u5728\u540c\u4e00\u76ee\u5f55 )\u3002 \u81f3\u6b64\uff0c\u5b8c\u6210\u6574\u4e2a\u6570\u636e\u96c6\u7684\u51c6\u5907\u8fc7\u7a0b\u3002 5.\u8bad\u7ec3 \u00b6 \u4fee\u6539 yolo_train.sh \u811a\u672c\u4e2d\u7684\u53c2\u6570\uff0c\u4ee4\uff1a --image_path_file=\"data/COCO/trainvalno5k.txt\" \u5e76\u6267\u884c\uff1a sh yolo_train.sh \u5373\u53ef\u5f00\u59cb\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u66f4\u8be6\u7ec6\u7684\u53c2\u6570\u4ecb\u7ecd\u5982\u4e0b\uff1a --gpu_num_per_node \u6bcf\u53f0\u673a\u5668\u4f7f\u7528\u7684gpu\u6570\u91cf --batch_size \u6279\u5927\u5c0f --base_lr \u521d\u59cb\u5b66\u4e60\u7387 --classes \u76ee\u6807\u7c7b\u522b\u6570\u91cf\uff08COCO 80\uff1bVOC 20\uff09 --model_save_dir \u6a21\u578b\u5b58\u653e\u6587\u4ef6\u5939\u8def\u5f84 --dataset_dir \u8bad\u7ec3/\u9a8c\u8bc1\u96c6\u6587\u4ef6\u5939\u8def\u5f84 --num_epoch \u8fed\u4ee3\u603b\u8f6e\u6570 --save_frequency \u6307\u5b9a\u6a21\u578b\u4fdd\u5b58\u7684epoch\u95f4\u9694 \u8bf4\u660e \u00b6 \u76ee\u524d\u5982\u679c\u8c03\u7528 yolo_predict.sh \u6267\u884c\uff0c\u6570\u636e\u9884\u5904\u7406\u90e8\u5206\u5bf9 darknet \u6709\u4f9d\u8d56 \u5176\u4e2d\uff1a predict decoder \u4e2d\u8c03\u7528 load_image_color \u3001 letterbox_image \u51fd\u6570 train decoder \u4e2d\u8c03\u7528 load_data_detection \u51fd\u6570 \u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u5728\u540e\u7eed\u7684\u7248\u672c\u4e2d\u4f1a\u4f7f\u7528 OneFlow decoder ops \u66ff\u6362 image read nhwc -> nchw image / 255 bgr2rgb resize_image fill_image random_distort_image clip image random flip image and box randomize_boxes correct_boxes","title":"YoloV3"},{"location":"adv_examples/yolov3.html#yolov3","text":"","title":"YoloV3"},{"location":"adv_examples/yolov3.html#1","text":"YOLO \u7cfb\u5217\u7684\u7b97\u6cd5(\u7ecf\u5178\u7684v1~v3)\uff0c\u662f\u5355\u9636\u6bb5\u76ee\u6807\u68c0\u6d4b\u7f51\u7edc\u7684\u5f00\u5c71\u9f3b\u7956\uff0cYOLO\u2014You only look once\uff0c\u8868\u660e\u5176\u5355\u9636\u6bb5\u7684\u7279\u5f81\uff0c\u6b63\u662f\u7531\u4e8e\u7f51\u7edc\u7b80\u5355\uff0c\u5355\u9636\u6bb5\u7684\u6548\u7387\u8f83\u5feb\uff0c\u4f7f\u5176\u533a\u522b\u4e8e Faster-RCNN \u4e3a\u4ee3\u8868\u7684\u4e24\u9636\u6bb5\u76ee\u6807\u68c0\u6d4b\u5668\uff0c\u4ece\u4e00\u5f00\u59cb\u63a8\u51fa\u81f3\u4eca\uff0c\u4fbf\u4ee5\u901f\u5ea6\u5feb\u548c\u8f83\u9ad8\u7684\u51c6\u786e\u7387\u800c\u98ce\u9761\u76ee\u6807\u68c0\u6d4b\u9886\u57df\uff0c\u53d7\u5230\u5e7f\u6cdb\u4f7f\u7528\u548c\u597d\u8bc4\u3002 \u800cYolov3\u662f\u5176\u4e2d\u7684\u7ecf\u5178\u548c\u96c6\u5927\u6210\u8005(\u5f53\u7136\u5b98\u65b9\u6700\u8fd1\u4e5f\u63a8\u51fa\u4e86 Yolov4 )\uff0c\u5176\u4ee5\u878d\u5408\u4e86\u6b8b\u5dee\u7f51\u7edc\u7684 Darknet-53 \u4e3a\u9aa8\u5e72\u7f51\u7edc\uff0c\u878d\u5408\u4e86\u591a\u5c3a\u5ea6\uff0c3\u8def\u8f93\u51fa\u7684 feature map\uff0c\u4e0a\u91c7\u6837\u7b49\u7279\u70b9\uff0c\u4f7f\u5176\u6a21\u578b\u7cbe\u5ea6\u548c\u5bf9\u5c0f\u76ee\u6807\u68c0\u6d4b\u80fd\u529b\u90fd\u5927\u4e3a\u63d0\u5347\u3002 \u672c\u6587\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 Yolov3 \u7684 OneFlow \u7248\u5b9e\u73b0\uff0c\u548c\u5176\u4ed6\u7248\u672c\u5b9e\u73b0\u7684\u533a\u522b\u5728\u4e8e\uff0c\u6211\u4eec\u5c06\u8f93\u51fa\u7279\u5f81\u7684 nms \u8fc7\u7a0b\u5199\u8fdb\u4e86 C++ \u4ee3\u7801\u4e2d\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49 user op \u7684\u65b9\u5f0f\u6765\u8c03\u7528\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u540c\u65f6\u652f\u6301\u76f4\u63a5\u4f7f\u7528 python \u4ee3\u7801\u5904\u7406 nms\u3002","title":"1.\u7b80\u4ecb"},{"location":"adv_examples/yolov3.html#2","text":"\u5f00\u59cb\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u5df2\u6b63\u786e\u5b89\u88c5\u4e86 oneflow \uff0c\u5e76\u4e14\u5728python3\u73af\u5883\u4e0b\u53ef\u4ee5\u6210\u529fimport oneflow\u3002 git clone \u6b64\u4ed3\u5e93 \u5230\u672c\u5730 git clone --recursive https://github.com/Oneflow-Inc/oneflow_yolov3.git 2. \u5b89\u88c5 python \u4f9d\u8d56\u5e93 pip install -r requirements.txt 3. \u5728\u9879\u76ee root \u76ee\u5f55\u4e0b\uff0c\u6267\u884c: ./scripts/build.sh \u6267\u884c\u6b64\u811a\u672c\uff0c\u5c06 cpp \u4ee3\u7801\u4e2d\u81ea\u5b9a\u4e49\u7684 op \u7b97\u5b50\u7f16\u8bd1\u6210\u53ef\u8c03\u7528\u6267\u884c\u7684 .so \u6587\u4ef6\uff0c\u60a8\u5c06\u5728\u9879\u76ee\u8def\u5f84\u4e0b\u770b\u5230\uff1a libdarknet.so liboneflow_yolov3.so","title":"2.\u5feb\u901f\u5f00\u59cb"},{"location":"adv_examples/yolov3.html#_1","text":"\u6211\u4eec\u4f7f\u7528\u4e86 Yolov3 \u539f\u4f5c\u8005\u63d0\u4f9b\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u2014 yolov3.weight \uff0c\u7ecf\u8f6c\u6362\u540e\u751f\u6210\u4e86 OneFlow \u683c\u5f0f\u7684\u6a21\u578b\u3002\u4e0b\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff1a of_model_yolov3.zip \uff0c\u5e76\u5c06\u89e3\u538b\u540e\u7684 of_model \u6587\u4ef6\u5939\u653e\u7f6e\u5728\u9879\u76ee root \u76ee\u5f55\u4e0b\uff0c\u5373\u53ef\u4f7f\u7528\u3002","title":"\u9884\u8bad\u7ec3\u6a21\u578b"},{"location":"adv_examples/yolov3.html#3","text":"\u8fd0\u884c\uff1a sh yolo_predict.sh \u6216\u8005\uff1a sh yolo_predict_python_data_preprocess.sh \u8fd0\u884c\u811a\u672c\u540e\uff0c\u5c06\u5728 data/result \u4e0b\u751f\u6210\u68c0\u6d4b\u540e\u5e26 bbox \u6807\u8bb0\u6846\u7684\u56fe\u7247\uff1a \u53c2\u6570\u8bf4\u660e - --pretrained_model \u9884\u8bad\u7ec3\u6a21\u578b\u8def\u5f84 --label_path coco \u7c7b\u522b\u6807\u7b7e\u8def\u5f84(coco.name) --input_dir \u5f85\u68c0\u6d4b\u56fe\u7247\u6587\u4ef6\u5939\u8def\u5f84 --output_dir \u68c0\u6d4b\u7ed3\u6784\u8f93\u51fa\u8def\u5f84 --image_paths \u5355\u4e2a/\u591a\u4e2a\u5f85\u68c0\u6d4b\u56fe\u7247\u8def\u5f84\uff0c\u5982\uff1a --image_paths 'data/images/000002.jpg' 'data/images/000004.jpg' \u8bad\u7ec3\u540c\u6837\u5f88\u7b80\u5355\uff0c\u51c6\u5907\u597d\u6570\u636e\u96c6\u540e\uff0c\u53ea\u9700\u8981\u6267\u884c\uff1a sh yolo_train.sh \u5373\u53ef\uff0c\u6570\u636e\u96c6\u5236\u4f5c\u8fc7\u7a0b\u89c1\u4e0b\u6587\u3010\u6570\u636e\u96c6\u5236\u4f5c\u3011\u90e8\u5206\u3002","title":"3. \u9884\u6d4b/\u63a8\u7406"},{"location":"adv_examples/yolov3.html#4","text":"Yolov3 \u652f\u6301\u4efb\u610f\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6\uff0c\u4e0b\u9762\u6211\u4eec\u4ee5 COCO2014 \u5236\u4f5c\u8fc7\u7a0b\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u8bad\u7ec3/\u9a8c\u8bc1\u6240\u9700\u7684\u6570\u636e\u96c6\u5236\u4f5c\uff0c\u5176\u5b83\u6570\u636e\u96c6\u5982 PASCAL VOC \u6216\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7b49\uff0c\u90fd\u53ef\u4ee5\u91c7\u7528\u76f8\u540c\u683c\u5f0f\u3002","title":"4. \u6570\u636e\u96c6\u5236\u4f5c"},{"location":"adv_examples/yolov3.html#_2","text":"\u4e0b\u8f7d COCO2014 \u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u56fe\u7247\uff0c\u5c06\u89e3\u538b\u540e\u7684 train2014 \u548c val2014 \u653e\u5728 data/COCO/images \u76ee\u5f55\u4e0b \uff08\u5982\u679c\u672c\u5730\u5df2\u4e0b\u8f7d\u8fc7 COCO2014 \u6570\u636e\u96c6\uff0c\u53ef\u4ee5 ln \u8f6f\u94fe\u63a5 images \u81f3\u672c\u5730 train2014 \u548c val2014 \u7684\u7236\u76ee\u5f55\uff09 \u51c6\u5907\u8d44\u6e90\u6587\u4ef6\uff1a labels \uff0c 5k.part \uff0c trainvalno5k.part wget -c https://pjreddie.com/media/files/coco/5k.part wget -c https://pjreddie.com/media/files/coco/trainvalno5k.part wget -c https://pjreddie.com/media/files/coco/labels.tgz","title":"\u8d44\u6e90\u6587\u4ef6"},{"location":"adv_examples/yolov3.html#_3","text":"\u5728 data/COCO \u76ee\u5f55\u4e0b\u6267\u884c\u811a\u672c\uff1a # get label file tar xzf labels.tgz # set up image list paste <(awk \"{print \\\"$PWD\\\"}\" <5k.part) 5k.part | tr -d '\\t' > 5k.txt paste <(awk \"{print \\\"$PWD\\\"}\" <trainvalno5k.part) trainvalno5k.part | tr -d '\\t' > trainvalno5k.txt # copy label txt to image dir find labels/train2014/ -name \"*.txt\" | xargs -i cp {} images/train2014/ find labels/val2014/ -name \"*.txt\" | xargs -i cp {} images/val2014/ \u6267\u884c\u811a\u672c\u5c06\u81ea\u52a8\u89e3\u538b\u7f29 labels.tgz \u6587\u4ef6\uff0c\u5e76\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210 5k.txt \u548c trainvalno5k.txt \uff0c\u7136\u540e\u5c06 labels/train2014 \u548c labels/val2014 \u7684\u6240\u6709 label.txt \u6587\u4ef6\u590d\u5236\u5230\u5bf9\u5e94\u7684\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u6587\u4ef6\u5939\u4e2d( \u4fdd\u8bc1\u56fe\u7247\u548c label \u5728\u540c\u4e00\u76ee\u5f55 )\u3002 \u81f3\u6b64\uff0c\u5b8c\u6210\u6574\u4e2a\u6570\u636e\u96c6\u7684\u51c6\u5907\u8fc7\u7a0b\u3002","title":"\u811a\u672c"},{"location":"adv_examples/yolov3.html#5","text":"\u4fee\u6539 yolo_train.sh \u811a\u672c\u4e2d\u7684\u53c2\u6570\uff0c\u4ee4\uff1a --image_path_file=\"data/COCO/trainvalno5k.txt\" \u5e76\u6267\u884c\uff1a sh yolo_train.sh \u5373\u53ef\u5f00\u59cb\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u66f4\u8be6\u7ec6\u7684\u53c2\u6570\u4ecb\u7ecd\u5982\u4e0b\uff1a --gpu_num_per_node \u6bcf\u53f0\u673a\u5668\u4f7f\u7528\u7684gpu\u6570\u91cf --batch_size \u6279\u5927\u5c0f --base_lr \u521d\u59cb\u5b66\u4e60\u7387 --classes \u76ee\u6807\u7c7b\u522b\u6570\u91cf\uff08COCO 80\uff1bVOC 20\uff09 --model_save_dir \u6a21\u578b\u5b58\u653e\u6587\u4ef6\u5939\u8def\u5f84 --dataset_dir \u8bad\u7ec3/\u9a8c\u8bc1\u96c6\u6587\u4ef6\u5939\u8def\u5f84 --num_epoch \u8fed\u4ee3\u603b\u8f6e\u6570 --save_frequency \u6307\u5b9a\u6a21\u578b\u4fdd\u5b58\u7684epoch\u95f4\u9694","title":"5.\u8bad\u7ec3"},{"location":"adv_examples/yolov3.html#_4","text":"\u76ee\u524d\u5982\u679c\u8c03\u7528 yolo_predict.sh \u6267\u884c\uff0c\u6570\u636e\u9884\u5904\u7406\u90e8\u5206\u5bf9 darknet \u6709\u4f9d\u8d56 \u5176\u4e2d\uff1a predict decoder \u4e2d\u8c03\u7528 load_image_color \u3001 letterbox_image \u51fd\u6570 train decoder \u4e2d\u8c03\u7528 load_data_detection \u51fd\u6570 \u4e3b\u8981\u6d89\u53ca\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u5728\u540e\u7eed\u7684\u7248\u672c\u4e2d\u4f1a\u4f7f\u7528 OneFlow decoder ops \u66ff\u6362 image read nhwc -> nchw image / 255 bgr2rgb resize_image fill_image random_distort_image clip image random flip image and box randomize_boxes correct_boxes","title":"\u8bf4\u660e"},{"location":"arch_design/infer_sbp_signature.html","text":"SBP Signature \u81ea\u52a8\u63a8\u5bfc \u00b6 \u5728 OneFlow \u7cfb\u7edf\u8bbe\u8ba1 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ece\u8bbe\u8ba1\u89d2\u5ea6\u4ecb\u7ecd\u8fc7 SBP \u7684\u6982\u5ff5\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u5c06\u7ed3\u5408\u6e90\u7801\u66f4\u8be6\u7ec6\u5730\u4ecb\u7ecd SBP \u4ee5\u53ca OneFlow \u4e2d\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u673a\u5236\uff0c\u5305\u62ec\uff1a \u6570\u636e\u7684 SBP \u5c5e\u6027 Op \u7684 SBP Signature \u5c5e\u6027 OneFlow \u81ea\u52a8\u63a8\u5bfc SBP Signature \u7684\u6d41\u7a0b SBP Signature \u7684\u4ee3\u4ef7\u6a21\u578b \u57fa\u7840\u6982\u5ff5\u4ecb\u7ecd \u00b6 SBP \u00b6 \u5728 OneFlow \u5982\u4f55\u505a\u5230\u5206\u5e03\u5f0f\u6700\u6613\u7528 \u4e2d\u4ecb\u7ecd\u4e86 OneFlow \u5e76\u884c\u7279\u8272\u4e2d\u201c\u903b\u8f91\u89c6\u89d2\u201d\u4e0e \u201c\u7269\u7406\u89c6\u89d2\u201d\u4e24\u4e2a\u6982\u5ff5\uff1a OneFlow \u7684\u903b\u8f91\u89c6\u89d2\uff0c\u610f\u5473\u7740 OneFlow \u53ef\u4ee5\u5c06\u5206\u5e03\u5f0f\u96c6\u7fa4\u4e2d\u5404\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u548c\u7b97\u529b\uff0c\u62bd\u8c61\u6210\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684\u8d85\u7ea7\u8ba1\u7b97\u673a\u7684\u6570\u636e\u548c\u7b97\u529b\uff1b\u800c OneFlow \u7684\u7269\u7406\u89c6\u89d2\uff0c\u53ef\u4ee5\u5173\u6ce8\u5230\u90a3\u4e9b\u771f\u5b9e\u7684\u90e8\u7f72\u5230\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u548c\u7b97\u529b\u3002 \u5f53\u6211\u4eec\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u6709\u591a\u79cd\u65b9\u5f0f\u5c06\u903b\u8f91\u89c6\u89d2\u7684\u6570\u636e\u5206\u53d1\u5230\u7269\u7406\u8bbe\u5907\u4e0a\u3002\u53ef\u4ee5\u662f\uff1a \u6570\u636e\u88ab\u5207\u5206\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff08Split\uff09\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u7269\u7406\u8bbe\u5907\u62e5\u6709\u903b\u8f91\u4e0a\u6570\u636e\u7684\u4e00\u90e8\u5206\uff0c\u7269\u7406\u4e0a\u7684\u6570\u636e\u62fc\u63a5\u540e\u53ef\u4ee5\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6570\u636e \u6570\u636e\u88ab\u5e7f\u64ad\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff08Broadcast\uff09\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u7269\u7406\u8bbe\u5907\u62e5\u6709\u903b\u8f91\u4e0a\u5168\u90e8\u7684\u6570\u636e \u6570\u636e\u4ee5 Partial \u7684\u65b9\u5f0f\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u4e0e\u903b\u8f91\u4e0a\u7684\u6570\u636e\u7684\u5f62\u72b6\u4e00\u81f4\uff0c\u4f46\u662f\u9700\u8981\u5bf9\u6240\u6709\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7ecf\u8fc7\u7279\u5b9a\u8fd0\u7b97\u540e\uff0c\u624d\u53ef\u4ee5\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u5206\u53d1\u65b9\u5f0f\u6709 PartialSum\uff08\u7269\u7406\u4e0a\u7684\u6570\u636e\u6309\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6570\u636e\uff09\u3001PartialMax\uff08\u53d6\u7269\u7406\u4e0a\u7684\u6570\u636e\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6700\u5927\u503c\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6570\u636e\uff09\u7b49 \u4e3a\u4e86\u8868\u8fbe\u903b\u8f91\u89c6\u89d2\u4e0e\u7269\u7406\u89c6\u89d2\u4e0a\u7684\u6570\u636e\u6620\u5c04\u5173\u7cfb\uff0c OneFlow \u53d1\u660e\u4e86 SBP \u7684\u6982\u5ff5\uff0cSBP \u662f\u6570\u636e\uff08Tensor\uff0cOneFlow \u4e2d\u4e5f\u5e38\u79f0\u4f5c Blob\uff09\u7684\u5c5e\u6027\u3002 \u4ee5\u4e0a\u5185\u5bb9\u7684\u56fe\u793a\uff0c\u53ef\u4ee5\u53c2\u9605 SBP \u7b80\u5355\u793a\u4f8b \u3002 SBP \u5728\u4ee3\u7801\u4e2d\u7684\u7c7b\u578b\u540d\u4e3a SbpParallel \uff0c\u5b83\u5b9a\u4e49\u5728 sbp_parallel.proto \u6587\u4ef6\u4e2d\uff1a message SplitParallel { required int64 axis = 1; } message BroadcastParallel { } message PartialSumParallel { } message SbpParallel { oneof parallel_type { SplitParallel split_parallel = 1; BroadcastParallel broadcast_parallel = 2; PartialSumParallel partial_sum_parallel = 3; } } \u5982\u4ee5\u4e0a\u6240\u793a\uff0c\u76ee\u524d SBP \u5c5e\u6027\u53ef\u4ee5\u662f SplitParallel \u3001 BroadcastParallel \u3001 PartialSumParallel \u4e2d\u7684\u4e00\u79cd\uff1b\u82e5 SBP \u5c5e\u6027\u4e3a SplitParallel \uff0c\u5219\u8fd8\u9700\u8981\u6307\u5b9a axis \uff0c axis \u6307\u5b9a\u4e86\u6570\u636e\u6309\u7167\u54ea\u4e2a\u7ef4\u5ea6\u8fdb\u884c\u5207\u5206\u3002 Operator \u7c7b \u00b6 \u5728 OneFlow \u4e2d\uff0c\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u90fd\u62bd\u8c61\u6210\u4e3a\u4e86 operator\uff0c\u7b80\u79f0 Op\u3002Op \u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u5165 Blob\uff0c\u8fdb\u884c\u5904\u7406\u540e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6216\u591a\u4e2a Blob\u3002 OneFlow \u5c06 Op \u5c01\u88c5\u4e3a Operator \u7c7b\uff0c \u5728 operator.h \u53ca\u5176\u5bf9\u5e94\u7684 cpp \u6587\u4ef6\u4e2d\u3002 class Operator { ... }; \u53ef\u4ee5\u770b\u5230 Operator \u7684\u6210\u5458\u53ca\u65b9\u6cd5\uff0c\u63cf\u8ff0\u4e86\u4e00\u4e2a Op \u6240\u9700\u8981\u7684\u8bf8\u5982\u8f93\u5165\u3001\u8f93\u51fa\u7b49\u4fe1\u606f\u3002 \u4e5f\u6709\u4e00\u7cfb\u5217 InferXXX \u65b9\u6cd5\uff0c\u5b83\u4eec\u5bf9\u5e94\u4e86\u6784\u56fe\u65f6\u7684\u63a8\u5bfc\u5de5\u4f5c\uff0c\u6bd4\u5982\u672c\u6587\u5c06\u8981\u4ecb\u7ecd\u7684 SBP Signature \u63a8\u5bfc\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u8c03\u7528 InferSbpSignatureIf \u65b9\u6cd5\u63a8\u5bfc\u6700\u4f18\u7684SBP Signature\u3002 \u5f53\u7136\uff0c Operator \u8fd8\u5305\u62ec\u4e86\u6211\u4eec\u5373\u5c06\u4ecb\u7ecd\u7684 SBP Signature \u6210\u5458\uff0c\u5b83\u5bf9\u5e94\u4e86\u6700\u7ec8\u63a8\u5bfc\u7684\u7ed3\u679c\uff1a Maybe < const SbpSignature *> sbp_signature () const ; SBP Signature \u00b6 Op \u63cf\u8ff0\u4e86\u5728 \u903b\u8f91\u89c6\u89d2 \u4e0a\u5982\u4f55\u5904\u7406\u6570\u636e\uff0c\u5f53\u5206\u5e03\u5f0f\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0cOneFlow \u6839\u636e\u6570\u636e\u7684 SBP \u5c5e\u6027\uff0c\u5c06\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5b64\u7acb\u7684\u6570\u636e\uff0c\u5176 SBP \u5c5e\u6027( SbpParallel )\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7684 Op\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u5417\uff1f \u4e0d\u53ef\u4ee5\u3002\u56e0\u4e3a\u968f\u610f\u8bbe\u7f6e\u4e00\u4e2a Op \u8f93\u5165\u8f93\u51fa\u7684 SBP \u5c5e\u6027\uff0c\u53ef\u80fd\u4e0d\u7b26\u5408\u903b\u8f91\u4e0a Op \u7684\u8fd0\u7b97\u6cd5\u5219\u3002 \u8ba9\u6211\u4eec\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u770b\u770b\u5728\u67092\u4e2a\u8bbe\u5907\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u8981\u5982\u4f55\u7ec4\u5408\u624d\u5408\u6cd5\uff0c\u5982\u4f55\u7ec4\u5408\u4e0d\u5408\u6cd5\u3002 \u903b\u8f91\u4e0a\uff0c\u4e00\u4e2a\u6027\u8d28\u4e3a (m, k) \u7684\u77e9\u9635 A \u4e0e\u5f62\u72b6\u4e3a (k, n) \u7684\u77e9\u9635 B \u76f8\u4e58\u5f97\u5230 Y \uff0cY\u7684\u5f62\u72b6\u5fc5\u7136\u4e3a (m, n) A * B = Y (m, k) (k, n) (m, n) \u4f9d\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u89c4\u5f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635 A \u6309\u7b2c0\u7ef4\u8fdb\u884c\u5207\u5206\uff0c\u5207\u5206\u4e3a\u5f62\u72b6\u5206\u522b\u4e3a (m0, k) \u3001 (m1, k) \u7684\u4e24\u4e2a\u77e9\u9635\uff1a A0 \u548c A1 \uff0c\u7136\u540e\u5206\u5e03\u52302\u4e2a\u8bbe\u5907\u4e0a\u5206\u522b\u8ba1\u7b97\uff1a device 0: A0 * B = Y0 (m0, k) (k, n) (m0, n) device 1: A1 * B = Y1 (m1, k) (k, n) (m1, n) \u6211\u4eec\u5bb9\u6613\u5f97\u5230\u7269\u7406\u8bbe\u5907\u4e0a\u7684 A0 \u3001 A1 \u4e0e\u903b\u8f91\u4e0a\u7684 A \u7684\u5173\u7cfb\uff0c\u4ee5\u53ca Y0 \u3001 Y1 \u4e0e\u903b\u8f91\u4e0a\u7684 Y \u7684\u5173\u7cfb\uff1a A == A0 + A1 (m, k) (m0, k) (m1, k) Y == Y0 + y1 (m, n) (m0, n) (m1, n) \u4ee5\u4e0a\u7684\u201c+\u201d\u8868\u793a\u62fc\u63a5\uff0c\u4e0b\u540c\u3002 \u53ef\u89c1\uff0c\u6309\u7167\u4ee5\u4e0a\u7684\u65b9\u5f0f\uff0c\u5c06\u903b\u8f91\u4e0a\u7684\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u662f\u80fd\u591f\u5b8c\u6210\u8fd0\u7b97\uff0c\u5e76\u4e14\u6700\u7ec8\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6b63\u786e\u7ed3\u679c\u7684\u3002 \u4ee5\u4e0a\u8f83\u957f\u7684\u7bc7\u5e45\uff0c\u82e5\u4f7f\u7528 SBP \u6765\u63cf\u8ff0\uff0c\u4f1a\u53d8\u5f97\u5f02\u5e38\u7b80\u5355\uff1a A \u4e3a Split(0)\uff0c B \u4e3a Broadcast\uff0c\u8fd0\u7b97\u7ed3\u679c Y \u4e3a Split(0)\u3002 \u53ef\u89c1\uff0c\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684 SBP\uff0c\u6309\u4ee5\u4e0a\u65b9\u5f0f\u7ec4\u5408\uff0c\u662f\u5408\u6cd5\u7684\u3002\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c\u5408\u6cd5\u7684 SBP \u7ec4\u5408\u4e0d\u6b62\u8fd9\u4e00\u79cd\uff0c\u6bd4\u5982\u8fd8\u53ef\u4ee5\u662f\uff1a A \u4e3a Broadcast\uff0c B \u4e3a Split(1)\uff0c\u8fd0\u7b97\u7ed3\u679c Y \u4e3a Split(1)\u3002 \u4ee5\u53ca A \u4e3a Split(1)\uff0c B \u4e3a Split(0)\uff0c\u8fd0\u7b97\u7ed3\u679c Y \u4e3a PartialSum\u3002 \u4ee5\u4e0a\u51e0\u79cd\u5408\u6cd5\u7684 SBP \u7ec4\u5408\uff0c\u6765\u81ea sbp_parallel.proto \u4e2d\u7684\u6ce8\u91ca\u90e8\u5206\uff0c\u66f4\u8be6\u7ec6\u5730\u8bf4\u660e\u53ef\u4ee5\u67e5\u9605\u8be5\u6587\u4ef6\u3002 \u867d\u7136\u5c55\u793a\u4e86\u591a\u4e2a\u5408\u6cd5\u7684 SBP \u7ec4\u5408\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4efb\u610f\u7684 SBP \u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6bd4\u5982\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\uff0c\u82e5\u5c06 A \u548c B \u5747\u6309\u7167 Split(0) \u5207\u5206\uff1a A == A0 + A1 (m, k) (m0, k) (m1, k) B == B0 + B1 (k, n) (k0, n) (k1, n) \u90a3\u4e48\uff0c\u56e0\u4e3a\u77e9\u9635\u4e58\u6cd5\u8981\u6c42\u5de6\u77e9\u9635\u7684\u5217\u6570\u76ee\u4e0e\u53f3\u77e9\u9635\u7684\u884c\u6570\u76ee\u76f8\u7b49\uff0c\u800c A0 \u3001 A1 \u4e0e B0 \u3001 B1 \u4e4b\u95f4\u65e0\u6cd5\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u6240\u4ee5\u5b83\u4eec\u65e0\u6cd5\u5206\u914d\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u5b8c\u6210\u77e9\u9635\u4e58\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c A \u4e3a Split(0)\uff0c B \u4e3a Split(0) \u7684 SBP \u7ec4\u5408\u4e0d\u5408\u6cd5\u3002 \u6211\u4eec\u5c06\u4e0a\u6587\u51fa\u73b0\u7684\uff0c\u5bf9\u4e8e\u67d0\u4e2a Op\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684 \u4e00\u4e2a\u7279\u5b9a\u7684\u3001\u5408\u6cd5\u7684 SBP \u5c5e\u6027\u7ec4\u5408 \uff0c\u79f0\u4e3a\u8fd9\u4e2a Op \u7684\u4e00\u4e2a SBP Signature \u3002 SBP Signature \u63cf\u7ed8\u4e86 Op \u5982\u4f55\u770b\u5f85\u903b\u8f91\u89c6\u89d2\u7684\u8f93\u5165\u8f93\u51fa\u4e0e\u7269\u7406\u89c6\u89d2\u7684\u6620\u5c04\u5173\u7cfb\u3002 \u9009\u62e9\u6700\u4f18\u7684 SBP Signature \u00b6 \u6709\u4e86 SBP Signature \u7684\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u63d0\u51fa\u4e24\u4e2a\u95ee\u9898\uff1a Op \u7684\u6240\u6709 Sbp Signature \u662f\u7531 OneFlow \u63a8\u5bfc\u51fa\u6765\u7684\u5417\uff1f \u5982\u679c\u6709\u591a\u4e2a Sbp Signature \u53ef\u4f9b\u9009\u62e9\uff0c\u90a3\u4e48\u5e94\u8be5\u9009\u62e9\u54ea\u4e00\u4e2a\u5462\uff1f \u5bf9\u4e8e\u524d\u4e00\u4e2a\u95ee\u9898\uff0c\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u56e0\u4e3a Op \u8f93\u5165\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u7684\u7ec4\u5408\u662f\u5426\u5408\u6cd5\uff0c\u4e0e Op \u7684\u8fd0\u7b97\u89c4\u5219\u6709\u5173\uff0c\u5c5e\u4e8e\u4e1a\u52a1\u903b\u8f91\u7684\u8303\u7574\uff0cOneFlow \u4e0d\u53ef\u80fd\u9884\u5148\u77e5\u6653\u6240\u6709\u5df2\u7ecf\u5b58\u5728\u7684\u3001\u8fd8\u672a\u53d1\u660e\u7684 Op \u7684\u8fd0\u7b97\u89c4\u5219\u3002 \u56e0\u6b64\uff0cOneFlow \u5c06\u7f57\u5217\u6240\u6709\u53ef\u80fd\u7684 SBP Signature \u7684\u5de5\u4f5c\uff0c\u4ea4\u7ed9\u4e86 Op \u4f5c\u8005\uff0cOneFlow \u9884\u7559\u4e86\u76f8\u5173\u63a5\u53e3\uff0c\u4f7f\u5f97 Op \u7684\u4f5c\u8005\u53ef\u4ee5\u4e3a\u81ea\u5df1\u7684 Op \u6ce8\u518c\u5408\u6cd5\u7684 SBP Signature\u3002 \u4ee5\u77e9\u9635\u4e58\u6cd5 matmul_op.cpp \u4e3a\u4f8b\uff1a . SetGetSbpFn ([]( user_op :: SbpContext * ctx ) -> Maybe < void > { // (m, k_a) * (k_b, n) where k_a == k_b ... ctx -> NewBuilder () . Split ( user_op :: OpArg ( \"a\" , 0 ), m_axis ) . Broadcast ( user_op :: OpArg ( \"b\" , 0 )) . Split ( ctx -> outputs (), 0 ) . Build (); ctx -> NewBuilder () . Broadcast ( user_op :: OpArg ( \"a\" , 0 )) . Split ( user_op :: OpArg ( \"b\" , 0 ), n_axis ) . Split ( ctx -> outputs (), 1 ) . Build (); ctx -> NewBuilder () . Split ( user_op :: OpArg ( \"a\" , 0 ), k_a_axis ) . Split ( user_op :: OpArg ( \"b\" , 0 ), k_b_axis ) . PartialSum ( ctx -> outputs ()) . Build (); ctx -> NewBuilder () . PartialSum ( user_op :: OpArg ( \"a\" , 0 )) . Broadcast ( user_op :: OpArg ( \"b\" , 0 )) . PartialSum ( ctx -> outputs ()) . Build (); ctx -> NewBuilder () . Broadcast ( user_op :: OpArg ( \"a\" , 0 )) . PartialSum ( user_op :: OpArg ( \"b\" , 0 )) . PartialSum ( ctx -> outputs ()) . Build (); ... \u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c31\u6ce8\u518c\u4e86\uff1a a \u4e3a Split, b \u4e3a Broadcast, \u8f93\u51fa\u4e3a Split a \u4e3a Broadcast, b \u4e3a Split, \u8f93\u51fa\u4e3a Split a \u4e3a Split, b \u4e3a Split, \u8f93\u51fa\u4e3a PartialSum a \u4e3a PartialSum, b \u4e3a Broadcast, \u8f93\u51fa\u4e3a PartialSum a \u4e3a Broadcast, b \u4e3a PartialSum, \u8f93\u51fa\u4e3a PartialSum 5\u79cd SBP Signature\u3002OneFlow \u4e2d\u51c6\u5907\u4e86\u6570\u636e\u7ed3\u6784 SbpSignatureList \u7528\u4e8e\u5b58\u653e\u591a\u4e2a SBP Signature\uff1a message SbpSignatureList { repeated SbpSignature sbp_signature = 1; } \u63a5\u7740\uff0c\u6211\u4eec\u6765\u770b\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u65e2\u7136\u4e00\u4e2a Op \u53ef\u80fd\u5b58\u5728\u591a\u4e2a SBP Signature\uff0c\u90a3\u4e48\u5728\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u662f\u4e0d\u662f\u9700\u8981\u7528\u6237\u4f9d\u636e\u795e\u7ecf\u7f51\u7edc\u7684\u60c5\u51b5\u800c\u81ea\u5df1\u6307\u5b9a\u5462\uff1f \u7b54\u6848\u662f\uff1a\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\uff0c\u4f46\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e76\u6ca1\u6709\u8fd9\u4e2a\u5fc5\u8981\u3002\u56e0\u4e3a\u5728\u6784\u56fe\u9636\u6bb5\uff0cOneFlow \u4f1a\u6839\u636e\u8bbe\u5907\u4fe1\u606f\u4e0e\u8f93\u5165\u6570\u636e\u7684\u60c5\u51b5\uff0c\u5728\u6240\u6709 SBP Signature \u4e2d\uff0c\u81ea\u52a8\u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684 SBP Signature\u3002 \u5728 OneFlow \u4e2d\uff0c\u4f9d\u636e\u8f93\u5165\u7684 SBP \u5c5e\u6027\uff0c\u9009\u62e9\u6700\u4f18\u7684 SBP Signature\uff0c\u79f0\u4e3a SBP Signature \u63a8\u5bfc \u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u7ed3\u5408\u6e90\u7801\uff0c\u4ecb\u7ecd SBP Signature \u63a8\u5bfc\u7684\u7ec6\u8282\u3002 SBP Signature \u63a8\u5bfc \u00b6 \u6240\u8c13\u7684 SBP Signature \u63a8\u5bfc\uff0c\u5c31\u662f\u5728\u591a\u4e2a\u5408\u6cd5 SBP Signature \u4e2d\uff0c\u4e3a Op \u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684\u3002\u76ee\u524d\uff0cOneFlow \u5bf9\u4e8e\u201c\u6700\u4f18\u201d\u7684\u9ed8\u8ba4\u6807\u51c6\u662f\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\u3002 \u6d41\u7a0b\u6982\u8ff0 \u00b6 \u5728 Lazy \u6a21\u5f0f\u4e0b\uff0c\u51fd\u6570 ::InferOpSbpSignature \u662fSBP Signature \u63a8\u5bfc\u7684\u5165\u53e3\uff0c\u5728 job_build_and_infer_ctx.cpp \u7684 JobBuildAndInferCtx::InferOpOutSbpParallel \u4ee5\u53ca op_graph.cpp \u7684 OpGraph::InferOpNodeSbpSignature \u4e2d\u90fd\u4f1a\u8c03\u7528\u5b83\u3002 \u524d\u8005\u53d1\u751f\u5728 OneFlow \u6784\u5efa\u7528\u6237 Python \u7aef\u7684\u7f51\u7edc\u65f6\uff0c\u540e\u8005\u53d1\u751f\u5728 OneFlow \u5bf9\u7528\u6237\u7684\u7f51\u7edc\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u7f16\u8bd1\u4f18\u5316\u65f6\u3002\u4ee5\u524d\u8005\u4e3a\u4f8b\uff0c\u8c03\u7528\u5173\u7cfb\u4e3a\uff1a JobBuildAndInferCtx::InferOpOutSbpParallel -> ::InferOpSbpSignature -> Operator::InferSbpSignatureIf -> Operator::InferSbpSignature \u5404\u51fd\u6570\uff08\u65b9\u6cd5\uff09\u7684\u63a5\u53e3\u53ca\u4e3b\u8981\u5de5\u4f5c\u7f57\u5217\u5982\u4e0b\uff0c\u9700\u8981\u63d0\u524d\u8bf4\u660e\uff1a\u4e0b\u6587\u51fa\u73b0\u7684\u540d\u5982 XX4YY \u7684\u51fd\u6570\uff0c\u5747\u4e3a\u5bf9\u8c61\u8f6c\u5316\u65b9\u6cd5(Get XX for YY)\uff0c\u6bd4\u5982 ConstBlobDesc4Ibn \u5c31\u662f\u6839\u636e Ibn (input blob name) \u5f97\u5230 const blob description\u3002 JobBuildAndInferCtx::InferOpOutSbpParallel Maybe < void > JobBuildAndInferCtx :: InferOpOutSbpParallel ( Operator * op , const SbpSignature & sbp_sig_conf , const ParallelDesc & parallel_desc ); \u5728 JobBuildAndInferCtx::InferOpOutSbpParallel \u63a5\u53d7 Op\u3001\u7528\u6237\u6307\u5b9a\u7684 SBP Signature\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3001\u5e76\u884c\u914d\u7f6e\u4fe1\u606f\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u4e14\u5728\u5185\u90e8\u6574\u7406 Op \u7684\u8f93\u5165\u7684 SBP \uff0c\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4e00\u8d77\u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42\u7684 InferOpSbpSignature \u3002 InferOpSbpSignature Maybe < void > InferOpSbpSignature ( Operator * op , const SbpSignature & sbp_sig_conf , const ParallelDesc & parallel_desc , const HashMap < std :: string , SbpInferHint >& ibn2sbp_infer_hint , std :: function < Maybe < const OptInt64 *> ( const std :: string & ) > BatchAxis4BnInOp ); \u5728 InferOpSbpSignature \u4e2d\u4e3b\u8981\u505a\u51c6\u5907\u5de5\u4f5c\uff1a\u5b83\u8bbe\u8ba1\u4e86\u4e00\u4e2a cost model\uff0c\u4e3a\u5404\u4e2a\u53ef\u9009\u7684 SBP Signature \u8fdb\u884c\u6253\u5206\uff0c\u5206\u6570\u6700\u4f4e\u7684 SBP Signature \u610f\u5473\u7740\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\u3002\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8bbe\u8ba1\u7684 cost model \u5c06\u4f1a\u5728\u4e0b\u4e00\u5c42 Operator::InferSbpSignatureIf \u4e2d\u4f7f\u7528\u3002 Operator::InferSbpSignatureIf Maybe < void > Operator :: InferSbpSignatureIf ( const SbpSignature & sbp_sig_conf , const std :: function < int32_t ( const SbpSignature & ) >& CalcOrderValue4SbpSig , std :: function < Maybe < const SbpInferHint *> ( const std :: string & ) > SbpInferHint4Ibn , const ParallelDesc & parallel_desc ); \u5728 Operator::InferSbpSignatureIf \u4e2d\u5c06\u6839\u636e\u662f\u5355\u673a\u8fd8\u662f\u5206\u5e03\u5f0f\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u5904\u7406\uff1a \u5982\u679c\u662f\u5355\u673a\u60c5\u51b5\uff0c\u5219\u8f93\u5165\u8f93\u51fa\u5747\u91c7\u7528 Split(0) \u5373\u53ef\uff1b\u5982\u679c\u662f\u5206\u5e03\u5f0f\u60c5\u51b5\uff0c\u5219\u8c03\u7528\u4e0b\u4e00\u5c42\u7684 Operator::InferSbpSignature \uff0c\u6839\u636e\u4e0a\u4e00\u5c42\u8bbe\u8ba1\u7684 cost model\uff0c\u6311\u9009\u51fa\u4ee3\u4ef7\u6700\u5c0f\u7684 SBP Signature\u3002 Operator::InferSbpSignature Maybe < void > Operator :: InferSbpSignature ( SbpSignature * sbp_signature , const SbpSignature & sbp_sig_conf , const std :: function < int32_t ( const SbpSignature & ) >& CalcOrderValue4SbpSig , std :: function < Maybe < const SbpInferHint *> ( const std :: string & ) > SbpInferHint4Ibn , const ParallelDesc & parallel_desc ); \u5728 Operator::InferSbpSignature \u4e2d\uff0c\u5c06\u83b7\u53d6 Op \u4f5c\u8005\u6ce8\u518c\u7684\u6240\u6709SBP Signature\uff0c\u7136\u540e\u6839\u636e cost model \u5bf9\u5b83\u4eec\u8fdb\u884c\u6253\u5206\u5e76\u6392\u5e8f\uff0c\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u8005\u3002 SBP Signature \u7684\u4ee3\u4ef7\u6a21\u578b \u00b6 SBP \u7684\u63a8\u5bfc\uff0c\u53d1\u751f\u5728\u8ba1\u7b97\u56fe\u6784\u56fe\u8fc7\u7a0b\u4e2d\uff0c\u76ee\u524d\u91c7\u7528\u7684\u662f\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u57fa\u672c\u6d41\u7a0b\u662f\uff1a \u901a\u8fc7\u8ba1\u7b97\u56fe\u7684\u62d3\u6251\u5e8f\u904d\u5386\u6bcf\u4e2a Op \u5bf9\u4e8e\u8ba1\u7b97\u56fe\u7684 source \u8282\u70b9\uff08\u65e0\u8f93\u5165\u7684\u8282\u70b9\uff09\uff0c\u5982\u679c\u662f\u6a21\u578b\uff08variable\uff09\uff0cSBP \u5c5e\u6027\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u662f Broadcast\uff1b\u5982\u679c\u662f\u6570\u636e\uff0cSBP \u5c5e\u6027\u9ed8\u8ba4\u4e3a Split \u9664\u4e86source\u8282\u70b9\u5916\u7684\u5176\u4ed6\u6240\u6709\u7ed3\u70b9\uff0c\u5728\u62d3\u6251\u5e8f\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u5219\u4f1a\u5bf9 Op \u7684 SBP Signature \u8fdb\u884c\u63a8\u5bfc\uff0c\u5bfb\u627e\u4e00\u4e2a cost model \u6700\u5c0f\u7684\u7684 SBP Signature \u7ed3\u5408\u4ee5\u4e0a\u5185\u5bb9\u53ca\u5728\u6d41\u7a0b\u6982\u8ff0\u4e2d\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u77e5\u9053 SBP Signature \u63a8\u5bfc\u7684\u5173\u952e\u5728 cost model \u5982\u4f55\u8bc4\u4ef7 SBP Signature\u3002\u6211\u4eec\u5c06\u7ed3\u5408\u4ee3\u7801\u91cd\u70b9\u4ecb\u7ecd OneFlow \u5982\u4f55\u8ba1\u7b97 SBP Signature \u7684\u4ee3\u4ef7\u3002 \u5728 InferOpSbpSignature \u4e2d\uff0c\u6709\u5bf9\u5e94\u7684 cost model\uff0c\u7528\u4e8e\u8ba1\u7b97 SBP Signature \u7684\u4ee3\u4ef7\uff0c\u91c7\u7528\u7684\u5177\u4f53\u7b97\u6cd5\u5982\u4e0b\u3002 \u9996\u5148\uff0c OneFlow \u51c6\u5907\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u4ece\u4e09\u4e2a\u89d2\u5ea6\uff0c\u6839\u636e\u8f93\u5165\u4ee5\u53ca\u5f85\u9009\u7684 SBP Signature \u4e2d\u7684 SBP \u5c5e\u6027\u8fdb\u884c\u6253\u5206\uff1a auto OrderValue4HasBatchAxis = [ & ]( const std :: string & bn , const SbpParallel & sbp_parallel ) -> int32_t { const auto & batch_axis = * BatchAxis4BnInOp ( bn ); return -1 * ( batch_axis . has_value () && sbp_parallel . has_split_parallel () && sbp_parallel . split_parallel (). axis () == batch_axis . value ()); }; auto OrderValue4HasNoBatchAxis = [ & ]( const std :: string & ibn , const SbpParallel & sbp_parallel ) -> int32_t { const auto & batch_axis = * BatchAxis4BnInOp ( ibn ); return -2 * ( batch_axis . has_value () == false && SbpInferHint4Ibn ( ibn ) -> sbp_parallel (). has_split_parallel () == false && sbp_parallel . has_split_parallel () == false ); }; auto OrderValue4SbpHint = [ & ]( const std :: string & ibn , const SbpParallel & sbp_parallel ) -> int32_t { return -3 * ( SbpInferHint4Ibn ( ibn ) -> sbp_parallel () == sbp_parallel ); }; \u56e0\u4e3a\u4e09\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u90fd\u662f \u6570\u5b57*bool \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u8fd4\u56de\u503c\u4e3a -3\uff0c-2\uff0c-1\uff0c0\u4e2d\u7684\u67d0\u4e2a\u3002 \u6bd4\u5982\uff0c\u82e5\u4ee5\u4e0b\u8868\u8fbe\u5f0f\u4e3a true \uff1a ( SbpInferHint4Ibn ( ibn ) -> sbp_parallel () == sbp_parallel ) \u5219\u610f\u5473\u7740\u5f53\u524d\u8f93\u5165\u7684 SBP \u5c5e\u6027\uff0c\u4e0e\u5f85\u9009\u62e9\u7684 SBP Signature \u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e\u7684 SBP \u5c5e\u6027\u662f\u4e00\u81f4\u7684\uff0c\u90a3\u4e48\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\uff0c\u5206\u6570\u4e3a-3\u3002 \u4ee5\u4e0a\u4e09\u4e2a\u51fd\u6570\uff0c\u53ea\u662f\u5bf9\u4e8e\u5355\u4e2a input blob \u8fdb\u884c\u4ee3\u4ef7\u8bc4\u4f30\uff0c\u4e4b\u540e\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a CalcOrderValue4SbpSig \u51fd\u6570\uff0c\u904d\u5386 Op \u7684\u6240\u6709\u8f93\u5165\uff0c\u7efc\u5408\u4ee5\u4e0a\u591a\u4e2a\u89d2\u5ea6\u7684\u7ed3\u679c\uff0c\u5f97\u5230\u4ee3\u4ef7\u7684\u7efc\u5408\u5206\u6570\uff1a CalcOrderValue4SbpSig = [ & ]( const SbpSignature & sbp_signature ) -> int32_t { int32_t order_value = 0 ; for ( const auto & ibn : op -> input_bns ()) { // \u5f85\u8ba1\u7b97\u4ee3\u4ef7\u7684 SBP Signature \u4e2d\uff0c\u5bf9\u5e94\u7684 SBP \u5c5e\u6027 const auto & sbp_parallel_it = sbp_signature . bn_in_op2sbp_parallel (). find ( ibn ); // \u6839\u636e input blob \u548c SBP Signature \u4e2d\u7684 SBP\uff0c\u8fdb\u884c\u6253\u5206 order_value += OrderValue4HasBatchAxis ( ibn , sbp_parallel_it -> second ); order_value += OrderValue4HasNoBatchAxis ( ibn , sbp_parallel_it -> second ); order_value += OrderValue4SbpHint ( ibn , sbp_parallel_it -> second ); } for ( const auto & obn : op -> output_bns ()) { const auto & sbp_parallel_it = sbp_signature . bn_in_op2sbp_parallel (). find ( obn ); order_value += OrderValue4HasBatchAxis ( obn , sbp_parallel_it -> second ); } return order_value ; }; \u4ee5\u4e0a\u51c6\u5907\u4e86 cost model \u7684\u8bc4\u4ef7\u6807\u51c6\uff0c\u771f\u6b63\u7684\u8bc4\u4ef7\u65f6\u673a\uff0c\u53d1\u751f\u5728 Operator::InferSbpSignatureIf \u4e2d\uff1a Operator :: InferSbpSignatureIf (...) { if ( parallel_desc . parallel_num () == 1 ) { auto * bn2sbp = mut_sbp_signature () -> mutable_bn_in_op2sbp_parallel (); for ( const auto & ibn : input_bns ()) { ( * bn2sbp )[ ibn ]. mutable_split_parallel () -> set_axis ( 0 ); } for ( const auto & obn : output_bns ()) { ( * bn2sbp )[ obn ]. mutable_split_parallel () -> set_axis ( 0 ); } } else if ( parallel_desc . parallel_num () > 1 ) { return InferSbpSignature ( mut_sbp_signature (), sbp_sig_conf , CalcOrderValue4SbpSig , SbpInferHint4Ibn , parallel_desc ); } } \u5176\u903b\u8f91\u975e\u5e38\u7b80\u5355: \u5f53 parallel_desc.parallel_num() == 1 \u65f6\uff0c\u8bf4\u660e\u662f\u5355\u673a\u5355\u5361\u60c5\u51b5\uff0c\u6b64\u65f6 Split\u3001Broadcast\u3001PartialSum \u662f\u7b49\u4ef7\u7684\uff0cSBP \u5c5e\u6027\u8bbe\u7f6e\u4e3a\u54ea\u79cd\u90fd\u6b63\u786e\uff0c\u56e0\u6b64\u4e0d\u59a8\u5c06\u6240\u6709\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u8bbe\u7f6e\u4e3a Split(0) \u5373\u53ef \u5f53\u5e76\u884c\u6570\u76ee\u5927\u4e8e1\u65f6\uff0c\u5219\u8c03\u7528 Operator::InferSbpSignature \uff0c\u4f9d\u636e cost model\uff0c\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u7684 SBP Signature \u5728 Operator::InferSbpSignature \u4e2d\uff1a Operator :: InferSbpSignature (...){ // get op sbp signatures ... SbpSignatureList sbp_sig_list ; GetSbpSignaturesIf ( LogicalBlobDesc4Ibn , parallel_desc , & sbp_sig_list ); ... // sort sbp signatures by copy cost, then return the one with least cost std :: vector < const SbpSignature *> sorted_sbp_signatures ; SortSbpSignatureListByCopyCost ( filtered_sbp_sigs_by_conf , input_bns (), SbpInferHint4Ibn , CalcOrderValue4SbpSig , & sorted_sbp_signatures ); * sbp_signature = * sorted_sbp_signatures . at ( 0 ); return Maybe < void >:: Ok (); } \u5148\u901a\u8fc7 GetSbpSignaturesIf \u83b7\u53d6 Op \u4f5c\u8005\u8bbe\u7f6e\u7684\u6240\u6709 SBP Signature\uff0c\u7136\u540e\u8c03\u7528 SortSbpSignatureListByCopyCost \uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\uff0c\u5c06\u8c03\u7528 CalcOrderValue4SbpSig \u5bf9\u6240\u6709\u7684 SBP Signature \u8fdb\u884c\u6253\u5206\uff0c\u5e76\u6392\u5e8f\uff0c\u6392\u5e8f\u540e\u7684\u7ed3\u679c\uff0c\u6309\u4ee3\u4ef7\u5347\u5e8f\u653e\u7f6e\u5728 sorted_sbp_signatures \u4e2d\u3002 \u56e0\u6b64\uff0c\u6700\u7ec8\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u7684 sorted_sbp_signatures.at(0) \u4f5c\u4e3a Op \u7684 SBP Signature\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9ed8\u8ba4\u7684 cost model \u867d\u7136\u7b80\u5355\uff0c\u4f46\u7ecf\u8fc7\u5b9e\u8df5\u8bc1\u660e\u5df2\u7ecf\u6709\u975e\u5e38\u4e0d\u9519\u7684\u6548\u679c\u3002\u6b64\u5916\uff0c\u5982\u679c\u60f3\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u6807\u51c6\u9009\u62e9 SBP Signature\uff0c\u53ea\u9700\u8981\u91cd\u5199\u865a\u51fd\u6570 Operator::InferSbpSignature \u5373\u53ef\u3002 \u6700\u540e\uff0c\u66f4\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86\u672c\u6587\u4ecb\u7ecd\u7684 SBP Signature \u63a8\u5bfc\u65b9\u6cd5\u5916\uff0cOneFlow \u56e2\u961f\u6b63\u5728\u7814\u53d1\u4e00\u79cd\u5bfb\u6c42\u5168\u5c40\u6700\u4f18\u89e3\u7684\u81ea\u52a8\u5e76\u884c\u65b9\u6cd5\uff0c\u656c\u8bf7\u671f\u5f85\u3002","title":"SBP Signature \u81ea\u52a8\u63a8\u5bfc"},{"location":"arch_design/infer_sbp_signature.html#sbp-signature","text":"\u5728 OneFlow \u7cfb\u7edf\u8bbe\u8ba1 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ece\u8bbe\u8ba1\u89d2\u5ea6\u4ecb\u7ecd\u8fc7 SBP \u7684\u6982\u5ff5\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u5c06\u7ed3\u5408\u6e90\u7801\u66f4\u8be6\u7ec6\u5730\u4ecb\u7ecd SBP \u4ee5\u53ca OneFlow \u4e2d\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u673a\u5236\uff0c\u5305\u62ec\uff1a \u6570\u636e\u7684 SBP \u5c5e\u6027 Op \u7684 SBP Signature \u5c5e\u6027 OneFlow \u81ea\u52a8\u63a8\u5bfc SBP Signature \u7684\u6d41\u7a0b SBP Signature \u7684\u4ee3\u4ef7\u6a21\u578b","title":"SBP Signature \u81ea\u52a8\u63a8\u5bfc"},{"location":"arch_design/infer_sbp_signature.html#_1","text":"","title":"\u57fa\u7840\u6982\u5ff5\u4ecb\u7ecd"},{"location":"arch_design/infer_sbp_signature.html#sbp","text":"\u5728 OneFlow \u5982\u4f55\u505a\u5230\u5206\u5e03\u5f0f\u6700\u6613\u7528 \u4e2d\u4ecb\u7ecd\u4e86 OneFlow \u5e76\u884c\u7279\u8272\u4e2d\u201c\u903b\u8f91\u89c6\u89d2\u201d\u4e0e \u201c\u7269\u7406\u89c6\u89d2\u201d\u4e24\u4e2a\u6982\u5ff5\uff1a OneFlow \u7684\u903b\u8f91\u89c6\u89d2\uff0c\u610f\u5473\u7740 OneFlow \u53ef\u4ee5\u5c06\u5206\u5e03\u5f0f\u96c6\u7fa4\u4e2d\u5404\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u548c\u7b97\u529b\uff0c\u62bd\u8c61\u6210\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684\u8d85\u7ea7\u8ba1\u7b97\u673a\u7684\u6570\u636e\u548c\u7b97\u529b\uff1b\u800c OneFlow \u7684\u7269\u7406\u89c6\u89d2\uff0c\u53ef\u4ee5\u5173\u6ce8\u5230\u90a3\u4e9b\u771f\u5b9e\u7684\u90e8\u7f72\u5230\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u548c\u7b97\u529b\u3002 \u5f53\u6211\u4eec\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u6709\u591a\u79cd\u65b9\u5f0f\u5c06\u903b\u8f91\u89c6\u89d2\u7684\u6570\u636e\u5206\u53d1\u5230\u7269\u7406\u8bbe\u5907\u4e0a\u3002\u53ef\u4ee5\u662f\uff1a \u6570\u636e\u88ab\u5207\u5206\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff08Split\uff09\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u7269\u7406\u8bbe\u5907\u62e5\u6709\u903b\u8f91\u4e0a\u6570\u636e\u7684\u4e00\u90e8\u5206\uff0c\u7269\u7406\u4e0a\u7684\u6570\u636e\u62fc\u63a5\u540e\u53ef\u4ee5\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6570\u636e \u6570\u636e\u88ab\u5e7f\u64ad\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff08Broadcast\uff09\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u7269\u7406\u8bbe\u5907\u62e5\u6709\u903b\u8f91\u4e0a\u5168\u90e8\u7684\u6570\u636e \u6570\u636e\u4ee5 Partial \u7684\u65b9\u5f0f\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u8fd9\u6837\uff0c\u6bcf\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u4e0e\u903b\u8f91\u4e0a\u7684\u6570\u636e\u7684\u5f62\u72b6\u4e00\u81f4\uff0c\u4f46\u662f\u9700\u8981\u5bf9\u6240\u6709\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7ecf\u8fc7\u7279\u5b9a\u8fd0\u7b97\u540e\uff0c\u624d\u53ef\u4ee5\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6570\u636e\uff0c\u8fd9\u79cd\u5206\u53d1\u65b9\u5f0f\u6709 PartialSum\uff08\u7269\u7406\u4e0a\u7684\u6570\u636e\u6309\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6570\u636e\uff09\u3001PartialMax\uff08\u53d6\u7269\u7406\u4e0a\u7684\u6570\u636e\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6700\u5927\u503c\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6570\u636e\uff09\u7b49 \u4e3a\u4e86\u8868\u8fbe\u903b\u8f91\u89c6\u89d2\u4e0e\u7269\u7406\u89c6\u89d2\u4e0a\u7684\u6570\u636e\u6620\u5c04\u5173\u7cfb\uff0c OneFlow \u53d1\u660e\u4e86 SBP \u7684\u6982\u5ff5\uff0cSBP \u662f\u6570\u636e\uff08Tensor\uff0cOneFlow \u4e2d\u4e5f\u5e38\u79f0\u4f5c Blob\uff09\u7684\u5c5e\u6027\u3002 \u4ee5\u4e0a\u5185\u5bb9\u7684\u56fe\u793a\uff0c\u53ef\u4ee5\u53c2\u9605 SBP \u7b80\u5355\u793a\u4f8b \u3002 SBP \u5728\u4ee3\u7801\u4e2d\u7684\u7c7b\u578b\u540d\u4e3a SbpParallel \uff0c\u5b83\u5b9a\u4e49\u5728 sbp_parallel.proto \u6587\u4ef6\u4e2d\uff1a message SplitParallel { required int64 axis = 1; } message BroadcastParallel { } message PartialSumParallel { } message SbpParallel { oneof parallel_type { SplitParallel split_parallel = 1; BroadcastParallel broadcast_parallel = 2; PartialSumParallel partial_sum_parallel = 3; } } \u5982\u4ee5\u4e0a\u6240\u793a\uff0c\u76ee\u524d SBP \u5c5e\u6027\u53ef\u4ee5\u662f SplitParallel \u3001 BroadcastParallel \u3001 PartialSumParallel \u4e2d\u7684\u4e00\u79cd\uff1b\u82e5 SBP \u5c5e\u6027\u4e3a SplitParallel \uff0c\u5219\u8fd8\u9700\u8981\u6307\u5b9a axis \uff0c axis \u6307\u5b9a\u4e86\u6570\u636e\u6309\u7167\u54ea\u4e2a\u7ef4\u5ea6\u8fdb\u884c\u5207\u5206\u3002","title":"SBP"},{"location":"arch_design/infer_sbp_signature.html#operator","text":"\u5728 OneFlow \u4e2d\uff0c\u5bf9\u6570\u636e\u7684\u64cd\u4f5c\u90fd\u62bd\u8c61\u6210\u4e3a\u4e86 operator\uff0c\u7b80\u79f0 Op\u3002Op \u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a\u8f93\u5165 Blob\uff0c\u8fdb\u884c\u5904\u7406\u540e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6216\u591a\u4e2a Blob\u3002 OneFlow \u5c06 Op \u5c01\u88c5\u4e3a Operator \u7c7b\uff0c \u5728 operator.h \u53ca\u5176\u5bf9\u5e94\u7684 cpp \u6587\u4ef6\u4e2d\u3002 class Operator { ... }; \u53ef\u4ee5\u770b\u5230 Operator \u7684\u6210\u5458\u53ca\u65b9\u6cd5\uff0c\u63cf\u8ff0\u4e86\u4e00\u4e2a Op \u6240\u9700\u8981\u7684\u8bf8\u5982\u8f93\u5165\u3001\u8f93\u51fa\u7b49\u4fe1\u606f\u3002 \u4e5f\u6709\u4e00\u7cfb\u5217 InferXXX \u65b9\u6cd5\uff0c\u5b83\u4eec\u5bf9\u5e94\u4e86\u6784\u56fe\u65f6\u7684\u63a8\u5bfc\u5de5\u4f5c\uff0c\u6bd4\u5982\u672c\u6587\u5c06\u8981\u4ecb\u7ecd\u7684 SBP Signature \u63a8\u5bfc\u8fc7\u7a0b\uff0c\u5c31\u9700\u8981\u8c03\u7528 InferSbpSignatureIf \u65b9\u6cd5\u63a8\u5bfc\u6700\u4f18\u7684SBP Signature\u3002 \u5f53\u7136\uff0c Operator \u8fd8\u5305\u62ec\u4e86\u6211\u4eec\u5373\u5c06\u4ecb\u7ecd\u7684 SBP Signature \u6210\u5458\uff0c\u5b83\u5bf9\u5e94\u4e86\u6700\u7ec8\u63a8\u5bfc\u7684\u7ed3\u679c\uff1a Maybe < const SbpSignature *> sbp_signature () const ;","title":"Operator \u7c7b"},{"location":"arch_design/infer_sbp_signature.html#sbp-signature_1","text":"Op \u63cf\u8ff0\u4e86\u5728 \u903b\u8f91\u89c6\u89d2 \u4e0a\u5982\u4f55\u5904\u7406\u6570\u636e\uff0c\u5f53\u5206\u5e03\u5f0f\u7cfb\u7edf\u8fd0\u884c\u65f6\uff0cOneFlow \u6839\u636e\u6570\u636e\u7684 SBP \u5c5e\u6027\uff0c\u5c06\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5b64\u7acb\u7684\u6570\u636e\uff0c\u5176 SBP \u5c5e\u6027( SbpParallel )\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7684 Op\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u5417\uff1f \u4e0d\u53ef\u4ee5\u3002\u56e0\u4e3a\u968f\u610f\u8bbe\u7f6e\u4e00\u4e2a Op \u8f93\u5165\u8f93\u51fa\u7684 SBP \u5c5e\u6027\uff0c\u53ef\u80fd\u4e0d\u7b26\u5408\u903b\u8f91\u4e0a Op \u7684\u8fd0\u7b97\u6cd5\u5219\u3002 \u8ba9\u6211\u4eec\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u770b\u770b\u5728\u67092\u4e2a\u8bbe\u5907\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u8981\u5982\u4f55\u7ec4\u5408\u624d\u5408\u6cd5\uff0c\u5982\u4f55\u7ec4\u5408\u4e0d\u5408\u6cd5\u3002 \u903b\u8f91\u4e0a\uff0c\u4e00\u4e2a\u6027\u8d28\u4e3a (m, k) \u7684\u77e9\u9635 A \u4e0e\u5f62\u72b6\u4e3a (k, n) \u7684\u77e9\u9635 B \u76f8\u4e58\u5f97\u5230 Y \uff0cY\u7684\u5f62\u72b6\u5fc5\u7136\u4e3a (m, n) A * B = Y (m, k) (k, n) (m, n) \u4f9d\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u89c4\u5f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635 A \u6309\u7b2c0\u7ef4\u8fdb\u884c\u5207\u5206\uff0c\u5207\u5206\u4e3a\u5f62\u72b6\u5206\u522b\u4e3a (m0, k) \u3001 (m1, k) \u7684\u4e24\u4e2a\u77e9\u9635\uff1a A0 \u548c A1 \uff0c\u7136\u540e\u5206\u5e03\u52302\u4e2a\u8bbe\u5907\u4e0a\u5206\u522b\u8ba1\u7b97\uff1a device 0: A0 * B = Y0 (m0, k) (k, n) (m0, n) device 1: A1 * B = Y1 (m1, k) (k, n) (m1, n) \u6211\u4eec\u5bb9\u6613\u5f97\u5230\u7269\u7406\u8bbe\u5907\u4e0a\u7684 A0 \u3001 A1 \u4e0e\u903b\u8f91\u4e0a\u7684 A \u7684\u5173\u7cfb\uff0c\u4ee5\u53ca Y0 \u3001 Y1 \u4e0e\u903b\u8f91\u4e0a\u7684 Y \u7684\u5173\u7cfb\uff1a A == A0 + A1 (m, k) (m0, k) (m1, k) Y == Y0 + y1 (m, n) (m0, n) (m1, n) \u4ee5\u4e0a\u7684\u201c+\u201d\u8868\u793a\u62fc\u63a5\uff0c\u4e0b\u540c\u3002 \u53ef\u89c1\uff0c\u6309\u7167\u4ee5\u4e0a\u7684\u65b9\u5f0f\uff0c\u5c06\u903b\u8f91\u4e0a\u7684\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u662f\u80fd\u591f\u5b8c\u6210\u8fd0\u7b97\uff0c\u5e76\u4e14\u6700\u7ec8\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u6b63\u786e\u7ed3\u679c\u7684\u3002 \u4ee5\u4e0a\u8f83\u957f\u7684\u7bc7\u5e45\uff0c\u82e5\u4f7f\u7528 SBP \u6765\u63cf\u8ff0\uff0c\u4f1a\u53d8\u5f97\u5f02\u5e38\u7b80\u5355\uff1a A \u4e3a Split(0)\uff0c B \u4e3a Broadcast\uff0c\u8fd0\u7b97\u7ed3\u679c Y \u4e3a Split(0)\u3002 \u53ef\u89c1\uff0c\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684 SBP\uff0c\u6309\u4ee5\u4e0a\u65b9\u5f0f\u7ec4\u5408\uff0c\u662f\u5408\u6cd5\u7684\u3002\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c\u5408\u6cd5\u7684 SBP \u7ec4\u5408\u4e0d\u6b62\u8fd9\u4e00\u79cd\uff0c\u6bd4\u5982\u8fd8\u53ef\u4ee5\u662f\uff1a A \u4e3a Broadcast\uff0c B \u4e3a Split(1)\uff0c\u8fd0\u7b97\u7ed3\u679c Y \u4e3a Split(1)\u3002 \u4ee5\u53ca A \u4e3a Split(1)\uff0c B \u4e3a Split(0)\uff0c\u8fd0\u7b97\u7ed3\u679c Y \u4e3a PartialSum\u3002 \u4ee5\u4e0a\u51e0\u79cd\u5408\u6cd5\u7684 SBP \u7ec4\u5408\uff0c\u6765\u81ea sbp_parallel.proto \u4e2d\u7684\u6ce8\u91ca\u90e8\u5206\uff0c\u66f4\u8be6\u7ec6\u5730\u8bf4\u660e\u53ef\u4ee5\u67e5\u9605\u8be5\u6587\u4ef6\u3002 \u867d\u7136\u5c55\u793a\u4e86\u591a\u4e2a\u5408\u6cd5\u7684 SBP \u7ec4\u5408\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4efb\u610f\u7684 SBP \u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6bd4\u5982\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\uff0c\u82e5\u5c06 A \u548c B \u5747\u6309\u7167 Split(0) \u5207\u5206\uff1a A == A0 + A1 (m, k) (m0, k) (m1, k) B == B0 + B1 (k, n) (k0, n) (k1, n) \u90a3\u4e48\uff0c\u56e0\u4e3a\u77e9\u9635\u4e58\u6cd5\u8981\u6c42\u5de6\u77e9\u9635\u7684\u5217\u6570\u76ee\u4e0e\u53f3\u77e9\u9635\u7684\u884c\u6570\u76ee\u76f8\u7b49\uff0c\u800c A0 \u3001 A1 \u4e0e B0 \u3001 B1 \u4e4b\u95f4\u65e0\u6cd5\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u6240\u4ee5\u5b83\u4eec\u65e0\u6cd5\u5206\u914d\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u5b8c\u6210\u77e9\u9635\u4e58\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c A \u4e3a Split(0)\uff0c B \u4e3a Split(0) \u7684 SBP \u7ec4\u5408\u4e0d\u5408\u6cd5\u3002 \u6211\u4eec\u5c06\u4e0a\u6587\u51fa\u73b0\u7684\uff0c\u5bf9\u4e8e\u67d0\u4e2a Op\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684 \u4e00\u4e2a\u7279\u5b9a\u7684\u3001\u5408\u6cd5\u7684 SBP \u5c5e\u6027\u7ec4\u5408 \uff0c\u79f0\u4e3a\u8fd9\u4e2a Op \u7684\u4e00\u4e2a SBP Signature \u3002 SBP Signature \u63cf\u7ed8\u4e86 Op \u5982\u4f55\u770b\u5f85\u903b\u8f91\u89c6\u89d2\u7684\u8f93\u5165\u8f93\u51fa\u4e0e\u7269\u7406\u89c6\u89d2\u7684\u6620\u5c04\u5173\u7cfb\u3002","title":"SBP Signature"},{"location":"arch_design/infer_sbp_signature.html#sbp-signature_2","text":"\u6709\u4e86 SBP Signature \u7684\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u63d0\u51fa\u4e24\u4e2a\u95ee\u9898\uff1a Op \u7684\u6240\u6709 Sbp Signature \u662f\u7531 OneFlow \u63a8\u5bfc\u51fa\u6765\u7684\u5417\uff1f \u5982\u679c\u6709\u591a\u4e2a Sbp Signature \u53ef\u4f9b\u9009\u62e9\uff0c\u90a3\u4e48\u5e94\u8be5\u9009\u62e9\u54ea\u4e00\u4e2a\u5462\uff1f \u5bf9\u4e8e\u524d\u4e00\u4e2a\u95ee\u9898\uff0c\u7b54\u6848\u662f\u5426\u5b9a\u7684\uff0c\u56e0\u4e3a Op \u8f93\u5165\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u7684\u7ec4\u5408\u662f\u5426\u5408\u6cd5\uff0c\u4e0e Op \u7684\u8fd0\u7b97\u89c4\u5219\u6709\u5173\uff0c\u5c5e\u4e8e\u4e1a\u52a1\u903b\u8f91\u7684\u8303\u7574\uff0cOneFlow \u4e0d\u53ef\u80fd\u9884\u5148\u77e5\u6653\u6240\u6709\u5df2\u7ecf\u5b58\u5728\u7684\u3001\u8fd8\u672a\u53d1\u660e\u7684 Op \u7684\u8fd0\u7b97\u89c4\u5219\u3002 \u56e0\u6b64\uff0cOneFlow \u5c06\u7f57\u5217\u6240\u6709\u53ef\u80fd\u7684 SBP Signature \u7684\u5de5\u4f5c\uff0c\u4ea4\u7ed9\u4e86 Op \u4f5c\u8005\uff0cOneFlow \u9884\u7559\u4e86\u76f8\u5173\u63a5\u53e3\uff0c\u4f7f\u5f97 Op \u7684\u4f5c\u8005\u53ef\u4ee5\u4e3a\u81ea\u5df1\u7684 Op \u6ce8\u518c\u5408\u6cd5\u7684 SBP Signature\u3002 \u4ee5\u77e9\u9635\u4e58\u6cd5 matmul_op.cpp \u4e3a\u4f8b\uff1a . SetGetSbpFn ([]( user_op :: SbpContext * ctx ) -> Maybe < void > { // (m, k_a) * (k_b, n) where k_a == k_b ... ctx -> NewBuilder () . Split ( user_op :: OpArg ( \"a\" , 0 ), m_axis ) . Broadcast ( user_op :: OpArg ( \"b\" , 0 )) . Split ( ctx -> outputs (), 0 ) . Build (); ctx -> NewBuilder () . Broadcast ( user_op :: OpArg ( \"a\" , 0 )) . Split ( user_op :: OpArg ( \"b\" , 0 ), n_axis ) . Split ( ctx -> outputs (), 1 ) . Build (); ctx -> NewBuilder () . Split ( user_op :: OpArg ( \"a\" , 0 ), k_a_axis ) . Split ( user_op :: OpArg ( \"b\" , 0 ), k_b_axis ) . PartialSum ( ctx -> outputs ()) . Build (); ctx -> NewBuilder () . PartialSum ( user_op :: OpArg ( \"a\" , 0 )) . Broadcast ( user_op :: OpArg ( \"b\" , 0 )) . PartialSum ( ctx -> outputs ()) . Build (); ctx -> NewBuilder () . Broadcast ( user_op :: OpArg ( \"a\" , 0 )) . PartialSum ( user_op :: OpArg ( \"b\" , 0 )) . PartialSum ( ctx -> outputs ()) . Build (); ... \u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c31\u6ce8\u518c\u4e86\uff1a a \u4e3a Split, b \u4e3a Broadcast, \u8f93\u51fa\u4e3a Split a \u4e3a Broadcast, b \u4e3a Split, \u8f93\u51fa\u4e3a Split a \u4e3a Split, b \u4e3a Split, \u8f93\u51fa\u4e3a PartialSum a \u4e3a PartialSum, b \u4e3a Broadcast, \u8f93\u51fa\u4e3a PartialSum a \u4e3a Broadcast, b \u4e3a PartialSum, \u8f93\u51fa\u4e3a PartialSum 5\u79cd SBP Signature\u3002OneFlow \u4e2d\u51c6\u5907\u4e86\u6570\u636e\u7ed3\u6784 SbpSignatureList \u7528\u4e8e\u5b58\u653e\u591a\u4e2a SBP Signature\uff1a message SbpSignatureList { repeated SbpSignature sbp_signature = 1; } \u63a5\u7740\uff0c\u6211\u4eec\u6765\u770b\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff0c\u65e2\u7136\u4e00\u4e2a Op \u53ef\u80fd\u5b58\u5728\u591a\u4e2a SBP Signature\uff0c\u90a3\u4e48\u5728\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u662f\u4e0d\u662f\u9700\u8981\u7528\u6237\u4f9d\u636e\u795e\u7ecf\u7f51\u7edc\u7684\u60c5\u51b5\u800c\u81ea\u5df1\u6307\u5b9a\u5462\uff1f \u7b54\u6848\u662f\uff1a\u7528\u6237\u53ef\u4ee5\u81ea\u5df1\u6307\u5b9a\uff0c\u4f46\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5e76\u6ca1\u6709\u8fd9\u4e2a\u5fc5\u8981\u3002\u56e0\u4e3a\u5728\u6784\u56fe\u9636\u6bb5\uff0cOneFlow \u4f1a\u6839\u636e\u8bbe\u5907\u4fe1\u606f\u4e0e\u8f93\u5165\u6570\u636e\u7684\u60c5\u51b5\uff0c\u5728\u6240\u6709 SBP Signature \u4e2d\uff0c\u81ea\u52a8\u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684 SBP Signature\u3002 \u5728 OneFlow \u4e2d\uff0c\u4f9d\u636e\u8f93\u5165\u7684 SBP \u5c5e\u6027\uff0c\u9009\u62e9\u6700\u4f18\u7684 SBP Signature\uff0c\u79f0\u4e3a SBP Signature \u63a8\u5bfc \u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u7ed3\u5408\u6e90\u7801\uff0c\u4ecb\u7ecd SBP Signature \u63a8\u5bfc\u7684\u7ec6\u8282\u3002","title":"\u9009\u62e9\u6700\u4f18\u7684 SBP Signature"},{"location":"arch_design/infer_sbp_signature.html#sbp-signature_3","text":"\u6240\u8c13\u7684 SBP Signature \u63a8\u5bfc\uff0c\u5c31\u662f\u5728\u591a\u4e2a\u5408\u6cd5 SBP Signature \u4e2d\uff0c\u4e3a Op \u9009\u62e9\u4e00\u4e2a\u6700\u4f18\u7684\u3002\u76ee\u524d\uff0cOneFlow \u5bf9\u4e8e\u201c\u6700\u4f18\u201d\u7684\u9ed8\u8ba4\u6807\u51c6\u662f\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\u3002","title":"SBP Signature \u63a8\u5bfc"},{"location":"arch_design/infer_sbp_signature.html#_2","text":"\u5728 Lazy \u6a21\u5f0f\u4e0b\uff0c\u51fd\u6570 ::InferOpSbpSignature \u662fSBP Signature \u63a8\u5bfc\u7684\u5165\u53e3\uff0c\u5728 job_build_and_infer_ctx.cpp \u7684 JobBuildAndInferCtx::InferOpOutSbpParallel \u4ee5\u53ca op_graph.cpp \u7684 OpGraph::InferOpNodeSbpSignature \u4e2d\u90fd\u4f1a\u8c03\u7528\u5b83\u3002 \u524d\u8005\u53d1\u751f\u5728 OneFlow \u6784\u5efa\u7528\u6237 Python \u7aef\u7684\u7f51\u7edc\u65f6\uff0c\u540e\u8005\u53d1\u751f\u5728 OneFlow \u5bf9\u7528\u6237\u7684\u7f51\u7edc\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u7f16\u8bd1\u4f18\u5316\u65f6\u3002\u4ee5\u524d\u8005\u4e3a\u4f8b\uff0c\u8c03\u7528\u5173\u7cfb\u4e3a\uff1a JobBuildAndInferCtx::InferOpOutSbpParallel -> ::InferOpSbpSignature -> Operator::InferSbpSignatureIf -> Operator::InferSbpSignature \u5404\u51fd\u6570\uff08\u65b9\u6cd5\uff09\u7684\u63a5\u53e3\u53ca\u4e3b\u8981\u5de5\u4f5c\u7f57\u5217\u5982\u4e0b\uff0c\u9700\u8981\u63d0\u524d\u8bf4\u660e\uff1a\u4e0b\u6587\u51fa\u73b0\u7684\u540d\u5982 XX4YY \u7684\u51fd\u6570\uff0c\u5747\u4e3a\u5bf9\u8c61\u8f6c\u5316\u65b9\u6cd5(Get XX for YY)\uff0c\u6bd4\u5982 ConstBlobDesc4Ibn \u5c31\u662f\u6839\u636e Ibn (input blob name) \u5f97\u5230 const blob description\u3002 JobBuildAndInferCtx::InferOpOutSbpParallel Maybe < void > JobBuildAndInferCtx :: InferOpOutSbpParallel ( Operator * op , const SbpSignature & sbp_sig_conf , const ParallelDesc & parallel_desc ); \u5728 JobBuildAndInferCtx::InferOpOutSbpParallel \u63a5\u53d7 Op\u3001\u7528\u6237\u6307\u5b9a\u7684 SBP Signature\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u3001\u5e76\u884c\u914d\u7f6e\u4fe1\u606f\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u4e14\u5728\u5185\u90e8\u6574\u7406 Op \u7684\u8f93\u5165\u7684 SBP \uff0c\u5c06\u8fd9\u4e9b\u4fe1\u606f\u4e00\u8d77\u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42\u7684 InferOpSbpSignature \u3002 InferOpSbpSignature Maybe < void > InferOpSbpSignature ( Operator * op , const SbpSignature & sbp_sig_conf , const ParallelDesc & parallel_desc , const HashMap < std :: string , SbpInferHint >& ibn2sbp_infer_hint , std :: function < Maybe < const OptInt64 *> ( const std :: string & ) > BatchAxis4BnInOp ); \u5728 InferOpSbpSignature \u4e2d\u4e3b\u8981\u505a\u51c6\u5907\u5de5\u4f5c\uff1a\u5b83\u8bbe\u8ba1\u4e86\u4e00\u4e2a cost model\uff0c\u4e3a\u5404\u4e2a\u53ef\u9009\u7684 SBP Signature \u8fdb\u884c\u6253\u5206\uff0c\u5206\u6570\u6700\u4f4e\u7684 SBP Signature \u610f\u5473\u7740\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\u3002\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8bbe\u8ba1\u7684 cost model \u5c06\u4f1a\u5728\u4e0b\u4e00\u5c42 Operator::InferSbpSignatureIf \u4e2d\u4f7f\u7528\u3002 Operator::InferSbpSignatureIf Maybe < void > Operator :: InferSbpSignatureIf ( const SbpSignature & sbp_sig_conf , const std :: function < int32_t ( const SbpSignature & ) >& CalcOrderValue4SbpSig , std :: function < Maybe < const SbpInferHint *> ( const std :: string & ) > SbpInferHint4Ibn , const ParallelDesc & parallel_desc ); \u5728 Operator::InferSbpSignatureIf \u4e2d\u5c06\u6839\u636e\u662f\u5355\u673a\u8fd8\u662f\u5206\u5e03\u5f0f\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u5904\u7406\uff1a \u5982\u679c\u662f\u5355\u673a\u60c5\u51b5\uff0c\u5219\u8f93\u5165\u8f93\u51fa\u5747\u91c7\u7528 Split(0) \u5373\u53ef\uff1b\u5982\u679c\u662f\u5206\u5e03\u5f0f\u60c5\u51b5\uff0c\u5219\u8c03\u7528\u4e0b\u4e00\u5c42\u7684 Operator::InferSbpSignature \uff0c\u6839\u636e\u4e0a\u4e00\u5c42\u8bbe\u8ba1\u7684 cost model\uff0c\u6311\u9009\u51fa\u4ee3\u4ef7\u6700\u5c0f\u7684 SBP Signature\u3002 Operator::InferSbpSignature Maybe < void > Operator :: InferSbpSignature ( SbpSignature * sbp_signature , const SbpSignature & sbp_sig_conf , const std :: function < int32_t ( const SbpSignature & ) >& CalcOrderValue4SbpSig , std :: function < Maybe < const SbpInferHint *> ( const std :: string & ) > SbpInferHint4Ibn , const ParallelDesc & parallel_desc ); \u5728 Operator::InferSbpSignature \u4e2d\uff0c\u5c06\u83b7\u53d6 Op \u4f5c\u8005\u6ce8\u518c\u7684\u6240\u6709SBP Signature\uff0c\u7136\u540e\u6839\u636e cost model \u5bf9\u5b83\u4eec\u8fdb\u884c\u6253\u5206\u5e76\u6392\u5e8f\uff0c\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u8005\u3002","title":"\u6d41\u7a0b\u6982\u8ff0"},{"location":"arch_design/infer_sbp_signature.html#sbp-signature_4","text":"SBP \u7684\u63a8\u5bfc\uff0c\u53d1\u751f\u5728\u8ba1\u7b97\u56fe\u6784\u56fe\u8fc7\u7a0b\u4e2d\uff0c\u76ee\u524d\u91c7\u7528\u7684\u662f\u8d2a\u5fc3\u7b97\u6cd5\uff0c\u57fa\u672c\u6d41\u7a0b\u662f\uff1a \u901a\u8fc7\u8ba1\u7b97\u56fe\u7684\u62d3\u6251\u5e8f\u904d\u5386\u6bcf\u4e2a Op \u5bf9\u4e8e\u8ba1\u7b97\u56fe\u7684 source \u8282\u70b9\uff08\u65e0\u8f93\u5165\u7684\u8282\u70b9\uff09\uff0c\u5982\u679c\u662f\u6a21\u578b\uff08variable\uff09\uff0cSBP \u5c5e\u6027\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u662f Broadcast\uff1b\u5982\u679c\u662f\u6570\u636e\uff0cSBP \u5c5e\u6027\u9ed8\u8ba4\u4e3a Split \u9664\u4e86source\u8282\u70b9\u5916\u7684\u5176\u4ed6\u6240\u6709\u7ed3\u70b9\uff0c\u5728\u62d3\u6251\u5e8f\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u5219\u4f1a\u5bf9 Op \u7684 SBP Signature \u8fdb\u884c\u63a8\u5bfc\uff0c\u5bfb\u627e\u4e00\u4e2a cost model \u6700\u5c0f\u7684\u7684 SBP Signature \u7ed3\u5408\u4ee5\u4e0a\u5185\u5bb9\u53ca\u5728\u6d41\u7a0b\u6982\u8ff0\u4e2d\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u77e5\u9053 SBP Signature \u63a8\u5bfc\u7684\u5173\u952e\u5728 cost model \u5982\u4f55\u8bc4\u4ef7 SBP Signature\u3002\u6211\u4eec\u5c06\u7ed3\u5408\u4ee3\u7801\u91cd\u70b9\u4ecb\u7ecd OneFlow \u5982\u4f55\u8ba1\u7b97 SBP Signature \u7684\u4ee3\u4ef7\u3002 \u5728 InferOpSbpSignature \u4e2d\uff0c\u6709\u5bf9\u5e94\u7684 cost model\uff0c\u7528\u4e8e\u8ba1\u7b97 SBP Signature \u7684\u4ee3\u4ef7\uff0c\u91c7\u7528\u7684\u5177\u4f53\u7b97\u6cd5\u5982\u4e0b\u3002 \u9996\u5148\uff0c OneFlow \u51c6\u5907\u4e86\u4e09\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u4ece\u4e09\u4e2a\u89d2\u5ea6\uff0c\u6839\u636e\u8f93\u5165\u4ee5\u53ca\u5f85\u9009\u7684 SBP Signature \u4e2d\u7684 SBP \u5c5e\u6027\u8fdb\u884c\u6253\u5206\uff1a auto OrderValue4HasBatchAxis = [ & ]( const std :: string & bn , const SbpParallel & sbp_parallel ) -> int32_t { const auto & batch_axis = * BatchAxis4BnInOp ( bn ); return -1 * ( batch_axis . has_value () && sbp_parallel . has_split_parallel () && sbp_parallel . split_parallel (). axis () == batch_axis . value ()); }; auto OrderValue4HasNoBatchAxis = [ & ]( const std :: string & ibn , const SbpParallel & sbp_parallel ) -> int32_t { const auto & batch_axis = * BatchAxis4BnInOp ( ibn ); return -2 * ( batch_axis . has_value () == false && SbpInferHint4Ibn ( ibn ) -> sbp_parallel (). has_split_parallel () == false && sbp_parallel . has_split_parallel () == false ); }; auto OrderValue4SbpHint = [ & ]( const std :: string & ibn , const SbpParallel & sbp_parallel ) -> int32_t { return -3 * ( SbpInferHint4Ibn ( ibn ) -> sbp_parallel () == sbp_parallel ); }; \u56e0\u4e3a\u4e09\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u90fd\u662f \u6570\u5b57*bool \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u8fd4\u56de\u503c\u4e3a -3\uff0c-2\uff0c-1\uff0c0\u4e2d\u7684\u67d0\u4e2a\u3002 \u6bd4\u5982\uff0c\u82e5\u4ee5\u4e0b\u8868\u8fbe\u5f0f\u4e3a true \uff1a ( SbpInferHint4Ibn ( ibn ) -> sbp_parallel () == sbp_parallel ) \u5219\u610f\u5473\u7740\u5f53\u524d\u8f93\u5165\u7684 SBP \u5c5e\u6027\uff0c\u4e0e\u5f85\u9009\u62e9\u7684 SBP Signature \u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e\u7684 SBP \u5c5e\u6027\u662f\u4e00\u81f4\u7684\uff0c\u90a3\u4e48\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\uff0c\u5206\u6570\u4e3a-3\u3002 \u4ee5\u4e0a\u4e09\u4e2a\u51fd\u6570\uff0c\u53ea\u662f\u5bf9\u4e8e\u5355\u4e2a input blob \u8fdb\u884c\u4ee3\u4ef7\u8bc4\u4f30\uff0c\u4e4b\u540e\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a CalcOrderValue4SbpSig \u51fd\u6570\uff0c\u904d\u5386 Op \u7684\u6240\u6709\u8f93\u5165\uff0c\u7efc\u5408\u4ee5\u4e0a\u591a\u4e2a\u89d2\u5ea6\u7684\u7ed3\u679c\uff0c\u5f97\u5230\u4ee3\u4ef7\u7684\u7efc\u5408\u5206\u6570\uff1a CalcOrderValue4SbpSig = [ & ]( const SbpSignature & sbp_signature ) -> int32_t { int32_t order_value = 0 ; for ( const auto & ibn : op -> input_bns ()) { // \u5f85\u8ba1\u7b97\u4ee3\u4ef7\u7684 SBP Signature \u4e2d\uff0c\u5bf9\u5e94\u7684 SBP \u5c5e\u6027 const auto & sbp_parallel_it = sbp_signature . bn_in_op2sbp_parallel (). find ( ibn ); // \u6839\u636e input blob \u548c SBP Signature \u4e2d\u7684 SBP\uff0c\u8fdb\u884c\u6253\u5206 order_value += OrderValue4HasBatchAxis ( ibn , sbp_parallel_it -> second ); order_value += OrderValue4HasNoBatchAxis ( ibn , sbp_parallel_it -> second ); order_value += OrderValue4SbpHint ( ibn , sbp_parallel_it -> second ); } for ( const auto & obn : op -> output_bns ()) { const auto & sbp_parallel_it = sbp_signature . bn_in_op2sbp_parallel (). find ( obn ); order_value += OrderValue4HasBatchAxis ( obn , sbp_parallel_it -> second ); } return order_value ; }; \u4ee5\u4e0a\u51c6\u5907\u4e86 cost model \u7684\u8bc4\u4ef7\u6807\u51c6\uff0c\u771f\u6b63\u7684\u8bc4\u4ef7\u65f6\u673a\uff0c\u53d1\u751f\u5728 Operator::InferSbpSignatureIf \u4e2d\uff1a Operator :: InferSbpSignatureIf (...) { if ( parallel_desc . parallel_num () == 1 ) { auto * bn2sbp = mut_sbp_signature () -> mutable_bn_in_op2sbp_parallel (); for ( const auto & ibn : input_bns ()) { ( * bn2sbp )[ ibn ]. mutable_split_parallel () -> set_axis ( 0 ); } for ( const auto & obn : output_bns ()) { ( * bn2sbp )[ obn ]. mutable_split_parallel () -> set_axis ( 0 ); } } else if ( parallel_desc . parallel_num () > 1 ) { return InferSbpSignature ( mut_sbp_signature (), sbp_sig_conf , CalcOrderValue4SbpSig , SbpInferHint4Ibn , parallel_desc ); } } \u5176\u903b\u8f91\u975e\u5e38\u7b80\u5355: \u5f53 parallel_desc.parallel_num() == 1 \u65f6\uff0c\u8bf4\u660e\u662f\u5355\u673a\u5355\u5361\u60c5\u51b5\uff0c\u6b64\u65f6 Split\u3001Broadcast\u3001PartialSum \u662f\u7b49\u4ef7\u7684\uff0cSBP \u5c5e\u6027\u8bbe\u7f6e\u4e3a\u54ea\u79cd\u90fd\u6b63\u786e\uff0c\u56e0\u6b64\u4e0d\u59a8\u5c06\u6240\u6709\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u8bbe\u7f6e\u4e3a Split(0) \u5373\u53ef \u5f53\u5e76\u884c\u6570\u76ee\u5927\u4e8e1\u65f6\uff0c\u5219\u8c03\u7528 Operator::InferSbpSignature \uff0c\u4f9d\u636e cost model\uff0c\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u7684 SBP Signature \u5728 Operator::InferSbpSignature \u4e2d\uff1a Operator :: InferSbpSignature (...){ // get op sbp signatures ... SbpSignatureList sbp_sig_list ; GetSbpSignaturesIf ( LogicalBlobDesc4Ibn , parallel_desc , & sbp_sig_list ); ... // sort sbp signatures by copy cost, then return the one with least cost std :: vector < const SbpSignature *> sorted_sbp_signatures ; SortSbpSignatureListByCopyCost ( filtered_sbp_sigs_by_conf , input_bns (), SbpInferHint4Ibn , CalcOrderValue4SbpSig , & sorted_sbp_signatures ); * sbp_signature = * sorted_sbp_signatures . at ( 0 ); return Maybe < void >:: Ok (); } \u5148\u901a\u8fc7 GetSbpSignaturesIf \u83b7\u53d6 Op \u4f5c\u8005\u8bbe\u7f6e\u7684\u6240\u6709 SBP Signature\uff0c\u7136\u540e\u8c03\u7528 SortSbpSignatureListByCopyCost \uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u5185\u90e8\uff0c\u5c06\u8c03\u7528 CalcOrderValue4SbpSig \u5bf9\u6240\u6709\u7684 SBP Signature \u8fdb\u884c\u6253\u5206\uff0c\u5e76\u6392\u5e8f\uff0c\u6392\u5e8f\u540e\u7684\u7ed3\u679c\uff0c\u6309\u4ee3\u4ef7\u5347\u5e8f\u653e\u7f6e\u5728 sorted_sbp_signatures \u4e2d\u3002 \u56e0\u6b64\uff0c\u6700\u7ec8\u9009\u62e9\u4ee3\u4ef7\u6700\u5c0f\u7684 sorted_sbp_signatures.at(0) \u4f5c\u4e3a Op \u7684 SBP Signature\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9ed8\u8ba4\u7684 cost model \u867d\u7136\u7b80\u5355\uff0c\u4f46\u7ecf\u8fc7\u5b9e\u8df5\u8bc1\u660e\u5df2\u7ecf\u6709\u975e\u5e38\u4e0d\u9519\u7684\u6548\u679c\u3002\u6b64\u5916\uff0c\u5982\u679c\u60f3\u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u6807\u51c6\u9009\u62e9 SBP Signature\uff0c\u53ea\u9700\u8981\u91cd\u5199\u865a\u51fd\u6570 Operator::InferSbpSignature \u5373\u53ef\u3002 \u6700\u540e\uff0c\u66f4\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86\u672c\u6587\u4ecb\u7ecd\u7684 SBP Signature \u63a8\u5bfc\u65b9\u6cd5\u5916\uff0cOneFlow \u56e2\u961f\u6b63\u5728\u7814\u53d1\u4e00\u79cd\u5bfb\u6c42\u5168\u5c40\u6700\u4f18\u89e3\u7684\u81ea\u52a8\u5e76\u884c\u65b9\u6cd5\uff0c\u656c\u8bf7\u671f\u5f85\u3002","title":"SBP Signature \u7684\u4ee3\u4ef7\u6a21\u578b"},{"location":"arch_design/overview.html","text":"OneFlow \u67b6\u6784\u8bbe\u8ba1\u6982\u89c8 \u00b6 \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u4ecb\u7ecd\uff1a OneFlow \u7684\u6838\u5fc3\u67b6\u6784 OneFlow \u8bad\u7ec3\u4efb\u52a1\u4ece Python \u5c42\u5230\u8fd0\u884c\u65f6\u7684\u6d41\u7a0b \u901a\u8fc7\u9605\u8bfb\u672c\u6587\uff0c\u53ef\u4ee5\u5bf9 OneFlow \u7684\u67b6\u6784\u6709\u4e00\u4e2a\u521d\u6b65\u7684\u4e86\u89e3\uff1b\u672c\u6587\u672b\u5c3e\u9644\u4e0a OneFlow \u5404\u4e2a\u6a21\u5757\u6280\u672f\u7279\u8272\u6df1\u5165\u4ecb\u7ecd\u7684\u6587\u7ae0\u7d22\u5f15\uff0c\u8bfb\u8005\u53ef\u4ee5\u6839\u636e\u5174\u8da3\u548c\u9700\u8981\u81ea\u884c\u9009\u62e9\u3002 OneFlow \u7684\u67b6\u6784\u5c42\u6b21\u56fe\u89e3 \u00b6 \u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5982\u679c\u6682\u65f6\u7565\u53bb OneFlow \u7684\u4e0a\u5c42\u6a21\u578b\u5e93\u3001\u5e95\u5c42\u652f\u6491\u5e93\uff0c\u96c6\u4e2d\u5173\u6ce8 OneFlow \u5185\u90e8\u67b6\u6784\u4e2d\u4e0e\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u76f4\u63a5\u76f8\u5173\u7684\u90e8\u5206\uff0c\u603b\u4f53\u4e0a\u53ef\u5206\u4e3a\u4e09\u5c42\uff1a Python\u5c42\uff1a\u7528\u6237\u901a\u8fc7\u8c03\u7528Python\u63a5\u53e3\u6765\u914d\u7f6e\u8d85\u53c2\uff0c\u5e76\u7f16\u5199 OneFlow \u7684\u4f5c\u4e1a\u51fd\u6570\u6765\u5b9a\u4e49\u7f51\u7edc\uff0c\u8fd9\u4e00\u5207\u7684\u4fe1\u606f\uff0c\u6700\u7ec8\u4f1a\u5728 OneFlow \u4e2d\u5e8f\u5217\u5316\u4e3a\u5b57\u8282\u6d41\uff0c\u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42-- \u7f16\u8bd1\u65f6\u5c42 \uff1b \u7f16\u8bd1\u65f6\u5c42\uff1aOneFlow \u5b9e\u73b0\u7684\u7f16\u8bd1\u5668\uff0c\u5c06\u63a5\u53d7 Python \u5c42\u4f20\u9012\u7684\u5b57\u8282\u6d41\uff0c\u5e76\u5c06\u5b57\u8282\u6d41\u4e2d\u6240\u627f\u8f7d\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u4fe1\u606f\uff0c\u7ecf\u5206\u6790\u3001\u4f18\u5316\u540e\uff0c\u7f16\u8bd1\u3001\u94fe\u63a5\u4e3a OneFlow \u4e2d\u7684 \u6267\u884c\u8ba1\u5212 (Execution Plan)\uff0c\u6700\u540e\u5c06 Execution Plan \u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42-- \u8fd0\u884c\u65f6\u5c42 \uff1b \u8fd0\u884c\u65f6\u5c42\uff1aOneFlow \u7684\u6267\u884c\u5f15\u64ce\u63a5\u6536\u4e0a\u4e00\u5c42\u4f20\u9012\u6765\u7684\u6267\u884c\u8ba1\u5212( Plan )\uff0c\u6267\u884c\u8ba1\u5212\u7531\u591a\u4e2a\u66f4\u5c0f\u5355\u5143\u7684\u4efb\u52a1\u63cf\u8ff0( Task Proto )\u7ed3\u6784\u7ec4\u6210\uff0cOneFlow \u7684\u6267\u884c\u5f15\u64ce\u4f1a\u89e3\u6790 Plan \uff0c\u5e76\u4e3a\u6bcf\u4e2a Task Proto \u5206\u914d\u4e00\u4e2a\u6267\u884c\u5355\u5143 actor \uff0c\u4f17\u591a actor \u4e00\u8d77\u8fd0\u4f5c\uff0c\u5b8c\u6210 OneFlow \u7684 \u53bb\u4e2d\u5fc3\u5316\u3001\u5206\u5e03\u5f0f\u3001\u6d41\u5f0f\u8ba1\u7b97 \u3002 \u6709\u4e86\u4ee5\u4e0a\u7684\u57fa\u672c\u5c42\u6b21\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4e2d\uff0c\u7ed3\u5408\u5177\u4f53\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u4ee3\u7801\uff0c\u5411\u5927\u5bb6\u4ecb\u7ecd OneFlow \u7684Python\u5c42\u3001\u7f16\u8bd1\u65f6\u3001\u8fd0\u884c\u65f6\u7684\u6574\u4e2a\u6d41\u7a0b\u662f\u5982\u4f55\u8fd0\u884c\u7684\u3002 \u672c\u6587\u8ba8\u8bba\u5bf9\u8c61\u4e3a OneFlow \u811a\u672c\u7f16\u7a0b\u6240\u5bf9\u5e94\u7684 lazy \u6a21\u5f0f\uff0c OneFlow \u4ea4\u4e92\u5f0f\u7f16\u7a0b\u6240\u5bf9\u5e94\u7684 eager \u6a21\u5f0f\u4e0d\u5728\u672c\u6587\u8ba8\u8bba\u8303\u56f4\u3002 OneFlow \u4efb\u52a1\u662f\u5982\u4f55\u8dd1\u8d77\u6765\u7684 \u00b6 \u5982\u679c\u60f3\u7ed3\u5408 OneFlow \u7684\u6e90\u7801\u7814\u7a76 OneFlow \u7684\u8bbe\u8ba1\uff0c\u5efa\u8bae\u91cd\u70b9\u5173\u6ce8 OneFlow \u6e90\u7801\u76ee\u5f55\u4e0b\u7684 protobuf \u6587\u4ef6\uff0cOneFlow \u4e2d\u63a7\u5236\u9762\u7684\u6570\u636e\u7ed3\u6784\u3001\u534f\u8bae\uff0c\u90fd\u662f\u4f7f\u7528 protobuf \u5b9a\u4e49\u7684\uff0c\u7ed3\u5408\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u66f4\u5feb\u7406\u89e3 OneFlow \u7684\u5185\u90e8\u8bbe\u8ba1\u3002 \u4ee5\u4e0b\uff0c\u6211\u4eec\u5c06\u9488\u5bf9\u901a\u5e38\u60c5\u51b5\u4e0b OneFlow \u811a\u672c\u6267\u884c\u8fc7\u7a0b(\u5982 3\u5206\u949f\u5feb\u901f\u4e0a\u624b )\uff0c\u9010\u5c42\u5206\u6790 OneFlow \u5728Python\u5c42\u3001\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u5230\u5e95\u90fd\u505a\u4e86\u54ea\u4e9b\u5de5\u4f5c\u3002 Python \u5c42\u6b21 \u00b6 \u6211\u4eec\u5728\u4f7f\u7528 OneFlow \u7684\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u77e5\u9053\uff0cOneFlow \u9700\u8981\u4f7f\u7528 @oneflow.global_function \u88c5\u9970\u5668\u6765\u4fee\u9970\u4e00\u4e2apython\u7f16\u5199\u7684\u201c\u4f5c\u4e1a\u51fd\u6570\u201d\u3002 \u6bd4\u5982\uff1a @flow . global_function ( get_train_config ()) def train_job (): # ... \u5728 oneflow/python/framework/function_util.py \u4e2d\u53ef\u4ee5\u627e\u5230 global_function \u88c5\u9970\u5668\u5bf9\u5e94\u7684\u5185\u90e8\u4ee3\u7801\uff1a def Decorator ( job_func ): #... sess = session_ctx . GetDefaultSession () @functools . wraps ( job_func ) def Func ( * args , ** kwargs ): return _RunLazyJob ( sess , job_func , * args , ** kwargs ) sess . AddJob ( _CloneFunctionDesc ( function_config . function_desc , job_func )) #... return Func \u53ef\u4ee5\u770b\u5230\uff0c\u88c5\u9970\u5668\u8fd4\u56de\u7684\u662f Func \u51fd\u6570\uff0c\u6211\u4eec\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u8c03\u7528\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u5176\u5b9e\u771f\u6b63\u6267\u884c\u7684\u662f\u6b64\u5904\u7684 Func \u3002 \u88c5\u9970\u5668\u7684\u4e3b\u8981\u4f5c\u7528\u6709\uff1a \u901a\u8fc7\u8c03\u7528 sess.AddJob \uff0c\u5c06\u8bad\u7ec3\u7684\u73af\u5883\u914d\u7f6e\u53ca\u4f5c\u4e1a\u51fd\u6570\u7684\u4fe1\u606f\uff0c\u6dfb\u52a0\u5230\u5f53\u524d session \u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5728\u7f16\u8bd1\u65f6\u4f1a\u88ab\u7528\u5230 \u901a\u8fc7\u4fee\u9970\u5668\uff0c\u4f7f\u5f97\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\u88ab\u5bfc\u5411 _RunLazyJob \uff0c\u6211\u4eec\u5c06\u770b\u5230\u5728 _RunLazyJob \u4e2d\u5305\u62ec\u4e86\u7f16\u8bd1 job_func \u7684\u4ee3\u7801 \u4ee5\u4e0b\uff0c\u6211\u4eec\u6765\u5c55\u5f00\u8ba8\u8bba sess.AddJob \u4e0e _RunLazyJob \u7684\u7ec6\u8282\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u5e8f\u5217\u5316 \u00b6 \u5728 /oneflow/python/framework/session_util.py \u4e2d\u53ef\u4ee5\u770b\u5230 AddJob \u7684\u5b9e\u73b0\uff1a class Session ( object ): #... def AddJob ( self , function_desc ): #... self . job_name2function_desc_ [ function_desc . job_func . __name__ ] = function_desc \u53ef\u4ee5\u770b\u5230\uff0c session \u4e2d\u6709\u4e00\u4e2a\u540d\u4e3a job_name2function_desc_ \u7684\u5b57\u5178\uff0c AddJob \u5c06\u4f5c\u4e1a\u51fd\u6570\u7684\u540d\u5b57\u4f5c\u4e3a key\uff0c\u914d\u7f6e\u4fe1\u606f\u4f5c( function_desc )\u4e3a value \u653e\u7f6e\u8fdb\u53bb\uff0c\u914d\u7f6e\u4fe1\u606f\u53ef\u4ee5\u5728 oneflow/core/job/job.proto \u4e2d\u67e5\u770b\u3002 \u5c06\u8bad\u7ec3\u914d\u7f6e\u4fe1\u606f\u52a0\u5165\u5230 session \u4e2d\u7684\u4e3b\u8981\u539f\u56e0\uff0c\u662f OneFlow \u5728\u7f16\u8bd1\u65f6\u9700\u8981\u8fd9\u4e9b\u4fe1\u606f\u6765\u8fdb\u884c\u63a8\u7406\u3001\u4f18\u5316\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790 OneFlow \u5728 Python\u5c42\u6b21\u662f\u5982\u4f55\u89e6\u53d1\u7f16\u8bd1\u8fc7\u7a0b\u7684\u3002 \u6211\u4eec\u89c2\u5bdf _RunLazyJob \u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u53ef\u4ee5\u627e\u5230 OneFlow \u8fdb\u884c\u5e8f\u5217\u5316\u5e76\u89e6\u53d1 OneFlow C++ \u5c42\u7f16\u8bd1\u7684\u4ee3\u7801\u4f4d\u7f6e\uff1a def _RunLazyJob ( session , job_func , * args , ** kwargs ): return session . TryInit () . LazyRun ( job_func , * args , ** kwargs ) \u8ddf\u8fdb session \u5bf9\u8c61\u7684 TryInit \u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c session.TryInit \u4f1a\u6839\u636e\u5f53\u524d session \u7684\u72b6\u6001\uff0c\u51b3\u5b9a\u662f\u5426\u89e6\u53d1\u7f16\u8bd1\uff1a class Session ( object ): #... def TryInit ( self ): if self . status_ is SessionStatus . OPEN : self . Init () return self def Init ( self ): assert self . status_ is SessionStatus . OPEN self . status_ = SessionStatus . RUNNING #... _TryCompleteConfigProto ( self . config_proto ) for job_name , func_desc in self . job_name2function_desc_ . items (): compiler . Compile ( self , func_desc , self . config_proto ) #... c_api_util . StartGlobalSession () return self \u4ece\u4ee5\u4e0a\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u5f53\u524d Session \u5904\u4e8e \"OPEN\" \u72b6\u6001\uff0c\u90a3\u4e48 session \u4f1a\u8c03\u7528 Init \uff0c \u904d\u5386\u4e4b\u524d\u901a\u8fc7 AddJob \u8bbe\u7f6e\u5728 session \u4e2d\u7684 job_name2function_desc_ \u4e2d\u7684\u5404\u4e2a job \uff0c\u5e76\u4e14\u8c03\u7528 compiler.Compile \u7f16\u8bd1\uff0c compiler.Compile \u7684\u5185\u90e8\u5b9e\u73b0\u4e3a\uff1a def Compile ( session , function_desc , config_proto ): with InterpretScope ( session , function_desc , config_proto ): _CompileJob ( function_desc ) c_api_util . CurJobBuildAndInferCtx_Complete () \u5176\u4e2d _CompileJob \u4e2d\u5c06\u5bf9 function_desc \u6240\u63cf\u8ff0\u7684\u4f5c\u4e1a\u51fd\u6570\u8fdb\u884c\u5e8f\u5217\u5316\u5e76\u5728\u5185\u90e8\u8c03\u7528 C++ \u5c42\u4ee3\u7801\u8fdb\u884c\u6784\u56fe\u4f18\u5316\u3002\u518d\u901a\u8fc7 c_api_util.CurJobBuildAndInferCtx_Complete \u544a\u4e4b C++ \u5c42\u5e8f\u5217\u5316\u5b8c\u6210\u3002 \u5b8c\u6210 compiler.Compile \u7684\u5de5\u4f5c\u540e\uff0c\u5c06\u901a\u8fc7 c_api_util.StartGlobalSession() \u89e6\u53d1 C++ \u5c42\uff0c\u521b\u5efa session\uff0c\u5f00\u59cb C++ \u5c42\u7684\u7f16\u8bd1 Plan \u7684\u5de5\u4f5c\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528 \u00b6 \u56de\u987e\u4e0a\u6587\u63d0\u5230\u5230\u7684 _RunLazyJob \u4ee3\u7801\uff1a def _RunLazyJob ( session , job_func , * args , ** kwargs ): return session . TryInit () . LazyRun ( job_func , * args , ** kwargs ) \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5728 TryInit() \u4e2d\u5b8c\u6210\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u5e8f\u5217\u5316\uff0c\u5e76\u901a\u77e5 \u7f16\u8bd1\u65f6\u5b8c\u6210\u7f16\u8bd1\u6784\u56fe\u5de5\u4f5c\u3002 \u800c LazyRun \u5185\u90e8\uff0c\u5c31\u5bf9\u5e94\u4e86\u7528\u6237\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0cPython\u5c42\u5982\u4f55\u8fd0\u884c\u4f5c\u4e1a\u51fd\u6570\u3002 def LazyRun ( self , job_func , * arg ): #... remote_blobs = self . LaunchUserJob ( job_func , * arg ) #... return LazyFutureRemoteBlobs ( self ) . SetResult ( remote_blobs ) . Inited () \u5176\u4e2d LaunchUserJob \u63a5\u53d7\u7684\u53c2\u6570 job_func \u4e0e arg \u5c31\u5206\u522b\u662f\u7528\u6237\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\u7684\u4f5c\u4e1a\u51fd\u6570\u4ee5\u53ca\u4f20\u9012\u7684\u53c2\u6570\u3002 LaunchUserJob \u4f1a\u904d\u5386 job_func \u4e2d\u9700\u8981\u6267\u884c\u7684\u8ba1\u7b97\u5355\u5143\uff0c\u5e76\u6700\u7ec8\u901a\u5728 session.LaunchJob ( /oneflow/python/framework/session_util.py )\u4e2d\u901a\u8fc7\u8c03\u7528 c_api_util.LaunchJob(job_instance) \u6267\u884c\u8ba1\u7b97\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u56e0\u4e3a\u5f53\u7528\u6237\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0cOneFlow \u5df2\u7ecf\u5b8c\u6210\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u7f16\u8bd1\u6784\u56fe\uff0c\u5f97\u5230\u4e86\u6267\u884c\u8ba1\u5212(Execution Plan)\uff0c1\u4e2a Plan \u7531\u591a\u4e2a\u63cf\u8ff0\u4efb\u52a1\u7684 TaskProto \u7ec4\u6210\u3002\u4ee5\u4e0a c_api_util.LaunchJob(job_instance) \u6240\u63a5\u53d7\u7684\u53c2\u6570 job_instance \uff0c\u5e76\u4e0d\u662f\u4f5c\u4e1a\u51fd\u6570\u672c\u8eab\uff0c\u800c\u662f Plan\u4e2d\u7684 Task \u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570\uff0c\u5c06\u5bf9\u5e94\u591a\u4e2a job_instance \u3002 \u7f16\u8bd1\u671f\u9636\u6bb5 \u00b6 \u4e0a\u6587\u63d0\u5230\u7684 Python \u5c42\u7684 c_api_util.StartGlobalSession() \u4f1a\u89e6\u53d1 C++ \u4ee3\u7801\u4e2d\u7684 StartGlobalSession \u5e76\u6700\u7ec8\u89e6\u53d1 OneFlow \u7f16\u8bd1\u65f6\u7684\u5165\u53e3\u51fd\u6570 Oneflow::Init ( /oneflow/core/job/oneflow.cpp )\uff1a Maybe < void > Oneflow :: Init ( const oneflow :: JobSet & job_set ) { // Runtime JUST ( CompileAndMergePlanOnMaster ( job_set . job (), & plan_ )); // ... } \u53ef\u4ee5\u770b\u5230\uff0cOneFlow \u901a\u8fc7 CompileAndMergePlanOnMaster \u5b8c\u6210\u7f16\u8bd1\u6784\u56fe\uff0c\u5176\u4e2d\u7684 job_set.job() \u662f\u8fd9\u4e2a\u9636\u6bb5\u7684\u8f93\u5165\uff0c\u5b83\u662f\u5305\u542b\u4e86\u7531 Python \u63a5\u53e3\u6240\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u53ca\u8d85\u53c2\u914d\u7f6e\u4fe1\u606f\u7684\u5e8f\u5217\u5316\u5b57\u8282\u6d41\uff0c\u800c plan_ \u662f\u8f93\u51fa\uff0c\u79f0\u4e3a \u6267\u884c\u8ba1\u5212 (Execution Plan)\u3002 \u6267\u884c\u8ba1\u5212\u7531\u4e00\u7cfb\u5217\u5bf9\u4e8e\u4efb\u52a1\u7684\u63cf\u8ff0( oneflow/core/job/task.proto )\u7ec4\u6210\uff0c\u6bcf\u4e2a\u4efb\u52a1\u81ea\u8eab\u90fd\u662f\u4e00\u4e2a\u56fe\u7ed3\u6784\uff0c\u63cf\u8ff0\u4e86\u5185\u90e8\u8ba1\u7b97\u7c7b\u578b\u3001\u5185\u5b58\u914d\u989d\u3001\u4e0a\u6e38\u751f\u4ea7\u8005\u548c\u4e0b\u6e38\u6d88\u8d39\u8005\u7b49\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5305\u542b\u4e86 OneFlow \u8fd0\u884c\u65f6\u6240\u9700\u8981\u7684\u4e00\u5207\u4fe1\u606f\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7f16\u8bd1\u540e\u7684\u5f97\u5230\u7684 Execution Plan \u7684\u56fe\u793a( \u70b9\u51fb\u67e5\u770b\u5927\u56fe )\uff1a \u6267\u884c\u8ba1\u5212\u7684\u751f\u6210\u8fc7\u7a0b \u00b6 \u8fdb\u5165\u5230 CompileAndMergePlanOnMaster \u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u9996\u5148\uff0c\u4f1a\u8c03\u7528\u4e00\u7cfb\u5217\u7684 MakeXXXJob(s) \u6574\u5408\u5e8f\u5217\u5316\u540e\u7684\u4f5c\u4e1a\u51fd\u6570\u4fe1\u606f\uff0c \u52a0\u5165\u5230 jobs \u4e2d\uff1a Maybe < void > CompileAndMergePlanOnMaster ( const PbRpf < Job >& conf_jobs , Plan * plan ) { std :: vector < std :: shared_ptr < Job >> jobs ( conf_jobs . size ()); //... if ( /*...*/ ) { MakeModelIoV2Jobs ( jobs , var_op_name2parallel_blob_conf , AppendJob ); } else { MakeModelIoJobs ( jobs , var_op_name2parallel_blob_conf , AppendJob ); } } //... for ( const auto & pair : push_op_name2parallel_blob_conf ) { //... MakePushJob ( std :: string ( \"System-Push-\" ) + pair . first , //... } for ( const auto & pair : pull_op_name2parallel_blob_conf ) { //... MakePullJob ( std :: string ( \"System-Pull-\" ) + pair . first , pair . first , pair . second , pull_job . get ()); } //... } \u7136\u540e\u901a\u8fc7 CompileCurJobOnMaster \u5c06 jobs \u7f16\u8bd1\u4e3a Plan\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f AddJobName2JobId \u4f1a\u4e3a\u6bcf\u4e2a job \u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684ID\uff0c\u7528\u4e8e\u8fd0\u884c\u65f6\u533a\u5206\u4efb\u52a1\uff1a FOR_RANGE ( int64_t , i , 0 , jobs . size ()) { AddJobName2JobId ( jobs . at ( i ) -> job_conf (). job_name (), i ); //... JUST ( CompileCurJobOnMaster ( jobs . at ( i ). get (), & sub_plans . at ( i ), true )); } \u4ee5\u4e0a\u7684\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528 Compiler::Compile \uff0c\u5728\u5176\u5185\u90e8\u5b8c\u6210 TaskProto \u7684\u6784\u5efa\uff0c\u5e76\u6dfb\u52a0\u5230 Plan \u4e2d( oneflow/core/job/compiler.cpp )\uff1a task_gph -> ForEachNode ([ & ]( TaskNode * task_node ) { if ( task_node -> IsMeaningLess ()) { return ; } task_node -> ToProto ( plan -> mutable_task () -> Add ()); }); \u4e0d\u8fc7\uff0c\u4ee5\u4e0a\u6b65\u9aa4\u5b8c\u6210\u540e\uff0c\u5f97\u5230\u7684 Plan \u8fd8\u4e0d\u662f\u6700\u7ec8\u5b8c\u6574\u7684 Plan\uff0cOneFlow \u8fd8\u4f1a\u589e\u52a0 main_plan \uff0c \u5b83\u5bf9\u5e94\u4e86\u672c\u8282\u5f00\u59cb Plan \u56fe\u793a\u4e2d\u7684 \"System-Main-Tick-CriticalSection\" \u7cfb\u5217\u8282\u70b9\uff0c\u5177\u6709\u540c\u6b65\u4e0e\u8c03\u5ea6\u529f\u80fd\uff0c\u5c06\u4f5c\u4e3a\u5404\u9879\u4efb\u52a1\u7684\u5165\u53e3\uff1a Plan main_plan ; //... { //... MakeMainJob ( & main_job , /*...*/ ); //... JUST ( CompileMainJob ( & main_job , /*...*/ , & main_plan )); } \u4ee5\u4e0a\u4e00\u5207\u5b8c\u6210\u540e\uff0c\u901a\u8fc7\u8c03\u7528 LinkMainPlan \u5c06\u5404\u4e2a Plan \u94fe\u63a5\u8d77\u6765\uff0c\u5f97\u5230\u8fd9\u8282\u5f00\u59cb\u7684\u56fe\u7247\u6240\u793a Execution Plan\uff1a LinkMainPlan ( plan , main_plan , identity_tick_op_names ); \u6267\u884c\u8ba1\u5212\u662f\u7f16\u8bd1\u9636\u6bb5\u4e0e\u8fd0\u884c\u65f6\u7684\u5206\u754c\u7ebf\uff0c\u5728\u5f97\u5230\u6267\u884c\u8ba1\u5212\u540e\uff0cOneFlow \u5c06\u542f\u52a8\u8fd0\u884c\u65f6\uff0c\u5e76\u6839\u636e\u6267\u884c\u8ba1\u5212\u4e2d\u7684\u4fe1\u606f\u6267\u884c\u4efb\u52a1\u3002 \u8fd0\u884c\u65f6\u9636\u6bb5 \u00b6 \u5b8c\u6210 CompileAndMergePlanOnMaster \u540e\uff0cOneFlow \u4f1a\u5b9e\u4f8b\u5316 Runtime \uff0c\u6309\u7167 plan \u4e2d\u7684\u4fe1\u606f\u6267\u884c\u4efb\u52a1\uff1a Maybe < void > Oneflow :: Init ( const oneflow :: JobSet & job_set ) { // Runtime JUST ( CompileAndMergePlanOnMaster ( job_set . job (), & plan_ )); if ( Global < MachineCtx >:: Get () -> IsThisMachineMaster ()) { runtime_buffers_scope_ . reset ( new RuntimeBuffersScope ( plan_ )); } runtime_ . reset ( new Runtime ( plan_ , GetMaxVal < size_t > (), false )); //... } \u5728 Runtime ( oneflow/core/job/runtime.cpp )\u7684\u6784\u9020\u4e2d\uff0c\u5c06 Plan \u4e2d\u7684 task \u5206\u6210\u4e86\u4e09\u7c7b\uff1a std :: vector < const TaskProto *> mdupdt_tasks ; std :: vector < const TaskProto *> source_tasks ; std :: vector < const TaskProto *> other_tasks ; int64_t this_machine_task_num = 0 ; for ( const TaskProto & task : plan . task ()) { if ( task . machine_id () != Global < MachineCtx >:: Get () -> this_machine_id ()) { continue ; } if ( IsMdUpdtTaskType ( task . task_type ())) { mdupdt_tasks . push_back ( & task ); } else if ( ! HasNonCtrlConsumedRegstDescId ( task )) { source_tasks . push_back ( & task ); } else { other_tasks . push_back ( & task ); } this_machine_task_num += 1 ; } mdupdt_tasks\uff1a\u3010\u2026\u2026\u3011 source_tasks\uff1a\u3010\u2026\u2026\u3011 other_tasks\uff1a\u3010\u2026\u2026\u3011 \u5982\u524d\u6587\u6240\u63cf\u8ff0\uff0c\u5728 task \u4e2d\u5305\u542b\u4e86\u5185\u90e8\u8ba1\u7b97\u7c7b\u578b\u3001\u5185\u5b58\u914d\u989d\u3001\u4e0a\u6e38\u751f\u4ea7\u8005\u548c\u4e0b\u6e38\u6d88\u8d39\u8005 \u8fd0\u884c\u65f6\u6240\u9700\u8981\u7684\u5168\u90e8\u4fe1\u606f \uff0c\u56e0\u6b64 OneFlow \u53ef\u4ee5\u901a\u8fc7\u89e3\u6790 Task \u542f\u52a8\u7ebf\u7a0b\u6267\u884c\u4efb\u52a1\u3002 OneFlow \u4f7f\u7528 Actor \u6267\u884c\u7ebf\u7a0b\uff0c\u5728 OneFlow \u4e2d \u6570\u636e\u662f\u4e00\u7b49\u516c\u6c11 \uff0c\u7f16\u8bd1\u9636\u6bb5\u4ea7\u751f\u7684 Plan \u4e2d\u7684\u6bcf\u4e2a Task \uff0c\u8bb0\u5f55\u4e86\u81ea\u5df1\u6570\u636e\u7684\u4e0a\u6e38\u4e0e\u4e0b\u6e38\uff0c\u6267\u884c\u5f15\u64ce\u4f1a\u6839\u636e Task \u7684\u8bb0\u5f55\uff0c\u4e3a\u6bcf\u4e2a Task \u5b9e\u4f8b\u5316\u5bf9\u5e94\u7684 Actor \uff0c Actor \u8d1f\u8d23\u6267\u884c Task \u89c4\u5b9a\u7684\u6570\u636e\u5904\u7406\u6216\u6570\u636e\u642c\u8fd0\u4efb\u52a1\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6839\u636e Task \u6784\u5efa Actor \uff1a RuntimeCtx * runtime_ctx = Global < RuntimeCtx >:: Get (); runtime_ctx -> NewCounter ( \"constructing_actor_cnt\" , this_machine_task_num ); HandoutTasks ( mdupdt_tasks ); HandoutTasks ( source_tasks ); HandoutTasks ( other_tasks ); runtime_ctx -> WaitUntilCntEqualZero ( \"constructing_actor_cnt\" ); OneFlow \u6267\u884c\u5f15\u64ce\u91c7\u7528\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6\u673a\u5236\uff0c\u6bcf\u4e2a Actor \u53ea\u9700\u8981\u4e0e\u81ea\u5df1\u7684\u4e0a\u4e0b\u6e38\u8fdb\u884c\u901a\u4fe1\uff0c \u4e0d\u9700\u8981 \u6240\u8c13\u7684 master \u8282\u70b9\u8fdb\u884c\u4e2d\u8f6c\uff0cactor\u4e4b\u95f4\u4f7f\u7528\u6d88\u606f(message)\u6765\u5b9e\u73b0\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u63e1\u624b\u534f\u8bae\u3002 OneFlow \u5404\u6a21\u5757\u7684\u6280\u672f\u7279\u8272 \u00b6 \u4ee5\u4e0a\uff0c\u6211\u4eec\u53ea\u662f\u7ed3\u5408 OneFlow \u7684 Python \u63a5\u53e3\uff0c\u7b80\u8981\u4ecb\u7ecd\u4e86 OneFlow \u6846\u67b6\u7684\u8fd0\u884c\u6d41\u7a0b\u3002\u4ee5\u4e0b\u6587\u7ae0\uff0c\u5206\u4e13\u9898\u66f4\u6df1\u5165\u4ecb\u7ecd OneFlow \u6846\u67b6\u5185\u90e8\u7684\u5404\u4e2a\u6a21\u5757\uff1a OneFlow \u7684\u5e76\u884c\u89c2 \u00b6 OneFlow \u5728Python\u63a5\u53e3\u5c42\u6b21\u63d0\u4f9b\u4e86 consistent_view \uff0c\u5728\u6846\u67b6\u5185\u90e8\uff0c\u4e3a\u4e86\u63d0\u4f9b\u7ed9\u7528\u6237\u903b\u8f91\u4e0a\u7edf\u4e00\u7684\u89c6\u89d2\uff0c\u5c06 op \u5728\u7269\u7406\u4e0a\u7684\u5b9e\u73b0\u5212\u5206\u4e3a\u591a\u4e2a kernel \uff0c\u5e76\u4e14\u63d0\u51fa\u4e86 SBP \u5e76\u884c\u7b7e\u540d\u673a\u5236 \uff0c\u5728\u4e25\u8c28\u7684\u6570\u5b66\u57fa\u77f3\u4e0a\u8fdb\u884cOneFlow \u7684\u5de5\u7a0b\u5b9e\u8df5\u3002 \u5e76\u4e14\uff0cOneFlow \u7684 boxing \u673a\u5236\uff0c\u5c06 SBP \u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u64cd\u4f5c\u53d8\u4e3a\u4e86\u900f\u660e\u9ed1\u76d2\uff0c\u4fdd\u8bc1\u4e86\u7528\u6237\u4f7f\u7528 OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\u53ef\u4fdd\u6301\u903b\u8f91\u5355\u5361\u89c6\u89d2\u3002 \u81ea\u52a8\u5e76\u884c \u00b6 \u3010\u4e00\u9e4f\u7684\u2026\u2026\u3011 \u6784\u56fe\u4e0e\u4f18\u5316 \u00b6 OneFlow \u57fa\u4e8e\u6570\u636e\u6d41\u6a21\u578b\u63cf\u8ff0\u8ba1\u7b97\u4efb\u52a1\uff0c\u795e\u7ecf\u7f51\u7edc\u7531\u4e00\u7cfb\u5217\u7b97\u5b50(Operator)\u6784\u6210\u7684\u6709\u5411\u65e0\u73af\u56fe(DAG)\u8868\u793a\u3002\u5e76\u4e14\u901a\u8fc7\u6ce8\u518c\u4e00\u7cfb\u5217\u7684 PASS \u5728\u6784\u56fe\u4e0e\u63a8\u5bfc\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4f18\u5316\u3002 Actor \u673a\u5236 \u00b6 OneFlow \u7684\u6267\u884c\u5f15\u64ce\uff0c\u91c7\u7528 Actor \u6d41\u6c34\u673a\u5236\uff0c\u5b9e\u73b0\u4e86\u53bb\u4e2d\u5fc3\u5316\u5206\u5e03\u5f0f\u6d41\u5f0f\u8ba1\u7b97\uff0c\u5728\u7edf\u4e00\u7684\u8bbe\u8ba1\u6846\u67b6\u5185\u89e3\u51b3\u4e86\u957f\u671f\u56f0\u6270\u6df1\u5ea6\u5b66\u4e60\u7684\u5404\u7c7b\u95ee\u9898\uff0c\u5982\u78c1\u76d8 IO\u3001 copyHD\u3001 \u53bb\u4e2d\u5fc3\u8ba1\u7b97\u7b49\u3002 \u7f51\u7edc\u63a7\u5236\u5e73\u9762\u7684\u534f\u8bae\u8bbe\u8ba1 \u00b6 \u63a7\u5236\u5e73\u9762\u4e3b\u8981\u5b9e\u73b0\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u63a7\u5236\u534f\u8bae\uff0c\u5305\u62ec\u8282\u70b9\u521d\u59cb\u5316\uff0c\u96c6\u7fa4\u53d1\u73b0\uff0c\u5206\u5e03\u5f0f\u9501\u7b49\u529f\u80fd\uff0c\u901a\u5e38\u8fd9\u7c7b\u7f51\u7edc\u901a\u4fe1\u9700\u6c42\u53ea\u53d1\u751f\u5728\u7cfb\u7edf\u521d\u59cb\u5316\u6216\u9000\u51fa\u9636\u6bb5\uff0c\u7f16\u7a0b\u6613\u7528\u6027\u6bd4\u8ffd\u6c42\u82db\u523b\u6027\u80fd\u66f4\u91cd\u8981\uff0c OneFlow \u57fa\u4e8e GRPC \u5b9e\u73b0\u4e86\u8be5\u6a21\u5757\u3002 \u7f51\u7edc\u6570\u636e\u5e73\u9762\u7684\u7f51\u7edc\u901a\u4fe1\u5b9e\u73b0 \u00b6 \u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u7cfb\u7edf\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d Actor \u4e4b\u95f4\u7684\u6d88\u606f\u53ca\u4e2d\u95f4\u8fd0\u7b97\u7ed3\u679c\uff0c\u5177\u6709\u9ad8\u9891\u3001\u541e\u5410\u91cf\u5927\u7684\u7279\u70b9\uff0c\u5bf9\u7f51\u7edc\u901a\u4fe1\u8981\u6c42\u9ad8\u3002 OneFlow \u81ea\u5e95\u5c42\u5b9a\u5236\u4e86\u7f51\u7edc\u4f20\u8f93\u6a21\u5757\u7528\u4e8e\u6570\u636e\u5e73\u9762\u7684\u901a\u4fe1\u3002\u5e76\u4e14\u6709 RDMA \u53ca epoll \u4e24\u5957\u65b9\u6848\uff0c\u53ef\u4ee5\u505a\u5230\u5728\u7f51\u7edc\u4f20\u8f93\u5c42\u6b21\u4e0d\u4f9d\u8d56 nccl \uff0c\u6269\u5927\u82af\u7247\u9009\u62e9\u8303\u56f4\u3002 \u5185\u5b58\u7ba1\u7406 \u00b6 OneFlow \u7684\u8bad\u7ec3\u91c7\u7528\u4e86 \u7eaf\u9759\u6001\u5185\u5b58\u5206\u914d\u65b9\u6848 \uff0c\u5728\u7f16\u8bd1\u751f\u6210 Plan \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u5df2\u7ecf\u786e\u5b9a\u4e86\u6240\u6709 Task \u7684\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u5728\u6574\u4e2a\u8fd0\u884c\u65f6\u9636\u6bb5\uff0c\u4e0d\u518d\u6709\u5185\u5b58\u7684\u52a8\u6001\u7533\u8bf7\u3001\u91ca\u653e\uff0c\u6700\u5927\u9650\u5ea6\u964d\u4f4e\u5185\u5b58\u5206\u914d\u4e0e\u56de\u6536\u5e26\u6765\u7684\u6027\u80fd\u635f\u8017\u3002 \u6b64\u5916\u2026\u2026\u3010\u6210\u57ce\u7684\u5185\u5b58\u65b9\u6848\u3011 eager\u6a21\u5f0f\u7684\u5b9e\u73b0 \u00b6 OneFlow \u5f00\u53d1\u7684 eager \u6a21\u5f0f\uff0c\u901a\u8fc7\u5b9e\u73b0\u5b9a\u5236\u7684\u865a\u62df\u673a\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u91c7\u7528\u4ea4\u4e92\u5f0f\u7684\u65b9\u5f0f\u8fdb\u884c\u8bad\u7ec3\u3002","title":"OneFlow \u67b6\u6784\u8bbe\u8ba1\u6982\u89c8"},{"location":"arch_design/overview.html#oneflow","text":"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u4ecb\u7ecd\uff1a OneFlow \u7684\u6838\u5fc3\u67b6\u6784 OneFlow \u8bad\u7ec3\u4efb\u52a1\u4ece Python \u5c42\u5230\u8fd0\u884c\u65f6\u7684\u6d41\u7a0b \u901a\u8fc7\u9605\u8bfb\u672c\u6587\uff0c\u53ef\u4ee5\u5bf9 OneFlow \u7684\u67b6\u6784\u6709\u4e00\u4e2a\u521d\u6b65\u7684\u4e86\u89e3\uff1b\u672c\u6587\u672b\u5c3e\u9644\u4e0a OneFlow \u5404\u4e2a\u6a21\u5757\u6280\u672f\u7279\u8272\u6df1\u5165\u4ecb\u7ecd\u7684\u6587\u7ae0\u7d22\u5f15\uff0c\u8bfb\u8005\u53ef\u4ee5\u6839\u636e\u5174\u8da3\u548c\u9700\u8981\u81ea\u884c\u9009\u62e9\u3002","title":"OneFlow \u67b6\u6784\u8bbe\u8ba1\u6982\u89c8"},{"location":"arch_design/overview.html#oneflow_1","text":"\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5982\u679c\u6682\u65f6\u7565\u53bb OneFlow \u7684\u4e0a\u5c42\u6a21\u578b\u5e93\u3001\u5e95\u5c42\u652f\u6491\u5e93\uff0c\u96c6\u4e2d\u5173\u6ce8 OneFlow \u5185\u90e8\u67b6\u6784\u4e2d\u4e0e\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u76f4\u63a5\u76f8\u5173\u7684\u90e8\u5206\uff0c\u603b\u4f53\u4e0a\u53ef\u5206\u4e3a\u4e09\u5c42\uff1a Python\u5c42\uff1a\u7528\u6237\u901a\u8fc7\u8c03\u7528Python\u63a5\u53e3\u6765\u914d\u7f6e\u8d85\u53c2\uff0c\u5e76\u7f16\u5199 OneFlow \u7684\u4f5c\u4e1a\u51fd\u6570\u6765\u5b9a\u4e49\u7f51\u7edc\uff0c\u8fd9\u4e00\u5207\u7684\u4fe1\u606f\uff0c\u6700\u7ec8\u4f1a\u5728 OneFlow \u4e2d\u5e8f\u5217\u5316\u4e3a\u5b57\u8282\u6d41\uff0c\u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42-- \u7f16\u8bd1\u65f6\u5c42 \uff1b \u7f16\u8bd1\u65f6\u5c42\uff1aOneFlow \u5b9e\u73b0\u7684\u7f16\u8bd1\u5668\uff0c\u5c06\u63a5\u53d7 Python \u5c42\u4f20\u9012\u7684\u5b57\u8282\u6d41\uff0c\u5e76\u5c06\u5b57\u8282\u6d41\u4e2d\u6240\u627f\u8f7d\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u4fe1\u606f\uff0c\u7ecf\u5206\u6790\u3001\u4f18\u5316\u540e\uff0c\u7f16\u8bd1\u3001\u94fe\u63a5\u4e3a OneFlow \u4e2d\u7684 \u6267\u884c\u8ba1\u5212 (Execution Plan)\uff0c\u6700\u540e\u5c06 Execution Plan \u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42-- \u8fd0\u884c\u65f6\u5c42 \uff1b \u8fd0\u884c\u65f6\u5c42\uff1aOneFlow \u7684\u6267\u884c\u5f15\u64ce\u63a5\u6536\u4e0a\u4e00\u5c42\u4f20\u9012\u6765\u7684\u6267\u884c\u8ba1\u5212( Plan )\uff0c\u6267\u884c\u8ba1\u5212\u7531\u591a\u4e2a\u66f4\u5c0f\u5355\u5143\u7684\u4efb\u52a1\u63cf\u8ff0( Task Proto )\u7ed3\u6784\u7ec4\u6210\uff0cOneFlow \u7684\u6267\u884c\u5f15\u64ce\u4f1a\u89e3\u6790 Plan \uff0c\u5e76\u4e3a\u6bcf\u4e2a Task Proto \u5206\u914d\u4e00\u4e2a\u6267\u884c\u5355\u5143 actor \uff0c\u4f17\u591a actor \u4e00\u8d77\u8fd0\u4f5c\uff0c\u5b8c\u6210 OneFlow \u7684 \u53bb\u4e2d\u5fc3\u5316\u3001\u5206\u5e03\u5f0f\u3001\u6d41\u5f0f\u8ba1\u7b97 \u3002 \u6709\u4e86\u4ee5\u4e0a\u7684\u57fa\u672c\u5c42\u6b21\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4e2d\uff0c\u7ed3\u5408\u5177\u4f53\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u4ee3\u7801\uff0c\u5411\u5927\u5bb6\u4ecb\u7ecd OneFlow \u7684Python\u5c42\u3001\u7f16\u8bd1\u65f6\u3001\u8fd0\u884c\u65f6\u7684\u6574\u4e2a\u6d41\u7a0b\u662f\u5982\u4f55\u8fd0\u884c\u7684\u3002 \u672c\u6587\u8ba8\u8bba\u5bf9\u8c61\u4e3a OneFlow \u811a\u672c\u7f16\u7a0b\u6240\u5bf9\u5e94\u7684 lazy \u6a21\u5f0f\uff0c OneFlow \u4ea4\u4e92\u5f0f\u7f16\u7a0b\u6240\u5bf9\u5e94\u7684 eager \u6a21\u5f0f\u4e0d\u5728\u672c\u6587\u8ba8\u8bba\u8303\u56f4\u3002","title":"OneFlow \u7684\u67b6\u6784\u5c42\u6b21\u56fe\u89e3"},{"location":"arch_design/overview.html#oneflow_2","text":"\u5982\u679c\u60f3\u7ed3\u5408 OneFlow \u7684\u6e90\u7801\u7814\u7a76 OneFlow \u7684\u8bbe\u8ba1\uff0c\u5efa\u8bae\u91cd\u70b9\u5173\u6ce8 OneFlow \u6e90\u7801\u76ee\u5f55\u4e0b\u7684 protobuf \u6587\u4ef6\uff0cOneFlow \u4e2d\u63a7\u5236\u9762\u7684\u6570\u636e\u7ed3\u6784\u3001\u534f\u8bae\uff0c\u90fd\u662f\u4f7f\u7528 protobuf \u5b9a\u4e49\u7684\uff0c\u7ed3\u5408\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u66f4\u5feb\u7406\u89e3 OneFlow \u7684\u5185\u90e8\u8bbe\u8ba1\u3002 \u4ee5\u4e0b\uff0c\u6211\u4eec\u5c06\u9488\u5bf9\u901a\u5e38\u60c5\u51b5\u4e0b OneFlow \u811a\u672c\u6267\u884c\u8fc7\u7a0b(\u5982 3\u5206\u949f\u5feb\u901f\u4e0a\u624b )\uff0c\u9010\u5c42\u5206\u6790 OneFlow \u5728Python\u5c42\u3001\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u5230\u5e95\u90fd\u505a\u4e86\u54ea\u4e9b\u5de5\u4f5c\u3002","title":"OneFlow \u4efb\u52a1\u662f\u5982\u4f55\u8dd1\u8d77\u6765\u7684"},{"location":"arch_design/overview.html#python","text":"\u6211\u4eec\u5728\u4f7f\u7528 OneFlow \u7684\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u77e5\u9053\uff0cOneFlow \u9700\u8981\u4f7f\u7528 @oneflow.global_function \u88c5\u9970\u5668\u6765\u4fee\u9970\u4e00\u4e2apython\u7f16\u5199\u7684\u201c\u4f5c\u4e1a\u51fd\u6570\u201d\u3002 \u6bd4\u5982\uff1a @flow . global_function ( get_train_config ()) def train_job (): # ... \u5728 oneflow/python/framework/function_util.py \u4e2d\u53ef\u4ee5\u627e\u5230 global_function \u88c5\u9970\u5668\u5bf9\u5e94\u7684\u5185\u90e8\u4ee3\u7801\uff1a def Decorator ( job_func ): #... sess = session_ctx . GetDefaultSession () @functools . wraps ( job_func ) def Func ( * args , ** kwargs ): return _RunLazyJob ( sess , job_func , * args , ** kwargs ) sess . AddJob ( _CloneFunctionDesc ( function_config . function_desc , job_func )) #... return Func \u53ef\u4ee5\u770b\u5230\uff0c\u88c5\u9970\u5668\u8fd4\u56de\u7684\u662f Func \u51fd\u6570\uff0c\u6211\u4eec\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u8c03\u7528\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u5176\u5b9e\u771f\u6b63\u6267\u884c\u7684\u662f\u6b64\u5904\u7684 Func \u3002 \u88c5\u9970\u5668\u7684\u4e3b\u8981\u4f5c\u7528\u6709\uff1a \u901a\u8fc7\u8c03\u7528 sess.AddJob \uff0c\u5c06\u8bad\u7ec3\u7684\u73af\u5883\u914d\u7f6e\u53ca\u4f5c\u4e1a\u51fd\u6570\u7684\u4fe1\u606f\uff0c\u6dfb\u52a0\u5230\u5f53\u524d session \u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5728\u7f16\u8bd1\u65f6\u4f1a\u88ab\u7528\u5230 \u901a\u8fc7\u4fee\u9970\u5668\uff0c\u4f7f\u5f97\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\u88ab\u5bfc\u5411 _RunLazyJob \uff0c\u6211\u4eec\u5c06\u770b\u5230\u5728 _RunLazyJob \u4e2d\u5305\u62ec\u4e86\u7f16\u8bd1 job_func \u7684\u4ee3\u7801 \u4ee5\u4e0b\uff0c\u6211\u4eec\u6765\u5c55\u5f00\u8ba8\u8bba sess.AddJob \u4e0e _RunLazyJob \u7684\u7ec6\u8282\u3002","title":"Python \u5c42\u6b21"},{"location":"arch_design/overview.html#_1","text":"\u5728 /oneflow/python/framework/session_util.py \u4e2d\u53ef\u4ee5\u770b\u5230 AddJob \u7684\u5b9e\u73b0\uff1a class Session ( object ): #... def AddJob ( self , function_desc ): #... self . job_name2function_desc_ [ function_desc . job_func . __name__ ] = function_desc \u53ef\u4ee5\u770b\u5230\uff0c session \u4e2d\u6709\u4e00\u4e2a\u540d\u4e3a job_name2function_desc_ \u7684\u5b57\u5178\uff0c AddJob \u5c06\u4f5c\u4e1a\u51fd\u6570\u7684\u540d\u5b57\u4f5c\u4e3a key\uff0c\u914d\u7f6e\u4fe1\u606f\u4f5c( function_desc )\u4e3a value \u653e\u7f6e\u8fdb\u53bb\uff0c\u914d\u7f6e\u4fe1\u606f\u53ef\u4ee5\u5728 oneflow/core/job/job.proto \u4e2d\u67e5\u770b\u3002 \u5c06\u8bad\u7ec3\u914d\u7f6e\u4fe1\u606f\u52a0\u5165\u5230 session \u4e2d\u7684\u4e3b\u8981\u539f\u56e0\uff0c\u662f OneFlow \u5728\u7f16\u8bd1\u65f6\u9700\u8981\u8fd9\u4e9b\u4fe1\u606f\u6765\u8fdb\u884c\u63a8\u7406\u3001\u4f18\u5316\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790 OneFlow \u5728 Python\u5c42\u6b21\u662f\u5982\u4f55\u89e6\u53d1\u7f16\u8bd1\u8fc7\u7a0b\u7684\u3002 \u6211\u4eec\u89c2\u5bdf _RunLazyJob \u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u53ef\u4ee5\u627e\u5230 OneFlow \u8fdb\u884c\u5e8f\u5217\u5316\u5e76\u89e6\u53d1 OneFlow C++ \u5c42\u7f16\u8bd1\u7684\u4ee3\u7801\u4f4d\u7f6e\uff1a def _RunLazyJob ( session , job_func , * args , ** kwargs ): return session . TryInit () . LazyRun ( job_func , * args , ** kwargs ) \u8ddf\u8fdb session \u5bf9\u8c61\u7684 TryInit \u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c session.TryInit \u4f1a\u6839\u636e\u5f53\u524d session \u7684\u72b6\u6001\uff0c\u51b3\u5b9a\u662f\u5426\u89e6\u53d1\u7f16\u8bd1\uff1a class Session ( object ): #... def TryInit ( self ): if self . status_ is SessionStatus . OPEN : self . Init () return self def Init ( self ): assert self . status_ is SessionStatus . OPEN self . status_ = SessionStatus . RUNNING #... _TryCompleteConfigProto ( self . config_proto ) for job_name , func_desc in self . job_name2function_desc_ . items (): compiler . Compile ( self , func_desc , self . config_proto ) #... c_api_util . StartGlobalSession () return self \u4ece\u4ee5\u4e0a\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u5f53\u524d Session \u5904\u4e8e \"OPEN\" \u72b6\u6001\uff0c\u90a3\u4e48 session \u4f1a\u8c03\u7528 Init \uff0c \u904d\u5386\u4e4b\u524d\u901a\u8fc7 AddJob \u8bbe\u7f6e\u5728 session \u4e2d\u7684 job_name2function_desc_ \u4e2d\u7684\u5404\u4e2a job \uff0c\u5e76\u4e14\u8c03\u7528 compiler.Compile \u7f16\u8bd1\uff0c compiler.Compile \u7684\u5185\u90e8\u5b9e\u73b0\u4e3a\uff1a def Compile ( session , function_desc , config_proto ): with InterpretScope ( session , function_desc , config_proto ): _CompileJob ( function_desc ) c_api_util . CurJobBuildAndInferCtx_Complete () \u5176\u4e2d _CompileJob \u4e2d\u5c06\u5bf9 function_desc \u6240\u63cf\u8ff0\u7684\u4f5c\u4e1a\u51fd\u6570\u8fdb\u884c\u5e8f\u5217\u5316\u5e76\u5728\u5185\u90e8\u8c03\u7528 C++ \u5c42\u4ee3\u7801\u8fdb\u884c\u6784\u56fe\u4f18\u5316\u3002\u518d\u901a\u8fc7 c_api_util.CurJobBuildAndInferCtx_Complete \u544a\u4e4b C++ \u5c42\u5e8f\u5217\u5316\u5b8c\u6210\u3002 \u5b8c\u6210 compiler.Compile \u7684\u5de5\u4f5c\u540e\uff0c\u5c06\u901a\u8fc7 c_api_util.StartGlobalSession() \u89e6\u53d1 C++ \u5c42\uff0c\u521b\u5efa session\uff0c\u5f00\u59cb C++ \u5c42\u7684\u7f16\u8bd1 Plan \u7684\u5de5\u4f5c\u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5e8f\u5217\u5316"},{"location":"arch_design/overview.html#_2","text":"\u56de\u987e\u4e0a\u6587\u63d0\u5230\u5230\u7684 _RunLazyJob \u4ee3\u7801\uff1a def _RunLazyJob ( session , job_func , * args , ** kwargs ): return session . TryInit () . LazyRun ( job_func , * args , ** kwargs ) \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5728 TryInit() \u4e2d\u5b8c\u6210\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u5e8f\u5217\u5316\uff0c\u5e76\u901a\u77e5 \u7f16\u8bd1\u65f6\u5b8c\u6210\u7f16\u8bd1\u6784\u56fe\u5de5\u4f5c\u3002 \u800c LazyRun \u5185\u90e8\uff0c\u5c31\u5bf9\u5e94\u4e86\u7528\u6237\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0cPython\u5c42\u5982\u4f55\u8fd0\u884c\u4f5c\u4e1a\u51fd\u6570\u3002 def LazyRun ( self , job_func , * arg ): #... remote_blobs = self . LaunchUserJob ( job_func , * arg ) #... return LazyFutureRemoteBlobs ( self ) . SetResult ( remote_blobs ) . Inited () \u5176\u4e2d LaunchUserJob \u63a5\u53d7\u7684\u53c2\u6570 job_func \u4e0e arg \u5c31\u5206\u522b\u662f\u7528\u6237\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\u7684\u4f5c\u4e1a\u51fd\u6570\u4ee5\u53ca\u4f20\u9012\u7684\u53c2\u6570\u3002 LaunchUserJob \u4f1a\u904d\u5386 job_func \u4e2d\u9700\u8981\u6267\u884c\u7684\u8ba1\u7b97\u5355\u5143\uff0c\u5e76\u6700\u7ec8\u901a\u5728 session.LaunchJob ( /oneflow/python/framework/session_util.py )\u4e2d\u901a\u8fc7\u8c03\u7528 c_api_util.LaunchJob(job_instance) \u6267\u884c\u8ba1\u7b97\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u56e0\u4e3a\u5f53\u7528\u6237\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0cOneFlow \u5df2\u7ecf\u5b8c\u6210\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u7f16\u8bd1\u6784\u56fe\uff0c\u5f97\u5230\u4e86\u6267\u884c\u8ba1\u5212(Execution Plan)\uff0c1\u4e2a Plan \u7531\u591a\u4e2a\u63cf\u8ff0\u4efb\u52a1\u7684 TaskProto \u7ec4\u6210\u3002\u4ee5\u4e0a c_api_util.LaunchJob(job_instance) \u6240\u63a5\u53d7\u7684\u53c2\u6570 job_instance \uff0c\u5e76\u4e0d\u662f\u4f5c\u4e1a\u51fd\u6570\u672c\u8eab\uff0c\u800c\u662f Plan\u4e2d\u7684 Task \u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570\uff0c\u5c06\u5bf9\u5e94\u591a\u4e2a job_instance \u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528"},{"location":"arch_design/overview.html#_3","text":"\u4e0a\u6587\u63d0\u5230\u7684 Python \u5c42\u7684 c_api_util.StartGlobalSession() \u4f1a\u89e6\u53d1 C++ \u4ee3\u7801\u4e2d\u7684 StartGlobalSession \u5e76\u6700\u7ec8\u89e6\u53d1 OneFlow \u7f16\u8bd1\u65f6\u7684\u5165\u53e3\u51fd\u6570 Oneflow::Init ( /oneflow/core/job/oneflow.cpp )\uff1a Maybe < void > Oneflow :: Init ( const oneflow :: JobSet & job_set ) { // Runtime JUST ( CompileAndMergePlanOnMaster ( job_set . job (), & plan_ )); // ... } \u53ef\u4ee5\u770b\u5230\uff0cOneFlow \u901a\u8fc7 CompileAndMergePlanOnMaster \u5b8c\u6210\u7f16\u8bd1\u6784\u56fe\uff0c\u5176\u4e2d\u7684 job_set.job() \u662f\u8fd9\u4e2a\u9636\u6bb5\u7684\u8f93\u5165\uff0c\u5b83\u662f\u5305\u542b\u4e86\u7531 Python \u63a5\u53e3\u6240\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u53ca\u8d85\u53c2\u914d\u7f6e\u4fe1\u606f\u7684\u5e8f\u5217\u5316\u5b57\u8282\u6d41\uff0c\u800c plan_ \u662f\u8f93\u51fa\uff0c\u79f0\u4e3a \u6267\u884c\u8ba1\u5212 (Execution Plan)\u3002 \u6267\u884c\u8ba1\u5212\u7531\u4e00\u7cfb\u5217\u5bf9\u4e8e\u4efb\u52a1\u7684\u63cf\u8ff0( oneflow/core/job/task.proto )\u7ec4\u6210\uff0c\u6bcf\u4e2a\u4efb\u52a1\u81ea\u8eab\u90fd\u662f\u4e00\u4e2a\u56fe\u7ed3\u6784\uff0c\u63cf\u8ff0\u4e86\u5185\u90e8\u8ba1\u7b97\u7c7b\u578b\u3001\u5185\u5b58\u914d\u989d\u3001\u4e0a\u6e38\u751f\u4ea7\u8005\u548c\u4e0b\u6e38\u6d88\u8d39\u8005\u7b49\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5305\u542b\u4e86 OneFlow \u8fd0\u884c\u65f6\u6240\u9700\u8981\u7684\u4e00\u5207\u4fe1\u606f\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7f16\u8bd1\u540e\u7684\u5f97\u5230\u7684 Execution Plan \u7684\u56fe\u793a( \u70b9\u51fb\u67e5\u770b\u5927\u56fe )\uff1a","title":"\u7f16\u8bd1\u671f\u9636\u6bb5"},{"location":"arch_design/overview.html#_4","text":"\u8fdb\u5165\u5230 CompileAndMergePlanOnMaster \u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u9996\u5148\uff0c\u4f1a\u8c03\u7528\u4e00\u7cfb\u5217\u7684 MakeXXXJob(s) \u6574\u5408\u5e8f\u5217\u5316\u540e\u7684\u4f5c\u4e1a\u51fd\u6570\u4fe1\u606f\uff0c \u52a0\u5165\u5230 jobs \u4e2d\uff1a Maybe < void > CompileAndMergePlanOnMaster ( const PbRpf < Job >& conf_jobs , Plan * plan ) { std :: vector < std :: shared_ptr < Job >> jobs ( conf_jobs . size ()); //... if ( /*...*/ ) { MakeModelIoV2Jobs ( jobs , var_op_name2parallel_blob_conf , AppendJob ); } else { MakeModelIoJobs ( jobs , var_op_name2parallel_blob_conf , AppendJob ); } } //... for ( const auto & pair : push_op_name2parallel_blob_conf ) { //... MakePushJob ( std :: string ( \"System-Push-\" ) + pair . first , //... } for ( const auto & pair : pull_op_name2parallel_blob_conf ) { //... MakePullJob ( std :: string ( \"System-Pull-\" ) + pair . first , pair . first , pair . second , pull_job . get ()); } //... } \u7136\u540e\u901a\u8fc7 CompileCurJobOnMaster \u5c06 jobs \u7f16\u8bd1\u4e3a Plan\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f AddJobName2JobId \u4f1a\u4e3a\u6bcf\u4e2a job \u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684ID\uff0c\u7528\u4e8e\u8fd0\u884c\u65f6\u533a\u5206\u4efb\u52a1\uff1a FOR_RANGE ( int64_t , i , 0 , jobs . size ()) { AddJobName2JobId ( jobs . at ( i ) -> job_conf (). job_name (), i ); //... JUST ( CompileCurJobOnMaster ( jobs . at ( i ). get (), & sub_plans . at ( i ), true )); } \u4ee5\u4e0a\u7684\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u6700\u7ec8\u4f1a\u8c03\u7528 Compiler::Compile \uff0c\u5728\u5176\u5185\u90e8\u5b8c\u6210 TaskProto \u7684\u6784\u5efa\uff0c\u5e76\u6dfb\u52a0\u5230 Plan \u4e2d( oneflow/core/job/compiler.cpp )\uff1a task_gph -> ForEachNode ([ & ]( TaskNode * task_node ) { if ( task_node -> IsMeaningLess ()) { return ; } task_node -> ToProto ( plan -> mutable_task () -> Add ()); }); \u4e0d\u8fc7\uff0c\u4ee5\u4e0a\u6b65\u9aa4\u5b8c\u6210\u540e\uff0c\u5f97\u5230\u7684 Plan \u8fd8\u4e0d\u662f\u6700\u7ec8\u5b8c\u6574\u7684 Plan\uff0cOneFlow \u8fd8\u4f1a\u589e\u52a0 main_plan \uff0c \u5b83\u5bf9\u5e94\u4e86\u672c\u8282\u5f00\u59cb Plan \u56fe\u793a\u4e2d\u7684 \"System-Main-Tick-CriticalSection\" \u7cfb\u5217\u8282\u70b9\uff0c\u5177\u6709\u540c\u6b65\u4e0e\u8c03\u5ea6\u529f\u80fd\uff0c\u5c06\u4f5c\u4e3a\u5404\u9879\u4efb\u52a1\u7684\u5165\u53e3\uff1a Plan main_plan ; //... { //... MakeMainJob ( & main_job , /*...*/ ); //... JUST ( CompileMainJob ( & main_job , /*...*/ , & main_plan )); } \u4ee5\u4e0a\u4e00\u5207\u5b8c\u6210\u540e\uff0c\u901a\u8fc7\u8c03\u7528 LinkMainPlan \u5c06\u5404\u4e2a Plan \u94fe\u63a5\u8d77\u6765\uff0c\u5f97\u5230\u8fd9\u8282\u5f00\u59cb\u7684\u56fe\u7247\u6240\u793a Execution Plan\uff1a LinkMainPlan ( plan , main_plan , identity_tick_op_names ); \u6267\u884c\u8ba1\u5212\u662f\u7f16\u8bd1\u9636\u6bb5\u4e0e\u8fd0\u884c\u65f6\u7684\u5206\u754c\u7ebf\uff0c\u5728\u5f97\u5230\u6267\u884c\u8ba1\u5212\u540e\uff0cOneFlow \u5c06\u542f\u52a8\u8fd0\u884c\u65f6\uff0c\u5e76\u6839\u636e\u6267\u884c\u8ba1\u5212\u4e2d\u7684\u4fe1\u606f\u6267\u884c\u4efb\u52a1\u3002","title":"\u6267\u884c\u8ba1\u5212\u7684\u751f\u6210\u8fc7\u7a0b"},{"location":"arch_design/overview.html#_5","text":"\u5b8c\u6210 CompileAndMergePlanOnMaster \u540e\uff0cOneFlow \u4f1a\u5b9e\u4f8b\u5316 Runtime \uff0c\u6309\u7167 plan \u4e2d\u7684\u4fe1\u606f\u6267\u884c\u4efb\u52a1\uff1a Maybe < void > Oneflow :: Init ( const oneflow :: JobSet & job_set ) { // Runtime JUST ( CompileAndMergePlanOnMaster ( job_set . job (), & plan_ )); if ( Global < MachineCtx >:: Get () -> IsThisMachineMaster ()) { runtime_buffers_scope_ . reset ( new RuntimeBuffersScope ( plan_ )); } runtime_ . reset ( new Runtime ( plan_ , GetMaxVal < size_t > (), false )); //... } \u5728 Runtime ( oneflow/core/job/runtime.cpp )\u7684\u6784\u9020\u4e2d\uff0c\u5c06 Plan \u4e2d\u7684 task \u5206\u6210\u4e86\u4e09\u7c7b\uff1a std :: vector < const TaskProto *> mdupdt_tasks ; std :: vector < const TaskProto *> source_tasks ; std :: vector < const TaskProto *> other_tasks ; int64_t this_machine_task_num = 0 ; for ( const TaskProto & task : plan . task ()) { if ( task . machine_id () != Global < MachineCtx >:: Get () -> this_machine_id ()) { continue ; } if ( IsMdUpdtTaskType ( task . task_type ())) { mdupdt_tasks . push_back ( & task ); } else if ( ! HasNonCtrlConsumedRegstDescId ( task )) { source_tasks . push_back ( & task ); } else { other_tasks . push_back ( & task ); } this_machine_task_num += 1 ; } mdupdt_tasks\uff1a\u3010\u2026\u2026\u3011 source_tasks\uff1a\u3010\u2026\u2026\u3011 other_tasks\uff1a\u3010\u2026\u2026\u3011 \u5982\u524d\u6587\u6240\u63cf\u8ff0\uff0c\u5728 task \u4e2d\u5305\u542b\u4e86\u5185\u90e8\u8ba1\u7b97\u7c7b\u578b\u3001\u5185\u5b58\u914d\u989d\u3001\u4e0a\u6e38\u751f\u4ea7\u8005\u548c\u4e0b\u6e38\u6d88\u8d39\u8005 \u8fd0\u884c\u65f6\u6240\u9700\u8981\u7684\u5168\u90e8\u4fe1\u606f \uff0c\u56e0\u6b64 OneFlow \u53ef\u4ee5\u901a\u8fc7\u89e3\u6790 Task \u542f\u52a8\u7ebf\u7a0b\u6267\u884c\u4efb\u52a1\u3002 OneFlow \u4f7f\u7528 Actor \u6267\u884c\u7ebf\u7a0b\uff0c\u5728 OneFlow \u4e2d \u6570\u636e\u662f\u4e00\u7b49\u516c\u6c11 \uff0c\u7f16\u8bd1\u9636\u6bb5\u4ea7\u751f\u7684 Plan \u4e2d\u7684\u6bcf\u4e2a Task \uff0c\u8bb0\u5f55\u4e86\u81ea\u5df1\u6570\u636e\u7684\u4e0a\u6e38\u4e0e\u4e0b\u6e38\uff0c\u6267\u884c\u5f15\u64ce\u4f1a\u6839\u636e Task \u7684\u8bb0\u5f55\uff0c\u4e3a\u6bcf\u4e2a Task \u5b9e\u4f8b\u5316\u5bf9\u5e94\u7684 Actor \uff0c Actor \u8d1f\u8d23\u6267\u884c Task \u89c4\u5b9a\u7684\u6570\u636e\u5904\u7406\u6216\u6570\u636e\u642c\u8fd0\u4efb\u52a1\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6839\u636e Task \u6784\u5efa Actor \uff1a RuntimeCtx * runtime_ctx = Global < RuntimeCtx >:: Get (); runtime_ctx -> NewCounter ( \"constructing_actor_cnt\" , this_machine_task_num ); HandoutTasks ( mdupdt_tasks ); HandoutTasks ( source_tasks ); HandoutTasks ( other_tasks ); runtime_ctx -> WaitUntilCntEqualZero ( \"constructing_actor_cnt\" ); OneFlow \u6267\u884c\u5f15\u64ce\u91c7\u7528\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6\u673a\u5236\uff0c\u6bcf\u4e2a Actor \u53ea\u9700\u8981\u4e0e\u81ea\u5df1\u7684\u4e0a\u4e0b\u6e38\u8fdb\u884c\u901a\u4fe1\uff0c \u4e0d\u9700\u8981 \u6240\u8c13\u7684 master \u8282\u70b9\u8fdb\u884c\u4e2d\u8f6c\uff0cactor\u4e4b\u95f4\u4f7f\u7528\u6d88\u606f(message)\u6765\u5b9e\u73b0\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u63e1\u624b\u534f\u8bae\u3002","title":"\u8fd0\u884c\u65f6\u9636\u6bb5"},{"location":"arch_design/overview.html#oneflow_3","text":"\u4ee5\u4e0a\uff0c\u6211\u4eec\u53ea\u662f\u7ed3\u5408 OneFlow \u7684 Python \u63a5\u53e3\uff0c\u7b80\u8981\u4ecb\u7ecd\u4e86 OneFlow \u6846\u67b6\u7684\u8fd0\u884c\u6d41\u7a0b\u3002\u4ee5\u4e0b\u6587\u7ae0\uff0c\u5206\u4e13\u9898\u66f4\u6df1\u5165\u4ecb\u7ecd OneFlow \u6846\u67b6\u5185\u90e8\u7684\u5404\u4e2a\u6a21\u5757\uff1a","title":"OneFlow \u5404\u6a21\u5757\u7684\u6280\u672f\u7279\u8272"},{"location":"arch_design/overview.html#oneflow_4","text":"OneFlow \u5728Python\u63a5\u53e3\u5c42\u6b21\u63d0\u4f9b\u4e86 consistent_view \uff0c\u5728\u6846\u67b6\u5185\u90e8\uff0c\u4e3a\u4e86\u63d0\u4f9b\u7ed9\u7528\u6237\u903b\u8f91\u4e0a\u7edf\u4e00\u7684\u89c6\u89d2\uff0c\u5c06 op \u5728\u7269\u7406\u4e0a\u7684\u5b9e\u73b0\u5212\u5206\u4e3a\u591a\u4e2a kernel \uff0c\u5e76\u4e14\u63d0\u51fa\u4e86 SBP \u5e76\u884c\u7b7e\u540d\u673a\u5236 \uff0c\u5728\u4e25\u8c28\u7684\u6570\u5b66\u57fa\u77f3\u4e0a\u8fdb\u884cOneFlow \u7684\u5de5\u7a0b\u5b9e\u8df5\u3002 \u5e76\u4e14\uff0cOneFlow \u7684 boxing \u673a\u5236\uff0c\u5c06 SBP \u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u64cd\u4f5c\u53d8\u4e3a\u4e86\u900f\u660e\u9ed1\u76d2\uff0c\u4fdd\u8bc1\u4e86\u7528\u6237\u4f7f\u7528 OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\u53ef\u4fdd\u6301\u903b\u8f91\u5355\u5361\u89c6\u89d2\u3002","title":"OneFlow \u7684\u5e76\u884c\u89c2"},{"location":"arch_design/overview.html#_6","text":"\u3010\u4e00\u9e4f\u7684\u2026\u2026\u3011","title":"\u81ea\u52a8\u5e76\u884c"},{"location":"arch_design/overview.html#_7","text":"OneFlow \u57fa\u4e8e\u6570\u636e\u6d41\u6a21\u578b\u63cf\u8ff0\u8ba1\u7b97\u4efb\u52a1\uff0c\u795e\u7ecf\u7f51\u7edc\u7531\u4e00\u7cfb\u5217\u7b97\u5b50(Operator)\u6784\u6210\u7684\u6709\u5411\u65e0\u73af\u56fe(DAG)\u8868\u793a\u3002\u5e76\u4e14\u901a\u8fc7\u6ce8\u518c\u4e00\u7cfb\u5217\u7684 PASS \u5728\u6784\u56fe\u4e0e\u63a8\u5bfc\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4f18\u5316\u3002","title":"\u6784\u56fe\u4e0e\u4f18\u5316"},{"location":"arch_design/overview.html#actor","text":"OneFlow \u7684\u6267\u884c\u5f15\u64ce\uff0c\u91c7\u7528 Actor \u6d41\u6c34\u673a\u5236\uff0c\u5b9e\u73b0\u4e86\u53bb\u4e2d\u5fc3\u5316\u5206\u5e03\u5f0f\u6d41\u5f0f\u8ba1\u7b97\uff0c\u5728\u7edf\u4e00\u7684\u8bbe\u8ba1\u6846\u67b6\u5185\u89e3\u51b3\u4e86\u957f\u671f\u56f0\u6270\u6df1\u5ea6\u5b66\u4e60\u7684\u5404\u7c7b\u95ee\u9898\uff0c\u5982\u78c1\u76d8 IO\u3001 copyHD\u3001 \u53bb\u4e2d\u5fc3\u8ba1\u7b97\u7b49\u3002","title":"Actor \u673a\u5236"},{"location":"arch_design/overview.html#_8","text":"\u63a7\u5236\u5e73\u9762\u4e3b\u8981\u5b9e\u73b0\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u63a7\u5236\u534f\u8bae\uff0c\u5305\u62ec\u8282\u70b9\u521d\u59cb\u5316\uff0c\u96c6\u7fa4\u53d1\u73b0\uff0c\u5206\u5e03\u5f0f\u9501\u7b49\u529f\u80fd\uff0c\u901a\u5e38\u8fd9\u7c7b\u7f51\u7edc\u901a\u4fe1\u9700\u6c42\u53ea\u53d1\u751f\u5728\u7cfb\u7edf\u521d\u59cb\u5316\u6216\u9000\u51fa\u9636\u6bb5\uff0c\u7f16\u7a0b\u6613\u7528\u6027\u6bd4\u8ffd\u6c42\u82db\u523b\u6027\u80fd\u66f4\u91cd\u8981\uff0c OneFlow \u57fa\u4e8e GRPC \u5b9e\u73b0\u4e86\u8be5\u6a21\u5757\u3002","title":"\u7f51\u7edc\u63a7\u5236\u5e73\u9762\u7684\u534f\u8bae\u8bbe\u8ba1"},{"location":"arch_design/overview.html#_9","text":"\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u7cfb\u7edf\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d Actor \u4e4b\u95f4\u7684\u6d88\u606f\u53ca\u4e2d\u95f4\u8fd0\u7b97\u7ed3\u679c\uff0c\u5177\u6709\u9ad8\u9891\u3001\u541e\u5410\u91cf\u5927\u7684\u7279\u70b9\uff0c\u5bf9\u7f51\u7edc\u901a\u4fe1\u8981\u6c42\u9ad8\u3002 OneFlow \u81ea\u5e95\u5c42\u5b9a\u5236\u4e86\u7f51\u7edc\u4f20\u8f93\u6a21\u5757\u7528\u4e8e\u6570\u636e\u5e73\u9762\u7684\u901a\u4fe1\u3002\u5e76\u4e14\u6709 RDMA \u53ca epoll \u4e24\u5957\u65b9\u6848\uff0c\u53ef\u4ee5\u505a\u5230\u5728\u7f51\u7edc\u4f20\u8f93\u5c42\u6b21\u4e0d\u4f9d\u8d56 nccl \uff0c\u6269\u5927\u82af\u7247\u9009\u62e9\u8303\u56f4\u3002","title":"\u7f51\u7edc\u6570\u636e\u5e73\u9762\u7684\u7f51\u7edc\u901a\u4fe1\u5b9e\u73b0"},{"location":"arch_design/overview.html#_10","text":"OneFlow \u7684\u8bad\u7ec3\u91c7\u7528\u4e86 \u7eaf\u9759\u6001\u5185\u5b58\u5206\u914d\u65b9\u6848 \uff0c\u5728\u7f16\u8bd1\u751f\u6210 Plan \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u5df2\u7ecf\u786e\u5b9a\u4e86\u6240\u6709 Task \u7684\u5185\u5b58\u4f7f\u7528\u60c5\u51b5\uff0c\u5728\u6574\u4e2a\u8fd0\u884c\u65f6\u9636\u6bb5\uff0c\u4e0d\u518d\u6709\u5185\u5b58\u7684\u52a8\u6001\u7533\u8bf7\u3001\u91ca\u653e\uff0c\u6700\u5927\u9650\u5ea6\u964d\u4f4e\u5185\u5b58\u5206\u914d\u4e0e\u56de\u6536\u5e26\u6765\u7684\u6027\u80fd\u635f\u8017\u3002 \u6b64\u5916\u2026\u2026\u3010\u6210\u57ce\u7684\u5185\u5b58\u65b9\u6848\u3011","title":"\u5185\u5b58\u7ba1\u7406"},{"location":"arch_design/overview.html#eager","text":"OneFlow \u5f00\u53d1\u7684 eager \u6a21\u5f0f\uff0c\u901a\u8fc7\u5b9e\u73b0\u5b9a\u5236\u7684\u865a\u62df\u673a\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u91c7\u7528\u4ea4\u4e92\u5f0f\u7684\u65b9\u5f0f\u8fdb\u884c\u8bad\u7ec3\u3002","title":"eager\u6a21\u5f0f\u7684\u5b9e\u73b0"},{"location":"basics_topics/async_get.html","text":"\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u00b6 \u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 OneFlow \u4e2d\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u5982\u4f55\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u5982\u4f55\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u5728 OneFlow \u4e2d\uff0c\u88ab @flow.global_function \u88c5\u9970\u5668\u4fee\u9970\u7684\u51fd\u6570\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570\uff0c\u4f5c\u4e1a\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u8bad\u7ec3\u6216\u9884\u6d4b\u3002\u901a\u8fc7\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u6216\u8005\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd0\u7b97\u7ed3\u679c\u3002 \u540c\u6b65/\u5f02\u6b65\u5bf9\u6bd4 \u00b6 \u540c\u6b65 \u5728\u540c\u6b65\u8bad\u7ec3\u4e2d\uff0c\u53ea\u6709\u4e0a\u4e00\u4e2a step \u7684\u5de5\u4f5c\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u5f00\u59cb\u4e0b\u4e00\u4e2a step \u7684\u8bad\u7ec3\u3002 \u5f02\u6b65 \u5728\u5f02\u6b65\u8bad\u7ec3\u4e2d\uff0c\u4f5c\u4e1a\u51fd\u6570\u7684\u6267\u884c\u662f\u5e76\u53d1\u7684\uff0c\u67d0\u4e2a step \u4e0d\u5fc5\u7b49\u4e0a\u4e00\u4e2a step \u7684\u4f5c\u4e1a\u7ed3\u675f\uff0c\u800c\u662f\u53ef\u4ee5\u63d0\u524d\u8fdb\u884c\u6570\u636e\u52a0\u8f7d\u548c\u9884\u5904\u7406\u3002 \u901a\u8fc7\u4ee5\u4e0a\u5bf9\u6bd4\u53ef\u77e5\uff0c\u5728 OneFlow \u4e2d\u4f7f\u7528\u5f02\u6b65\u6267\u884c\u4f5c\u4e1a\u51fd\u6570\uff0c\u6709\u6548\u5229\u7528\u4e86\u8ba1\u7b97\u673a\u8d44\u6e90\uff0c\u5c24\u5176\u662f\u5728\u6570\u636e\u96c6\u89c4\u6a21\u5de8\u5927\u7684\u60c5\u51b5\u4e0b\uff0c \u5f00\u542f\u5f02\u6b65\u6267\u884c\u80fd\u6709\u6548\u7f29\u77ed\u6570\u636e\u7684\u52a0\u8f7d\u548c\u51c6\u5907\u65f6\u95f4\uff0c\u52a0\u5feb\u6a21\u578b\u8bad\u7ec3 \u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5206\u522b\u8bb2\u89e3\u5982\u4f55\u7528\u540c\u6b65\u3001\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u5728\u6587\u7ae0\u7684\u6700\u540e\u63d0\u4f9b\u5b8c\u6574\u4ee3\u7801\u7684\u94fe\u63a5\u3002 \u5b83\u4eec\u7684\u8981\u70b9\u5728\u4e8e\uff1a \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u6ce8\u89e3\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u544a\u77e5 OneFlow \u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65\u6a21\u5f0f \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5728 oneflow.typing \u6a21\u5757\u4e2d\u9009\u62e9 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u540c\u6b65/\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u7684\u5f62\u5f0f\u7565\u6709\u4e0d\u540c \u540c\u6b65\u83b7\u53d6\u7ed3\u679c \u00b6 \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u6ce8\u89e3\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a oneflow.typing.Numpy \u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u4e3a\u4e00\u4e2a\u540c\u6b65\u4f5c\u4e1a\u51fd\u6570\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u5b9a\u4e49\u4e86\u5982\u4e0b\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\u4ee3\u7801\uff0c\u901a\u8fc7 python \u6ce8\u89e3\u7684\u65b9\u5f0f\u544a\u77e5 OneFlow \uff0c\u8fd4\u56de\u7684\u662f tp.Numpy \uff08 tp \u662f \u811a\u672c\u4e2d oneflow.typing \u7684\u522b\u540d\uff09\u7c7b\u578b\uff0c\u5b83\u5bf9\u5e94\u4e86 NumPy \u4e2d\u7684 ndarray \u3002 \u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u4f1a\u76f4\u63a5\u8fd4\u56de ndarray \u5bf9\u8c61\uff1a loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u4ece\u4ee5\u4e0a\u793a\u4f8b\u4e2d\uff0c\u5e94\u8be5\u6ce8\u610f\u5230\uff1a \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61(\u4e0a\u6587\u4e2d\u7684 loss ) \u53ea\u662f\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u6784\u5efa\u8ba1\u7b97\u56fe\uff0c\u5e76\u6ca1\u6709\u771f\u5b9e\u6570\u636e\u3002 \u901a\u8fc7\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a oneflow.typing.Numpy \uff0c\u53ef\u4ee5\u544a\u77e5 OneFlow \u8c03\u7528\u6b64\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u7684\u771f\u5b9e\u6570\u636e\u7c7b\u578b\u4e3a NumPy ndarray \u5bf9\u8c61 \u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 train_job(images, labels) \u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd0\u884c\u8ba1\u7b97\u7ed3\u679c\uff0c\u7c7b\u578b\u4e3a oneflow.typing.Numpy \u5bf9\u5e94\u7684 ndarray \u5bf9\u8c61\u3002 oneflow.typing \u4e2d\u7684\u6570\u636e\u7c7b\u578b \u00b6 oneflow.typing \u4e2d\u5305\u542b\u4e86\u4f5c\u4e1a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e0a\u6587\u4e2d\u51fa\u73b0\u7684 oneflow.typing.Numpy \u53ea\u662f\u5176\u4e2d\u4e00\u79cd\uff0c\u73b0\u5c06\u5176\u4e2d\u5e38\u7528\u7684\u51e0\u79cd\u7c7b\u578b\u53ca\u5bf9\u5e94\u610f\u4e49\u7f57\u5217\u5982\u4e0b\uff1a oneflow.typing.Numpy \uff1a\u5bf9\u5e94\u4e86 numpy.ndarray \uff0c\u672c\u6587\u4e3b\u8981\u4ee5 oneflow.typing.Numpy \u4e3e\u4f8b oneflow.typing.ListNumpy \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a list \u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a numpy.ndarray \u5bf9\u8c61\u3002\u4e0e OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u89c6\u89d2\u6709\u5173\uff0c\u5c06\u5728 \u5206\u5e03\u5f0f\u8bad\u7ec3\u7684 consistent \u4e0e mirrored \u89c6\u89d2 \u4e2d\u770b\u5230\u5176\u4f5c\u7528 oneflow.typing.ListListNumpy \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a list \u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a TensorList \u5bf9\u8c61\uff0cOneFlow \u7684\u67d0\u4e9b\u63a5\u53e3\u9700\u8981\u5904\u7406\u6216\u8005\u8fd4\u56de\u591a\u4e2a TensorList \u5bf9\u8c61\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u9605 \u6982\u5ff5\u6e05\u5355 \u53ca\u76f8\u5173 API \u6587\u6863 oneflow.typing.Callback \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u4e0b\u6587\u4f1a\u4ecb\u7ecd \u6b64\u5916\uff0cOneFlow \u8fd8\u5141\u8bb8\u4f5c\u4e1a\u51fd\u6570\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u4f20\u51fa\u6570\u636e\uff0c\u6709\u5173 ListNumpy \u3001 ListNumpy \u3001 ListListNumpy \u4ee5\u53ca\u5982\u4f55\u7528\u5b57\u5178\u65b9\u5f0f\u4f20\u51fa\u6570\u636e\u7684\u793a\u4f8b\uff0c\u53ef\u4ee5\u53c2\u8003 OneFlow \u7684\u6d4b\u8bd5\u6848\u4f8b \u3002 \u5f02\u6b65\u83b7\u53d6\u7ed3\u679c \u00b6 \u4e00\u822c\u800c\u8a00\uff0c\u91c7\u7528\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u8bad\u7ec3\u7ed3\u679c\u7684\u6548\u7387\u9ad8\u4e8e\u540c\u6b65\u65b9\u5f0f\u3002 \u4ee5\u4e0b\u4ecb\u7ecd\u5982\u4f55\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5e76\u5904\u7406\u8bad\u7ec3\u7ed3\u679c\u3002 \u5176\u57fa\u672c\u6b65\u9aa4\u5305\u62ec\uff1a \u51c6\u5907\u56de\u8c03\u51fd\u6570\uff1a\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\u7684\u65b9\u5f0f\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u6240\u63a5\u53d7\u7684\u53c2\u6570\uff0c\u5728\u56de\u8c03\u51fd\u6570\u7684\u5185\u90e8\uff0c\u5b9e\u73b0\u5904\u7406\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u503c\u7ed3\u679c\u7684\u903b\u8f91 \u5b9e\u73b0\u4f5c\u4e1a\u51fd\u6570\uff1a\u901a\u8fc7\u6ce8\u89e3\u7684\u65b9\u5f0f\uff0c\u6307\u5b9a flow.typing.Callback \u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4f8b\u5b50\u4e2d\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7 Callback \u53ef\u4ee5\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff1a\u5e76\u6ce8\u518c\u4ee5\u4e0a\u7b2c\u4e00\u6b65\u51c6\u5907\u7684\u56de\u8c03\u51fd\u6570 \u4ee5\u4e0a\u4e09\u4e2a\u6b65\u9aa4\u7531 OneFlow \u7684\u7528\u6237\u5b8c\u6210\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6ce8\u518c\u7684\u56de\u8c03\u51fd\u6570\u4f1a\u88ab OneFlow \u8c03\u7528\uff0c\u5e76\u5c06\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\u3002 \u7f16\u5199\u56de\u8c03\u51fd\u6570 \u00b6 \u56de\u8c03\u51fd\u6570\u7684\u539f\u578b\u5982\u4e0b\uff1a def cb_func ( result : T ): #... \u5176\u4e2d\u7684 result \uff0c\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\uff0c\u6307\u5b9a\u5176\u7c7b\u578b T \uff0c\u5373\u4e0a\u6587\u4e2d\u63d0\u5230\u7684 Numpy \u3001 ListNumpy \u7b49\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b83\u4eec\u7684\u590d\u5408\u7c7b\u578b\uff0c\u4e0b\u6587\u6211\u4eec\u5c06\u6709\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002 \u53c2\u6570 result \u5bf9\u5e94\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u5fc5\u987b\u4e0e\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u503c\u6240\u6ce8\u89e3\u7684\u4e00\u81f4\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ tp . Numpy ]: # mlp initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"output\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u6ce8\u89e3 -> tp.Callback[tp.Numpy] \u8868\u793a\u6b64\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a tp.Numpy \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u9700\u8981\u5f02\u6b65\u8c03\u7528\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570\uff0c\u5c31\u5e94\u8be5\u63a5\u53d7\u4e00\u4e2a Numpy \u7c7b\u578b\u7684\u53c2\u6570\uff1a def cb_print_loss ( result : tp . Numpy ): global g_i if g_i % 20 == 0 : print ( result . mean ()) g_i += 1 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e3a\uff1a @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ Tuple [ tp . Numpy , tp . Numpy ]]: with flow . scope . placement ( \"cpu\" , \"0:0\" ): logits = mlp ( images ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u5176\u4e2d -> tp.Callback[Tuple[tp.Numpy, tp.Numpy]] \u8868\u793a\u6b64\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b2\u4e2a\u5143\u7d20\u7684 tuple \uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f tp.Numpy \u7c7b\u578b\uff0c\u5e76\u4e14\u4f5c\u4e1a\u51fd\u6570\u9700\u8981\u5f02\u6b65\u8c03\u7528\u3002 \u90a3\u4e48\uff0c\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u6ce8\u89e3\u5e94\u8be5\u4e3a\uff1a g_total = 0 g_correct = 0 def acc ( arguments : Tuple [ tp . Numpy , tp . Numpy ]): global g_total global g_correct labels = arguments [ 0 ] logits = arguments [ 1 ] predictions = np . argmax ( logits , 1 ) right_count = np . sum ( predictions == labels ) g_total += labels . shape [ 0 ] g_correct += right_count arguments \u5bf9\u5e94\u4e86\u4ee5\u4e0a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002 \u6ce8\u518c\u56de\u8c03\u51fd\u6570 \u00b6 \u5f53\u6211\u4eec\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a Callback \u5bf9\u8c61\uff0c\u6211\u4eec\u5c06\u51c6\u5907\u597d\u7684\u56de\u8c03\u51fd\u6570\u4f20\u9012\u7ed9\u5b83\uff0c\u5c31\u5b8c\u6210\u4e86\u6ce8\u518c\u3002 OneFlow \u4f1a\u5728\u83b7\u53d6\u5230\u8bad\u7ec3\u7ed3\u679c\u65f6\uff0c\u81ea\u52a8\u8c03\u7528\u6ce8\u518c\u7684\u56de\u8c03\u3002 callbacker = train_job ( images , labels ) callbacker ( cb_print_loss ) \u4e0d\u8fc7\u4ee5\u4e0a\u7684\u5199\u6cd5\u6bd4\u8f83\u5197\u4f59\uff0c\u63a8\u8350\u4f7f\u7528\uff1a train_job ( images , labels )( cb_print_loss ) \u5b8c\u6574\u4ee3\u7801 \u00b6 \u540c\u6b65\u83b7\u53d6\u4e00\u4e2a\u7ed3\u679c \u00b6 \u5728\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528\u4e00\u4e2a LeNet \u7f51\u7edc\uff0c\u901a\u8fc7\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6\u552f\u4e00\u7684\u8fd4\u56de\u7ed3\u679c loss \uff0c\u5e76\u6bcf\u969420\u8f6e\u6253\u5370\u4e00\u6b21 loss.mean() \u3002 \u4ee3\u7801\u94fe\u63a5\uff1a synchronize_single_job.py \u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/synchronize_single_job.py python3 synchronize_single_job.py \u4f1a\u6709\u7c7b\u4f3c\u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 7.3258467 2.1435719 1.1712438 0.7531896 ... ... model saved \u540c\u6b65\u83b7\u53d6\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c \u00b6 \u5728\u672c\u4f8b\u4e2d\uff0c\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a tuple \uff0c\u6211\u4eec\u901a\u8fc7\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6 tuple \u4e2d labels \u4e0e logits \uff0c\u5e76\u5bf9\u4e0a\u4f8b\u4e2d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u8f93\u51fa\u51c6\u786e\u7387\u3002 \u4ee3\u7801\u94fe\u63a5\uff1a synchronize_batch_job.py \u5176\u4e2d\uff0c\u9884\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6\u53ef\u4ee5\u70b9\u6b64\u5904\u4e0b\u8f7d\uff1a lenet_models_1.zip \u8fd0\u884c\uff1a wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/quick_start/lenet_models_1.zip unzip lenet_models_1.zip wget https://docs.oneflow.org/code/basics_topics/synchronize_batch_job.py python3 synchronize_batch_job.py \u4f1a\u6709\u8f93\u51fa\uff1a accuracy: 99.3% \u5f02\u6b65\u83b7\u53d6\u4e00\u4e2a\u8fd4\u56de\u7ed3\u679c \u00b6 \u5728\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528 mlp \u8bad\u7ec3\uff0c\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u552f\u4e00\u7684\u8fd4\u56de\u7ed3\u679c loss \uff0c\u5e76\u6bcf\u969420\u8f6e\u6253\u5370\u4e00\u6b21 loss.mean() \u3002 \u4ee3\u7801\u4e0b\u8f7d\uff1a async_single_job.py \u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/async_single_job.py python3 async_single_job.py \u4f1a\u6709\u7c7b\u4f3c\u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 3.0865736 0.8949808 0.47858357 0.3486296 ... \u5f02\u6b65\u83b7\u53d6\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c \u00b6 \u5728\u4ee5\u4e0b\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5bf9\u4e0a\u4f8b\u4e2d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u8f93\u51fa\u51c6\u786e\u7387\u3002 \u4ee3\u7801\u4e0b\u8f7d\uff1a async_batch_job.py \u5176\u4e2d\uff0c\u9884\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6\u53ef\u4ee5\u70b9\u6b64\u5904\u4e0b\u8f7d\uff1a mlp_models_1.zip wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/basics_topics/mlp_models_1.zip unzip mlp_models_1.zip wget https://docs.oneflow.org/code/basics_topics/async_batch_job.py python3 async_batch_job.py \u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz accuracy: 97.6%","title":"\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c"},{"location":"basics_topics/async_get.html#_1","text":"\u672c\u6587\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5728 OneFlow \u4e2d\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u4e3b\u8981\u5305\u62ec\uff1a \u5982\u4f55\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u5982\u4f55\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u5728 OneFlow \u4e2d\uff0c\u88ab @flow.global_function \u88c5\u9970\u5668\u4fee\u9970\u7684\u51fd\u6570\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570\uff0c\u4f5c\u4e1a\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u8bad\u7ec3\u6216\u9884\u6d4b\u3002\u901a\u8fc7\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u6216\u8005\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd0\u7b97\u7ed3\u679c\u3002","title":"\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c"},{"location":"basics_topics/async_get.html#_2","text":"\u540c\u6b65 \u5728\u540c\u6b65\u8bad\u7ec3\u4e2d\uff0c\u53ea\u6709\u4e0a\u4e00\u4e2a step \u7684\u5de5\u4f5c\u5b8c\u6210\u540e\uff0c\u624d\u80fd\u5f00\u59cb\u4e0b\u4e00\u4e2a step \u7684\u8bad\u7ec3\u3002 \u5f02\u6b65 \u5728\u5f02\u6b65\u8bad\u7ec3\u4e2d\uff0c\u4f5c\u4e1a\u51fd\u6570\u7684\u6267\u884c\u662f\u5e76\u53d1\u7684\uff0c\u67d0\u4e2a step \u4e0d\u5fc5\u7b49\u4e0a\u4e00\u4e2a step \u7684\u4f5c\u4e1a\u7ed3\u675f\uff0c\u800c\u662f\u53ef\u4ee5\u63d0\u524d\u8fdb\u884c\u6570\u636e\u52a0\u8f7d\u548c\u9884\u5904\u7406\u3002 \u901a\u8fc7\u4ee5\u4e0a\u5bf9\u6bd4\u53ef\u77e5\uff0c\u5728 OneFlow \u4e2d\u4f7f\u7528\u5f02\u6b65\u6267\u884c\u4f5c\u4e1a\u51fd\u6570\uff0c\u6709\u6548\u5229\u7528\u4e86\u8ba1\u7b97\u673a\u8d44\u6e90\uff0c\u5c24\u5176\u662f\u5728\u6570\u636e\u96c6\u89c4\u6a21\u5de8\u5927\u7684\u60c5\u51b5\u4e0b\uff0c \u5f00\u542f\u5f02\u6b65\u6267\u884c\u80fd\u6709\u6548\u7f29\u77ed\u6570\u636e\u7684\u52a0\u8f7d\u548c\u51c6\u5907\u65f6\u95f4\uff0c\u52a0\u5feb\u6a21\u578b\u8bad\u7ec3 \u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5206\u522b\u8bb2\u89e3\u5982\u4f55\u7528\u540c\u6b65\u3001\u5f02\u6b65\u7684\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u5728\u6587\u7ae0\u7684\u6700\u540e\u63d0\u4f9b\u5b8c\u6574\u4ee3\u7801\u7684\u94fe\u63a5\u3002 \u5b83\u4eec\u7684\u8981\u70b9\u5728\u4e8e\uff1a \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u6ce8\u89e3\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u544a\u77e5 OneFlow \u662f\u540c\u6b65\u8fd8\u662f\u5f02\u6b65\u6a21\u5f0f \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5728 oneflow.typing \u6a21\u5757\u4e2d\u9009\u62e9 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u540c\u6b65/\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u7684\u5f62\u5f0f\u7565\u6709\u4e0d\u540c","title":"\u540c\u6b65/\u5f02\u6b65\u5bf9\u6bd4"},{"location":"basics_topics/async_get.html#_3","text":"\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7\u6ce8\u89e3\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a oneflow.typing.Numpy \u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u4e3a\u4e00\u4e2a\u540c\u6b65\u4f5c\u4e1a\u51fd\u6570\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u5b9a\u4e49\u4e86\u5982\u4e0b\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\u4ee3\u7801\uff0c\u901a\u8fc7 python \u6ce8\u89e3\u7684\u65b9\u5f0f\u544a\u77e5 OneFlow \uff0c\u8fd4\u56de\u7684\u662f tp.Numpy \uff08 tp \u662f \u811a\u672c\u4e2d oneflow.typing \u7684\u522b\u540d\uff09\u7c7b\u578b\uff0c\u5b83\u5bf9\u5e94\u4e86 NumPy \u4e2d\u7684 ndarray \u3002 \u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u4f1a\u76f4\u63a5\u8fd4\u56de ndarray \u5bf9\u8c61\uff1a loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u4ece\u4ee5\u4e0a\u793a\u4f8b\u4e2d\uff0c\u5e94\u8be5\u6ce8\u610f\u5230\uff1a \u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61(\u4e0a\u6587\u4e2d\u7684 loss ) \u53ea\u662f\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u7528\u4e8e\u6784\u5efa\u8ba1\u7b97\u56fe\uff0c\u5e76\u6ca1\u6709\u771f\u5b9e\u6570\u636e\u3002 \u901a\u8fc7\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a oneflow.typing.Numpy \uff0c\u53ef\u4ee5\u544a\u77e5 OneFlow \u8c03\u7528\u6b64\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u7684\u771f\u5b9e\u6570\u636e\u7c7b\u578b\u4e3a NumPy ndarray \u5bf9\u8c61 \u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 train_job(images, labels) \u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd0\u884c\u8ba1\u7b97\u7ed3\u679c\uff0c\u7c7b\u578b\u4e3a oneflow.typing.Numpy \u5bf9\u5e94\u7684 ndarray \u5bf9\u8c61\u3002","title":"\u540c\u6b65\u83b7\u53d6\u7ed3\u679c"},{"location":"basics_topics/async_get.html#oneflowtyping","text":"oneflow.typing \u4e2d\u5305\u542b\u4e86\u4f5c\u4e1a\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e0a\u6587\u4e2d\u51fa\u73b0\u7684 oneflow.typing.Numpy \u53ea\u662f\u5176\u4e2d\u4e00\u79cd\uff0c\u73b0\u5c06\u5176\u4e2d\u5e38\u7528\u7684\u51e0\u79cd\u7c7b\u578b\u53ca\u5bf9\u5e94\u610f\u4e49\u7f57\u5217\u5982\u4e0b\uff1a oneflow.typing.Numpy \uff1a\u5bf9\u5e94\u4e86 numpy.ndarray \uff0c\u672c\u6587\u4e3b\u8981\u4ee5 oneflow.typing.Numpy \u4e3e\u4f8b oneflow.typing.ListNumpy \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a list \u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a numpy.ndarray \u5bf9\u8c61\u3002\u4e0e OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u89c6\u89d2\u6709\u5173\uff0c\u5c06\u5728 \u5206\u5e03\u5f0f\u8bad\u7ec3\u7684 consistent \u4e0e mirrored \u89c6\u89d2 \u4e2d\u770b\u5230\u5176\u4f5c\u7528 oneflow.typing.ListListNumpy \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a list \u5bb9\u5668\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a TensorList \u5bf9\u8c61\uff0cOneFlow \u7684\u67d0\u4e9b\u63a5\u53e3\u9700\u8981\u5904\u7406\u6216\u8005\u8fd4\u56de\u591a\u4e2a TensorList \u5bf9\u8c61\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u9605 \u6982\u5ff5\u6e05\u5355 \u53ca\u76f8\u5173 API \u6587\u6863 oneflow.typing.Callback \uff1a\u5bf9\u5e94\u4e86\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u4e0b\u6587\u4f1a\u4ecb\u7ecd \u6b64\u5916\uff0cOneFlow \u8fd8\u5141\u8bb8\u4f5c\u4e1a\u51fd\u6570\u4ee5\u5b57\u5178\u7684\u5f62\u5f0f\u4f20\u51fa\u6570\u636e\uff0c\u6709\u5173 ListNumpy \u3001 ListNumpy \u3001 ListListNumpy \u4ee5\u53ca\u5982\u4f55\u7528\u5b57\u5178\u65b9\u5f0f\u4f20\u51fa\u6570\u636e\u7684\u793a\u4f8b\uff0c\u53ef\u4ee5\u53c2\u8003 OneFlow \u7684\u6d4b\u8bd5\u6848\u4f8b \u3002","title":"oneflow.typing \u4e2d\u7684\u6570\u636e\u7c7b\u578b"},{"location":"basics_topics/async_get.html#_4","text":"\u4e00\u822c\u800c\u8a00\uff0c\u91c7\u7528\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u8bad\u7ec3\u7ed3\u679c\u7684\u6548\u7387\u9ad8\u4e8e\u540c\u6b65\u65b9\u5f0f\u3002 \u4ee5\u4e0b\u4ecb\u7ecd\u5982\u4f55\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5e76\u5904\u7406\u8bad\u7ec3\u7ed3\u679c\u3002 \u5176\u57fa\u672c\u6b65\u9aa4\u5305\u62ec\uff1a \u51c6\u5907\u56de\u8c03\u51fd\u6570\uff1a\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\u7684\u65b9\u5f0f\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u6240\u63a5\u53d7\u7684\u53c2\u6570\uff0c\u5728\u56de\u8c03\u51fd\u6570\u7684\u5185\u90e8\uff0c\u5b9e\u73b0\u5904\u7406\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u503c\u7ed3\u679c\u7684\u903b\u8f91 \u5b9e\u73b0\u4f5c\u4e1a\u51fd\u6570\uff1a\u901a\u8fc7\u6ce8\u89e3\u7684\u65b9\u5f0f\uff0c\u6307\u5b9a flow.typing.Callback \u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4f8b\u5b50\u4e2d\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7 Callback \u53ef\u4ee5\u6307\u5b9a\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff1a\u5e76\u6ce8\u518c\u4ee5\u4e0a\u7b2c\u4e00\u6b65\u51c6\u5907\u7684\u56de\u8c03\u51fd\u6570 \u4ee5\u4e0a\u4e09\u4e2a\u6b65\u9aa4\u7531 OneFlow \u7684\u7528\u6237\u5b8c\u6210\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u6ce8\u518c\u7684\u56de\u8c03\u51fd\u6570\u4f1a\u88ab OneFlow \u8c03\u7528\uff0c\u5e76\u5c06\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\u3002","title":"\u5f02\u6b65\u83b7\u53d6\u7ed3\u679c"},{"location":"basics_topics/async_get.html#_5","text":"\u56de\u8c03\u51fd\u6570\u7684\u539f\u578b\u5982\u4e0b\uff1a def cb_func ( result : T ): #... \u5176\u4e2d\u7684 result \uff0c\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\uff0c\u6307\u5b9a\u5176\u7c7b\u578b T \uff0c\u5373\u4e0a\u6587\u4e2d\u63d0\u5230\u7684 Numpy \u3001 ListNumpy \u7b49\uff0c\u4e5f\u53ef\u4ee5\u662f\u5b83\u4eec\u7684\u590d\u5408\u7c7b\u578b\uff0c\u4e0b\u6587\u6211\u4eec\u5c06\u6709\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002 \u53c2\u6570 result \u5bf9\u5e94\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u5fc5\u987b\u4e0e\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u503c\u6240\u6ce8\u89e3\u7684\u4e00\u81f4\u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ tp . Numpy ]: # mlp initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"output\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u6ce8\u89e3 -> tp.Callback[tp.Numpy] \u8868\u793a\u6b64\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a tp.Numpy \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u9700\u8981\u5f02\u6b65\u8c03\u7528\u3002 \u90a3\u4e48\uff0c\u6211\u4eec\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570\uff0c\u5c31\u5e94\u8be5\u63a5\u53d7\u4e00\u4e2a Numpy \u7c7b\u578b\u7684\u53c2\u6570\uff1a def cb_print_loss ( result : tp . Numpy ): global g_i if g_i % 20 == 0 : print ( result . mean ()) g_i += 1 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e3a\uff1a @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ Tuple [ tp . Numpy , tp . Numpy ]]: with flow . scope . placement ( \"cpu\" , \"0:0\" ): logits = mlp ( images ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u5176\u4e2d -> tp.Callback[Tuple[tp.Numpy, tp.Numpy]] \u8868\u793a\u6b64\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b2\u4e2a\u5143\u7d20\u7684 tuple \uff0c\u4e14\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f tp.Numpy \u7c7b\u578b\uff0c\u5e76\u4e14\u4f5c\u4e1a\u51fd\u6570\u9700\u8981\u5f02\u6b65\u8c03\u7528\u3002 \u90a3\u4e48\uff0c\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u6ce8\u89e3\u5e94\u8be5\u4e3a\uff1a g_total = 0 g_correct = 0 def acc ( arguments : Tuple [ tp . Numpy , tp . Numpy ]): global g_total global g_correct labels = arguments [ 0 ] logits = arguments [ 1 ] predictions = np . argmax ( logits , 1 ) right_count = np . sum ( predictions == labels ) g_total += labels . shape [ 0 ] g_correct += right_count arguments \u5bf9\u5e94\u4e86\u4ee5\u4e0a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002","title":"\u7f16\u5199\u56de\u8c03\u51fd\u6570"},{"location":"basics_topics/async_get.html#_6","text":"\u5f53\u6211\u4eec\u5f02\u6b65\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a Callback \u5bf9\u8c61\uff0c\u6211\u4eec\u5c06\u51c6\u5907\u597d\u7684\u56de\u8c03\u51fd\u6570\u4f20\u9012\u7ed9\u5b83\uff0c\u5c31\u5b8c\u6210\u4e86\u6ce8\u518c\u3002 OneFlow \u4f1a\u5728\u83b7\u53d6\u5230\u8bad\u7ec3\u7ed3\u679c\u65f6\uff0c\u81ea\u52a8\u8c03\u7528\u6ce8\u518c\u7684\u56de\u8c03\u3002 callbacker = train_job ( images , labels ) callbacker ( cb_print_loss ) \u4e0d\u8fc7\u4ee5\u4e0a\u7684\u5199\u6cd5\u6bd4\u8f83\u5197\u4f59\uff0c\u63a8\u8350\u4f7f\u7528\uff1a train_job ( images , labels )( cb_print_loss )","title":"\u6ce8\u518c\u56de\u8c03\u51fd\u6570"},{"location":"basics_topics/async_get.html#_7","text":"","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"basics_topics/async_get.html#_8","text":"\u5728\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528\u4e00\u4e2a LeNet \u7f51\u7edc\uff0c\u901a\u8fc7\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6\u552f\u4e00\u7684\u8fd4\u56de\u7ed3\u679c loss \uff0c\u5e76\u6bcf\u969420\u8f6e\u6253\u5370\u4e00\u6b21 loss.mean() \u3002 \u4ee3\u7801\u94fe\u63a5\uff1a synchronize_single_job.py \u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/synchronize_single_job.py python3 synchronize_single_job.py \u4f1a\u6709\u7c7b\u4f3c\u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 7.3258467 2.1435719 1.1712438 0.7531896 ... ... model saved","title":"\u540c\u6b65\u83b7\u53d6\u4e00\u4e2a\u7ed3\u679c"},{"location":"basics_topics/async_get.html#_9","text":"\u5728\u672c\u4f8b\u4e2d\uff0c\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a tuple \uff0c\u6211\u4eec\u901a\u8fc7\u540c\u6b65\u65b9\u5f0f\u83b7\u53d6 tuple \u4e2d labels \u4e0e logits \uff0c\u5e76\u5bf9\u4e0a\u4f8b\u4e2d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u8f93\u51fa\u51c6\u786e\u7387\u3002 \u4ee3\u7801\u94fe\u63a5\uff1a synchronize_batch_job.py \u5176\u4e2d\uff0c\u9884\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6\u53ef\u4ee5\u70b9\u6b64\u5904\u4e0b\u8f7d\uff1a lenet_models_1.zip \u8fd0\u884c\uff1a wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/quick_start/lenet_models_1.zip unzip lenet_models_1.zip wget https://docs.oneflow.org/code/basics_topics/synchronize_batch_job.py python3 synchronize_batch_job.py \u4f1a\u6709\u8f93\u51fa\uff1a accuracy: 99.3%","title":"\u540c\u6b65\u83b7\u53d6\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c"},{"location":"basics_topics/async_get.html#_10","text":"\u5728\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528 mlp \u8bad\u7ec3\uff0c\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u552f\u4e00\u7684\u8fd4\u56de\u7ed3\u679c loss \uff0c\u5e76\u6bcf\u969420\u8f6e\u6253\u5370\u4e00\u6b21 loss.mean() \u3002 \u4ee3\u7801\u4e0b\u8f7d\uff1a async_single_job.py \u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/async_single_job.py python3 async_single_job.py \u4f1a\u6709\u7c7b\u4f3c\u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 3.0865736 0.8949808 0.47858357 0.3486296 ...","title":"\u5f02\u6b65\u83b7\u53d6\u4e00\u4e2a\u8fd4\u56de\u7ed3\u679c"},{"location":"basics_topics/async_get.html#_11","text":"\u5728\u4ee5\u4e0b\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5f02\u6b65\u65b9\u5f0f\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5bf9\u4e0a\u4f8b\u4e2d\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u8bc4\u4f30\uff0c\u8f93\u51fa\u51c6\u786e\u7387\u3002 \u4ee3\u7801\u4e0b\u8f7d\uff1a async_batch_job.py \u5176\u4e2d\uff0c\u9884\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6\u53ef\u4ee5\u70b9\u6b64\u5904\u4e0b\u8f7d\uff1a mlp_models_1.zip wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/basics_topics/mlp_models_1.zip unzip mlp_models_1.zip wget https://docs.oneflow.org/code/basics_topics/async_batch_job.py python3 async_batch_job.py \u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz accuracy: 97.6%","title":"\u5f02\u6b65\u83b7\u53d6\u591a\u4e2a\u8fd4\u56de\u7ed3\u679c"},{"location":"basics_topics/build_nn_with_op_and_layer.html","text":"\u4f7f\u7528OneFlow\u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u00b6 \u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 flow.layers \u548c flow.nn \u63d0\u4f9b\u7684\u63a5\u53e3\u642d\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 LeNet \u7f51\u7edc\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u901a\u8fc7LeNet\u6765\u4ecb\u7ecd OneFlow \u4e2d\u7f51\u7edc\u642d\u5efa\u7684\u6838\u5fc3\u5143\u7d20\u2014\u7b97\u5b50(Op)\u548c\u5c42(Layer)\u3002 LeNet \u662f\u4e00\u4e2a\u4e3b\u8981\u7531\u5377\u79ef\u5c42\u3001\u6c60\u5316\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u7ec4\u6210\u7684\u795e\u7ecf\u7f51\u7edc\u3002 \u4e0a\u56fe\u4e2d\u6709\u4e24\u7c7b\u5143\u7d20\uff0c\u4e00\u7c7b\u662f\u65b9\u6846\u4ee3\u8868\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u5305\u62ec Op \u548c Layer \u4e24\u7c7b\uff0c\u6bd4\u5982 conv2d \u3001 dense \u3001 max_pool2d \u7b49\uff1b\u4e00\u7c7b\u662f\u7bad\u5934\u4ee3\u8868\u7684\u6570\u636e\u3002\u5b83\u5bf9\u5e94\u4e86\u4ee5\u4e0b\u4ee3\u7801\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\uff0c data \u662f\u5f62\u72b6\u4e3a 100x1\u00d728\u00d728 \u7684\u6570\u636e\uff0c data \u9996\u5148\u4f5c\u4e3a conv2d \u7684\u8f93\u5165\u53c2\u4e0e\u5377\u79ef\u8ba1\u7b97\uff0c\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c conv1 \uff0c\u7136\u540e conv1 \u4f5c\u4e3a\u8f93\u5165\u4f20\u7ed9 max_pool2d \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 Op \u548c Layer \u00b6 \u7b97\u5b50\uff08Op\uff09\u662f\u6bd4\u8f83\u5e38\u7528\u7684\u4e00\u79cd\u6982\u5ff5\uff0c\u662f OneFlow \u4e2d\u57fa\u672c\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u4e0a\u6587\u4ee3\u7801\u4e2d\u7684 reshape \u548c nn.max_pool2d \u5c31\u662f\u4e24\u79cd\u7b97\u5b50\u3002 layers.conv2d \u548c layers.dense \u4e0d\u662f\u57fa\u672c\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u5b83\u4eec\u662f\u7531\u7b97\u5b50\u7ec4\u5408\u6210\u7684\u7279\u5b9a\u7684\u8fd0\u7b97\u5c42\uff08Layer\uff09\u3002\u5c42\u7684\u5b58\u5728\u4f7f\u5f97\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u66f4\u65b9\u4fbf\uff0c\u76f8\u5173\u63a5\u53e3\u4f7f\u7528\u8bf7\u53c2\u8003 oneflow.layers API \u3002 \u901a\u8fc7\u9605\u8bfb oneflow.layers \u6e90\u7801 \uff0c\u53ef\u4ee5\u5b66\u4e60\u7531\u57fa\u672c\u7b97\u5b50\u6784\u5efa\u8fd0\u7b97\u5c42\u7684\u7ec6\u8282\u3002 \u7f51\u7edc\u6784\u5efa\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u5757 \u00b6 OneFlow \u9ed8\u8ba4\u6a21\u5f0f\u662f\u9759\u6001\u56fe\u673a\u5236\uff0c\u7f51\u7edc\u7684\u6784\u5efa\u548c\u8fd0\u884c\u8fc7\u7a0b\u5176\u5b9e\u662f\u5206\u5f00\u7684\u3002\u56e0\u6b64\uff0c\u5728\u5b9a\u4e49\u7f51\u7edc\u65f6\uff0c\u5404\u4e2a\u53d8\u91cf\u4e2d \u5e76\u6ca1\u6709 \u771f\u5b9e\u7684\u6570\u636e\uff0c\u5b83\u4eec\u53ea\u662f\u6570\u636e\u7684\u5360\u4f4d\u7b26\u3002\u771f\u5b9e\u6570\u636e\u7684\u8ba1\u7b97\u53d1\u751f\u5728\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b\u4e2d\u3002 \u5728\u6784\u5efa\u7f51\u7edc\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u63cf\u8ff0\u4e86\u7f51\u7edc\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u6027\u8d28\u3001\u5f62\u72b6\uff08\u5982 shape \u3001 dtype \uff09\u4e0e\u8fde\u63a5\u5173\u7cfb\u7b49\uff0c\u8fd9\u4e9b\u8282\u70b9\u4e2d\u6ca1\u6709\u5177\u4f53\u7684\u6570\u503c\uff0c\u4ec5\u4ec5\u53ea\u662f \u6570\u636e\u5360\u4f4d\u7b26 \uff0c OneFlow \u53ef\u4ee5\u6839\u636e\u8fd9\u79cd\u6570\u636e\u5360\u4f4d\u7b26\u8fdb\u884c\u7f16\u8bd1\u63a8\u7406\uff0c\u5f97\u5230\u8ba1\u7b97\u56fe\u3002 \u8fd9\u79cd\u6570\u636e\u5360\u4f4d\u7b26\u5728 OneFlow \u7684\u8bed\u5883\u4e2d\u88ab\u79f0\u4f5c Blob \uff0c\u5728 OneFlow \u4e2d\u6709\u5bf9\u5e94\u7684\u57fa\u7c7b BlobDef \u3002 \u642d\u5efa\u7f51\u7edc\u65f6\u53ef\u4ee5\u6253\u5370 Blob \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u6253\u5370 conv1 \u7684 shape \u548c dtype \uff1a print(conv1.shape, conv1.dtype) Blob \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d BlobDef \u4e2d\u5b9a\u4e49\u4e86\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c BlobDef \u5bf9\u8c61\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u52a0\u51cf\u4e58\u9664\u7b49\u64cd\u4f5c\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u53e5\u4ee3\u7801\u4e2d\u7684\u52a0\u53f7\uff1a output = output + fc2_biases \u8fd9\u53e5\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a output = flow.broadcast_add(output, fc2_biases) \u603b\u7ed3 \u00b6 \u4f7f\u7528 OneFlow \u8fdb\u884c\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\uff0c\u9700\u8981 OneFlow \u63d0\u4f9b\u7b97\u5b50\u6216\u5c42\u4f5c\u4e3a\u8ba1\u7b97\u5355\u5143\u3002\u6570\u636e\u5360\u4f4d\u7b26 Blob \u4f5c\u4e3a\u7b97\u5b50\u548c\u5c42\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u5e2e\u52a9\u7b80\u5316\u4e86\u90e8\u5206\u8bed\u53e5\u3002 OneFlow \u63d0\u4f9b\u7684\u7b97\u5b50\u53ef\u4ee5\u53c2\u9605 API \u6587\u6863\u4e2d\u7684\uff1a oneflow.nn \u3001 oneflow.math \u3001 oneflow.layers \u7b49\u6a21\u5757\u3002","title":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"basics_topics/build_nn_with_op_and_layer.html#oneflow","text":"\u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 flow.layers \u548c flow.nn \u63d0\u4f9b\u7684\u63a5\u53e3\u642d\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 LeNet \u7f51\u7edc\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5c06\u901a\u8fc7LeNet\u6765\u4ecb\u7ecd OneFlow \u4e2d\u7f51\u7edc\u642d\u5efa\u7684\u6838\u5fc3\u5143\u7d20\u2014\u7b97\u5b50(Op)\u548c\u5c42(Layer)\u3002 LeNet \u662f\u4e00\u4e2a\u4e3b\u8981\u7531\u5377\u79ef\u5c42\u3001\u6c60\u5316\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u7ec4\u6210\u7684\u795e\u7ecf\u7f51\u7edc\u3002 \u4e0a\u56fe\u4e2d\u6709\u4e24\u7c7b\u5143\u7d20\uff0c\u4e00\u7c7b\u662f\u65b9\u6846\u4ee3\u8868\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u5305\u62ec Op \u548c Layer \u4e24\u7c7b\uff0c\u6bd4\u5982 conv2d \u3001 dense \u3001 max_pool2d \u7b49\uff1b\u4e00\u7c7b\u662f\u7bad\u5934\u4ee3\u8868\u7684\u6570\u636e\u3002\u5b83\u5bf9\u5e94\u4e86\u4ee5\u4e0b\u4ee3\u7801\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\uff0c data \u662f\u5f62\u72b6\u4e3a 100x1\u00d728\u00d728 \u7684\u6570\u636e\uff0c data \u9996\u5148\u4f5c\u4e3a conv2d \u7684\u8f93\u5165\u53c2\u4e0e\u5377\u79ef\u8ba1\u7b97\uff0c\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c conv1 \uff0c\u7136\u540e conv1 \u4f5c\u4e3a\u8f93\u5165\u4f20\u7ed9 max_pool2d \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"\u4f7f\u7528OneFlow\u642d\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"basics_topics/build_nn_with_op_and_layer.html#op-layer","text":"\u7b97\u5b50\uff08Op\uff09\u662f\u6bd4\u8f83\u5e38\u7528\u7684\u4e00\u79cd\u6982\u5ff5\uff0c\u662f OneFlow \u4e2d\u57fa\u672c\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u4e0a\u6587\u4ee3\u7801\u4e2d\u7684 reshape \u548c nn.max_pool2d \u5c31\u662f\u4e24\u79cd\u7b97\u5b50\u3002 layers.conv2d \u548c layers.dense \u4e0d\u662f\u57fa\u672c\u7684\u8fd0\u7b97\u5355\u5143\uff0c\u5b83\u4eec\u662f\u7531\u7b97\u5b50\u7ec4\u5408\u6210\u7684\u7279\u5b9a\u7684\u8fd0\u7b97\u5c42\uff08Layer\uff09\u3002\u5c42\u7684\u5b58\u5728\u4f7f\u5f97\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u66f4\u65b9\u4fbf\uff0c\u76f8\u5173\u63a5\u53e3\u4f7f\u7528\u8bf7\u53c2\u8003 oneflow.layers API \u3002 \u901a\u8fc7\u9605\u8bfb oneflow.layers \u6e90\u7801 \uff0c\u53ef\u4ee5\u5b66\u4e60\u7531\u57fa\u672c\u7b97\u5b50\u6784\u5efa\u8fd0\u7b97\u5c42\u7684\u7ec6\u8282\u3002","title":"Op \u548c Layer"},{"location":"basics_topics/build_nn_with_op_and_layer.html#_1","text":"OneFlow \u9ed8\u8ba4\u6a21\u5f0f\u662f\u9759\u6001\u56fe\u673a\u5236\uff0c\u7f51\u7edc\u7684\u6784\u5efa\u548c\u8fd0\u884c\u8fc7\u7a0b\u5176\u5b9e\u662f\u5206\u5f00\u7684\u3002\u56e0\u6b64\uff0c\u5728\u5b9a\u4e49\u7f51\u7edc\u65f6\uff0c\u5404\u4e2a\u53d8\u91cf\u4e2d \u5e76\u6ca1\u6709 \u771f\u5b9e\u7684\u6570\u636e\uff0c\u5b83\u4eec\u53ea\u662f\u6570\u636e\u7684\u5360\u4f4d\u7b26\u3002\u771f\u5b9e\u6570\u636e\u7684\u8ba1\u7b97\u53d1\u751f\u5728\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\u8fc7\u7a0b\u4e2d\u3002 \u5728\u6784\u5efa\u7f51\u7edc\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u63cf\u8ff0\u4e86\u7f51\u7edc\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u6027\u8d28\u3001\u5f62\u72b6\uff08\u5982 shape \u3001 dtype \uff09\u4e0e\u8fde\u63a5\u5173\u7cfb\u7b49\uff0c\u8fd9\u4e9b\u8282\u70b9\u4e2d\u6ca1\u6709\u5177\u4f53\u7684\u6570\u503c\uff0c\u4ec5\u4ec5\u53ea\u662f \u6570\u636e\u5360\u4f4d\u7b26 \uff0c OneFlow \u53ef\u4ee5\u6839\u636e\u8fd9\u79cd\u6570\u636e\u5360\u4f4d\u7b26\u8fdb\u884c\u7f16\u8bd1\u63a8\u7406\uff0c\u5f97\u5230\u8ba1\u7b97\u56fe\u3002 \u8fd9\u79cd\u6570\u636e\u5360\u4f4d\u7b26\u5728 OneFlow \u7684\u8bed\u5883\u4e2d\u88ab\u79f0\u4f5c Blob \uff0c\u5728 OneFlow \u4e2d\u6709\u5bf9\u5e94\u7684\u57fa\u7c7b BlobDef \u3002 \u642d\u5efa\u7f51\u7edc\u65f6\u53ef\u4ee5\u6253\u5370 Blob \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u6253\u5370 conv1 \u7684 shape \u548c dtype \uff1a print(conv1.shape, conv1.dtype) Blob \u7684\u8fd0\u7b97\u7b26\u91cd\u8f7d BlobDef \u4e2d\u5b9a\u4e49\u4e86\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c BlobDef \u5bf9\u8c61\u4e4b\u95f4\u53ef\u4ee5\u8fdb\u884c\u52a0\u51cf\u4e58\u9664\u7b49\u64cd\u4f5c\u3002 \u4f8b\u5982\u4e0b\u9762\u8fd9\u53e5\u4ee3\u7801\u4e2d\u7684\u52a0\u53f7\uff1a output = output + fc2_biases \u8fd9\u53e5\u4ee3\u7801\u7b49\u4ef7\u4e8e\uff1a output = flow.broadcast_add(output, fc2_biases)","title":"\u7f51\u7edc\u6784\u5efa\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u5757"},{"location":"basics_topics/build_nn_with_op_and_layer.html#_2","text":"\u4f7f\u7528 OneFlow \u8fdb\u884c\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\uff0c\u9700\u8981 OneFlow \u63d0\u4f9b\u7b97\u5b50\u6216\u5c42\u4f5c\u4e3a\u8ba1\u7b97\u5355\u5143\u3002\u6570\u636e\u5360\u4f4d\u7b26 Blob \u4f5c\u4e3a\u7b97\u5b50\u548c\u5c42\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u8fd0\u7b97\u7b26\u91cd\u8f7d\u5e2e\u52a9\u7b80\u5316\u4e86\u90e8\u5206\u8bed\u53e5\u3002 OneFlow \u63d0\u4f9b\u7684\u7b97\u5b50\u53ef\u4ee5\u53c2\u9605 API \u6587\u6863\u4e2d\u7684\uff1a oneflow.nn \u3001 oneflow.math \u3001 oneflow.layers \u7b49\u6a21\u5757\u3002","title":"\u603b\u7ed3"},{"location":"basics_topics/concept_explanation.html","text":"OneFlow \u6982\u5ff5\u6e05\u5355 \u00b6 \u672c\u6587\u5c06\u5bf9 OneFlow \u4e2d\u6d89\u53ca\u5230\u7684\uff0c\u5e38\u7528\u7684\u4e00\u4e9b\u6982\u5ff5/\u540d\u8bcd\u505a\u4e00\u4e2a\u6982\u62ec\u6027\u7684\u89e3\u91ca\u3002\u4e3b\u8981\u5185\u5bb9\u9488\u5bf9\u7b97\u6cd5\u5de5\u7a0b\u5e08\u548c\u6846\u67b6\u5f00\u53d1\u8005\u5206\u4e3a\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a \u7b97\u6cd5\u5f00\u53d1 \u6846\u67b6\u5f00\u53d1 \u5728\u7b97\u6cd5\u5f00\u53d1\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u89e3\u91ca\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5e38\u7528\u7684\u4e00\u4e9b\u6982\u5ff5\u548c\u540d\u8bcd\uff0c\u800c\u5728\u6846\u67b6\u5f00\u53d1\u90e8\u5206\uff0c\u6211\u4eec\u5219\u4fa7\u91cd\u4e8e\u4ecb\u7ecd OneFlow \u6846\u67b6\u5185\u90e8\u8bbe\u8ba1\u6982\u5ff5\u3001\u91cd\u8981\u6570\u636e\u7ed3\u6784\u3002 \u7b97\u6cd5\u5f00\u53d1 \u00b6 1. Placeholder \u00b6 Placeholder \u5373 \u6570\u636e\u5360\u4f4d\u7b26 \uff0c\u6b64\u6982\u5ff5\u7528\u4e8e\u63cf\u8ff0\u8f93\u5165/\u8f93\u51fa\u7684\u6570\u636e\u5f62\u72b6\uff0c\u800c\u5e76\u4e0d\u662f\u5b9e\u4f53\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff1a import oneflow.typing as tp def test_job ( images : tp . Numpy . Placeholder (( 32 , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( 32 ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: # do something with images or labels return ( images , labels ) \u63cf\u8ff0\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7684 job \u51fd\u6570\u4e2d\uff0c\u8f93\u5165\u7684\u56fe\u7247 shape \u662f(32, 1, 28, 28)\uff0c\u6570\u636e\u7c7b\u578b\u662f flow.float32 \uff1b\u8f93\u5165\u7684 labels \u6807\u7b7e\u7684 shape \u662f(32,)\uff0c\u7c7b\u578b\u662f flow.int32 \u3002 2. Tensor \u548c Blob \u00b6 \u5728\u5176\u4ed6\u6846\u67b6\u4e2d\u5e38\u7528 Tensor \u8fd9\u4e2a\u6982\u5ff5\uff0c\u8b6c\u5982 pytorch \u4e2d\u7684 Tensor\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6570\u636e\u503c\u548c\u7c7b\u578b(data, dtype)\u3001\u68af\u5ea6 grad\u3001\u5b58\u653e\u7684\u8bbe\u5907\u7c7b\u578b device \u7b49\u5c5e\u6027\u3002\u5229\u7528 Tensor \u53ef\u4ee5\u7528\u6765\u6784\u9020\u548c\u63cf\u8ff0\u524d\u5411/\u53cd\u5411\u8fc7\u7a0b\u4e2d\u7684\u8ba1\u7b97\u56fe\u3002 \u800c\u5728 OneFlow \u4e2d\uff0c\u5e95\u5c42\u4e5f\u4f7f\u7528\u4e86 Tensor \u7684\u6982\u5ff5\uff0c\u4e0d\u8fc7 OneFlow \u4e2d\u7684 Tensor \u548c pytorch/tensorflow \u4e2d\u7684\u6709\u4e9b\u4e0d\u540c\uff0c\u4e3a\u4e86\u5bf9\u5206\u5e03\u5f0f\u548c\u5e76\u884c\u63d0\u4f9b\u5145\u5206\u7684\u652f\u6301\uff0cOneFlow \u4e2d\u7684 Tensor \u66f4\u4e3a\u590d\u6742\uff0c\u7c7b\u578b\u548c\u5c5e\u6027\u66f4\u591a\uff08\u8b6c\u5982\uff1a\u903b\u8f91/\u7269\u7406\u3001\u8bbe\u5907\u3001\u5206\u5e03\u5f0f\u76f8\u5173\u7684\u5c5e\u6027\uff09\uff0c\u800c\u4e14\u4e00\u4e2a\u903b\u8f91\u4e0a\u7edf\u4e00\u7684 Tensor \u53ef\u80fd\u5728\u5b9e\u9645\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u88ab\u62c6\u5206\u5230\u4e86\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\uff0c\u6240\u4ee5\u4e3a\u4e86\u7b80\u5316\u63cf\u8ff0\uff0cOneFlow \u4e2d\u5c4f\u853d\u4e86\u5404\u79cd\u5177\u4f53\u7c7b\u578b\u7684 Tensor\uff0c\u5176\u4e0a\u5c42\u7531\u4e00\u4e2a\u7edf\u4e00\u7684\u6982\u5ff5\u2014 Blob \u4f5c\u4e3a\u5b9a\u4e49\u3002 Blob \u5728 OneFlow \u4e2d\u6709\u5bf9\u5e94\u7684\u57fa\u7c7b BlobDef \uff0c\u642d\u5efa\u7f51\u7edc\u65f6\u53ef\u4ee5\u6253\u5370 Blob \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u6253\u5370 conv1 \u7684 shape \u548c dtype \uff1a print ( conv1 . shape , conv1 . dtype ) Blob \u53ef\u80fd\u53ea\u662f\u5360\u4f4d\u7b26 Placeholder\uff0c\u4e5f\u53ef\u80fd\u662f\u5177\u4f53\u7684\u5305\u542b\u6570\u503c\u7684\u5355\u5143\u3002 3. Job Function(\u4f5c\u4e1a\u51fd\u6570) \u00b6 \u5728 OneFlow \u4e2d\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u3001\u9884\u6d4b\u7b49\u5177\u4f53\u4efb\u52a1\u7edf\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570(job function)\uff0c\u4f5c\u4e1a\u51fd\u6570\u8054\u7cfb\u7528\u6237\u7684\u4e1a\u52a1\u903b\u8f91\u4e0e OneFlow \u7ba1\u7406\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u5728 OneFlow \u4e2d\uff0c\u4efb\u4f55\u88ab\u5b9a\u4e49\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u65b9\u6cd5\u4f53\u90fd\u9700\u8981\u7528\u88c5\u9970\u5668 @oneflow.global_function \u4fee\u9970\uff0c\u901a\u8fc7\u6b64\u88c5\u9970\u5668\uff0c\u6211\u4eec\u4e0d\u4ec5\u80fd\u5b9a\u4e49\u4f5c\u4e1a\u7684\u7c7b\u578b(\u5982\uff1a type=\"train\" )\uff0c\u540c\u65f6\u5c06\u4e3a\u4f5c\u4e1a\u7ed1\u5b9a\u4e00\u4e2a FunctionConfig \u5bf9\u8c61\u7528\u4e8e\u8bbe\u7f6e\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\u6240\u9700\u7684\u914d\u7f6e\uff0c\u4f7f\u5f97 OneFlow \u80fd\u65b9\u4fbf\u5730\u4e3a\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u3001GPU \u7b49\u8ba1\u7b97\u8d44\u6e90\u3002 4. Layer \u548c Operator\uff08op\uff09 \u00b6 Layer \u00b6 Layer \u5373\u8fd0\u7b97\u5c42\uff0clayer \u7684\u6982\u5ff5\u548c tensorflow\u3001pytorch \u7b49\u4e3b\u6d41\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7c7b\u4f3c\uff0c\u7528\u6765\u63cf\u8ff0\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a\u5c42\u7ea7\u5982\uff1aconv2d \u5377\u79ef\u5c42\u3001batch_normalization \u5c42\u3001dense \u5168\u8fde\u63a5\u5c42\u3001layer_norm \u6b63\u5219\u5316\u5c42\u7b49\u3002\u5c42\u7684\u5b58\u5728\u7b80\u5316\u4e86\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u642d\u5efa\u8fc7\u7a0b\uff0c\u8b6c\u5982\u4f60\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u51e0\u884c\u4ee3\u7801\u642d\u5efa\u51fa LeNet\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) layer \u5e95\u5c42\u662f\u7531\u5404\u79cd\u7b97\u5b50\u62fc\u63a5\u800c\u6210\uff0c\u8b6c\u5982\uff1a layers.conv2d \u5176\u5b9e\u662f\u7531 conv2d \u7b97\u5b50\u548c variable \u7b97\u5b50\u7ec4\u6210\u3002 Op \u00b6 Operator \u5373\u7b97\u5b50\uff08\u7b80\u79f0\u4e3aop\uff09\uff0c\u662f OneFlow \u4e2d\u7684 \u57fa\u672c\u8fd0\u7b97\u5355\u5143 \u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d layer \u4e4b\u95f4\u7684\u8ba1\u7b97\u5168\u90e8\u7531\u5404\u79cd\u7b97\u5b50\u53e0\u52a0\u5b8c\u6210\u3002\u8b6c\u5982 flow.nn.max_pool2d \u5c31\u662f\u4e00\u79cd\u7b97\u5b50\uff0c flow.reshape \u662f\u53e6\u4e00\u79cd\u7b97\u5b50\u3002 5. Consistent/Mirrored View \u00b6 OneFlow \u4e2d\u91c7\u53d6\u4e86\u4e24\u79cd\u89c6\u89d2\uff1a Mirrored View \u548c Consistent View \u6765\u63cf\u8ff0\u5206\u5e03\u5f0f\u60c5\u51b5\u4e0b\u6570\u636e\u548c\u6a21\u578b\u7684\u5206\u5e03\uff0c\u4e0d\u540c\u7684 view \u5bf9\u5e94\u4e86\u4e0d\u540c\u7684\u5e76\u884c\u7b56\u7565\u3002 Mirrored View \u6765\u6e90\u4e8e MPI \u5206\u5e03\u5f0f\u8ba1\u7b97\u4e2d\u7684\u955c\u50cf\u7b56\u7565\uff0c\u7528\u4e8e\u63cf\u8ff0\u6570\u636e\u5e76\u884c\u65f6\uff0c\u6a21\u578b\u955c\u50cf\u5230\u591a\u5361\u7684\u884c\u4e3a\uff1b Consistent View \u5219\u8868\u793a\u5c06\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u7684\u591a\u673a\u591a\u5361\u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u91c7\u53d6\u6b64\u7b56\u7565\u65f6\uff0cOneFlow \u4f1a\u4e3a\u7528\u6237\u5c4f\u853d\u6389\u5177\u4f53\u7684\u6267\u884c\u65b9\u5f0f\uff0c\u5185\u90e8\u5c06\u4ee5\u6700\u4f18\u5316\u7684\u7b56\u7565\u9009\u62e9\u5e76\u884c\u65b9\u5f0f\uff08\u53ef\u80fd\u662f\u6570\u636e\u5e76\u884c/\u6a21\u578b\u5e76\u884c\u6216\u6df7\u5408\u5e76\u884c\uff09 \u7b80\u5355\u6765\u8bf4\uff1a \u5f53\u8bbe\u7f6e mirrored view \u65f6\uff08 flow.scope.mirrored_view \uff09\u8868\u793a\u53ea\u80fd\u4f7f\u7528 \u6570\u636e\u5e76\u884c \u7684\u65b9\u5f0f\u3002\u8b6c\u5982\u5728 job function \u4e2d\u8bbe\u7f6e\u4e864\u53f0\u5355\u5361\u8282\u70b9\uff0c\u5219\u6a21\u578b\u4f1a\u88ab\u5b8c\u6574\u7684\u590d\u5236/\u955c\u50cf\u52304\u53f0\u8282\u70b9\u7684GPU\u5361\u4e0a\uff0c\u6570\u636e\u5219\u4f1a\u5207\u5206\u4e3a4\u4efd\u5206\u522b\u5582\u7ed94\u53f0\u8282\u70b9\u4e0a\u7684GPU\u5361\u3002 \u5f53\u8bbe\u7f6e consistent view \u65f6( flow.scope.consistent_view )\uff0c\u5219\u8868\u793a\u6ca1\u6709\u9650\u5236\uff0cOneFlow \u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6a21\u578b\u5e76\u884c\u3001\u6570\u636e\u5e76\u884c\u6216\u8005\u4e24\u8005\u5171\u5b58\u7684\u6df7\u5408\u5e76\u884c\u3002 \u6846\u67b6\u5f00\u53d1 \u00b6 1. Boxing \u00b6 \u8d1f\u8d23\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5e76\u884c\u5c5e\u6027\u8f6c\u6362\u5f20\u91cf\u7684\u6a21\u5757\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a Boxing \u3002 \u4f8b\u5982\uff1a\u5f53\u4e0a\u4e0b\u6e38\u7684 op \u5177\u6709\u4e0d\u540c\u7684\u5e76\u884c\u7279\u6027(\u5982\u5e76\u884c\u6570\u4e0d\u540c)\uff0cOneFlow \u5c06\u5229\u7528 Boxing \u81ea\u52a8\u5904\u7406\u5404\u79cd\u6570\u636e\u8f6c\u6362\u548c\u4f20\u8f93\u8fc7\u7a0b\u3002 2. SBP \u00b6 \u672c\u8d28\u4e0a\uff0c\u795e\u7ecf\u7f51\u7edc\u524d\u5411\u540e\u5411\u8fc7\u7a0b\u4e2d\u7684\u5927\u591a\u6570\u64cd\u4f5c\uff0c\u90fd\u53ef\u4ee5\u5f52\u7eb3\u4e3a\u77e9\u9635\u8ba1\u7b97\uff0c\u5728\u77e9\u9635\u8ba1\u7b97\u4e2d\u5e38\u6709\u6839\u636e axis \u5207\u5206\u3001\u5e7f\u64ad\u7b49\u64cd\u4f5c\u3002\u540c\u6837 OneFlow \u4e2d\u4e5f\u6709\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u79f0\u4e3aSBP\uff0c\u5f53\u7136\uff0cOneFlow \u4e2d\u7684 SBP \u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u7684\u77e9\u9635\u8fd0\u7b97\uff0c\u5176\u8fd8\u5bf9\u5e94\u4e86\u6570\u636e\u5728\u4e0d\u540c\u7269\u7406 GPU \u4e0a\u7684\u5212\u5206\u3001\u5e7f\u64ad\u7b49\u5b9e\u9645\u64cd\u4f5c\u3002 SBP \u5373 Split\u3001Broadcast\u3001Partial sum \u7684\u7f29\u5199\u3002\u5176\u4e2d Split \u8868\u793a\u5207\u5206\uff1bBroadcast \u8868\u793a\u5e7f\u64ad\uff1bPartial sum \u8868\u793a\u90e8\u5206\u6c42\u548c\u3002 Split \u00b6 \u5728\u5e76\u884c op \u8ba1\u7b97\u65f6\uff0c\u5f20\u91cf\u88ab split \u5207\u5206\u4e3a\u591a\u4e2a\u5b50\u5f20\u91cf\u3002\u4e0d\u540c\u7684 op \u8fd0\u7b97\u7b26\u5141\u8bb8\u5f20\u91cf\u5728\u4e0d\u540c\u7684 axis \u8f74\u4e0a\u8fdb\u884c\u62c6\u5206\u3002Boxing \u673a\u5236\u5c06\u81ea\u52a8\u5904\u7406\u4e00\u4e2a\u5f20\u91cf\u5728\u591a\u79cd op \u64cd\u4f5c\u4e0b\u5728\u4e0d\u540c\u8f74\u4e0a\u5207\u5206\u7684\u60c5\u51b5\u3002 Broadcast \u00b6 \u5e76\u884c op \u8ba1\u7b97\u65f6\uff0c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u5f20\u91cf\u88ab\u5e7f\u64ad\u81f3\u591a\u4e2a\u8bbe\u5907\uff0c\u4f7f\u6bcf\u53f0\u8bbe\u5907\u4e0a\u6709\u76f8\u540c\u7684\u5f20\u91cf\u3002 Partial Sum \u00b6 \u5982\u679c\u4e00\u4e2a op \u5177\u6709\u5206\u914d(distributive)\u5c5e\u6027\uff0c\u5219\u5f20\u91cf\u4f1a\u6839\u636e\u5c5e\u6027\u8fdb\u884c\u90e8\u5206\u7ef4\u5ea6\u7684\u52a0\u548c\u64cd\u4f5c\u3002 3. TensorBuffer \u548c TensorList \u00b6 \u57fa\u4e8e\u9759\u6001\u56fe\u673a\u5236\uff0cOneFlow \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u63d0\u524d\u63a8\u7406\u51fa\u5404\u4e2a\u7b97\u5b50\u7684\u5f20\u91cf\u5f62\u72b6\uff0c\u5e76\u5206\u914d\u597d\u5185\u5b58\uff0c\u505a\u5230\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5185\u5b58\u96f6\u62f7\u8d1d\u3002\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u573a\u666f\u4e0b\uff0cOneFlow \u9700\u8981\u5904\u7406\u53d8\u957f\u7684\u6570\u636e\uff0c\u6bd4\u5982 DataLoader \u52a0\u8f7d\u7684\u56fe\u7247\u5f62\u72b6\u5728\u7f16\u8bd1\u65f6\u65e0\u6cd5\u83b7\u77e5\u3002\u4e3a\u4e86\u5904\u7406\u8fd9\u79cd\u53d8\u957f\u6570\u636e\uff0cOneFlow \u5185\u90e8\u8bbe\u8ba1\u4e86\u4e24\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5206\u522b\u662f TensorBuffer \u548c TensorList \u3002 TensorBuffer \u00b6 TensorBuffer \u662f\u4e00\u4e2a\u8f83\u4e3a\u7075\u6d3b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u5b9e\u4f8b\u7684\u7ef4\u5ea6\u3002OneFlow \u4f1a\u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u751f\u6210\u5bf9\u5e94\u7684 TensorBuffer \u5bf9\u8c61\uff0cTensorBuffer \u5bf9\u8c61\u95f4\u63a5\u5f15\u7528\u5185\u5b58\u6570\u636e\uff0cTensorBuffer \u6240\u5f15\u7528\u7684\u5185\u5b58\u533a\u57df\u662f \u52a8\u6001\u7684\u3001\u4e0d\u8fde\u7eed\u7684 \u3002 TensorList \u00b6 \u4e0e TensorBuffer \u7c7b\u4f3c\uff0cTensorList \u4e5f\u662f\u4e00\u79cd\u5b58\u653e\u53d8\u957f\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6700\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e0e TensorList \u7684\u6570\u636e\u90e8\u5206\u5728\u5185\u5b58\u4e2d\u662f \u8fde\u7eed\u7684 \u3002","title":"OneFlow \u6982\u5ff5\u6e05\u5355"},{"location":"basics_topics/concept_explanation.html#oneflow","text":"\u672c\u6587\u5c06\u5bf9 OneFlow \u4e2d\u6d89\u53ca\u5230\u7684\uff0c\u5e38\u7528\u7684\u4e00\u4e9b\u6982\u5ff5/\u540d\u8bcd\u505a\u4e00\u4e2a\u6982\u62ec\u6027\u7684\u89e3\u91ca\u3002\u4e3b\u8981\u5185\u5bb9\u9488\u5bf9\u7b97\u6cd5\u5de5\u7a0b\u5e08\u548c\u6846\u67b6\u5f00\u53d1\u8005\u5206\u4e3a\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a \u7b97\u6cd5\u5f00\u53d1 \u6846\u67b6\u5f00\u53d1 \u5728\u7b97\u6cd5\u5f00\u53d1\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u89e3\u91ca\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5e38\u7528\u7684\u4e00\u4e9b\u6982\u5ff5\u548c\u540d\u8bcd\uff0c\u800c\u5728\u6846\u67b6\u5f00\u53d1\u90e8\u5206\uff0c\u6211\u4eec\u5219\u4fa7\u91cd\u4e8e\u4ecb\u7ecd OneFlow \u6846\u67b6\u5185\u90e8\u8bbe\u8ba1\u6982\u5ff5\u3001\u91cd\u8981\u6570\u636e\u7ed3\u6784\u3002","title":"OneFlow \u6982\u5ff5\u6e05\u5355"},{"location":"basics_topics/concept_explanation.html#_1","text":"","title":"\u7b97\u6cd5\u5f00\u53d1"},{"location":"basics_topics/concept_explanation.html#1-placeholder","text":"Placeholder \u5373 \u6570\u636e\u5360\u4f4d\u7b26 \uff0c\u6b64\u6982\u5ff5\u7528\u4e8e\u63cf\u8ff0\u8f93\u5165/\u8f93\u51fa\u7684\u6570\u636e\u5f62\u72b6\uff0c\u800c\u5e76\u4e0d\u662f\u5b9e\u4f53\u7684\u6570\u636e\u3002 \u4f8b\u5982\uff1a import oneflow.typing as tp def test_job ( images : tp . Numpy . Placeholder (( 32 , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( 32 ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: # do something with images or labels return ( images , labels ) \u63cf\u8ff0\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7684 job \u51fd\u6570\u4e2d\uff0c\u8f93\u5165\u7684\u56fe\u7247 shape \u662f(32, 1, 28, 28)\uff0c\u6570\u636e\u7c7b\u578b\u662f flow.float32 \uff1b\u8f93\u5165\u7684 labels \u6807\u7b7e\u7684 shape \u662f(32,)\uff0c\u7c7b\u578b\u662f flow.int32 \u3002","title":"1. Placeholder"},{"location":"basics_topics/concept_explanation.html#2-tensor-blob","text":"\u5728\u5176\u4ed6\u6846\u67b6\u4e2d\u5e38\u7528 Tensor \u8fd9\u4e2a\u6982\u5ff5\uff0c\u8b6c\u5982 pytorch \u4e2d\u7684 Tensor\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6570\u636e\u503c\u548c\u7c7b\u578b(data, dtype)\u3001\u68af\u5ea6 grad\u3001\u5b58\u653e\u7684\u8bbe\u5907\u7c7b\u578b device \u7b49\u5c5e\u6027\u3002\u5229\u7528 Tensor \u53ef\u4ee5\u7528\u6765\u6784\u9020\u548c\u63cf\u8ff0\u524d\u5411/\u53cd\u5411\u8fc7\u7a0b\u4e2d\u7684\u8ba1\u7b97\u56fe\u3002 \u800c\u5728 OneFlow \u4e2d\uff0c\u5e95\u5c42\u4e5f\u4f7f\u7528\u4e86 Tensor \u7684\u6982\u5ff5\uff0c\u4e0d\u8fc7 OneFlow \u4e2d\u7684 Tensor \u548c pytorch/tensorflow \u4e2d\u7684\u6709\u4e9b\u4e0d\u540c\uff0c\u4e3a\u4e86\u5bf9\u5206\u5e03\u5f0f\u548c\u5e76\u884c\u63d0\u4f9b\u5145\u5206\u7684\u652f\u6301\uff0cOneFlow \u4e2d\u7684 Tensor \u66f4\u4e3a\u590d\u6742\uff0c\u7c7b\u578b\u548c\u5c5e\u6027\u66f4\u591a\uff08\u8b6c\u5982\uff1a\u903b\u8f91/\u7269\u7406\u3001\u8bbe\u5907\u3001\u5206\u5e03\u5f0f\u76f8\u5173\u7684\u5c5e\u6027\uff09\uff0c\u800c\u4e14\u4e00\u4e2a\u903b\u8f91\u4e0a\u7edf\u4e00\u7684 Tensor \u53ef\u80fd\u5728\u5b9e\u9645\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u88ab\u62c6\u5206\u5230\u4e86\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\uff0c\u6240\u4ee5\u4e3a\u4e86\u7b80\u5316\u63cf\u8ff0\uff0cOneFlow \u4e2d\u5c4f\u853d\u4e86\u5404\u79cd\u5177\u4f53\u7c7b\u578b\u7684 Tensor\uff0c\u5176\u4e0a\u5c42\u7531\u4e00\u4e2a\u7edf\u4e00\u7684\u6982\u5ff5\u2014 Blob \u4f5c\u4e3a\u5b9a\u4e49\u3002 Blob \u5728 OneFlow \u4e2d\u6709\u5bf9\u5e94\u7684\u57fa\u7c7b BlobDef \uff0c\u642d\u5efa\u7f51\u7edc\u65f6\u53ef\u4ee5\u6253\u5370 Blob \u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u6253\u5370 conv1 \u7684 shape \u548c dtype \uff1a print ( conv1 . shape , conv1 . dtype ) Blob \u53ef\u80fd\u53ea\u662f\u5360\u4f4d\u7b26 Placeholder\uff0c\u4e5f\u53ef\u80fd\u662f\u5177\u4f53\u7684\u5305\u542b\u6570\u503c\u7684\u5355\u5143\u3002","title":"2. Tensor \u548c Blob"},{"location":"basics_topics/concept_explanation.html#3-job-function","text":"\u5728 OneFlow \u4e2d\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u3001\u9884\u6d4b\u7b49\u5177\u4f53\u4efb\u52a1\u7edf\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570(job function)\uff0c\u4f5c\u4e1a\u51fd\u6570\u8054\u7cfb\u7528\u6237\u7684\u4e1a\u52a1\u903b\u8f91\u4e0e OneFlow \u7ba1\u7406\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u5728 OneFlow \u4e2d\uff0c\u4efb\u4f55\u88ab\u5b9a\u4e49\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u65b9\u6cd5\u4f53\u90fd\u9700\u8981\u7528\u88c5\u9970\u5668 @oneflow.global_function \u4fee\u9970\uff0c\u901a\u8fc7\u6b64\u88c5\u9970\u5668\uff0c\u6211\u4eec\u4e0d\u4ec5\u80fd\u5b9a\u4e49\u4f5c\u4e1a\u7684\u7c7b\u578b(\u5982\uff1a type=\"train\" )\uff0c\u540c\u65f6\u5c06\u4e3a\u4f5c\u4e1a\u7ed1\u5b9a\u4e00\u4e2a FunctionConfig \u5bf9\u8c61\u7528\u4e8e\u8bbe\u7f6e\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\u6240\u9700\u7684\u914d\u7f6e\uff0c\u4f7f\u5f97 OneFlow \u80fd\u65b9\u4fbf\u5730\u4e3a\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u3001GPU \u7b49\u8ba1\u7b97\u8d44\u6e90\u3002","title":"3. Job Function(\u4f5c\u4e1a\u51fd\u6570)"},{"location":"basics_topics/concept_explanation.html#4-layer-operatorop","text":"","title":"4. Layer \u548c Operator\uff08op\uff09"},{"location":"basics_topics/concept_explanation.html#layer","text":"Layer \u5373\u8fd0\u7b97\u5c42\uff0clayer \u7684\u6982\u5ff5\u548c tensorflow\u3001pytorch \u7b49\u4e3b\u6d41\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7c7b\u4f3c\uff0c\u7528\u6765\u63cf\u8ff0\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u4e2d\u7684\u4e00\u4e2a\u5c42\u7ea7\u5982\uff1aconv2d \u5377\u79ef\u5c42\u3001batch_normalization \u5c42\u3001dense \u5168\u8fde\u63a5\u5c42\u3001layer_norm \u6b63\u5219\u5316\u5c42\u7b49\u3002\u5c42\u7684\u5b58\u5728\u7b80\u5316\u4e86\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u642d\u5efa\u8fc7\u7a0b\uff0c\u8b6c\u5982\u4f60\u53ef\u4ee5\u7528\u7b80\u5355\u7684\u51e0\u884c\u4ee3\u7801\u642d\u5efa\u51fa LeNet\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) layer \u5e95\u5c42\u662f\u7531\u5404\u79cd\u7b97\u5b50\u62fc\u63a5\u800c\u6210\uff0c\u8b6c\u5982\uff1a layers.conv2d \u5176\u5b9e\u662f\u7531 conv2d \u7b97\u5b50\u548c variable \u7b97\u5b50\u7ec4\u6210\u3002","title":"Layer"},{"location":"basics_topics/concept_explanation.html#op","text":"Operator \u5373\u7b97\u5b50\uff08\u7b80\u79f0\u4e3aop\uff09\uff0c\u662f OneFlow \u4e2d\u7684 \u57fa\u672c\u8fd0\u7b97\u5355\u5143 \u3002\u4e0a\u9762\u4f8b\u5b50\u4e2d layer \u4e4b\u95f4\u7684\u8ba1\u7b97\u5168\u90e8\u7531\u5404\u79cd\u7b97\u5b50\u53e0\u52a0\u5b8c\u6210\u3002\u8b6c\u5982 flow.nn.max_pool2d \u5c31\u662f\u4e00\u79cd\u7b97\u5b50\uff0c flow.reshape \u662f\u53e6\u4e00\u79cd\u7b97\u5b50\u3002","title":"Op"},{"location":"basics_topics/concept_explanation.html#5-consistentmirrored-view","text":"OneFlow \u4e2d\u91c7\u53d6\u4e86\u4e24\u79cd\u89c6\u89d2\uff1a Mirrored View \u548c Consistent View \u6765\u63cf\u8ff0\u5206\u5e03\u5f0f\u60c5\u51b5\u4e0b\u6570\u636e\u548c\u6a21\u578b\u7684\u5206\u5e03\uff0c\u4e0d\u540c\u7684 view \u5bf9\u5e94\u4e86\u4e0d\u540c\u7684\u5e76\u884c\u7b56\u7565\u3002 Mirrored View \u6765\u6e90\u4e8e MPI \u5206\u5e03\u5f0f\u8ba1\u7b97\u4e2d\u7684\u955c\u50cf\u7b56\u7565\uff0c\u7528\u4e8e\u63cf\u8ff0\u6570\u636e\u5e76\u884c\u65f6\uff0c\u6a21\u578b\u955c\u50cf\u5230\u591a\u5361\u7684\u884c\u4e3a\uff1b Consistent View \u5219\u8868\u793a\u5c06\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u7684\u591a\u673a\u591a\u5361\u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\uff0c\u91c7\u53d6\u6b64\u7b56\u7565\u65f6\uff0cOneFlow \u4f1a\u4e3a\u7528\u6237\u5c4f\u853d\u6389\u5177\u4f53\u7684\u6267\u884c\u65b9\u5f0f\uff0c\u5185\u90e8\u5c06\u4ee5\u6700\u4f18\u5316\u7684\u7b56\u7565\u9009\u62e9\u5e76\u884c\u65b9\u5f0f\uff08\u53ef\u80fd\u662f\u6570\u636e\u5e76\u884c/\u6a21\u578b\u5e76\u884c\u6216\u6df7\u5408\u5e76\u884c\uff09 \u7b80\u5355\u6765\u8bf4\uff1a \u5f53\u8bbe\u7f6e mirrored view \u65f6\uff08 flow.scope.mirrored_view \uff09\u8868\u793a\u53ea\u80fd\u4f7f\u7528 \u6570\u636e\u5e76\u884c \u7684\u65b9\u5f0f\u3002\u8b6c\u5982\u5728 job function \u4e2d\u8bbe\u7f6e\u4e864\u53f0\u5355\u5361\u8282\u70b9\uff0c\u5219\u6a21\u578b\u4f1a\u88ab\u5b8c\u6574\u7684\u590d\u5236/\u955c\u50cf\u52304\u53f0\u8282\u70b9\u7684GPU\u5361\u4e0a\uff0c\u6570\u636e\u5219\u4f1a\u5207\u5206\u4e3a4\u4efd\u5206\u522b\u5582\u7ed94\u53f0\u8282\u70b9\u4e0a\u7684GPU\u5361\u3002 \u5f53\u8bbe\u7f6e consistent view \u65f6( flow.scope.consistent_view )\uff0c\u5219\u8868\u793a\u6ca1\u6709\u9650\u5236\uff0cOneFlow \u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6a21\u578b\u5e76\u884c\u3001\u6570\u636e\u5e76\u884c\u6216\u8005\u4e24\u8005\u5171\u5b58\u7684\u6df7\u5408\u5e76\u884c\u3002","title":"5. Consistent/Mirrored View"},{"location":"basics_topics/concept_explanation.html#_2","text":"","title":"\u6846\u67b6\u5f00\u53d1"},{"location":"basics_topics/concept_explanation.html#1-boxing","text":"\u8d1f\u8d23\u5728\u8fd0\u884c\u65f6\u6839\u636e\u5e76\u884c\u5c5e\u6027\u8f6c\u6362\u5f20\u91cf\u7684\u6a21\u5757\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a Boxing \u3002 \u4f8b\u5982\uff1a\u5f53\u4e0a\u4e0b\u6e38\u7684 op \u5177\u6709\u4e0d\u540c\u7684\u5e76\u884c\u7279\u6027(\u5982\u5e76\u884c\u6570\u4e0d\u540c)\uff0cOneFlow \u5c06\u5229\u7528 Boxing \u81ea\u52a8\u5904\u7406\u5404\u79cd\u6570\u636e\u8f6c\u6362\u548c\u4f20\u8f93\u8fc7\u7a0b\u3002","title":"1. Boxing"},{"location":"basics_topics/concept_explanation.html#2-sbp","text":"\u672c\u8d28\u4e0a\uff0c\u795e\u7ecf\u7f51\u7edc\u524d\u5411\u540e\u5411\u8fc7\u7a0b\u4e2d\u7684\u5927\u591a\u6570\u64cd\u4f5c\uff0c\u90fd\u53ef\u4ee5\u5f52\u7eb3\u4e3a\u77e9\u9635\u8ba1\u7b97\uff0c\u5728\u77e9\u9635\u8ba1\u7b97\u4e2d\u5e38\u6709\u6839\u636e axis \u5207\u5206\u3001\u5e7f\u64ad\u7b49\u64cd\u4f5c\u3002\u540c\u6837 OneFlow \u4e2d\u4e5f\u6709\u7c7b\u4f3c\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u79f0\u4e3aSBP\uff0c\u5f53\u7136\uff0cOneFlow \u4e2d\u7684 SBP \u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u7684\u77e9\u9635\u8fd0\u7b97\uff0c\u5176\u8fd8\u5bf9\u5e94\u4e86\u6570\u636e\u5728\u4e0d\u540c\u7269\u7406 GPU \u4e0a\u7684\u5212\u5206\u3001\u5e7f\u64ad\u7b49\u5b9e\u9645\u64cd\u4f5c\u3002 SBP \u5373 Split\u3001Broadcast\u3001Partial sum \u7684\u7f29\u5199\u3002\u5176\u4e2d Split \u8868\u793a\u5207\u5206\uff1bBroadcast \u8868\u793a\u5e7f\u64ad\uff1bPartial sum \u8868\u793a\u90e8\u5206\u6c42\u548c\u3002","title":"2. SBP"},{"location":"basics_topics/concept_explanation.html#split","text":"\u5728\u5e76\u884c op \u8ba1\u7b97\u65f6\uff0c\u5f20\u91cf\u88ab split \u5207\u5206\u4e3a\u591a\u4e2a\u5b50\u5f20\u91cf\u3002\u4e0d\u540c\u7684 op \u8fd0\u7b97\u7b26\u5141\u8bb8\u5f20\u91cf\u5728\u4e0d\u540c\u7684 axis \u8f74\u4e0a\u8fdb\u884c\u62c6\u5206\u3002Boxing \u673a\u5236\u5c06\u81ea\u52a8\u5904\u7406\u4e00\u4e2a\u5f20\u91cf\u5728\u591a\u79cd op \u64cd\u4f5c\u4e0b\u5728\u4e0d\u540c\u8f74\u4e0a\u5207\u5206\u7684\u60c5\u51b5\u3002","title":"Split"},{"location":"basics_topics/concept_explanation.html#broadcast","text":"\u5e76\u884c op \u8ba1\u7b97\u65f6\uff0c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u5f20\u91cf\u88ab\u5e7f\u64ad\u81f3\u591a\u4e2a\u8bbe\u5907\uff0c\u4f7f\u6bcf\u53f0\u8bbe\u5907\u4e0a\u6709\u76f8\u540c\u7684\u5f20\u91cf\u3002","title":"Broadcast"},{"location":"basics_topics/concept_explanation.html#partial-sum","text":"\u5982\u679c\u4e00\u4e2a op \u5177\u6709\u5206\u914d(distributive)\u5c5e\u6027\uff0c\u5219\u5f20\u91cf\u4f1a\u6839\u636e\u5c5e\u6027\u8fdb\u884c\u90e8\u5206\u7ef4\u5ea6\u7684\u52a0\u548c\u64cd\u4f5c\u3002","title":"Partial Sum"},{"location":"basics_topics/concept_explanation.html#3-tensorbuffer-tensorlist","text":"\u57fa\u4e8e\u9759\u6001\u56fe\u673a\u5236\uff0cOneFlow \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u63d0\u524d\u63a8\u7406\u51fa\u5404\u4e2a\u7b97\u5b50\u7684\u5f20\u91cf\u5f62\u72b6\uff0c\u5e76\u5206\u914d\u597d\u5185\u5b58\uff0c\u505a\u5230\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5185\u5b58\u96f6\u62f7\u8d1d\u3002\u4f46\u5728\u67d0\u4e9b\u7279\u6b8a\u573a\u666f\u4e0b\uff0cOneFlow \u9700\u8981\u5904\u7406\u53d8\u957f\u7684\u6570\u636e\uff0c\u6bd4\u5982 DataLoader \u52a0\u8f7d\u7684\u56fe\u7247\u5f62\u72b6\u5728\u7f16\u8bd1\u65f6\u65e0\u6cd5\u83b7\u77e5\u3002\u4e3a\u4e86\u5904\u7406\u8fd9\u79cd\u53d8\u957f\u6570\u636e\uff0cOneFlow \u5185\u90e8\u8bbe\u8ba1\u4e86\u4e24\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5206\u522b\u662f TensorBuffer \u548c TensorList \u3002","title":"3. TensorBuffer \u548c TensorList"},{"location":"basics_topics/concept_explanation.html#tensorbuffer","text":"TensorBuffer \u662f\u4e00\u4e2a\u8f83\u4e3a\u7075\u6d3b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u5b9e\u4f8b\u7684\u7ef4\u5ea6\u3002OneFlow \u4f1a\u4e3a\u6bcf\u4e2a\u5b9e\u4f8b\u751f\u6210\u5bf9\u5e94\u7684 TensorBuffer \u5bf9\u8c61\uff0cTensorBuffer \u5bf9\u8c61\u95f4\u63a5\u5f15\u7528\u5185\u5b58\u6570\u636e\uff0cTensorBuffer \u6240\u5f15\u7528\u7684\u5185\u5b58\u533a\u57df\u662f \u52a8\u6001\u7684\u3001\u4e0d\u8fde\u7eed\u7684 \u3002","title":"TensorBuffer"},{"location":"basics_topics/concept_explanation.html#tensorlist","text":"\u4e0e TensorBuffer \u7c7b\u4f3c\uff0cTensorList \u4e5f\u662f\u4e00\u79cd\u5b58\u653e\u53d8\u957f\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6700\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e0e TensorList \u7684\u6570\u636e\u90e8\u5206\u5728\u5185\u5b58\u4e2d\u662f \u8fde\u7eed\u7684 \u3002","title":"TensorList"},{"location":"basics_topics/data_input.html","text":"\u6570\u636e\u8f93\u5165 \u00b6 \u6df1\u5ea6\u5b66\u4e60\u662f\u4e00\u79cd\u6570\u636e\u9a71\u52a8\u7684\u6280\u672f\uff0c\u4e3a\u4e86\u517c\u987e\u6613\u7528\u6027\u4e0e\u6548\u7387\uff0c OneFlow \u63d0\u4f9b\u4e86\u4e24\u79cd\u201c\u5582\u201d\u6570\u636e\u7ed9\u795e\u7ecf\u7f51\u7edc\u7684\u65b9\u6cd5\uff1a \u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06 NumPy ndarray \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u4f5c\u4e1a\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4 OneFlow \u80fd\u591f\u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002 \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 OneFlow \u7684 DataLoader \u53ca\u5176\u76f8\u5173\u7b97\u5b50\uff0c\u4ece\u6587\u4ef6\u7cfb\u7edf\u52a0\u8f7d\u7279\u5b9a\u683c\u5f0f\u7684\u6570\u636e\u96c6\u5e76\u505a\u9884\u5904\u7406\u3002 \u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u7684\u65b9\u5f0f\u7b80\u5355\u65b9\u4fbf\uff0c\u4f46\u4ec5\u9002\u5408\u5c0f\u6570\u636e\u91cf\u7684\u60c5\u51b5\u3002\u56e0\u4e3a\u5f53\u6570\u636e\u91cf\u8fc7\u5927\u65f6\uff0c\u53ef\u80fd\u5728\u51c6\u5907 NumPy \u6570\u636e\u4e0a\u906d\u9047\u6548\u7387\u74f6\u9888\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u8f83\u9002\u5408\u9879\u76ee\u7684\u521d\u59cb\u9636\u6bb5\uff0c\u5feb\u901f\u9a8c\u8bc1\u548c\u6539\u8fdb\u7b97\u6cd5\uff1b OneFlow \u7684 DataLoader \u5185\u90e8\u91c7\u7528\u4e86\u591a\u7ebf\u7a0b\u548c\u6570\u636e\u6d41\u6c34\u7ebf\u7b49\u6280\u672f\u4f7f\u5f97\u6570\u636e\u52a0\u8f7d\u3001\u6570\u636e\u9884\u5904\u7406\u7b49\u6548\u7387\u66f4\u9ad8\u3002\u4f46\u662f\uff0c\u9700\u8981\u4e3a\u5df2\u7ecf\u652f\u6301\u7684\u683c\u5f0f \u51c6\u5907\u6570\u636e\u96c6 \u6216\u4e3a OneFlow \u6682\u65f6\u8fd8\u4e0d\u652f\u6301\u7684\u683c\u5f0f \u5f00\u53d1\u81ea\u5df1\u7684 DataLoader \u3002\u56e0\u6b64\uff0c\u63a8\u8350\u5728\u6210\u719f\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u3002 \u4f7f\u7528 Numpy \u6570\u636e\u4f5c\u4e3a\u8f93\u5165 \u00b6 \u8fd0\u884c\u4f8b\u5b50 \u00b6 \u5728 Oneflow \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 NumPy \u7c7b\u578b\u7684\u6570\u636e\u4f5c\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8f93\u5165\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4f8b\u5b50\uff1a # feed_numpy.py import numpy as np import oneflow as flow import oneflow.typing as tp from typing import Tuple @flow . global_function ( type = \"predict\" ) def test_job ( images : tp . Numpy . Placeholder (( 32 , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( 32 ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: # do something with images or labels return ( images , labels ) if __name__ == \"__main__\" : images_in = np . random . uniform ( - 10 , 10 , ( 32 , 1 , 28 , 28 )) . astype ( np . float32 ) labels_in = np . random . randint ( - 10 , 10 , ( 32 ,)) . astype ( np . int32 ) images , labels = test_job ( images_in , labels_in ) print ( images . shape , labels . shape ) \u4e0b\u8f7d\u5b8c\u6574\u4ee3\u7801\uff1a feed_numpy.py \uff0c\u7136\u540e\u7528 python \u6267\u884c\u5373\u53ef\uff1a python feed_numpy.py \u5c06\u5f97\u5230\u5982\u4e0b\u7ed3\u679c ( 32 , 1 , 28 , 28 ) ( 32 , ) \u4ee3\u7801\u89e3\u8bfb \u00b6 \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570 test_job() \uff0c\u5176\u8f93\u5165\u4e3a images \u548c labels \uff0c\u5e76\u4e14\u901a\u8fc7\u6ce8\u89e3(\u6ce8\u610f\u5f62\u53c2\u540e\u9762\u662f\u201c:\u201d\uff0c\u800c\u4e0d\u662f\u201c=\u201d\u3002)\u6307\u5b9a\u4e86\u6570\u636e\u7684\u5f62\u72b6\u4e0e\u6570\u636e\u7c7b\u578b\u3002 \u56e0\u6b64\uff0c\u4f8b\u5b50\u4e2d\u6309\u7167\u4f5c\u4e1a\u51fd\u6570\u5bf9\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u7684\u8981\u6c42\u968f\u673a\u751f\u6210\u4e86 NumPy\u6570\u636e\uff1a images_in \u548c labels_in \uff1a images_in = np . random . uniform ( - 10 , 10 , ( 32 , 1 , 28 , 28 )) . astype ( np . float32 ) labels_in = np . random . randint ( - 10 , 10 , ( 32 , )) . astype ( np . int32 ) \u5e76\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u76f4\u63a5\u5c06 NumPy \u6570\u636e images_in \u548c labels_in \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff1a images , labels = test_job ( images_in , labels_in ) \u4ee3\u7801\u4e2d\u7684 oneflow.typing.Numpy.Placeholder \u662f NumPy ndarray \u5bf9\u8c61\u7684\u5360\u4f4d\u7b26\uff0cOneFlow \u4e2d\u8fd8\u6709\u591a\u79cd\u5360\u4f4d\u7b26\uff0c\u53ef\u4ee5\u8868\u793a\u66f4\u590d\u6742\u7684 NumPy \u6570\u636e\u5f62\u5f0f\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u3002 \u4f7f\u7528 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50 \u00b6 \u5728 oneflow.data \u6a21\u5757\u4e0b\uff0c\u6709\u7528\u4e8e\u52a0\u8f7d\u6570\u636e\u96c6\u7684 DataLoader \u7b97\u5b50\u4ee5\u53ca\u76f8\u5173\u7684\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\u3002DataLoader \u4e00\u822c\u4ee5 data.xxx_reader \u7684\u5f62\u5f0f\u547d\u540d\uff0c\u5982\u76ee\u524d\u5df2\u6709\u7684 data.ofrecord_reader \u548c data.coco_reader \uff0c\u5206\u522b\u652f\u6301 OneFlow \u539f\u751f\u7684 OFRecord \u683c\u5f0f\u7684\u6587\u4ef6\u548c COCO \u6570\u636e\u96c6\u3002 \u6b64\u5916\uff0c\u5728\u8be5\u6a21\u5757\u4e0b\uff0c\u8fd8\u5305\u542b\u6709\u5176\u5b83\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\uff0c\u7528\u4e8e\u5904\u7406 DataLoader \u52a0\u8f7d\u540e\u7684\u6570\u636e\u3002\u5982\u4e0b\u6587\u4ee3\u7801\u4f7f\u7528\u7684 data.OFRecordImageDecoderRandomCrop \u7528\u4e8e\u56fe\u7247\u968f\u673a\u88c1\u526a\uff0c data.OFRecordRawDecoder \u7528\u4e8e\u56fe\u7247\u89e3\u7801\u3002\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u67e5\u9605 API \u6587\u6863 \u3002 \u8fd0\u884c\u4f8b\u5b50 \u00b6 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u8bfb\u53d6 OFRecord \u6570\u636e\u683c\u5f0f\u6587\u4ef6\uff0c\u5904\u7406\u7684\u662f ImageNet \u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u3002\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u70b9\u6b64\u4e0b\u8f7d\uff1a of_data_pipeline.py \u8fd9\u4e2a\u811a\u672c\uff0c\u9700\u8981\u4e00\u4e2a OFRecord \u6570\u636e\u96c6\uff0c\u4f60\u53ef\u4ee5\u6839\u636e \u8fd9\u7bc7\u6587\u7ae0 \u81ea\u5df1\u5236\u4f5c\u4e00\u4e2a\u3002 \u6216\u8005\u4e0b\u8f7d\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u7684 part-00000 \u6570\u636e\u6587\u4ef6\uff0c\u5b83\u5305\u542b\u4e8664\u5f20\u56fe\u7247\u3002\u5e76\u4e14\uff0c\u5c06\u811a\u672c\u4e2d\u7684 path/to/ImageNet/ofrecord \u66ff\u6362\u4e3a part-00000 \u6587\u4ef6 \u6240\u5728\u7684\u76ee\u5f55 \uff0c\u7136\u540e\u8fd0\u884c\u811a\u672c\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528\u6211\u4eec\u9884\u5148\u51c6\u5907\u7684\u6570\u636e\u96c6\u8fd0\u884c\u811a\u672c\u7684\u4f8b\u5b50: wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/basics_topics/part-00000 sed -i \"s:path/to/ImageNet/ofrecord:./:\" of_data_pipeline.py python3 of_data_pipeline.py \u5c06\u5f97\u5230\u4e0b\u9762\u7684\u8f93\u51fa\uff1a (64, 3, 224, 224) (64,) \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4f7f\u7528 OneFlow DataLoader \u4e00\u822c\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a \u6570\u636e\u52a0\u8f7d \u548c \u6570\u636e\u9884\u5904\u7406 \u3002 \u811a\u672c\u4e2d flow.data.ofrecord_reader \u8d1f\u8d23\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u52a0\u8f7d\u6570\u636e\u5230\u5185\u5b58\u3002 ofrecord = flow . data . ofrecord_reader ( \"path/to/ImageNet/ofrecord\" , batch_size = batch_size , data_part_num = 1 , part_name_suffix_length = 5 , random_shuffle = True , shuffle_after_epoch = True , ) \u9700\u8981\u6307\u5b9a OFRecord \u683c\u5f0f\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff0c\u548c\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u8bf7\u53c2\u8003 data.ofrecord_reader DataLoader \u7684\u8fd4\u56de\u503c\uff0c\u5982\u679c\u662f\u7b80\u5355\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u4e0b\u6e38\u7684\u7b97\u5b50\u7684\u8f93\u5165\uff0c\u5426\u5219\uff0c\u9700\u8981\u7ee7\u7eed\u8c03\u7528\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\uff0c\u8fdb\u884c\u9884\u5904\u7406\u3002 \u6bd4\u5982\uff0c\u5728\u4ee5\u4e0a\u811a\u672c\u4e2d\uff1a image = flow . data . OFRecordImageDecoderRandomCrop ( ofrecord , \"encoded\" , color_space = color_space ) label = flow . data . OFRecordRawDecoder ( ofrecord , \"class/label\" , shape = (), dtype = flow . int32 ) rsz = flow . image . Resize ( image , resize_x = 224 , resize_y = 224 , color_space = color_space ) rng = flow . random . CoinFlip ( batch_size = batch_size ) normal = flow . image . CropMirrorNormalize ( rsz , mirror_blob = rng , color_space = color_space , mean = [ 123.68 , 116.779 , 103.939 ], std = [ 58.393 , 57.12 , 57.375 ], output_dtype = flow . float , ) OFRecordImageDecoderRandomCrop \u8d1f\u8d23\u56fe\u7247\u89e3\u7801\u5e76\u968f\u673a\u505a\u4e86\u88c1\u526a\uff0c OFRecordRawDecoder \u8d1f\u8d23\u4ece ofrecord \u5bf9\u8c61\u4e2d\u76f4\u63a5\u89e3\u7801\u51fa\u6807\u7b7e\uff0c image.Resize \u628a\u88c1\u526a\u540e\u7684\u56fe\u7247\u8c03\u6574\u6210224x224\u7684\u5927\u5c0f\uff0c CropMirrorNormalize \u628a\u56fe\u7247\u8fdb\u884c\u4e86\u6b63\u5219\u5316\u3002 \u652f\u6301\u66f4\u591a\u683c\u5f0f\u7684 DataLoader \u00b6 OneFlow \u63d0\u4f9b\u4e86\u4e00\u4e9b DataLoader \u548c\u9884\u5904\u7406\u7684\u7b97\u5b50\uff0c\u8be6\u7ec6\u8bf7\u53c2\u8003 oneflow.data \u3002\u672a\u6765\u4f1a\u4e0d\u65ad\u4e30\u5bcc\u548c\u4f18\u5316\u8fd9\u4e9b\u7b97\u5b50\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u81ea\u5b9a\u4e49 DataLoader \u6ee1\u8db3\u7279\u5b9a\u7684\u9700\u6c42\u3002","title":"\u6570\u636e\u8f93\u5165"},{"location":"basics_topics/data_input.html#_1","text":"\u6df1\u5ea6\u5b66\u4e60\u662f\u4e00\u79cd\u6570\u636e\u9a71\u52a8\u7684\u6280\u672f\uff0c\u4e3a\u4e86\u517c\u987e\u6613\u7528\u6027\u4e0e\u6548\u7387\uff0c OneFlow \u63d0\u4f9b\u4e86\u4e24\u79cd\u201c\u5582\u201d\u6570\u636e\u7ed9\u795e\u7ecf\u7f51\u7edc\u7684\u65b9\u6cd5\uff1a \u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5c06 NumPy ndarray \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u4f5c\u4e1a\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4 OneFlow \u80fd\u591f\u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002 \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 OneFlow \u7684 DataLoader \u53ca\u5176\u76f8\u5173\u7b97\u5b50\uff0c\u4ece\u6587\u4ef6\u7cfb\u7edf\u52a0\u8f7d\u7279\u5b9a\u683c\u5f0f\u7684\u6570\u636e\u96c6\u5e76\u505a\u9884\u5904\u7406\u3002 \u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u7684\u65b9\u5f0f\u7b80\u5355\u65b9\u4fbf\uff0c\u4f46\u4ec5\u9002\u5408\u5c0f\u6570\u636e\u91cf\u7684\u60c5\u51b5\u3002\u56e0\u4e3a\u5f53\u6570\u636e\u91cf\u8fc7\u5927\u65f6\uff0c\u53ef\u80fd\u5728\u51c6\u5907 NumPy \u6570\u636e\u4e0a\u906d\u9047\u6548\u7387\u74f6\u9888\u3002\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u5f0f\u6bd4\u8f83\u9002\u5408\u9879\u76ee\u7684\u521d\u59cb\u9636\u6bb5\uff0c\u5feb\u901f\u9a8c\u8bc1\u548c\u6539\u8fdb\u7b97\u6cd5\uff1b OneFlow \u7684 DataLoader \u5185\u90e8\u91c7\u7528\u4e86\u591a\u7ebf\u7a0b\u548c\u6570\u636e\u6d41\u6c34\u7ebf\u7b49\u6280\u672f\u4f7f\u5f97\u6570\u636e\u52a0\u8f7d\u3001\u6570\u636e\u9884\u5904\u7406\u7b49\u6548\u7387\u66f4\u9ad8\u3002\u4f46\u662f\uff0c\u9700\u8981\u4e3a\u5df2\u7ecf\u652f\u6301\u7684\u683c\u5f0f \u51c6\u5907\u6570\u636e\u96c6 \u6216\u4e3a OneFlow \u6682\u65f6\u8fd8\u4e0d\u652f\u6301\u7684\u683c\u5f0f \u5f00\u53d1\u81ea\u5df1\u7684 DataLoader \u3002\u56e0\u6b64\uff0c\u63a8\u8350\u5728\u6210\u719f\u7684\u9879\u76ee\u4e2d\u4f7f\u7528\u3002","title":"\u6570\u636e\u8f93\u5165"},{"location":"basics_topics/data_input.html#numpy","text":"","title":"\u4f7f\u7528 Numpy \u6570\u636e\u4f5c\u4e3a\u8f93\u5165"},{"location":"basics_topics/data_input.html#_2","text":"\u5728 Oneflow \u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 NumPy \u7c7b\u578b\u7684\u6570\u636e\u4f5c\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8f93\u5165\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u4f8b\u5b50\uff1a # feed_numpy.py import numpy as np import oneflow as flow import oneflow.typing as tp from typing import Tuple @flow . global_function ( type = \"predict\" ) def test_job ( images : tp . Numpy . Placeholder (( 32 , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( 32 ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: # do something with images or labels return ( images , labels ) if __name__ == \"__main__\" : images_in = np . random . uniform ( - 10 , 10 , ( 32 , 1 , 28 , 28 )) . astype ( np . float32 ) labels_in = np . random . randint ( - 10 , 10 , ( 32 ,)) . astype ( np . int32 ) images , labels = test_job ( images_in , labels_in ) print ( images . shape , labels . shape ) \u4e0b\u8f7d\u5b8c\u6574\u4ee3\u7801\uff1a feed_numpy.py \uff0c\u7136\u540e\u7528 python \u6267\u884c\u5373\u53ef\uff1a python feed_numpy.py \u5c06\u5f97\u5230\u5982\u4e0b\u7ed3\u679c ( 32 , 1 , 28 , 28 ) ( 32 , )","title":"\u8fd0\u884c\u4f8b\u5b50"},{"location":"basics_topics/data_input.html#_3","text":"\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f5c\u4e1a\u51fd\u6570 test_job() \uff0c\u5176\u8f93\u5165\u4e3a images \u548c labels \uff0c\u5e76\u4e14\u901a\u8fc7\u6ce8\u89e3(\u6ce8\u610f\u5f62\u53c2\u540e\u9762\u662f\u201c:\u201d\uff0c\u800c\u4e0d\u662f\u201c=\u201d\u3002)\u6307\u5b9a\u4e86\u6570\u636e\u7684\u5f62\u72b6\u4e0e\u6570\u636e\u7c7b\u578b\u3002 \u56e0\u6b64\uff0c\u4f8b\u5b50\u4e2d\u6309\u7167\u4f5c\u4e1a\u51fd\u6570\u5bf9\u5f62\u72b6\u548c\u6570\u636e\u7c7b\u578b\u7684\u8981\u6c42\u968f\u673a\u751f\u6210\u4e86 NumPy\u6570\u636e\uff1a images_in \u548c labels_in \uff1a images_in = np . random . uniform ( - 10 , 10 , ( 32 , 1 , 28 , 28 )) . astype ( np . float32 ) labels_in = np . random . randint ( - 10 , 10 , ( 32 , )) . astype ( np . int32 ) \u5e76\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u76f4\u63a5\u5c06 NumPy \u6570\u636e images_in \u548c labels_in \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff1a images , labels = test_job ( images_in , labels_in ) \u4ee3\u7801\u4e2d\u7684 oneflow.typing.Numpy.Placeholder \u662f NumPy ndarray \u5bf9\u8c61\u7684\u5360\u4f4d\u7b26\uff0cOneFlow \u4e2d\u8fd8\u6709\u591a\u79cd\u5360\u4f4d\u7b26\uff0c\u53ef\u4ee5\u8868\u793a\u66f4\u590d\u6742\u7684 NumPy \u6570\u636e\u5f62\u5f0f\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"basics_topics/data_input.html#dataloader","text":"\u5728 oneflow.data \u6a21\u5757\u4e0b\uff0c\u6709\u7528\u4e8e\u52a0\u8f7d\u6570\u636e\u96c6\u7684 DataLoader \u7b97\u5b50\u4ee5\u53ca\u76f8\u5173\u7684\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\u3002DataLoader \u4e00\u822c\u4ee5 data.xxx_reader \u7684\u5f62\u5f0f\u547d\u540d\uff0c\u5982\u76ee\u524d\u5df2\u6709\u7684 data.ofrecord_reader \u548c data.coco_reader \uff0c\u5206\u522b\u652f\u6301 OneFlow \u539f\u751f\u7684 OFRecord \u683c\u5f0f\u7684\u6587\u4ef6\u548c COCO \u6570\u636e\u96c6\u3002 \u6b64\u5916\uff0c\u5728\u8be5\u6a21\u5757\u4e0b\uff0c\u8fd8\u5305\u542b\u6709\u5176\u5b83\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\uff0c\u7528\u4e8e\u5904\u7406 DataLoader \u52a0\u8f7d\u540e\u7684\u6570\u636e\u3002\u5982\u4e0b\u6587\u4ee3\u7801\u4f7f\u7528\u7684 data.OFRecordImageDecoderRandomCrop \u7528\u4e8e\u56fe\u7247\u968f\u673a\u88c1\u526a\uff0c data.OFRecordRawDecoder \u7528\u4e8e\u56fe\u7247\u89e3\u7801\u3002\u5177\u4f53\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u67e5\u9605 API \u6587\u6863 \u3002","title":"\u4f7f\u7528 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50"},{"location":"basics_topics/data_input.html#_4","text":"\u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u8bfb\u53d6 OFRecord \u6570\u636e\u683c\u5f0f\u6587\u4ef6\uff0c\u5904\u7406\u7684\u662f ImageNet \u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u3002\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u70b9\u6b64\u4e0b\u8f7d\uff1a of_data_pipeline.py \u8fd9\u4e2a\u811a\u672c\uff0c\u9700\u8981\u4e00\u4e2a OFRecord \u6570\u636e\u96c6\uff0c\u4f60\u53ef\u4ee5\u6839\u636e \u8fd9\u7bc7\u6587\u7ae0 \u81ea\u5df1\u5236\u4f5c\u4e00\u4e2a\u3002 \u6216\u8005\u4e0b\u8f7d\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u7684 part-00000 \u6570\u636e\u6587\u4ef6\uff0c\u5b83\u5305\u542b\u4e8664\u5f20\u56fe\u7247\u3002\u5e76\u4e14\uff0c\u5c06\u811a\u672c\u4e2d\u7684 path/to/ImageNet/ofrecord \u66ff\u6362\u4e3a part-00000 \u6587\u4ef6 \u6240\u5728\u7684\u76ee\u5f55 \uff0c\u7136\u540e\u8fd0\u884c\u811a\u672c\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528\u6211\u4eec\u9884\u5148\u51c6\u5907\u7684\u6570\u636e\u96c6\u8fd0\u884c\u811a\u672c\u7684\u4f8b\u5b50: wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/basics_topics/part-00000 sed -i \"s:path/to/ImageNet/ofrecord:./:\" of_data_pipeline.py python3 of_data_pipeline.py \u5c06\u5f97\u5230\u4e0b\u9762\u7684\u8f93\u51fa\uff1a (64, 3, 224, 224) (64,)","title":"\u8fd0\u884c\u4f8b\u5b50"},{"location":"basics_topics/data_input.html#_5","text":"\u4f7f\u7528 OneFlow DataLoader \u4e00\u822c\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a \u6570\u636e\u52a0\u8f7d \u548c \u6570\u636e\u9884\u5904\u7406 \u3002 \u811a\u672c\u4e2d flow.data.ofrecord_reader \u8d1f\u8d23\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u52a0\u8f7d\u6570\u636e\u5230\u5185\u5b58\u3002 ofrecord = flow . data . ofrecord_reader ( \"path/to/ImageNet/ofrecord\" , batch_size = batch_size , data_part_num = 1 , part_name_suffix_length = 5 , random_shuffle = True , shuffle_after_epoch = True , ) \u9700\u8981\u6307\u5b9a OFRecord \u683c\u5f0f\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\uff0c\u548c\u4e00\u4e9b\u5176\u4ed6\u53c2\u6570\uff0c\u8bf7\u53c2\u8003 data.ofrecord_reader DataLoader \u7684\u8fd4\u56de\u503c\uff0c\u5982\u679c\u662f\u7b80\u5355\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4f5c\u4e3a\u4e0b\u6e38\u7684\u7b97\u5b50\u7684\u8f93\u5165\uff0c\u5426\u5219\uff0c\u9700\u8981\u7ee7\u7eed\u8c03\u7528\u6570\u636e\u9884\u5904\u7406\u7b97\u5b50\uff0c\u8fdb\u884c\u9884\u5904\u7406\u3002 \u6bd4\u5982\uff0c\u5728\u4ee5\u4e0a\u811a\u672c\u4e2d\uff1a image = flow . data . OFRecordImageDecoderRandomCrop ( ofrecord , \"encoded\" , color_space = color_space ) label = flow . data . OFRecordRawDecoder ( ofrecord , \"class/label\" , shape = (), dtype = flow . int32 ) rsz = flow . image . Resize ( image , resize_x = 224 , resize_y = 224 , color_space = color_space ) rng = flow . random . CoinFlip ( batch_size = batch_size ) normal = flow . image . CropMirrorNormalize ( rsz , mirror_blob = rng , color_space = color_space , mean = [ 123.68 , 116.779 , 103.939 ], std = [ 58.393 , 57.12 , 57.375 ], output_dtype = flow . float , ) OFRecordImageDecoderRandomCrop \u8d1f\u8d23\u56fe\u7247\u89e3\u7801\u5e76\u968f\u673a\u505a\u4e86\u88c1\u526a\uff0c OFRecordRawDecoder \u8d1f\u8d23\u4ece ofrecord \u5bf9\u8c61\u4e2d\u76f4\u63a5\u89e3\u7801\u51fa\u6807\u7b7e\uff0c image.Resize \u628a\u88c1\u526a\u540e\u7684\u56fe\u7247\u8c03\u6574\u6210224x224\u7684\u5927\u5c0f\uff0c CropMirrorNormalize \u628a\u56fe\u7247\u8fdb\u884c\u4e86\u6b63\u5219\u5316\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"basics_topics/data_input.html#dataloader_1","text":"OneFlow \u63d0\u4f9b\u4e86\u4e00\u4e9b DataLoader \u548c\u9884\u5904\u7406\u7684\u7b97\u5b50\uff0c\u8be6\u7ec6\u8bf7\u53c2\u8003 oneflow.data \u3002\u672a\u6765\u4f1a\u4e0d\u65ad\u4e30\u5bcc\u548c\u4f18\u5316\u8fd9\u4e9b\u7b97\u5b50\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u81ea\u5b9a\u4e49 DataLoader \u6ee1\u8db3\u7279\u5b9a\u7684\u9700\u6c42\u3002","title":"\u652f\u6301\u66f4\u591a\u683c\u5f0f\u7684 DataLoader"},{"location":"basics_topics/distributed_train.html","text":"\u5206\u5e03\u5f0f\u8bad\u7ec3 \u00b6 \u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u573a\u666f\u9700\u8981\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u7531\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\u9762\u4e34\u5355\u673a\u5355\u5361\u6240\u6ca1\u6709\u7684\u5206\u5e03\u5f0f\u4efb\u52a1\u8c03\u5ea6\u3001\u590d\u6742\u7684\u8d44\u6e90\u5e76\u884c\u7b49\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u5bf9\u7528\u6237\u6709\u4e00\u5b9a\u7684\u6280\u672f\u95e8\u69db\u3002 \u5728 OneFlow \u4e2d\uff0c\u901a\u8fc7\u9876\u5c42\u8bbe\u8ba1\u4e0e\u5de5\u7a0b\u521b\u65b0\uff0c\u505a\u5230\u4e86 \u5206\u5e03\u5f0f\u6700\u6613\u7528 \uff0c\u7528\u6237\u4e0d\u9700\u8981\u7279\u522b\u6539\u52a8\u7f51\u7edc\u7ed3\u6784\u548c\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u4f7f\u7528 OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u8fd9\u662f OneFlow \u533a\u522b\u4e8e\u5176\u5b83\u6846\u67b6\u7684 \u6700\u91cd\u8981\u7279\u6027 \u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u5982\u4f55\u5c06\u5355\u673a\u7a0b\u5e8f\u4fee\u6539\u4e3a\u5206\u5e03\u5f0f\u7a0b\u5e8f OneFlow \u4e2d\u8282\u70b9\u6982\u5ff5\u53ca\u5206\u5de5 OneFlow \u5206\u5e03\u5f0f\u4f18\u52bf \u00b6 \u91c7\u7528\u53bb\u4e2d\u5fc3\u5316\u7684\u6d41\u5f0f\u67b6\u6784\uff0c\u800c\u975e master \u4e0e worker \u67b6\u6784\uff0c\u6700\u5927\u7a0b\u5ea6\u4f18\u5316\u8282\u70b9\u7f51\u7edc\u901a\u4fe1\u6548\u7387 \u63d0\u4f9b consistent view \uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u50cf\u7f16\u5199\u5355\u673a\u5355\u5361\u7a0b\u5e8f\u90a3\u6837\u7f16\u5199\u5206\u5e03\u5f0f\u7a0b\u5e8f \u63d0\u4f9b mirrored view \uff0c\u719f\u6089\u5176\u5b83\u6846\u67b6\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u7528\u6237\u53ef\u76f4\u63a5\u4e0a\u624b \u6781\u7b80\u914d\u7f6e\uff0c\u7531\u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u7a0b\u5e8f\u8f6c\u53d8\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u53ea\u9700\u8981\u51e0\u884c\u914d\u7f6e\u4ee3\u7801 \u914d\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7f51\u7edc \u00b6 \u53ea\u9700\u8981\u589e\u52a0\u51e0\u884c\u7b80\u5355\u7684\u914d\u7f6e\u4ee3\u7801\uff0c\u6307\u5b9a\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u8282\u70b9 IP \u4ee5\u53ca\u6bcf\u4e2a\u8282\u70b9\u4f7f\u7528 GPU \u7684\u6570\u91cf\uff0c\u5373\u53ef\u5b9e\u73b0\u5206\u5e03\u5f0f\u7684\u8bad\u7ec3\u7f51\u7edc\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4f7f\u5f97\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u4e0e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u4f5c\u4e3a OneFlow \u7528\u6237\uff0c\u53ea\u9700\u8981\u4e13\u6ce8\u4e8e\u7a0b\u5e8f\u7684 \u4e1a\u52a1\u903b\u8f91 \u53ca \u6a21\u578b\u7ed3\u6784\u672c\u8eab \uff0c\u800c\u4e0d\u7528\u64cd\u5fc3\u5206\u5e03\u5f0f\u6267\u884c\u95ee\u9898\u3002\u5206\u5e03\u5f0f\u7684\u4e00\u5207\u95ee\u9898\uff0c\u90fd\u7531 OneFlow \u5904\u7406\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u4f8b\u5b50\uff1a\u5c06\u5355\u673a\u7248\u7684\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u901a\u8fc7\u6dfb\u52a0\u51e0\u884c\u914d\u7f6e\u4ee3\u7801\u540e\u5c06\u5176\u6539\u9020\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u3002 \u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f \u00b6 \u4ee5\u4e0b\u662f\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u7684\u6846\u67b6\uff0c\u56e0\u4e3a\u5176\u7f51\u7edc\u7ed3\u6784\u53ca\u4e1a\u52a1\u903b\u8f91\u4e0e\u6587\u672b\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\u5b8c\u5168\u4e00\u6837\uff0c\u56e0\u6b64\u51fd\u6570\u5b9e\u73b0\u672a\u8be6\u7ec6\u5217\u51fa\u3002 import numpy as np import oneflow as flow import oneflow.typing as tp BATCH_SIZE = 100 def mlp ( data ): #\u6784\u5efa\u7f51\u7edc... @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : #\u4f5c\u4e1a\u51fd\u6570\u5b9e\u73b0... #\u914d\u7f6e\u8bad\u7ec3\u4f18\u5316\u65b9\u6cd5\u548c\u53c2\u6570 if __name__ == '__main__' : #\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5f00\u59cb\u8bad\u7ec3... loss = train_job ( images , labels ) #... GPU\u53ca\u7aef\u53e3\u914d\u7f6e \u00b6 \u5728 oneflow.config \u6a21\u5757\u4e2d\uff0c\u63d0\u4f9b\u4e86\u5206\u5e03\u5f0f\u76f8\u5173\u7684\u8bbe\u7f6e\u63a5\u53e3\uff0c\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u5176\u4e2d\u4e24\u4e2a\uff1a oneflow.config.gpu_device_num : \u8bbe\u7f6e\u6240\u4f7f\u7528\u7684 GPU \u7684\u6570\u76ee\uff0c\u8fd9\u4e2a\u53c2\u6570\u4f1a\u5e94\u7528\u5230\u6240\u6709\u7684\u673a\u5668\u4e2d\uff1b oneflow.config.ctrl_port : \u8bbe\u7f6e\u7528\u4e8e\u901a\u4fe1\u7684\u7aef\u53e3\u53f7\uff0c\u6240\u6709\u673a\u5668\u4e0a\u90fd\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u7aef\u53e3\u53f7\u8fdb\u884c\u901a\u4fe1\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u6bcf\u53f0\u4e3b\u673a\u4f7f\u7528\u7684 GPU \u6570\u76ee\u4e3a1\uff0c\u91c7\u75289988\u7aef\u53e3\u901a\u4fe1\u3002\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u73af\u5883\u7684\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u4fee\u6539\u3002 #\u6bcf\u4e2a\u8282\u70b9\u7684 gpu \u4f7f\u7528\u6570\u76ee flow . config . gpu_device_num ( 1 ) #\u901a\u4fe1\u7aef\u53e3 flow . env . ctrl_port ( 9988 ) \u6ce8\u610f\uff0c\u5373\u4f7f\u662f\u5355\u673a\u7684\u8bad\u7ec3\uff0c\u53ea\u8981\u6709\u591a\u5f20 GPU \u5361\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7 flow.config.gpu_device_num \u5c06\u5355\u673a\u7a0b\u5e8f\uff0c\u8bbe\u7f6e\u4e3a\u5355\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff0c\u8bbe\u7f6e1\u53f0(\u6bcf\u53f0)\u673a\u5668\u4e0a\uff0c2\u5f20 GPU \u5361\u53c2\u4e0e\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1a flow . config . gpu_device_num ( 2 ) \u8282\u70b9\u914d\u7f6e \u00b6 \u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e\u7f51\u7edc\u4e2d\u7684\u4e3b\u673a\u5173\u7cfb\uff0c\u9700\u8981\u63d0\u524d\u8bf4\u660e\u7684\u662f\uff0cOneFlow \u4e2d\uff0c\u5c06\u5206\u5e03\u5f0f\u4e2d\u7684\u4e3b\u673a\u79f0\u4e3a\u8282\u70b9( node )\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u7ec4\u7f51\u4fe1\u606f\uff0c\u7531\u4e00\u4e2a dict \u7c7b\u578b\u5b58\u653e\uff0c\u5176\u4e2d\u7684 \"addr\" \u8fd9\u4e2a key \u5bf9\u5e94\u4e86\u8282\u70b9\u7684 IP \u3002 \u6240\u6709\u7684\u8282\u70b9\u653e\u7f6e\u5728\u4e00\u4e2a list \u4e2d\uff0c\u7ecf\u63a5\u53e3 flow.env.machine \u544a\u4e4b OneFlow \uff0cOneFlow \u5185\u90e8\u4f1a\u81ea\u52a8\u5efa\u7acb\u5404\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u3002 nodes = [{ \"addr\" : \"192.168.1.12\" }, { \"addr\" : \"192.168.1.11\" }] flow . env . machine ( nodes ) \u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u67092\u4e2a\u8282\u70b9\uff0cIP \u5206\u522b\u4e3a\"192.168.1.12\"\u4e0e\"192.168.1.11\"\u3002 \u6ce8\u610f\uff0c\u8282\u70b9 list \u4e2d\u7684\u7b2c0\u4e2a\u8282\u70b9(\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684\"192.168.1.12\")\uff0c\u53c8\u79f0\u4e3a master node \uff0c\u6574\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7cfb\u7edf\u542f\u52a8\u540e\uff0c\u7531\u5b83\u5b8c\u6210\u6784\u56fe\uff0c\u5176\u5b83\u8282\u70b9\u7b49\u5f85\uff1b\u5f53\u6784\u56fe\u5b8c\u6210\u540e\uff0c\u6240\u6709\u8282\u70b9\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u77e5\u6653\u5404\u81ea\u8054\u7cfb\u7684\u5176\u5b83\u8282\u70b9\uff0c\u53bb\u4e2d\u5fc3\u5316\u5730\u534f\u540c\u8fd0\u884c\u3002 \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u7531 master node \u4fdd\u7559\u6807\u51c6\u8f93\u51fa\u53ca\u4fdd\u5b58\u6a21\u578b\uff0c\u5176\u5b83\u8282\u70b9\u53ea\u8d1f\u8d23\u8ba1\u7b97\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u9488\u5bf9\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\u4ee3\u7801\u5c01\u88c5\u4e3a\u51fd\u6570\uff0c\u65b9\u4fbf\u8c03\u7528\uff1a def config_distributed (): print ( \"distributed config\" ) #\u6bcf\u4e2a\u8282\u70b9\u7684gpu\u4f7f\u7528\u6570\u76ee flow . config . gpu_device_num ( 1 ) #\u901a\u4fe1\u7aef\u53e3 flow . env . ctrl_port ( 9988 ) #\u8282\u70b9\u914d\u7f6e nodes = [{ \"addr\" : \"192.168.1.12\" }, { \"addr\" : \"192.168.1.11\" }] flow . env . machine ( nodes ) \u5206\u5e03\u5f0f\u8bad\u7ec3\u53ca\u4ee3\u7801 \u00b6 \u5355\u673a\u7a0b\u5e8f\u52a0\u5165 OneFlow \u7684\u5206\u5e03\u5f0f\u914d\u7f6e\u4ee3\u7801\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u5206\u5e03\u5f0f\u7a0b\u5e8f\uff0c\u5728\u6240\u6709\u7684\u8282\u70b9\u8fd0\u884c\u4e00\u6837\u7684\u7a0b\u5e8f\u5373\u53ef\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u4e0e\u4e0a\u6587\u7684 \u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f \u6bd4\u8f83\uff0c\u4f1a\u53d1\u73b0\u4ec5\u4ec5\u53ea\u662f\u589e\u52a0\u4e86 config_distributed \u51fd\u6570\u5e76\u8c03\u7528\uff0c\u6211\u4eec\u4e4b\u524d\u7684\u5355\u673a\u8bad\u7ec3\u811a\u672c\uff0c\u5c31\u6210\u4e3a\u4e86\u5206\u5e03\u5f0f\u8bad\u7ec3\u811a\u672c\u3002 \u5206\u5e03\u5f0f\u811a\u672c\u4ee3\u7801\uff1a distributed_train.py \u5728 192.168.1.12 \u53ca 192.168.1.11 \u4e0a \u5747\u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/distributed_train.py python3 distributed_train.py 192.168.1.12 \u673a\u5668\u4e0a\u5c06\u663e\u793a\u7a0b\u5e8f\u7ed3\u679c\u3002 FAQ \u00b6 \u8fd0\u884c\u672c\u6587\u5206\u5e03\u5f0f\u4ee3\u7801\u540e\uff0c\u7a0b\u5e8f\u957f\u671f\u7b49\u5f85\uff0c\u672a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c \u8bf7\u68c0\u67e5 ssh \u914d\u7f6e\uff0c\u786e\u4fdd\u4e24\u53f0\u673a\u5668\u4e4b\u95f4\u80fd\u591f\u514d\u5bc6 ssh \u4e92\u8054 \u8bf7\u786e\u4fdd\u4e24\u53f0\u673a\u5668\u4f7f\u7528\u4e86\u76f8\u540c\u7248\u672c\u7684 OneFlow\u3001\u8fd0\u884c\u7684\u811a\u672c\u7a0b\u5e8f\u5b8c\u5168\u4e00\u6837 \u8bf7\u786e\u4fdd\u8bad\u7ec3\u4f7f\u7528\u7684\u7aef\u53e3\u672a\u88ab\u5360\u7528\uff0c\u6216\u4f7f\u7528 oneflow.config.ctrl_port \u66f4\u6362\u7aef\u53e3 \u5982\u679c\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u4ee3\u7406\uff0c\u8bf7\u786e\u4fdd\u4ee3\u7406\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u6216\u8005\u53d6\u6d88\u6389\u4ee3\u7406 \u5728 docker \u4e2d\u8dd1\u8bad\u7ec3\uff0c\u7a0b\u5e8f\u957f\u671f\u7b49\u5f85\uff0c\u672a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c docker \u9ed8\u8ba4\u7684\u6a21\u5f0f\u4e0b\uff0c\u7269\u7406\u673a\u4e0e\u5bb9\u5668\u4e2d\u7684\u7aef\u53e3\u662f\u9694\u79bb\u7684\uff0c\u8bf7\u4f7f\u7528 --net=host host \u6a21\u5f0f\uff0c\u6216\u8005\u542f\u52a8\u5bb9\u5668\u65f6\u4f7f\u7528 -p \u9009\u9879\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\u3002\u5177\u4f53\u8bf7\u67e5\u9605 docker \u7684\u624b\u518c \u5b58\u5728\u865a\u62df\u7f51\u5361\u7684\u60c5\u51b5 \u82e5\u5b58\u5728\u865a\u62df\u7f51\u5361\uff0c\u53ef\u80fd\u56e0\u4e3a nccl \u7684\u901a\u4fe1\u8d70\u865a\u62df\u7f51\u5361\u800c\u65e0\u6cd5\u901a\u4fe1\u3002\u6b64\u65f6\u9700\u8981\u901a\u8fc7 export NCCL_SOCKET_IFNAME=device_name \u6765\u6307\u5b9a\u901a\u4fe1\u7f51\u5361\uff0c\u5177\u4f53\u53ef\u53c2\u9605 nccl \u5b98\u65b9\u6587\u6863","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"basics_topics/distributed_train.html#_1","text":"\u6df1\u5ea6\u5b66\u4e60\u4e2d\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u573a\u666f\u9700\u8981\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u7531\u4e8e\u5206\u5e03\u5f0f\u7cfb\u7edf\u9762\u4e34\u5355\u673a\u5355\u5361\u6240\u6ca1\u6709\u7684\u5206\u5e03\u5f0f\u4efb\u52a1\u8c03\u5ea6\u3001\u590d\u6742\u7684\u8d44\u6e90\u5e76\u884c\u7b49\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u5bf9\u7528\u6237\u6709\u4e00\u5b9a\u7684\u6280\u672f\u95e8\u69db\u3002 \u5728 OneFlow \u4e2d\uff0c\u901a\u8fc7\u9876\u5c42\u8bbe\u8ba1\u4e0e\u5de5\u7a0b\u521b\u65b0\uff0c\u505a\u5230\u4e86 \u5206\u5e03\u5f0f\u6700\u6613\u7528 \uff0c\u7528\u6237\u4e0d\u9700\u8981\u7279\u522b\u6539\u52a8\u7f51\u7edc\u7ed3\u6784\u548c\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u65b9\u4fbf\u5730\u4f7f\u7528 OneFlow \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u8fd9\u662f OneFlow \u533a\u522b\u4e8e\u5176\u5b83\u6846\u67b6\u7684 \u6700\u91cd\u8981\u7279\u6027 \u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u5982\u4f55\u5c06\u5355\u673a\u7a0b\u5e8f\u4fee\u6539\u4e3a\u5206\u5e03\u5f0f\u7a0b\u5e8f OneFlow \u4e2d\u8282\u70b9\u6982\u5ff5\u53ca\u5206\u5de5","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"basics_topics/distributed_train.html#oneflow","text":"\u91c7\u7528\u53bb\u4e2d\u5fc3\u5316\u7684\u6d41\u5f0f\u67b6\u6784\uff0c\u800c\u975e master \u4e0e worker \u67b6\u6784\uff0c\u6700\u5927\u7a0b\u5ea6\u4f18\u5316\u8282\u70b9\u7f51\u7edc\u901a\u4fe1\u6548\u7387 \u63d0\u4f9b consistent view \uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u50cf\u7f16\u5199\u5355\u673a\u5355\u5361\u7a0b\u5e8f\u90a3\u6837\u7f16\u5199\u5206\u5e03\u5f0f\u7a0b\u5e8f \u63d0\u4f9b mirrored view \uff0c\u719f\u6089\u5176\u5b83\u6846\u67b6\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u7528\u6237\u53ef\u76f4\u63a5\u4e0a\u624b \u6781\u7b80\u914d\u7f6e\uff0c\u7531\u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u7a0b\u5e8f\u8f6c\u53d8\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u53ea\u9700\u8981\u51e0\u884c\u914d\u7f6e\u4ee3\u7801","title":"OneFlow \u5206\u5e03\u5f0f\u4f18\u52bf"},{"location":"basics_topics/distributed_train.html#_2","text":"\u53ea\u9700\u8981\u589e\u52a0\u51e0\u884c\u7b80\u5355\u7684\u914d\u7f6e\u4ee3\u7801\uff0c\u6307\u5b9a\u5206\u5e03\u5f0f\u8ba1\u7b97\u7684\u8282\u70b9 IP \u4ee5\u53ca\u6bcf\u4e2a\u8282\u70b9\u4f7f\u7528 GPU \u7684\u6570\u91cf\uff0c\u5373\u53ef\u5b9e\u73b0\u5206\u5e03\u5f0f\u7684\u8bad\u7ec3\u7f51\u7edc\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4f7f\u5f97\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u4e0e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u51e0\u4e4e\u662f\u4e00\u6837\u7684\uff0c\u4f5c\u4e3a OneFlow \u7528\u6237\uff0c\u53ea\u9700\u8981\u4e13\u6ce8\u4e8e\u7a0b\u5e8f\u7684 \u4e1a\u52a1\u903b\u8f91 \u53ca \u6a21\u578b\u7ed3\u6784\u672c\u8eab \uff0c\u800c\u4e0d\u7528\u64cd\u5fc3\u5206\u5e03\u5f0f\u6267\u884c\u95ee\u9898\u3002\u5206\u5e03\u5f0f\u7684\u4e00\u5207\u95ee\u9898\uff0c\u90fd\u7531 OneFlow \u5904\u7406\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u4f8b\u5b50\uff1a\u5c06\u5355\u673a\u7248\u7684\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u901a\u8fc7\u6dfb\u52a0\u51e0\u884c\u914d\u7f6e\u4ee3\u7801\u540e\u5c06\u5176\u6539\u9020\u4e3a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u3002","title":"\u914d\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\u7f51\u7edc"},{"location":"basics_topics/distributed_train.html#_3","text":"\u4ee5\u4e0b\u662f\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u7684\u6846\u67b6\uff0c\u56e0\u4e3a\u5176\u7f51\u7edc\u7ed3\u6784\u53ca\u4e1a\u52a1\u903b\u8f91\u4e0e\u6587\u672b\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\u5b8c\u5168\u4e00\u6837\uff0c\u56e0\u6b64\u51fd\u6570\u5b9e\u73b0\u672a\u8be6\u7ec6\u5217\u51fa\u3002 import numpy as np import oneflow as flow import oneflow.typing as tp BATCH_SIZE = 100 def mlp ( data ): #\u6784\u5efa\u7f51\u7edc... @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : #\u4f5c\u4e1a\u51fd\u6570\u5b9e\u73b0... #\u914d\u7f6e\u8bad\u7ec3\u4f18\u5316\u65b9\u6cd5\u548c\u53c2\u6570 if __name__ == '__main__' : #\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5f00\u59cb\u8bad\u7ec3... loss = train_job ( images , labels ) #...","title":"\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f"},{"location":"basics_topics/distributed_train.html#gpu","text":"\u5728 oneflow.config \u6a21\u5757\u4e2d\uff0c\u63d0\u4f9b\u4e86\u5206\u5e03\u5f0f\u76f8\u5173\u7684\u8bbe\u7f6e\u63a5\u53e3\uff0c\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u5176\u4e2d\u4e24\u4e2a\uff1a oneflow.config.gpu_device_num : \u8bbe\u7f6e\u6240\u4f7f\u7528\u7684 GPU \u7684\u6570\u76ee\uff0c\u8fd9\u4e2a\u53c2\u6570\u4f1a\u5e94\u7528\u5230\u6240\u6709\u7684\u673a\u5668\u4e2d\uff1b oneflow.config.ctrl_port : \u8bbe\u7f6e\u7528\u4e8e\u901a\u4fe1\u7684\u7aef\u53e3\u53f7\uff0c\u6240\u6709\u673a\u5668\u4e0a\u90fd\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u7aef\u53e3\u53f7\u8fdb\u884c\u901a\u4fe1\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u8bbe\u7f6e\u6bcf\u53f0\u4e3b\u673a\u4f7f\u7528\u7684 GPU \u6570\u76ee\u4e3a1\uff0c\u91c7\u75289988\u7aef\u53e3\u901a\u4fe1\u3002\u5927\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u8eab\u73af\u5883\u7684\u5177\u4f53\u60c5\u51b5\u8fdb\u884c\u4fee\u6539\u3002 #\u6bcf\u4e2a\u8282\u70b9\u7684 gpu \u4f7f\u7528\u6570\u76ee flow . config . gpu_device_num ( 1 ) #\u901a\u4fe1\u7aef\u53e3 flow . env . ctrl_port ( 9988 ) \u6ce8\u610f\uff0c\u5373\u4f7f\u662f\u5355\u673a\u7684\u8bad\u7ec3\uff0c\u53ea\u8981\u6709\u591a\u5f20 GPU \u5361\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7 flow.config.gpu_device_num \u5c06\u5355\u673a\u7a0b\u5e8f\uff0c\u8bbe\u7f6e\u4e3a\u5355\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff0c\u8bbe\u7f6e1\u53f0(\u6bcf\u53f0)\u673a\u5668\u4e0a\uff0c2\u5f20 GPU \u5361\u53c2\u4e0e\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1a flow . config . gpu_device_num ( 2 )","title":"GPU\u53ca\u7aef\u53e3\u914d\u7f6e"},{"location":"basics_topics/distributed_train.html#_4","text":"\u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e\u7f51\u7edc\u4e2d\u7684\u4e3b\u673a\u5173\u7cfb\uff0c\u9700\u8981\u63d0\u524d\u8bf4\u660e\u7684\u662f\uff0cOneFlow \u4e2d\uff0c\u5c06\u5206\u5e03\u5f0f\u4e2d\u7684\u4e3b\u673a\u79f0\u4e3a\u8282\u70b9( node )\u3002 \u6bcf\u4e2a\u8282\u70b9\u7684\u7ec4\u7f51\u4fe1\u606f\uff0c\u7531\u4e00\u4e2a dict \u7c7b\u578b\u5b58\u653e\uff0c\u5176\u4e2d\u7684 \"addr\" \u8fd9\u4e2a key \u5bf9\u5e94\u4e86\u8282\u70b9\u7684 IP \u3002 \u6240\u6709\u7684\u8282\u70b9\u653e\u7f6e\u5728\u4e00\u4e2a list \u4e2d\uff0c\u7ecf\u63a5\u53e3 flow.env.machine \u544a\u4e4b OneFlow \uff0cOneFlow \u5185\u90e8\u4f1a\u81ea\u52a8\u5efa\u7acb\u5404\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u63a5\u3002 nodes = [{ \"addr\" : \"192.168.1.12\" }, { \"addr\" : \"192.168.1.11\" }] flow . env . machine ( nodes ) \u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u67092\u4e2a\u8282\u70b9\uff0cIP \u5206\u522b\u4e3a\"192.168.1.12\"\u4e0e\"192.168.1.11\"\u3002 \u6ce8\u610f\uff0c\u8282\u70b9 list \u4e2d\u7684\u7b2c0\u4e2a\u8282\u70b9(\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684\"192.168.1.12\")\uff0c\u53c8\u79f0\u4e3a master node \uff0c\u6574\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7cfb\u7edf\u542f\u52a8\u540e\uff0c\u7531\u5b83\u5b8c\u6210\u6784\u56fe\uff0c\u5176\u5b83\u8282\u70b9\u7b49\u5f85\uff1b\u5f53\u6784\u56fe\u5b8c\u6210\u540e\uff0c\u6240\u6709\u8282\u70b9\u4f1a\u6536\u5230\u901a\u77e5\uff0c\u77e5\u6653\u5404\u81ea\u8054\u7cfb\u7684\u5176\u5b83\u8282\u70b9\uff0c\u53bb\u4e2d\u5fc3\u5316\u5730\u534f\u540c\u8fd0\u884c\u3002 \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u7531 master node \u4fdd\u7559\u6807\u51c6\u8f93\u51fa\u53ca\u4fdd\u5b58\u6a21\u578b\uff0c\u5176\u5b83\u8282\u70b9\u53ea\u8d1f\u8d23\u8ba1\u7b97\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u9488\u5bf9\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\u4ee3\u7801\u5c01\u88c5\u4e3a\u51fd\u6570\uff0c\u65b9\u4fbf\u8c03\u7528\uff1a def config_distributed (): print ( \"distributed config\" ) #\u6bcf\u4e2a\u8282\u70b9\u7684gpu\u4f7f\u7528\u6570\u76ee flow . config . gpu_device_num ( 1 ) #\u901a\u4fe1\u7aef\u53e3 flow . env . ctrl_port ( 9988 ) #\u8282\u70b9\u914d\u7f6e nodes = [{ \"addr\" : \"192.168.1.12\" }, { \"addr\" : \"192.168.1.11\" }] flow . env . machine ( nodes )","title":"\u8282\u70b9\u914d\u7f6e"},{"location":"basics_topics/distributed_train.html#_5","text":"\u5355\u673a\u7a0b\u5e8f\u52a0\u5165 OneFlow \u7684\u5206\u5e03\u5f0f\u914d\u7f6e\u4ee3\u7801\u540e\uff0c\u5c31\u6210\u4e3a\u4e86\u5206\u5e03\u5f0f\u7a0b\u5e8f\uff0c\u5728\u6240\u6709\u7684\u8282\u70b9\u8fd0\u884c\u4e00\u6837\u7684\u7a0b\u5e8f\u5373\u53ef\u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5206\u5e03\u5f0f\u8bad\u7ec3\u7a0b\u5e8f\u4e0e\u4e0a\u6587\u7684 \u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f \u6bd4\u8f83\uff0c\u4f1a\u53d1\u73b0\u4ec5\u4ec5\u53ea\u662f\u589e\u52a0\u4e86 config_distributed \u51fd\u6570\u5e76\u8c03\u7528\uff0c\u6211\u4eec\u4e4b\u524d\u7684\u5355\u673a\u8bad\u7ec3\u811a\u672c\uff0c\u5c31\u6210\u4e3a\u4e86\u5206\u5e03\u5f0f\u8bad\u7ec3\u811a\u672c\u3002 \u5206\u5e03\u5f0f\u811a\u672c\u4ee3\u7801\uff1a distributed_train.py \u5728 192.168.1.12 \u53ca 192.168.1.11 \u4e0a \u5747\u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/distributed_train.py python3 distributed_train.py 192.168.1.12 \u673a\u5668\u4e0a\u5c06\u663e\u793a\u7a0b\u5e8f\u7ed3\u679c\u3002","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3\u53ca\u4ee3\u7801"},{"location":"basics_topics/distributed_train.html#faq","text":"\u8fd0\u884c\u672c\u6587\u5206\u5e03\u5f0f\u4ee3\u7801\u540e\uff0c\u7a0b\u5e8f\u957f\u671f\u7b49\u5f85\uff0c\u672a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c \u8bf7\u68c0\u67e5 ssh \u914d\u7f6e\uff0c\u786e\u4fdd\u4e24\u53f0\u673a\u5668\u4e4b\u95f4\u80fd\u591f\u514d\u5bc6 ssh \u4e92\u8054 \u8bf7\u786e\u4fdd\u4e24\u53f0\u673a\u5668\u4f7f\u7528\u4e86\u76f8\u540c\u7248\u672c\u7684 OneFlow\u3001\u8fd0\u884c\u7684\u811a\u672c\u7a0b\u5e8f\u5b8c\u5168\u4e00\u6837 \u8bf7\u786e\u4fdd\u8bad\u7ec3\u4f7f\u7528\u7684\u7aef\u53e3\u672a\u88ab\u5360\u7528\uff0c\u6216\u4f7f\u7528 oneflow.config.ctrl_port \u66f4\u6362\u7aef\u53e3 \u5982\u679c\u5728\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u4ee3\u7406\uff0c\u8bf7\u786e\u4fdd\u4ee3\u7406\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u6216\u8005\u53d6\u6d88\u6389\u4ee3\u7406 \u5728 docker \u4e2d\u8dd1\u8bad\u7ec3\uff0c\u7a0b\u5e8f\u957f\u671f\u7b49\u5f85\uff0c\u672a\u663e\u793a\u8ba1\u7b97\u7ed3\u679c docker \u9ed8\u8ba4\u7684\u6a21\u5f0f\u4e0b\uff0c\u7269\u7406\u673a\u4e0e\u5bb9\u5668\u4e2d\u7684\u7aef\u53e3\u662f\u9694\u79bb\u7684\uff0c\u8bf7\u4f7f\u7528 --net=host host \u6a21\u5f0f\uff0c\u6216\u8005\u542f\u52a8\u5bb9\u5668\u65f6\u4f7f\u7528 -p \u9009\u9879\u8fdb\u884c\u7aef\u53e3\u6620\u5c04\u3002\u5177\u4f53\u8bf7\u67e5\u9605 docker \u7684\u624b\u518c \u5b58\u5728\u865a\u62df\u7f51\u5361\u7684\u60c5\u51b5 \u82e5\u5b58\u5728\u865a\u62df\u7f51\u5361\uff0c\u53ef\u80fd\u56e0\u4e3a nccl \u7684\u901a\u4fe1\u8d70\u865a\u62df\u7f51\u5361\u800c\u65e0\u6cd5\u901a\u4fe1\u3002\u6b64\u65f6\u9700\u8981\u901a\u8fc7 export NCCL_SOCKET_IFNAME=device_name \u6765\u6307\u5b9a\u901a\u4fe1\u7f51\u5361\uff0c\u5177\u4f53\u53ef\u53c2\u9605 nccl \u5b98\u65b9\u6587\u6863","title":"FAQ"},{"location":"basics_topics/essentials_of_oneflow.html","text":"OneFlow\u7cfb\u7edf\u8bbe\u8ba1 \u00b6 \u672c\u6587\u7684\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807 OneFlow \u7684\u7279\u8272\u4e00\uff1aActor \u673a\u5236 OneFlow \u7684\u7279\u8272\u4e8c\uff1aSBP \u673a\u5236 \u603b\u7ed3 \u4e00\u3001OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807 \u00b6 OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u8ffd\u6c42\u6781\u81f4\u7684\u6027\u80fd\uff0c\u7279\u522b\u662f\u5206\u5e03\u5f0f\u591a\u673a\u591a\u5361\u73af\u5883\u4e0b\u7684\u6a2a\u5411\u6269\u5c55\u6027\uff0c\u5e0c\u671b\u80fd\u8ba9\u7528\u6237\u4f7f\u7528\u591a\u673a\u591a\u5361\u5c31\u50cf\u4f7f\u7528\u5355\u673a\u5355\u5361\u4e00\u6837\u5bb9\u6613\uff0c\u4e14\u4eab\u53d7\u7ebf\u6027\u52a0\u901f\u7684\u8fd0\u884c\u6548\u7387\u3002 \u4e3a\u4ec0\u4e48 OneFlow \u8981\u805a\u7126\u4e8e\u5206\u5e03\u5f0f\u573a\u666f\u7684\u6027\u80fd\u548c\u6613\u7528\u6027\u5462\uff1f\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u53d1\u5c55\uff0c\u6a21\u578b\u8d8a\u6765\u8d8a\u5927\uff0c\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u6240\u9700\u7684\u7b97\u529b\u4f1a\u8d8a\u6765\u8d8a\u9ad8\uff0c\u540c\u65f6\u6a21\u578b\u589e\u5927\u7684\u901f\u5ea6\u8981\u5927\u4e8e GPU \u5355\u5361\u663e\u5b58\u6269\u5bb9\u7684\u901f\u5ea6\uff1b\u8bad\u7ec3\u5bf9\u7b97\u529b\u7684\u589e\u957f\u8981\u6c42\u8981\u5927\u4e8e GPU \u5355\u5361\u7b97\u529b\u589e\u957f\u7684\u901f\u5ea6\u3002\u5355\u5361\u7684\u8ba1\u7b97\u80fd\u529b\u548c\u663e\u5b58\u8fdc\u8fdc\u4e0d\u80fd\u6ee1\u8db3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u7684\u9700\u6c42\uff0c\u5fc5\u987b\u501f\u52a9\u591a\u673a\u591a\u5361\u5e76\u884c\u52a0\u901f\u3002 \u82e5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u53ef\u4ee5\u8ba9\u4e92\u8054\u7684\u591a\u4e2a GPU \u534f\u540c\u5de5\u4f5c\u597d\uff0c\u5b9e\u73b0\u7ebf\u6027\u52a0\u901f\u6bd4\uff0c\u5373\u4f7f\u6bcf\u5757 GPU \u6027\u80fd\u201c\u4e00\u822c\u201d\uff0c\u4e5f\u53ef\u6ee1\u8db3\u4efb\u610f\u89c4\u6a21\u7684\u7b97\u529b\u9700\u6c42\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u6a2a\u5411\u6269\u5c55\u6027\uff0c\u6211\u4eec\u575a\u4fe1\u8fd9\u662f\u7b97\u529b\u589e\u957f\u7684\u89e3\u51b3\u4e4b\u9053\u3002 \u4f46\u662f\uff0c\u5df2\u6709\u6846\u67b6\u90fd\u662f\u9996\u5148\u805a\u7126\u4e8e\u5355\u5361\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u4ec5\u5bf9\u9002\u5408\u6570\u636e\u5e76\u884c\u7684\u591a\u673a\u591a\u5361\u573a\u666f\u5904\u7406\u7684\u8f83\u597d\uff0c\u5373\u628a\u5355\u5361\u7684\u8ba1\u7b97\u56fe\u955c\u50cf\u590d\u5236\u5230\u591a\u673a\u591a\u5361\u4e0a\uff0c\u5404\u4e2a\u5361\u548c\u673a\u5668\u4e4b\u95f4\u8f85\u52a9\u4e8e\u6a21\u578b\u540c\u6b65\u7684\u6a21\u5757\u3002 \u5bf9\u4e8e BERT/GPT-3 \u7b49\u53c2\u6570\u91cf\u5de8\u5927\u7684\u6a21\u578b\uff0c\u7528\u6237\u5728\u4f7f\u7528\u5df2\u6709\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u65f6\u5e38\u5e38\u4f1a\u9047\u5230\u591a\u673a\u591a\u5361\u4e0d\u597d\u7528\u3001\u6548\u7387\u4f4e\u4e0b\u6216\u65e0\u6cd5\u5b9e\u73b0\u7b49\u95ee\u9898\u3002\u7528\u6237\u505a\u5206\u5e03\u5f0f\u8bad\u7ec3\u5e38\u5e38\u9700\u8981\u8f83\u9ad8\u7684\u5b66\u4e60\u6210\u672c\uff0c\u8fd8\u9700\u8981\u5173\u5fc3\u591a\u673a\u591a\u5361\u4e4b\u95f4\u6a21\u578b\u7684\u540c\u6b65\u95ee\u9898\u3002\u4e1a\u754c\u4e3a\u89e3\u51b3\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u7684\u75db\u70b9\uff0c\u4e0d\u4ec5\u6539\u8fdb\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u81ea\u8eab\uff0c\u8fd8\u7814\u53d1\u4e86\u591a\u79cd\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u8b6c\u5982 NCCL\uff0cHorovod\uff0cBytePS\uff0cHugeCTR\uff0cMesh-tensorflow\uff0cGpipe \u7b49\u7b49\uff0c\u4f46\u4ecd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u6781\u81f4\u7684\u6027\u80fd\u9700\u6c42\u3002 OneFlow \u7684\u6838\u5fc3\u8bbe\u8ba1\u7406\u5ff5\u662f\uff0c\u8ba9\u591a\u673a\u591a\u5361\u5206\u5e03\u5f0f\u8bad\u7ec3\u9ad8\u6548\u5730\u534f\u540c\u8fd0\u8f6c\uff0c\u540c\u65f6\u8981\u8ba9\u7528\u6237\u5728\u591a\u673a\u591a\u5361\u7684\u8bad\u7ec3\u4f53\u9a8c\u4e0a\u5c31\u50cf\u5355\u5361\u4e00\u6837\u7b80\u5355\u5bb9\u6613\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ecb\u7ecdOneFlow \u5b9e\u73b0\u6b64\u76ee\u6807\u6700\u6838\u5fc3\u7684\u4e24\u70b9\u60f3\u6cd5\uff0c\u6765\u8bf4\u660e OneFlow \u662f\u5982\u4f55\u770b\u5f85\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u7684\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u7684\u3002 \u4e8c\u3001Actor\uff1a\u4e00\u5957\u7b80\u6d01\u7684\u673a\u5236\u89e3\u51b3\u51e0\u4e4e\u6240\u6709\u6280\u672f\u96be\u9898 \u00b6 \u5173\u952e\u7279\u6027\uff1a \u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6 \u6d41\u6c34\u7ebf \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u4f20\u8f93\u88ab\u8ba1\u7b97\u63a9\u76d6 \u63a7\u5236\u903b\u8f91\u88ab\u6267\u884c\u903b\u8f91\u63a9\u76d6 \u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u5206\u4e3a Compile \u548c Runtime \u4e24\u4e2a\u65f6\u671f\uff0cCompile \u65f6\u671f\u628a\u7528\u6237\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\u3001\u5206\u5e03\u5f0f\u73af\u5883\u4fe1\u606f\u7b49\u7f16\u8bd1\u6210\u4e00\u4e2a\u9759\u6001\u56fe\u7684\u6267\u884c\u8ba1\u5212 Plan\uff0cPlan \u7531\u6267\u884c\u5355\u5143 Actor \u7684\u63cf\u8ff0\u4fe1\u606f\u7ec4\u6210\uff1bRuntime \u65f6\u671f\uff0c\u5404\u4e2a\u673a\u5668\u6839\u636e Plan \u91cc\u7684 Actor \u63cf\u8ff0\u4fe1\u606f\u771f\u5b9e\u5730\u521b\u5efa\u5c5e\u4e8e\u81ea\u5df1\u673a\u5668\u7684\u4f17\u591a Actor \u5b9e\u4f8b\uff0c\u7136\u540e\u542f\u52a8 Actor \u8fd0\u884c\u7cfb\u7edf\u3002\u6574\u4e2a\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u671f\u95f4\uff0cOneFlow \u7684\u6267\u884c\u57fa\u672c\u5355\u5143\u5c31\u662f Actor\uff0cActor \u5bf9\u5e94\u9759\u6001\u6267\u884c\u56fe\u4e0a\u7684\u8282\u70b9\uff0cActor \u4e4b\u95f4\u751f\u4ea7\u3001\u6d88\u8d39\u7684\u6570\u636e\u5b58\u50a8\u5728 Register \u4e2d\uff0cActor \u4e4b\u95f4\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u6765\u534f\u4f5c\u8fd0\u884c\u3002 1. Actor \u673a\u5236\u5b9e\u73b0\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6 \u00b6 OneFlow \u7684\u8fd0\u884c\u65f6\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6\u5c31\u662f\u7528 Actor \u673a\u5236\u5b9e\u73b0\u7684\u3002\u5728\u6574\u4e2a\u7531 Actor \u6784\u6210\u7684\u9759\u6001\u56fe\u4e2d\uff0c\u6ca1\u6709\u4e00\u4e2a\u4e2d\u5fc3\u7684\u8c03\u5ea6\u8282\u70b9\uff0c\u6bcf\u4e2a Actor \u90fd\u53ea\u9700\u8981\u5173\u5fc3\u81ea\u5df1\u6240\u9700\u6570\u636e\u7684\u751f\u4ea7\u8005\uff08\u4e0a\u6e38 Actor \uff09\u548c\u81ea\u5df1\u751f\u4ea7\u7684\u6570\u636e\u7684\u6d88\u8d39\u8005\uff08\u4e0b\u6e38 Actor\uff09\u5373\u53ef\u3002\u8fd9\u6837\u5728\u8d85\u5927\u89c4\u6a21\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u573a\u666f\u4e0b\uff0c \u5b8c\u5168\u7684\u53bb\u4e2d\u5fc3\u5316 \u8c03\u5ea6\u53ef\u4ee5\u907f\u514d\u4e2d\u5fc3\u8c03\u5ea6\u7684\u5355\u70b9\u6027\u80fd\u74f6\u9888\u95ee\u9898\u3002 \u6bcf\u4e2a Actor \u5185\u90e8\u90fd\u6709\u4e00\u4e2a \u72b6\u6001\u673a \uff0cActor \u6536\u53d1\u7684\u6d88\u606f\u3001\u6267\u884c\u7684\u60c5\u51b5\u90fd\u4f1a\u6539\u53d8\u81ea\u5df1\u7684\u72b6\u6001\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cRegister \u662f\u5b58\u50a8\u5757\uff0c\u5b58\u653e\u4e86 Actor \u751f\u4ea7\u51fa\u6765\u7684\u6570\u636e\uff0c\u800c\u6d88\u606f\u662f\u5305\u542b\u4e86 Register \u5b58\u50a8\u5757\u7684\u5185\u5b58\u5730\u5740\u7684\u8f7b\u91cf\u7ea7\u6570\u636e\uff0cActor \u4e4b\u95f4\u4f20\u9012\u7684\u662f\u6d88\u606f\uff0c\u800c\u4e0d\u662f Register\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 zero-copy\u3002 \u5f53 Actor \u6536\u5230\u4e86\u65b0\u6d88\u606f\uff0c\u5224\u65ad\u5b83\u6267\u884c\u6240\u9700\u8981\u6d88\u8d39\u7684 Register \u5df2\u7ecf\u5c31\u7eea\uff0c\u4e14\u5b83\u5c06\u8981\u751f\u4ea7\u7684\u6570\u636e\u6709\u7a7a\u95f2\u7684 Register \u53ef\u4ee5\u5199\u5165\u65f6\uff0c\u8fd9\u4e2a Actor \u5c31\u6267\u884c\uff08Act\uff09\u4e00\u6b21\uff0c\u751f\u4ea7\u51fa\u4e00\u4e2a Register\u3002 \u751f\u4ea7\u5b8c\u4ee5\u540e\uff0c\u8be5 Actor \u5c31\u5411\u9700\u8981\u6d88\u8d39\u8fd9\u4e2a Register \u7684\u90a3\u4e9b\u6d88\u8d39\u8005 Actor \u4eec\u53d1\u6d88\u606f\uff0c\u8868\u793a \u201c\u4f60\u4eec\u53ef\u4ee5\u6765\u8bfb\u53d6\u6211\u751f\u4ea7\u7684\u6570\u636e\u4e86\u201d \uff1b\u540c\u65f6\u8be5 Actor \u8fd8\u9700\u8981\u628a\u5b83\u6d88\u8d39\u5b8c\u7684\u90a3\u4e9b Register \u8fd8\u7ed9\u8fd9\u4e9b Regsiter \u7684\u751f\u4ea7\u8005 Actor \u4eec\uff0c\u8868\u793a \u201c\u6211\u7528\u5b8c\u4e86\u4f60\u4eec\u7684\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u56de\u6536\u4e86\u201d \u3002Actor \u5185\u90e8\u7684\u72b6\u6001\u673a\u5982\u56fe1 \u6240\u793a\u3002 \u56fe1 Actor \u5185\u90e8\u72b6\u6001\u673a \u5728 Actor \u542f\u52a8\u4e4b\u540e\uff0c\u4f1a\u6839\u636e\u4e0e\u5176\u4ed6 Actor \u4e4b\u95f4\u6536\u53d1\u6d88\u606f\u6765\u5207\u6362\u81ea\u5df1\u7684\u4e24\u4e2a\u72b6\u6001\uff1a \u7b49\u5f85\u72b6\u6001 \u548c \u6267\u884c\u72b6\u6001 \u3002 \u4e00\u4e2a Actor \u6536\u5230\u7684\u6d88\u606f\u4e00\u822c\u5206\u4e3a\u51e0\u4e2a\u7c7b\u578b\uff1a \u4e0a\u6e38\u7684\u751f\u4ea7\u8005 Actor \u53d1\u6765\u6d88\u606f\u8bf4\uff1a\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u751f\u4ea7\u7684\u6570\u636e\u4e86\uff1b \u4e0b\u6e38\u7684\u6d88\u8d39\u8005 Actor \u53d1\u6765\u6d88\u606f\u8bf4\uff1a\u6211\u7528\u5b8c\u4f60\u751f\u4ea7\u7684\u6570\u636e\u4e86\u3002 \u5f53\u8fd9\u4e2a\u6570\u636e\u88ab\u6240\u6709\u6d88\u8d39\u8005\u90fd\u7528\u5b8c\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u56de\u6536\u6210\u4e3a\u7a7a\u95f2\u5757\u7b49\u5f85\u4e0b\u4e00\u6b21\u88ab\u8be5 Actor \u91cd\u65b0\u751f\u4ea7\u4e00\u4efd\u65b0\u7684\u6570\u636e\u3002 \u4e00\u4e2a Actor \u6536\u5230\u6d88\u606f\u4ee5\u540e\u90fd\u4f1a\u53bb\u5c1d\u8bd5\u5224\u65ad\u5f53\u524d\u662f\u5426\u6ee1\u8db3\u6267\u884c\u6761\u4ef6\uff0c\u6267\u884c\u6761\u4ef6\u4e00\u822c\u6709\u4e24\u4e2a\uff1a \u9700\u8981\u8bfb\u53d6\u7684\u6570\u636e\u662f\u5426\u90fd\u5230\u9f50\u4e86\uff1b \u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u4ee5\u62ff\u6765\u88ab\u751f\u4ea7\u3002\u5f53\u6ee1\u8db3\u6267\u884c\u72b6\u6001\u4ee5\u540e Actor \u5c31\u5f00\u59cb\u8c03\u7528\u81ea\u5df1\u5185\u90e8\u7684 Kernel \u771f\u5b9e\u7684\u53bb\u8bfb\u5199\u6570\u636e\u3002 \u6267\u884c\u5b8c\u6bd5\u540e Actor \u4f1a\u5411\u4e0a\u4e0b\u6e38\u53d1\u6d88\u606f\uff1a \u5411\u4e0b\u6e38\u7684\u6d88\u8d39\u8005 Actor \u53d1\u6d88\u606f\u8bf4\uff1a\u6211\u521a\u751f\u4ea7\u4e86\u4e00\u5757\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u6765\u8bfb\u4e86\uff1b \u5411\u4e0a\u6e38\u7684\u751f\u4ea7\u8005 Actor \u53d1\u6d88\u606f\u8bf4\uff1a\u6211\u521a\u7528\u5b8c\u4e86\u4f60\u4e4b\u524d\u53d1\u7ed9\u6211\u7684\u6570\u636e\u4e86\u3002 Actor \u53ea\u9700\u8981\u5173\u5fc3\u4e0a\u4e0b\u6e38\u7684\u6d88\u606f\u5c31\u80fd\u5224\u65ad\u81ea\u5df1\u80fd\u4e0d\u80fd\u6267\u884c\u3002\u6bcf\u4e2a Actor \u90fd\u901a\u8fc7\u81ea\u5df1\u5185\u90e8\u7684\u72b6\u6001\u673a\u548c\u6536\u53d1\u6d88\u606f\u673a\u5236\u5b9e\u73b0\u4e86 \u5b8c\u5168\u53bb\u4e2d\u5fc3\u5316 \u7684\u5206\u5e03\u5f0f\u534f\u540c\u5de5\u4f5c\u3002 2. Actor \u673a\u5236\u5b9e\u73b0\u6d41\u6c34\u7ebf \u00b6 \u4e0a\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86 Actor \u7684\u5185\u90e8\u72b6\u6001\u673a\uff0cActor \u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u548c\u6570\u636e\u4f20\u9012\u662f\u4f9d\u8d56 Register \u5b9e\u73b0\u7684\u3002\u4e00\u4e2a Actor \u662f\u5426\u80fd\u6267\u884c\uff0c\u53ea\u8ddf\u4e24\u4e2a\u6761\u4ef6\u76f8\u5173\uff1a \u81ea\u5df1\u6d88\u8d39\u7684\u90a3\u4e9b Register \u662f\u5426\u53ef\u8bfb\uff1b \u81ea\u5df1\u751f\u4ea7\u7684\u90a3\u4e9b Register \u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u5199\u3002 \u5bf9\u4e8e\u4e00\u4e2a Register\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u65f6\u7ed9\u5b83\u5206\u914d\u591a\u4e2a\u7a7a\u95f2\u5757\uff0c\u90a3\u4e48\u76f8\u90bb\u7684\u4e24\u4e2a Actor \u5c31\u53ef\u4ee5\u540c\u65f6\u5de5\u4f5c\uff0c\u5de5\u4f5c\u65f6\u95f4\u91cd\u53e0\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5404\u4e2a Actor \u4e4b\u95f4\u7684\u6d41\u6c34\u7ebf\u3002\u7406\u60f3\u72b6\u6001\u4e0b\u6574\u4e2a\u9759\u6001\u6267\u884c\u56fe\u7684\u6267\u884c\u65f6\u95f4\u5c31\u662f\u6574\u4e2a\u7cfb\u7edf\u4e2d\u662f\u6027\u80fd\u74f6\u9888\u7684\u90a3\u4e2a Actor \u8fd0\u884c\u7684\u603b\u65f6\u95f4\uff0c\u5176\u4f59 Actor \u7684\u6267\u884c\u65f6\u95f4\u90fd\u88ab\u6d41\u6c34\u7ebf\u63a9\u76d6\u8d77\u6765\u4e86\u3002 \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u6765\u89e3\u91ca Actor \u673a\u5236\u4e0b\u7684\u6d41\u6c34\u7ebf\u662f\u5982\u4f55\u8fd0\u8f6c\u8d77\u6765\u7684\u3002\u56fe2\u662f\u4e00\u4e2a\u75313\u4e2a Actor\uff08a, b, c\uff09\u7ec4\u6210\u7684\u8ba1\u7b97\u56fe\u7684\u6267\u884c\u65f6\u5e8f\u56fe\u3002\u5176\u4e2d\u6df1\u7eff\u8272\u7684 Regst\u65b9\u5757\u8868\u793a\u6b63\u5728\u88ab\u4f7f\u7528\u7684 Register \u5757\uff0c\u767d\u8272\u7684 Regst \u65b9\u5757\u8868\u793a\u540c\u4e00\u4e2a Register \u7684\u5907\u7528\u7a7a\u95f2\u5757\u3002 1\uff09\u5728 Time0 \u65f6\u523b\uff0cActor a \u4ea7\u51fa\u4e86\u4e00\u4e2a Regst_a_0\uff0cActor b \u548c Actor c \u7531\u4e8e\u6ca1\u6709\u53ef\u8bfb\u7684 Register\uff0c\u6240\u4ee5\u5904\u5728\u7b49\u5f85\u72b6\u6001\u3002\u5047\u8bbe\u6bcf\u4e2a Actor\u7684\u6267\u884c\u65f6\u95f4\u90fd\u662f\u5355\u4f4d\u65f6\u95f4\u3002 2\uff09\u5230 Time1 \u65f6\u523b\uff0cActor a \u7ed9 Actor b \u53d1\u6d88\u606f\u8bf4\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u4ea7\u51fa\u7684 Regst_a_0 \u4e86\uff0cActor b \u6536\u5230\u4e86\u6d88\u606f\uff0c\u5e76\u68c0\u67e5\u81ea\u5df1\u751f\u4ea7\u7684 Register b \u662f\u5426\u6709\u7a7a\u95f2 Regst \u5757\u53ef\u7528\uff0c\u53d1\u73b0\u6709\u53ef\u7528\u7684 Regst_b_0\uff0c\u4e8e\u662f Time1 \u65f6\u523bActor b \u6267\u884c\uff0c\u8bfb\u53d6 Regst_a_0\uff0c\u5199 Regst_b_0\uff1b\u540c\u65f6 Actor a \u8fd8\u4f1a\u53bb\u770b\u81ea\u5df1\u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u5199\uff0c\u53d1\u73b0\u6709\uff0cTime1 \u65f6\u523b Actor a \u4e5f\u5728\u6267\u884c\uff0c\u5199 Regst_a_1\uff08\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cRegst_a_0 \u548c Regst_a_1 \u903b\u8f91\u4e0a\u662f\u5c5e\u4e8e\u540c\u4e00\u4e2a Register\uff0c\u53ea\u662f\u7a7a\u95f4\u4e0a\u5206\u6210\u4e86\u4e0d\u540c\u7684\u7a7a\u95f2\u5757\u5907\u4efd\u800c\u5df2\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u4efb\u52a1\u4e2d\uff0cRegst_a_0 \u548c Regst_a_1 \u91cc\u5b58\u653e\u7684\u662f\u540c\u4e00\u4e2a operator \u4ea7\u51fa\u7684\u4e0d\u540cbatch\u7684\u6570\u636e\uff09\u3002\u4e8e\u662f Actor a \u548c Actor b \u5c31\u5e76\u884c\u5de5\u4f5c\u8d77\u6765\u4e86\u3002Actor c \u7531\u4e8e\u6ca1\u6709\u6570\u636e\u53ef\u8bfb\uff0c\u4ecd\u5728\u7b49\u5f85\u3002 3\uff09\u5230 Time2 \u65f6\u523b\uff0cActor b \u751f\u4ea7\u51fa\u4e86 Regst_b_0\uff0c\u4e8e\u662f\u7ed9\u4e0b\u6e38\u7684\u6d88\u8d39\u8005Actor c \u53d1\u6d88\u606f\u8bf4\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u751f\u4ea7\u7684 Regst_b_0\uff0c\u540c\u65f6\u7ed9\u4e0a\u6e38\u7684\u751f\u4ea7\u8005Actor a \u53d1\u6d88\u606f\u8bf4\u6211\u7528\u5b8c\u4e86\u4f60\u7684 Regst_a_0\u3002\u6b64\u65f6 Actor a \u5df2\u7ecf\u628a\u521a\u521a\u751f\u4ea7\u7684 Regst_a_1 \u53c8\u53d1\u7ed9\u4e86 Actor b\uff0cActor b \u68c0\u67e5\u81ea\u5df1\u4ecd\u6709 Regst_b_1 \u7a7a\u95f2\uff0c\u4e8e\u662f Actor b \u5f00\u59cb\u8bfb Regst_a_1\uff0c\u5199 Regst_b_1\uff1bActor c \u6536\u5230 Regst_b_0\uff0c\u53d1\u73b0\u81ea\u5df1\u6709 Regst_c_0 \u7a7a\u95f2\uff0c\u4e8e\u662f Actor c \u5f00\u59cb\u6267\u884c\uff0c\u8bfb Regst_b_0\uff0c\u5199 Regst_c_0\uff1bActor a \u6536\u5230\u4e86 Actor b \u7528\u5b8c\u8fd8\u56de\u6765\u7684 Regst_a_0\uff0c\u68c0\u67e5 Regst_a_0 \u6240\u6709\u7684\u6d88\u8d39\u8005\u90fd\u7528\u5b8c\u4e86\uff0c\u4e8e\u662f\u5c06 Regst_a_0 \u56de\u6536\uff0c\u6807\u8bb0\u4e3a\u7a7a\u95f2\u5757\uff0c\u540c\u65f6 Actor a \u8fd8\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u5199 Regst_a_2\u3002 \u56fe2 Actor \u751f\u4ea7\u6d88\u8d39\u5173\u7cfb\u548c\u6267\u884c\u65f6\u5e8f\u56fe \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5230\u4e86 Time2 \u65f6\u523b\uff0c\u5176\u5b9e Actor a\u3001b\u3001c \u90fd\u5728\u5de5\u4f5c\uff0c\u5728\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u4efb\u52a1\u4e2d\uff0cTime2 \u65f6\u523b Regst_b_0\u3001Regst_c_0 \u5b58\u653e\u7684\u662f Batch 0 \u7684\u6570\u636e\uff0cRegst_a_1\u3001Regst_b_1 \u5b58\u653e\u7684\u662f Batch 1 \u7684\u6570\u636e\uff0cRegst_a_2 \u5b58\u653e\u7684\u662f Batch 2 \u7684\u6570\u636e\u3002\u901a\u8fc7\u4e00\u4e2a Register \u6709\u591a\u4e2a\u7a7a\u95f2\u5757\u7684\u8bbe\u8ba1\uff0cActor \u673a\u5236\u5c31\u5b9e\u73b0\u4e86\u6d41\u6c34\u5e76\u884c\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u629b\u51fa\u4e00\u4e2a\u66f4\u8fdb\u4e00\u6b65\u6df1\u5165\u7684\u95ee\u9898\uff1a\u6574\u4e2a\u6570\u636e\u6d41\u7684\u6267\u884c\u50cf\u4e00\u4e2a\u7f51\u7edc\uff0c\u6570\u636e\u5728\u7f51\u7edc\u4e2d\u7684\u6d41\u52a8\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u5982\u4f55\u907f\u514d\u751f\u4ea7\u8005\u751f\u4ea7\u592a\u5feb\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u4e0d\u53ca\uff0c\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u751f\u4ea7\u8005\u751f\u4ea7\u592a\u6162\uff0c\u6d88\u8d39\u8005\u611f\u5230\u9965\u997f\u7684\u95ee\u9898\uff0c\u8fd9\u6d89\u53ca\u5230\u5bf9\u8ba1\u7b97\u3001\u5185\u5b58\u3001\u4f20\u8f93\u5e26\u5bbd\u7684\u89c4\u5212\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7cfb\u7edf\u7684\u74f6\u9888\u4e4b\u5904\u6700\u5bbd\uff0c\u9700\u8981\u89e3\u51b3\u6d41\u63a7\uff08flow control\uff09\u7684\u95ee\u9898\u4ee5\u53ca\u8d44\u6e90\u5206\u914d\u95ee\u9898\uff08\u5982\u6bcf\u4e2a Actor \u7684 Register \u5230\u5e95\u5206\u914d\u51e0\u4e2a\u5185\u5b58\u5757\u914d\u989d\uff09\uff0c\u8fd9\u975e\u5e38\u5173\u952e\uff0c\u4e5f\u662f OneFlow \u7cfb\u7edf\u5df2\u89e3\u51b3\u7684\u95ee\u9898\u3002 3. \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u00b6 \u5728\u591a\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u5404\u4e2a\u673a\u5668\u548c\u5404\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u5f80\u5f80\u662f\u5f71\u54cd\u7cfb\u7edf\u7684\u6a2a\u5411\u6269\u5c55\u6027\u7684\u6700\u91cd\u8981\u56e0\u7d20\uff0c\u5982\u679c\u4f20\u8f93\u5f00\u9500\u53ef\u4ee5\u88ab\u8ba1\u7b97\u5f00\u9500\u63a9\u76d6\uff0c\u90a3\u4e48\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u5c31\u53ef\u4ee5\u8fbe\u5230\u7406\u60f3\u7684\u7ebf\u6027\u52a0\u901f\u6bd4\u3002\u76f8\u8f83\u4e8e\u5176\u4ed6\u7684\u6846\u67b6\uff0cOneFlow \u628a\u6570\u636e\u642c\u8fd0\u89c6\u4e3a\u8ddf\u6570\u636e\u8ba1\u7b97\u540c\u7b49\u5730\u4f4d\u7684\u64cd\u4f5c\uff0c\u63d0\u51fa \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u7684\u601d\u60f3\u3002 \u5df2\u6709\u6846\u67b6\u5728\u7f16\u8bd1\u671f\u7684\u5173\u6ce8\u7126\u70b9\u662f\u6570\u636e\u8ba1\u7b97\uff0c\u8ba4\u4e3a\u6570\u636e\u642c\u8fd0\u662f\u80cc\u540e\u9690\u5f0f\u53d1\u751f\u7684\uff0c\u56e0\u6b64\u5728\u9759\u6001\u5206\u6790\u8ba1\u7b97\u56fe\u65f6\u7565\u8fc7\u8ba1\u7b97\u548c\u642c\u8fd0\u7684\u91cd\u53e0\u7f16\u6392\uff0cOneFlow \u5728\u8ba1\u7b97\u56fe\u4e2d\u663e\u5f0f\u8868\u8fbe\u4e86\u6570\u636e\u642c\u8fd0\uff0c\u800c\u4e14\u5728\u9759\u6001\u5206\u6790\u65f6\u540c\u7b49\u5bf9\u5f85\u6570\u636e\u642c\u8fd0\u548c\u6570\u636e\u8ba1\u7b97\uff0c\u4ee5\u6700\u5927\u5316\u91cd\u53e0\u642c\u8fd0\u548c\u8ba1\u7b97\u3002 \u5728\u6700\u7ec8\u7684\u6267\u884c\u56fe\u4e2d\uff0c\u6570\u636e\u642c\u8fd0\u64cd\u4f5c\u4e5f\u662f\u4e00\u4e2a\u4e2a Actor\u3002\u9664\u4e86\u5728\u8bbe\u5907\u4e0a\u505a\u6570\u636e\u8ba1\u7b97\u7528\u7684 Actor \u4ee5\u5916\uff0c\u8fd8\u6709\u8ba1\u7b97\u673a\u5185\u5b58\u5230 GPU \u663e\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d Actor\uff0c\u673a\u5668\u4e4b\u95f4\u505a\u7f51\u7edc\u901a\u4fe1\u7684\u7f51\u7edc Actor\uff0c\u8d1f\u8d23\u6570\u636e\u7684\u5207\u5206\u3001\u5408\u5e76\u3001\u590d\u5236\u7684Actor\uff0c\u8d1f\u8d23\u8bfb\u53d6\u78c1\u76d8\u6570\u636e\u7684 Actor\uff0c\u8d1f\u8d23\u52a0\u8f7d\u4fdd\u5b58\u6a21\u578b\u7684 Actor \u7b49\u7b49\u3002\u5f88\u591a\u5176\u4ed6\u6846\u67b6\u90fd\u628a\u6570\u636e\u52a0\u8f7d\u3001\u591a\u5361\u6a21\u578b\u68af\u5ea6\u7684\u540c\u6b65\u3001\u7f51\u7edc\u3001\u6a21\u578b\u52a0\u8f7d\u66f4\u65b0\u7b49\u5206\u522b\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u6a21\u5757\uff0c\u800c OneFlow \u7684\u8bbe\u8ba1\u662f\u6240\u6709\u7684\u529f\u80fd\u90fd\u5728\u4e00\u5f20\u7531Actor\u7ec4\u6210\u7684\u9759\u6001\u6267\u884c\u56fe\u91cc\u5b9e\u73b0\u4e86\u3002OneFlow \u8fd9\u6837\u7684\u8bbe\u8ba1\u4e0d\u4ec5\u7b80\u6d01\u3001\u4f18\u96c5\uff0c\u8fd8\u975e\u5e38\u9ad8\u6548\u3002 \u56fe 3 \u6570\u636e\u662f\u5982\u4f55\u4ece\u4e00\u4e2a\u8bbe\u5907\u642c\u8fd0\u5230\u53e6\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684 \u56fe3\u8868\u793a\u4e86\u6ca1\u6709 GPU-Direct \u7684\u51b5\u4e0b\uff0c\u5728 OneFlow \u7684 Runtime \u9636\u6bb5\uff0c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\u8282\u70b9\u5982\u679c\u6d88\u8d39\u4e86\u53e6\u4e00\u4e2a\u8bbe\u5907\u7684\u8ba1\u7b97\u8282\u70b9\uff0c\u6570\u636e\u662f\u5982\u4f55\u642c\u8fd0\u8fc7\u53bb\u7684\u3002 4. \u5c3d\u53ef\u80fd\u5e76\u884c \u00b6 \u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u6240\u6709\u7684\u51fa\u53d1\u70b9\u90fd\u662f\u5e0c\u671b\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5e76\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6700\u4f18\u7684\u5206\u5e03\u5f0f\u6027\u80fd\u3002\u6bd4\u5982\u8003\u8651\u5230\u5206\u5e03\u5f0f\u8bad\u7ec3\u6a21\u578b\u68af\u5ea6\u540c\u6b65\u65f6\uff0c\u663e\u5b58\u5230\u5185\u5b58\u7684\u4f20\u8f93\u5e26\u5bbd\u9ad8\u4e8e\u673a\u5668\u4e4b\u95f4\u7684\u7f51\u7edc\u4f20\u8f93\u5e26\u5bbd\uff0cOneFlow \u4f1a\u505a\u4e24\u7ea7\u7684 scatter \u548c gather \u64cd\u4f5c\uff08\u672c\u673a\u7684\u548c\u5404\u4e2a\u673a\u5668\u4e4b\u95f4\u7684\uff09\uff0c\u7528\u4e8e\u589e\u52a0 locality\uff0c\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u3002 \u53c8\u6bd4\u5982\u5728\u5f02\u6b65\u542f\u52a8\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u65f6\uff0cPython \u7aef\u7528\u6237\u7684\u63a7\u5236\u903b\u8f91\u8ddf OneFlow \u8fd0\u884c\u65f6\u7684\u6267\u884c\u56fe\u662f\u5e76\u884c\u6267\u884c\u7684\uff0c\u540c\u65f6 OneFlow \u6709\u4e00\u5957\u4e92\u65a5\u4e34\u754c\u533a\u7684\u8bbe\u8ba1\u4fdd\u8bc1\u6267\u884c\u7684\u9ad8\u6548\u6027\u548c\u6b63\u786e\u6027\u3002 \u6570\u636e\u52a0\u8f7d\u90e8\u5206\u65e0\u8bba\u662f\u4ece\u78c1\u76d8\u8bfb\u6570\u636e\u8fd8\u662f\u4ece Python \u7aef\u5582\u6570\u636e\uff0cOneFlow \u90fd\u80fd\u4fdd\u8bc1\u5c3d\u53ef\u80fd\u5e76\u884c\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8bbe\u5907\u4e0d\u4f1a\u56e0\u4e3a\u8981\u7b49\u6570\u636e\u800c\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002 \u5df2\u6709\u6846\u67b6\u5982\u679c\u60f3\u8981\u5c3d\u53ef\u80fd\u91cd\u53e0\u6570\u636e\u642c\u8fd0\u548c\u8ba1\u7b97\uff0c\u4e00\u822c\u501f\u52a9\u591a\u5c42\u56de\u8c03\uff08Callback\uff09\u51fd\u6570\uff0c\u5f53\u5d4c\u5957\u5c42\u6b21\u8fc7\u591a\u65f6\uff0c\u4f1a\u9047\u5230\u6240\u8c13\u7684 Callback Hell \u9ebb\u70e6\uff0c\u6b63\u786e\u6027\u548c\u53ef\u8bfb\u6027\u90fd\u53ef\u80fd\u4e0b\u964d\u3002\u4f46\u5728 OneFlow \u4e2d\uff0c\u4ee5\u4e0a\u7684\u8fd9\u4e9b\u5e76\u884c\u5e76\u53d1\u7279\u6027\uff0c\u90fd\u662f\u5728\u8fd9\u4e00\u5957\u7b80\u6d01\u7684 Actor \u673a\u5236\u4e0b\u5b9e\u73b0\u7684\uff0c\u89e3\u51b3\u4e86\u4ee4\u4eba\u5934\u79c3\u7684 Callback Hell \u95ee\u9898\u3002 \u6b64\u5916\uff0c\u5728\u591a\u673a\u7684\u7f51\u7edc\u901a\u4fe1\u90e8\u5206\uff0cOneFlow \u5e95\u5c42\u7684\u7f51\u7edc\u901a\u4fe1\u5e93\u539f\u751f\u652f\u6301 RDMA \u7684\u9ad8\u6027\u80fd\u901a\u4fe1\uff0c\u4e5f\u6709\u4e00\u5957\u57fa\u4e8e epoll \u7684\u9ad8\u6548\u901a\u4fe1\u8bbe\u8ba1\u3002\u800c\u76ee\u524d\u6700\u6d41\u884c\u7684 Pytorch\uff0c\u591a\u673a\u8fd8\u9700\u8981\u901a\u8fc7 RPC \u6765\u505a\u6570\u636e\u540c\u6b65\u3002 \u4e09\u3001OneFlow \u5982\u4f55\u505a\u5230\u5206\u5e03\u5f0f\u6700\u6613\u7528 \u00b6 OneFlow \u662f\u76ee\u524d\u5206\u5e03\u5f0f\u573a\u666f\u4e2d\u652f\u6301\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u7b49\u6700\u6613\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002\u7528\u6237\u53ea\u9700\u8981\u50cf\u5355\u5361\u4e00\u6837\u53bb\u642d\u5efa\u7f51\u7edc\u6a21\u578b\uff0c\u5e76\u544a\u8bc9 OneFlow \u6709\u54ea\u4e9b\u673a\u5668\u54ea\u4e9b\u5361\uff0cOneFlow \u5c31\u4f1a\u7528\u6700\u9ad8\u6548\u7684\u65b9\u5f0f\u628a\u8fd9\u4e9b\u673a\u5668\u548c\u8bbe\u5907\u4f7f\u7528\u8d77\u6765\u3002 \u8fd9\u6e90\u4e8e OneFlow \u7684\u4e00\u5957\u72ec\u7279\u7684\u8bbe\u8ba1\uff1aConsistentView\uff08\u4e00\u81f4\u6027\u89c6\u89d2\uff09\u3002\u5bf9\u4e8e\u591a\u673a\u591a\u5361\uff0cOneFlow \u4f1a \u628a\u5b83\u62bd\u8c61\u6210\u4e00\u4e2a\u8d85\u7ea7\u5927\u7684\u8bbe\u5907 \uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u903b\u8f91\u4e0a\u7684\u8bbe\u5907\uff0c\u8fd9\u4e2a\u903b\u8f91\u8bbe\u5907\u7684\u663e\u5b58\u662f\u5b9e\u9645\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u7684\u663e\u5b58\u4e4b\u548c\uff0c\u8fd9\u4e2a\u903b\u8f91\u8bbe\u5907\u7684\u7b97\u529b\u4e5f\u662f\u5b9e\u9645\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u7684\u7b97\u529b\u4e4b\u548c\u3002 \u7528\u6237\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u903b\u8f91\u4e0a\u7684\u8d85\u7ea7\u8bbe\u5907\u91cc\uff0c\u5b9a\u4e49\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u662f\u5982\u4f55\u6784\u5efa\u7684\uff0c\u5176\u4f59\u7684\u4fbf\u4e0d\u9700\u8981\u7528\u6237\u6765\u64cd\u4f5c\uff0c\u7531 OneFlow \u6765\u5b8c\u6210\u903b\u8f91\u4e0a\u7684\u8bbe\u5907\u5230\u7269\u7406\u4e0a\u7684\u8bbe\u5907\u7684\u6620\u5c04\u3002 \u8fd9\u91cc\u5148\u660e\u786e\u4e24\u4e2a\u6982\u5ff5\uff1a\u201c\u903b\u8f91\u4e0a\u7684\u201d\u548c\u201c\u7269\u7406\u4e0a\u7684\u201d\u3002\u201c\u903b\u8f91\u4e0a\u7684\u201d\u8868\u793a OneFlow \u628a\u5206\u5e03\u5f0f\u96c6\u7fa4\u62bd\u8c61\u6210\u4e00\u4e2a\u8d85\u7ea7\u8ba1\u7b97\u673a\u4e4b\u540e\u7684\u8ba1\u7b97\u548c\u6570\u636e\uff0c\u201c\u7269\u7406\u4e0a\u7684\u201d\u8868\u793a\u90a3\u4e9b\u771f\u5b9e\u7684\u90e8\u7f72\u5230\u5404\u4e2a\u673a\u5668\u548c\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\u548c\u6570\u636e\u3002 \u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u662f\u7531 Op \u6784\u6210\u7684\u8ba1\u7b97\u56fe\uff0cOp \u4e4b\u95f4\u751f\u4ea7\u6d88\u8d39 Tensor \u6570\u636e\u3002\u5728\u591a\u673a\u591a\u5361\u7684\u73af\u5883\u4e0b\uff0c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Op \u4f1a\u5bf9\u5e94\u591a\u4e2a\u771f\u5b9e\u7684\u7269\u7406\u4e0a\u7684 Op\uff0c\u6bcf\u4e2a\u7269\u7406\u4e0a\u7684 Op \u5b9e\u9645\u6267\u884c\u7684\u8ba1\u7b97\u90fd\u662f\u8fd9\u4e2a\u903b\u8f91 Op \u8ba1\u7b97\u7684\u4e00\u90e8\u5206\uff0c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Tensor \u4e5f\u4f1a\u5bf9\u5e94\u591a\u4e2a\u7269\u7406\u4e0a\u7684 Tensor\uff0c\u6bcf\u4e2a\u7269\u7406\u4e0a\u7684 Tensor \u90fd\u662f\u903b\u8f91 Tensor \u7684\u4e00\u90e8\u5206\u3002 \u5bf9\u4e8e\u5176\u4ed6\u7684\u6846\u67b6\u5b9a\u4e49\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u6bcf\u5f20\u5361\u662f\u4e00\u4e2a\u201cworld\u201d\uff0c\u591a\u5361\u4e4b\u95f4\u6839\u636e\u66b4\u9732\u51fa\u6765\u7684\u63a5\u53e3\u6765\u540c\u6b65\u6a21\u578b\u68af\u5ea6\uff1b\u800c\u5bf9\u4e8e OneFlow \u800c\u8a00\uff0c\u591a\u673a\u591a\u5361\u4e5f\u90fd\u662f\u4e00\u4e2a\u201cworld\u201d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u5957 Placement+SBP \u7684\u65b9\u5f0f\u505a\u5168\u5c40\u7684\u7edf\u7b79\u7ba1\u7406\u3002 Placement \u00b6 \u5728 OneFlow \u7684\u8ba1\u7b97\u56fe\u642d\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u8ba1\u7b97 Op \u90fd\u6709\u4e00\u4e2a\u5c5e\u6027\u53eb\u505a Placement\uff0c\u8868\u793a\u4e86\u8be5\u903b\u8f91\u4e0a\u7684 Op\uff0c\u662f\u8981\u90e8\u7f72\u5230\u54ea\u4e9b\u673a\u5668\u54ea\u4e9b\u8bbe\u5907\u4e0a\u7684\u3002\u5bf9\u4e8e\u5e38\u89c1\u7684\u6570\u636e\u5e76\u884c\uff0c\u5c31\u662f\u6240\u6709\u7684 Op \u90fd\u90e8\u7f72\u5230\u6240\u6709\u7684\u8bbe\u5907\u4e0a\u3002\u4f46 OneFlow \u4e5f\u652f\u6301\u7528\u6237\u6307\u5b9a Op \u7684 Placement\uff0c\u6bd4\u5982\u5f53\u7f51\u7edc\u8fc7\u5927\u5355\u5361\u6839\u672c\u653e\u4e0d\u4e0b\u7684\u65f6\u5019\uff0c\u5728 OneFlow \u53ef\u4ee5\u8ba9\u7f51\u7edc\u7684\u524d\u4e00\u90e8\u5206\u5728\u4e00\u5f20\u5361\u4e0a\uff0c\u540e\u4e00\u90e8\u5206\u5728\u53e6\u4e00\u5f20\u5361\u4e0a\uff0c\u7528\u4e00\u79cd\u201c\u63a5\u529b\u201d\u7684\u65b9\u5f0f\u5de5\u4f5c\uff0c\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u3002 \u56fe4\u5c55\u793a\u4e86\u4e00\u79cd\u53ef\u80fd\u7684 Placement \u4f8b\u5b50\u3002\u7528\u6237\u5b9a\u4e49\u4e86\u4e00\u4e2a\u75313\u4e2a Op \u7ec4\u6210\u7684\u7f51\u7edc\uff1aOp_0 -> Op_1 -> Op_2\u3002 \u5176\u4e2d Op_0 \u548c Op_1 \u7684 Placement \u662f Device 0\uff0cOp_2 \u7684 Placement \u662f Device 1\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u6d41\u6c34\u5e76\u884c\u7684\u4f8b\u5b50\uff0cOneflow \u4f1a\u81ea\u52a8\u5728 Op_1 \u548c Op_2 \u4e4b\u95f4\u63d2\u5165\u9700\u8981\u7684\u6570\u636e\u642c\u8fd0\u7684 Copy Op\u3002 \u56fe4 \u4e00\u4e2a\u6d41\u6c34\u5e76\u884c\u7684Placement\u793a\u4f8b\u56fe SBP \u00b6 SBP \u662f OneFlow \u72ec\u6709\u7684\u6982\u5ff5\uff0c\u4ed6\u662f\u4e09\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u7ec4\u5408\uff1aSplit\u3001Broadcast\u3001PartialSum\uff08\u4ee5 PartialSum \u4e3a\u4f8b\uff0c\u5b9e\u9645\u4e0a\u8fd8\u53ef\u4ee5\u662fPartialMin\u3001 PartialMax \u7b49 reduce \u64cd\u4f5c\uff09\uff0c\u5168\u79f0\u53eb SbpParallel\uff0c\u8868\u793a\u4e00\u79cd\u903b\u8f91\u4e0a\u7684 Tensor \u8ddf\u7269\u7406\u4e0a\u7684\u591a\u4e2a Tensor \u7684\u6620\u5c04\u5173\u7cfb\u3002 \u5176\u4e2d Split \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u662f\u903b\u8f91 Tensor \u6309\u7167\u67d0\u4e00\u7ef4\u5ea6\u5207\u5206\u540e\u5f97\u5230\u7684\uff0c Split \u6709\u4e2a\u53c2\u6570 axis\uff0c\u8868\u793a\u5207\u5206\u7684\u7ef4\u5ea6\uff0c\u5982\u679c\u628a\u591a\u4e2a\u7269\u7406\u4e0a\u7684 Tensor \u6309\u7167 Split \u7684\u7ef4\u5ea6\u8fdb\u884c\u62fc\u63a5\uff0c\u5c31\u80fd\u8fd8\u539f\u51fa\u903b\u8f91 Tensor\u3002 Broadcast \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u662f\u8ddf\u903b\u8f91\u4e0a\u7684 Tensor \u5b8c\u5168\u76f8\u540c\u7684\u3002 PartialSum \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u867d\u7136\u8ddf\u903b\u8f91\u4e0a\u7684 Tensor \u5f62\u72b6\u4e00\u81f4\uff0c\u4f46\u662f\u7269\u7406\u4e0a\u7684 Tensor \u91cc\u7684\u503c\u662f\u903b\u8f91 Tensor \u91cc\u5bf9\u5e94\u4f4d\u7f6e\u7684\u4e00\u90e8\u5206\uff0c\u5982\u679c\u628a\u7269\u7406\u4e0a\u7684\u591a\u4e2a Tensor \u6309\u7167\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\uff0c\u5373\u53ef\u8fd8\u539f\u51fa\u903b\u8f91\u4e0a\u7684 Tensor\u3002 \u56fe5\u5c55\u793a\u4e86 SBP \u7684\u7b80\u5355\u793a\u4f8b\u3002 \u56fe5 \u51e0\u79cd SbpParallel \u7684\u7b80\u5355\u60c5\u5f62 SbpSignature \u662f\u4e00\u4e2a SbpParallel \u7684\u96c6\u5408\uff0c\u5728 OneFlow \u7684\u8bbe\u8ba1\u91cc\u662f Op \u7684\u5c5e\u6027\uff0c\u5b83\u63cf\u7ed8\u4e86\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Op \u88ab\u6620\u5c04\u6210\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u7269\u7406\u4e0a\u7684Op\u4ee5\u540e\uff0c\u8fd9\u4e9b\u7269\u7406\u4e0a\u7684 Op \u662f\u5982\u4f55\u770b\u5f85\u4ed6\u4eec\u8f93\u5165\u8f93\u51faTensor\u5728\u903b\u8f91\u4e0a\u548c\u7269\u7406\u4e0a\u7684\u6620\u5c04\u5173\u7cfb\u7684\u3002\u4e00\u4e2a Op \u4f1a\u6709\u591a\u4e2a\u5408\u6cd5\u7684 SbpSignature\uff0c\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u5408\u6cd5 signature \u5c31\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u662f Broadcast\uff0c\u8fd9\u8868\u793a\u4e86\u8fd9\u4e2a Op \u9700\u8981\u6574\u4e2a\u903b\u8f91\u4e0a\u7684 Tensor \u6570\u636e\u3002 \u5f53\u7528\u6237\u6784\u5efa\u7684\u903b\u8f91\u4e0a\u7684\u8ba1\u7b97\u56fe\u786e\u5b9a\u4ee5\u540e\uff0cOneFlow \u5728 Compiler \u751f\u6210\u5206\u5e03\u5f0f\u7684\u7269\u7406\u4e0a\u7684\u6267\u884c\u56fe\u65f6\uff0c\u4f1a\u8003\u8651\u6bcf\u4e2a Op \u7684 Placement \u548c\u8be5 Op \u5141\u8bb8\u7684\u5408\u6cd5 SbpSignature \u5217\u8868\uff0c\u5728\u5176\u4e2d\u9009\u62e9\u4e00\u4e2a\u4f20\u8f93\u5f00\u9500\u6700\u5c0f\u7684 SbpSignature \u4f5c\u4e3a\u672c\u6b21\u8bad\u7ec3\u7684 SbpSignature\uff0c\u7528\u4e8e\u6307\u5bfc Compiler \u751f\u6210\u6700\u9ad8\u6548\u7684\u6267\u884c\u56fe\u3002 \u5173\u4e8e Op \u7684\u5408\u6cd5 SbpSignature \u7684\u5217\u8868\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\uff08matmul\uff09\u7684Op\u7684\u4f8b\u5b50\u3002 \u5b9a\u4e49: Y = matmul(A, B) , A , B , Y \u90fd\u662f Tensor \uff0c\u8868\u793a Y = AB \u3002\u90a3\u4e48\u81f3\u5c11\u5b58\u5728\u4e24\u79cd\u5408\u6cd5\u7684 SbpSignature\uff1a 1) Y: Split(0) , A: Split(0) , B: Broadcast 2) Y: Split(1) , A: Broadcast , B: Split(1) \u4e24\u79cd\u5408\u6cd5\u7684 signature \u5728\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u793a\u610f\u56fe\u5982\u56fe6\u6240\u793a\u3002\u5047\u8bbe\u903b\u8f91\u4e0a\u7684 MatMul \u7684\u8f93\u5165\u8f93\u51fa Tensor \u7684\u5f62\u72b6\u662f\uff1a A(64, 10) \u00d7 B(10, 50) -> Y(64, 50) \u56fe6 MatMul\u7684\u4e24\u79cd\u5408\u6cd5SbpSignature \u4e14\u8be5 Op \u5206\u5e03\u5728\u4e24\u4e2a\u8bbe\u5907\u4e0a\u3002\u5728\u7b2c\u4e00\u79cd SbpSignature \u4e0b\uff0c0\u53f7\u8bbe\u5907\u4e0a\u7684A\u662f\u903b\u8f91\u4e0a A \u7684\u524d\u4e00\u534a\uff0c1\u53f7\u8bbe\u5907\u4e0a\u7684 A \u662f\u903b\u8f91 A \u7684\u540e\u4e00\u534a\uff08\u6309\u7167\u7b2c0\u7ef4\u5207\u5206\uff09\uff0c\u800c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684 B \u8ddf\u903b\u8f91\u4e0a\u7684 B \u5b8c\u5168\u4e00\u81f4\uff0c\u4e24\u4e2a\u8bbe\u5907\u8f93\u51fa\u7684 Y \u5206\u522b\u662f\u903b\u8f91\u4e0a\u7684 Y \u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u3002\u540c\u6837\u53ef\u4ee5\u5206\u6790\u7b2c\u4e8c\u79cd SbpSignature\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5f53 A \u662f\u6570\u636e\uff0cB \u662f\u6a21\u578b\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u79cd SbpSignature \u5c31\u662f \u6570\u636e\u5e76\u884c \uff0c\u7b2c\u4e8c\u79cd SbpSignature \u5c31\u662f \u6a21\u578b\u5e76\u884c \u3002\u5982\u679c\u4e24\u4e2a\u76f8\u90bb\u7684 MatMul op\uff0c\u524d\u4e00\u4e2a\u4f7f\u7528\u7b2c\u4e00\u79cd SbpSignature\uff0c\u540e\u4e00\u4e2a\u4f7f\u7528\u7b2c\u4e8c\u79cd SbpSignature\uff0c\u6574\u4e2a\u7f51\u7edc\u5c31\u5b9e\u73b0\u4e86 \u6df7\u5408\u5e76\u884c \u3002 \u56fe7\u662f\u4e00\u4e2a\u6df7\u5408\u5e76\u884c\u7684\u793a\u4f8b\uff0c\u5b9a\u4e49\u4e86 Y0 = MatMul_0(A0, B0) , Y1 = MatMul_1(Y0, B1) \u8fd9\u6837\u4e00\u4e2a\u7531\u4e24\u4e2aop\u7ec4\u6210\u7684\u8ba1\u7b97\u56fe\uff0c\u5176\u4e2dA0, Y0, Y1\u662f\u6570\u636eTensor\uff0cB0, B1 \u662f\u6a21\u578bTensor\u3002 \u56fe7 \u6df7\u5408\u5e76\u884c\u793a\u4f8b \u5728\u56fe7\u4e2d MatMul_0 \u4ea7\u51fa\u7684 Y0 \u88ab MatMul_1 \u6d88\u8d39\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a op \u5bf9\u540c\u4e00\u4e2a Tensor \u7684 SBP \u770b\u5f85\u65b9\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\uff0cMatMul_0 \u8ba4\u4e3a Y0 \u662f Split(axis=0) \u5207\u5206\uff0c\u4f46\u662f MatMul_1 \u9700\u8981\u4e00\u4e2a Broadcast \u7684 Y0 \u8f93\u5165\u3002\u8fd9\u65f6\u5019OneFlow\u4f1a\u81ea\u52a8\u63d2\u5165\u4e00\u4e2a\u201c\u4e07\u80fd\u201d\u7684 Boxing Op \u505a\u5fc5\u8981\u7684\u6570\u636e\u88c1\u526a\u3001\u62fc\u63a5\u3001\u642c\u8fd0\u548c\u6c42\u548c\u7b49\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6240\u6709\u7684Op\u90fd\u53ef\u4ee5\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u9ad8\u6548\u7684\u62ff\u5230\u81ea\u5df1\u60f3\u8981\u7684\u6570\u636e\u3002 \u53e6\u5916\u5728\u6570\u636e\u5e76\u884c\u7684\u65f6\u5019\uff0c\u8bad\u7ec3\u7684\u524d\u5411\u6a21\u578b Tensor \u7684\u662f Broadcast\uff0c\u5bf9\u5e94\u53cd\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u5c31\u662fPartialSum\uff0c\u5f53 Optimizer \u9700\u8981\u5168\u90e8\u7684\u68af\u5ea6\u6765\u66f4\u65b0\u6a21\u578b\u65f6\uff0c\u5c31\u4f1a\u89e6\u53d1 OneFlow \u7684 Boxing \u673a\u5236\u8fdb\u884c\u9ad8\u6548\u7684\u68af\u5ea6\u540c\u6b65\u5de5\u4f5c\u3002 \u6700\u6613\u7528\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6846\u67b6 \u00b6 OneFlow \u7684\u8fd9\u5957 Placement + SBP + Boxing \u7684\u673a\u5236\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7528\u6237\u5b9a\u4e49\u7684\u8ba1\u7b97\u56fe\u4e2d\u7684 Op\u3001Tensor \u4ee5\u4efb\u610f\u7684\u65b9\u5f0f\u5206\u5e03\u5728\u5404\u4e2a\u673a\u5668\u548c\u5404\u4e2a\u8bbe\u5907\u4e0a\uff0c\u65e0\u8bba\u662f\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u6d41\u6c34\u5e76\u884c\uff0c\u5bf9\u4e8e OneFlow \u800c\u8a00\uff0c\u90fd\u53ea\u662f\u4e00\u4e2a\u7279\u5b9a Placement \u4e0b\u7684\u7279\u5b9a SbpSignature \u7684\u7ec4\u5408\u800c\u5df2\uff0c\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4ea4\u7ed9 OneFlow \u6765\u505a\u81ea\u52a8\u7684\u5904\u7406\u3002 \u53e6\u5916\uff0c\u65e9\u5728\u5fae\u8f6f\u63a8\u51fa ZeRO-2 \u6846\u67b6\u4e4b\u524d\uff0cOneFlow \u5c31\u5df2\u7ecf\u652f\u6301\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u591a\u673a\u591a\u5361\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u6a21\u578b Tensor \u90fd\u53ea\u4fdd\u5b58\u5728\u5176\u4e2d\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff0c\u964d\u4f4e\u68af\u5ea6\u8ba1\u7b97\u4e2d\u7684\u5185\u5b58\u5360\u7528\u3002 \u56db\u3001\u603b\u7ed3 \u00b6 \u7efc\u4e0a\uff0c\u5728\u7f16\u8bd1\u671f\uff0cOneFlow \u901a\u8fc7\u8bbe\u8ba1\u4e00\u5957\u6570\u5b66\u4e0a\u4e25\u8c28\u7684\u5f62\u5f0f\u7cfb\u7edf\u6765\u8868\u793a\u6240\u6709\u5408\u6cd5\u7684\u5e76\u884c\u6a21\u5f0f\uff0c\u5e76\u652f\u6301\u7f16\u8bd1\u5668\u8f83\u65b9\u4fbf\u5730\u81ea\u52a8\u641c\u7d22\u6700\u4f18\u5e76\u884c\u65b9\u6848\u3002 \u5728\u8fd0\u884c\u671f\uff0cOneFlow \u901a\u8fc7 Actor \u7cfb\u7edf\u6700\u4f18\u5730\u3001\u7075\u6d3b\u5730\u652f\u6301\u5e76\u884c\u3001\u5e76\u53d1\u6267\u884c\u3002OneFlow \u7684\u5185\u6838\u5177\u6709\u7b80\u6d01\u3001\u9ad8\u6548\u548c\u9ad8\u6269\u5c55\u6027\u7684\u4f18\u70b9\u3002 \u57fa\u4e8e\u6b64\u8bbe\u8ba1\uff0cOneFlow \u4f7f\u5f97\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u6027\u80fd\u8fbe\u5230\u6781\u81f4\uff0c\u4e14\u5206\u5e03\u5f0f\u8bad\u7ec3\u8ddf\u5355\u5361\u4e00\u6837\u7b80\u5355\u6613\u7528\u3002","title":"OneFlow \u7cfb\u7edf\u8bbe\u8ba1"},{"location":"basics_topics/essentials_of_oneflow.html#oneflow","text":"\u672c\u6587\u7684\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807 OneFlow \u7684\u7279\u8272\u4e00\uff1aActor \u673a\u5236 OneFlow \u7684\u7279\u8272\u4e8c\uff1aSBP \u673a\u5236 \u603b\u7ed3","title":"OneFlow\u7cfb\u7edf\u8bbe\u8ba1"},{"location":"basics_topics/essentials_of_oneflow.html#oneflow_1","text":"OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u8ffd\u6c42\u6781\u81f4\u7684\u6027\u80fd\uff0c\u7279\u522b\u662f\u5206\u5e03\u5f0f\u591a\u673a\u591a\u5361\u73af\u5883\u4e0b\u7684\u6a2a\u5411\u6269\u5c55\u6027\uff0c\u5e0c\u671b\u80fd\u8ba9\u7528\u6237\u4f7f\u7528\u591a\u673a\u591a\u5361\u5c31\u50cf\u4f7f\u7528\u5355\u673a\u5355\u5361\u4e00\u6837\u5bb9\u6613\uff0c\u4e14\u4eab\u53d7\u7ebf\u6027\u52a0\u901f\u7684\u8fd0\u884c\u6548\u7387\u3002 \u4e3a\u4ec0\u4e48 OneFlow \u8981\u805a\u7126\u4e8e\u5206\u5e03\u5f0f\u573a\u666f\u7684\u6027\u80fd\u548c\u6613\u7528\u6027\u5462\uff1f\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u53d1\u5c55\uff0c\u6a21\u578b\u8d8a\u6765\u8d8a\u5927\uff0c\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u6240\u9700\u7684\u7b97\u529b\u4f1a\u8d8a\u6765\u8d8a\u9ad8\uff0c\u540c\u65f6\u6a21\u578b\u589e\u5927\u7684\u901f\u5ea6\u8981\u5927\u4e8e GPU \u5355\u5361\u663e\u5b58\u6269\u5bb9\u7684\u901f\u5ea6\uff1b\u8bad\u7ec3\u5bf9\u7b97\u529b\u7684\u589e\u957f\u8981\u6c42\u8981\u5927\u4e8e GPU \u5355\u5361\u7b97\u529b\u589e\u957f\u7684\u901f\u5ea6\u3002\u5355\u5361\u7684\u8ba1\u7b97\u80fd\u529b\u548c\u663e\u5b58\u8fdc\u8fdc\u4e0d\u80fd\u6ee1\u8db3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8bad\u7ec3\u7684\u9700\u6c42\uff0c\u5fc5\u987b\u501f\u52a9\u591a\u673a\u591a\u5361\u5e76\u884c\u52a0\u901f\u3002 \u82e5\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u53ef\u4ee5\u8ba9\u4e92\u8054\u7684\u591a\u4e2a GPU \u534f\u540c\u5de5\u4f5c\u597d\uff0c\u5b9e\u73b0\u7ebf\u6027\u52a0\u901f\u6bd4\uff0c\u5373\u4f7f\u6bcf\u5757 GPU \u6027\u80fd\u201c\u4e00\u822c\u201d\uff0c\u4e5f\u53ef\u6ee1\u8db3\u4efb\u610f\u89c4\u6a21\u7684\u7b97\u529b\u9700\u6c42\uff0c\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u6a2a\u5411\u6269\u5c55\u6027\uff0c\u6211\u4eec\u575a\u4fe1\u8fd9\u662f\u7b97\u529b\u589e\u957f\u7684\u89e3\u51b3\u4e4b\u9053\u3002 \u4f46\u662f\uff0c\u5df2\u6709\u6846\u67b6\u90fd\u662f\u9996\u5148\u805a\u7126\u4e8e\u5355\u5361\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u4ec5\u5bf9\u9002\u5408\u6570\u636e\u5e76\u884c\u7684\u591a\u673a\u591a\u5361\u573a\u666f\u5904\u7406\u7684\u8f83\u597d\uff0c\u5373\u628a\u5355\u5361\u7684\u8ba1\u7b97\u56fe\u955c\u50cf\u590d\u5236\u5230\u591a\u673a\u591a\u5361\u4e0a\uff0c\u5404\u4e2a\u5361\u548c\u673a\u5668\u4e4b\u95f4\u8f85\u52a9\u4e8e\u6a21\u578b\u540c\u6b65\u7684\u6a21\u5757\u3002 \u5bf9\u4e8e BERT/GPT-3 \u7b49\u53c2\u6570\u91cf\u5de8\u5927\u7684\u6a21\u578b\uff0c\u7528\u6237\u5728\u4f7f\u7528\u5df2\u6709\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u65f6\u5e38\u5e38\u4f1a\u9047\u5230\u591a\u673a\u591a\u5361\u4e0d\u597d\u7528\u3001\u6548\u7387\u4f4e\u4e0b\u6216\u65e0\u6cd5\u5b9e\u73b0\u7b49\u95ee\u9898\u3002\u7528\u6237\u505a\u5206\u5e03\u5f0f\u8bad\u7ec3\u5e38\u5e38\u9700\u8981\u8f83\u9ad8\u7684\u5b66\u4e60\u6210\u672c\uff0c\u8fd8\u9700\u8981\u5173\u5fc3\u591a\u673a\u591a\u5361\u4e4b\u95f4\u6a21\u578b\u7684\u540c\u6b65\u95ee\u9898\u3002\u4e1a\u754c\u4e3a\u89e3\u51b3\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u7684\u75db\u70b9\uff0c\u4e0d\u4ec5\u6539\u8fdb\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u81ea\u8eab\uff0c\u8fd8\u7814\u53d1\u4e86\u591a\u79cd\u7b2c\u4e09\u65b9\u63d2\u4ef6\uff0c\u8b6c\u5982 NCCL\uff0cHorovod\uff0cBytePS\uff0cHugeCTR\uff0cMesh-tensorflow\uff0cGpipe \u7b49\u7b49\uff0c\u4f46\u4ecd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u6781\u81f4\u7684\u6027\u80fd\u9700\u6c42\u3002 OneFlow \u7684\u6838\u5fc3\u8bbe\u8ba1\u7406\u5ff5\u662f\uff0c\u8ba9\u591a\u673a\u591a\u5361\u5206\u5e03\u5f0f\u8bad\u7ec3\u9ad8\u6548\u5730\u534f\u540c\u8fd0\u8f6c\uff0c\u540c\u65f6\u8981\u8ba9\u7528\u6237\u5728\u591a\u673a\u591a\u5361\u7684\u8bad\u7ec3\u4f53\u9a8c\u4e0a\u5c31\u50cf\u5355\u5361\u4e00\u6837\u7b80\u5355\u5bb9\u6613\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ecb\u7ecdOneFlow \u5b9e\u73b0\u6b64\u76ee\u6807\u6700\u6838\u5fc3\u7684\u4e24\u70b9\u60f3\u6cd5\uff0c\u6765\u8bf4\u660e OneFlow \u662f\u5982\u4f55\u770b\u5f85\u5206\u5e03\u5f0f\u573a\u666f\u4e0b\u7684\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u7684\u3002","title":"\u4e00\u3001OneFlow \u7684\u8bbe\u8ba1\u76ee\u6807"},{"location":"basics_topics/essentials_of_oneflow.html#actor","text":"\u5173\u952e\u7279\u6027\uff1a \u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6 \u6d41\u6c34\u7ebf \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u4f20\u8f93\u88ab\u8ba1\u7b97\u63a9\u76d6 \u63a7\u5236\u903b\u8f91\u88ab\u6267\u884c\u903b\u8f91\u63a9\u76d6 \u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u5206\u4e3a Compile \u548c Runtime \u4e24\u4e2a\u65f6\u671f\uff0cCompile \u65f6\u671f\u628a\u7528\u6237\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\u3001\u5206\u5e03\u5f0f\u73af\u5883\u4fe1\u606f\u7b49\u7f16\u8bd1\u6210\u4e00\u4e2a\u9759\u6001\u56fe\u7684\u6267\u884c\u8ba1\u5212 Plan\uff0cPlan \u7531\u6267\u884c\u5355\u5143 Actor \u7684\u63cf\u8ff0\u4fe1\u606f\u7ec4\u6210\uff1bRuntime \u65f6\u671f\uff0c\u5404\u4e2a\u673a\u5668\u6839\u636e Plan \u91cc\u7684 Actor \u63cf\u8ff0\u4fe1\u606f\u771f\u5b9e\u5730\u521b\u5efa\u5c5e\u4e8e\u81ea\u5df1\u673a\u5668\u7684\u4f17\u591a Actor \u5b9e\u4f8b\uff0c\u7136\u540e\u542f\u52a8 Actor \u8fd0\u884c\u7cfb\u7edf\u3002\u6574\u4e2a\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u671f\u95f4\uff0cOneFlow \u7684\u6267\u884c\u57fa\u672c\u5355\u5143\u5c31\u662f Actor\uff0cActor \u5bf9\u5e94\u9759\u6001\u6267\u884c\u56fe\u4e0a\u7684\u8282\u70b9\uff0cActor \u4e4b\u95f4\u751f\u4ea7\u3001\u6d88\u8d39\u7684\u6570\u636e\u5b58\u50a8\u5728 Register \u4e2d\uff0cActor \u4e4b\u95f4\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u6765\u534f\u4f5c\u8fd0\u884c\u3002","title":"\u4e8c\u3001Actor\uff1a\u4e00\u5957\u7b80\u6d01\u7684\u673a\u5236\u89e3\u51b3\u51e0\u4e4e\u6240\u6709\u6280\u672f\u96be\u9898"},{"location":"basics_topics/essentials_of_oneflow.html#1-actor","text":"OneFlow \u7684\u8fd0\u884c\u65f6\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6\u5c31\u662f\u7528 Actor \u673a\u5236\u5b9e\u73b0\u7684\u3002\u5728\u6574\u4e2a\u7531 Actor \u6784\u6210\u7684\u9759\u6001\u56fe\u4e2d\uff0c\u6ca1\u6709\u4e00\u4e2a\u4e2d\u5fc3\u7684\u8c03\u5ea6\u8282\u70b9\uff0c\u6bcf\u4e2a Actor \u90fd\u53ea\u9700\u8981\u5173\u5fc3\u81ea\u5df1\u6240\u9700\u6570\u636e\u7684\u751f\u4ea7\u8005\uff08\u4e0a\u6e38 Actor \uff09\u548c\u81ea\u5df1\u751f\u4ea7\u7684\u6570\u636e\u7684\u6d88\u8d39\u8005\uff08\u4e0b\u6e38 Actor\uff09\u5373\u53ef\u3002\u8fd9\u6837\u5728\u8d85\u5927\u89c4\u6a21\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u573a\u666f\u4e0b\uff0c \u5b8c\u5168\u7684\u53bb\u4e2d\u5fc3\u5316 \u8c03\u5ea6\u53ef\u4ee5\u907f\u514d\u4e2d\u5fc3\u8c03\u5ea6\u7684\u5355\u70b9\u6027\u80fd\u74f6\u9888\u95ee\u9898\u3002 \u6bcf\u4e2a Actor \u5185\u90e8\u90fd\u6709\u4e00\u4e2a \u72b6\u6001\u673a \uff0cActor \u6536\u53d1\u7684\u6d88\u606f\u3001\u6267\u884c\u7684\u60c5\u51b5\u90fd\u4f1a\u6539\u53d8\u81ea\u5df1\u7684\u72b6\u6001\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cRegister \u662f\u5b58\u50a8\u5757\uff0c\u5b58\u653e\u4e86 Actor \u751f\u4ea7\u51fa\u6765\u7684\u6570\u636e\uff0c\u800c\u6d88\u606f\u662f\u5305\u542b\u4e86 Register \u5b58\u50a8\u5757\u7684\u5185\u5b58\u5730\u5740\u7684\u8f7b\u91cf\u7ea7\u6570\u636e\uff0cActor \u4e4b\u95f4\u4f20\u9012\u7684\u662f\u6d88\u606f\uff0c\u800c\u4e0d\u662f Register\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86 zero-copy\u3002 \u5f53 Actor \u6536\u5230\u4e86\u65b0\u6d88\u606f\uff0c\u5224\u65ad\u5b83\u6267\u884c\u6240\u9700\u8981\u6d88\u8d39\u7684 Register \u5df2\u7ecf\u5c31\u7eea\uff0c\u4e14\u5b83\u5c06\u8981\u751f\u4ea7\u7684\u6570\u636e\u6709\u7a7a\u95f2\u7684 Register \u53ef\u4ee5\u5199\u5165\u65f6\uff0c\u8fd9\u4e2a Actor \u5c31\u6267\u884c\uff08Act\uff09\u4e00\u6b21\uff0c\u751f\u4ea7\u51fa\u4e00\u4e2a Register\u3002 \u751f\u4ea7\u5b8c\u4ee5\u540e\uff0c\u8be5 Actor \u5c31\u5411\u9700\u8981\u6d88\u8d39\u8fd9\u4e2a Register \u7684\u90a3\u4e9b\u6d88\u8d39\u8005 Actor \u4eec\u53d1\u6d88\u606f\uff0c\u8868\u793a \u201c\u4f60\u4eec\u53ef\u4ee5\u6765\u8bfb\u53d6\u6211\u751f\u4ea7\u7684\u6570\u636e\u4e86\u201d \uff1b\u540c\u65f6\u8be5 Actor \u8fd8\u9700\u8981\u628a\u5b83\u6d88\u8d39\u5b8c\u7684\u90a3\u4e9b Register \u8fd8\u7ed9\u8fd9\u4e9b Regsiter \u7684\u751f\u4ea7\u8005 Actor \u4eec\uff0c\u8868\u793a \u201c\u6211\u7528\u5b8c\u4e86\u4f60\u4eec\u7684\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u56de\u6536\u4e86\u201d \u3002Actor \u5185\u90e8\u7684\u72b6\u6001\u673a\u5982\u56fe1 \u6240\u793a\u3002 \u56fe1 Actor \u5185\u90e8\u72b6\u6001\u673a \u5728 Actor \u542f\u52a8\u4e4b\u540e\uff0c\u4f1a\u6839\u636e\u4e0e\u5176\u4ed6 Actor \u4e4b\u95f4\u6536\u53d1\u6d88\u606f\u6765\u5207\u6362\u81ea\u5df1\u7684\u4e24\u4e2a\u72b6\u6001\uff1a \u7b49\u5f85\u72b6\u6001 \u548c \u6267\u884c\u72b6\u6001 \u3002 \u4e00\u4e2a Actor \u6536\u5230\u7684\u6d88\u606f\u4e00\u822c\u5206\u4e3a\u51e0\u4e2a\u7c7b\u578b\uff1a \u4e0a\u6e38\u7684\u751f\u4ea7\u8005 Actor \u53d1\u6765\u6d88\u606f\u8bf4\uff1a\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u751f\u4ea7\u7684\u6570\u636e\u4e86\uff1b \u4e0b\u6e38\u7684\u6d88\u8d39\u8005 Actor \u53d1\u6765\u6d88\u606f\u8bf4\uff1a\u6211\u7528\u5b8c\u4f60\u751f\u4ea7\u7684\u6570\u636e\u4e86\u3002 \u5f53\u8fd9\u4e2a\u6570\u636e\u88ab\u6240\u6709\u6d88\u8d39\u8005\u90fd\u7528\u5b8c\u4ee5\u540e\uff0c\u5c31\u53ef\u4ee5\u56de\u6536\u6210\u4e3a\u7a7a\u95f2\u5757\u7b49\u5f85\u4e0b\u4e00\u6b21\u88ab\u8be5 Actor \u91cd\u65b0\u751f\u4ea7\u4e00\u4efd\u65b0\u7684\u6570\u636e\u3002 \u4e00\u4e2a Actor \u6536\u5230\u6d88\u606f\u4ee5\u540e\u90fd\u4f1a\u53bb\u5c1d\u8bd5\u5224\u65ad\u5f53\u524d\u662f\u5426\u6ee1\u8db3\u6267\u884c\u6761\u4ef6\uff0c\u6267\u884c\u6761\u4ef6\u4e00\u822c\u6709\u4e24\u4e2a\uff1a \u9700\u8981\u8bfb\u53d6\u7684\u6570\u636e\u662f\u5426\u90fd\u5230\u9f50\u4e86\uff1b \u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u4ee5\u62ff\u6765\u88ab\u751f\u4ea7\u3002\u5f53\u6ee1\u8db3\u6267\u884c\u72b6\u6001\u4ee5\u540e Actor \u5c31\u5f00\u59cb\u8c03\u7528\u81ea\u5df1\u5185\u90e8\u7684 Kernel \u771f\u5b9e\u7684\u53bb\u8bfb\u5199\u6570\u636e\u3002 \u6267\u884c\u5b8c\u6bd5\u540e Actor \u4f1a\u5411\u4e0a\u4e0b\u6e38\u53d1\u6d88\u606f\uff1a \u5411\u4e0b\u6e38\u7684\u6d88\u8d39\u8005 Actor \u53d1\u6d88\u606f\u8bf4\uff1a\u6211\u521a\u751f\u4ea7\u4e86\u4e00\u5757\u6570\u636e\uff0c\u4f60\u53ef\u4ee5\u6765\u8bfb\u4e86\uff1b \u5411\u4e0a\u6e38\u7684\u751f\u4ea7\u8005 Actor \u53d1\u6d88\u606f\u8bf4\uff1a\u6211\u521a\u7528\u5b8c\u4e86\u4f60\u4e4b\u524d\u53d1\u7ed9\u6211\u7684\u6570\u636e\u4e86\u3002 Actor \u53ea\u9700\u8981\u5173\u5fc3\u4e0a\u4e0b\u6e38\u7684\u6d88\u606f\u5c31\u80fd\u5224\u65ad\u81ea\u5df1\u80fd\u4e0d\u80fd\u6267\u884c\u3002\u6bcf\u4e2a Actor \u90fd\u901a\u8fc7\u81ea\u5df1\u5185\u90e8\u7684\u72b6\u6001\u673a\u548c\u6536\u53d1\u6d88\u606f\u673a\u5236\u5b9e\u73b0\u4e86 \u5b8c\u5168\u53bb\u4e2d\u5fc3\u5316 \u7684\u5206\u5e03\u5f0f\u534f\u540c\u5de5\u4f5c\u3002","title":"1. Actor \u673a\u5236\u5b9e\u73b0\u53bb\u4e2d\u5fc3\u5316\u8c03\u5ea6"},{"location":"basics_topics/essentials_of_oneflow.html#2-actor","text":"\u4e0a\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86 Actor \u7684\u5185\u90e8\u72b6\u6001\u673a\uff0cActor \u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u548c\u6570\u636e\u4f20\u9012\u662f\u4f9d\u8d56 Register \u5b9e\u73b0\u7684\u3002\u4e00\u4e2a Actor \u662f\u5426\u80fd\u6267\u884c\uff0c\u53ea\u8ddf\u4e24\u4e2a\u6761\u4ef6\u76f8\u5173\uff1a \u81ea\u5df1\u6d88\u8d39\u7684\u90a3\u4e9b Register \u662f\u5426\u53ef\u8bfb\uff1b \u81ea\u5df1\u751f\u4ea7\u7684\u90a3\u4e9b Register \u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u5199\u3002 \u5bf9\u4e8e\u4e00\u4e2a Register\uff0c\u5982\u679c\u6211\u4eec\u8fd0\u884c\u65f6\u7ed9\u5b83\u5206\u914d\u591a\u4e2a\u7a7a\u95f2\u5757\uff0c\u90a3\u4e48\u76f8\u90bb\u7684\u4e24\u4e2a Actor \u5c31\u53ef\u4ee5\u540c\u65f6\u5de5\u4f5c\uff0c\u5de5\u4f5c\u65f6\u95f4\u91cd\u53e0\u8d77\u6765\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5404\u4e2a Actor \u4e4b\u95f4\u7684\u6d41\u6c34\u7ebf\u3002\u7406\u60f3\u72b6\u6001\u4e0b\u6574\u4e2a\u9759\u6001\u6267\u884c\u56fe\u7684\u6267\u884c\u65f6\u95f4\u5c31\u662f\u6574\u4e2a\u7cfb\u7edf\u4e2d\u662f\u6027\u80fd\u74f6\u9888\u7684\u90a3\u4e2a Actor \u8fd0\u884c\u7684\u603b\u65f6\u95f4\uff0c\u5176\u4f59 Actor \u7684\u6267\u884c\u65f6\u95f4\u90fd\u88ab\u6d41\u6c34\u7ebf\u63a9\u76d6\u8d77\u6765\u4e86\u3002 \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\u6765\u89e3\u91ca Actor \u673a\u5236\u4e0b\u7684\u6d41\u6c34\u7ebf\u662f\u5982\u4f55\u8fd0\u8f6c\u8d77\u6765\u7684\u3002\u56fe2\u662f\u4e00\u4e2a\u75313\u4e2a Actor\uff08a, b, c\uff09\u7ec4\u6210\u7684\u8ba1\u7b97\u56fe\u7684\u6267\u884c\u65f6\u5e8f\u56fe\u3002\u5176\u4e2d\u6df1\u7eff\u8272\u7684 Regst\u65b9\u5757\u8868\u793a\u6b63\u5728\u88ab\u4f7f\u7528\u7684 Register \u5757\uff0c\u767d\u8272\u7684 Regst \u65b9\u5757\u8868\u793a\u540c\u4e00\u4e2a Register \u7684\u5907\u7528\u7a7a\u95f2\u5757\u3002 1\uff09\u5728 Time0 \u65f6\u523b\uff0cActor a \u4ea7\u51fa\u4e86\u4e00\u4e2a Regst_a_0\uff0cActor b \u548c Actor c \u7531\u4e8e\u6ca1\u6709\u53ef\u8bfb\u7684 Register\uff0c\u6240\u4ee5\u5904\u5728\u7b49\u5f85\u72b6\u6001\u3002\u5047\u8bbe\u6bcf\u4e2a Actor\u7684\u6267\u884c\u65f6\u95f4\u90fd\u662f\u5355\u4f4d\u65f6\u95f4\u3002 2\uff09\u5230 Time1 \u65f6\u523b\uff0cActor a \u7ed9 Actor b \u53d1\u6d88\u606f\u8bf4\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u4ea7\u51fa\u7684 Regst_a_0 \u4e86\uff0cActor b \u6536\u5230\u4e86\u6d88\u606f\uff0c\u5e76\u68c0\u67e5\u81ea\u5df1\u751f\u4ea7\u7684 Register b \u662f\u5426\u6709\u7a7a\u95f2 Regst \u5757\u53ef\u7528\uff0c\u53d1\u73b0\u6709\u53ef\u7528\u7684 Regst_b_0\uff0c\u4e8e\u662f Time1 \u65f6\u523bActor b \u6267\u884c\uff0c\u8bfb\u53d6 Regst_a_0\uff0c\u5199 Regst_b_0\uff1b\u540c\u65f6 Actor a \u8fd8\u4f1a\u53bb\u770b\u81ea\u5df1\u662f\u5426\u6709\u7a7a\u95f2\u5757\u53ef\u5199\uff0c\u53d1\u73b0\u6709\uff0cTime1 \u65f6\u523b Actor a \u4e5f\u5728\u6267\u884c\uff0c\u5199 Regst_a_1\uff08\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cRegst_a_0 \u548c Regst_a_1 \u903b\u8f91\u4e0a\u662f\u5c5e\u4e8e\u540c\u4e00\u4e2a Register\uff0c\u53ea\u662f\u7a7a\u95f4\u4e0a\u5206\u6210\u4e86\u4e0d\u540c\u7684\u7a7a\u95f2\u5757\u5907\u4efd\u800c\u5df2\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u4efb\u52a1\u4e2d\uff0cRegst_a_0 \u548c Regst_a_1 \u91cc\u5b58\u653e\u7684\u662f\u540c\u4e00\u4e2a operator \u4ea7\u51fa\u7684\u4e0d\u540cbatch\u7684\u6570\u636e\uff09\u3002\u4e8e\u662f Actor a \u548c Actor b \u5c31\u5e76\u884c\u5de5\u4f5c\u8d77\u6765\u4e86\u3002Actor c \u7531\u4e8e\u6ca1\u6709\u6570\u636e\u53ef\u8bfb\uff0c\u4ecd\u5728\u7b49\u5f85\u3002 3\uff09\u5230 Time2 \u65f6\u523b\uff0cActor b \u751f\u4ea7\u51fa\u4e86 Regst_b_0\uff0c\u4e8e\u662f\u7ed9\u4e0b\u6e38\u7684\u6d88\u8d39\u8005Actor c \u53d1\u6d88\u606f\u8bf4\u4f60\u53ef\u4ee5\u6765\u8bfb\u6211\u751f\u4ea7\u7684 Regst_b_0\uff0c\u540c\u65f6\u7ed9\u4e0a\u6e38\u7684\u751f\u4ea7\u8005Actor a \u53d1\u6d88\u606f\u8bf4\u6211\u7528\u5b8c\u4e86\u4f60\u7684 Regst_a_0\u3002\u6b64\u65f6 Actor a \u5df2\u7ecf\u628a\u521a\u521a\u751f\u4ea7\u7684 Regst_a_1 \u53c8\u53d1\u7ed9\u4e86 Actor b\uff0cActor b \u68c0\u67e5\u81ea\u5df1\u4ecd\u6709 Regst_b_1 \u7a7a\u95f2\uff0c\u4e8e\u662f Actor b \u5f00\u59cb\u8bfb Regst_a_1\uff0c\u5199 Regst_b_1\uff1bActor c \u6536\u5230 Regst_b_0\uff0c\u53d1\u73b0\u81ea\u5df1\u6709 Regst_c_0 \u7a7a\u95f2\uff0c\u4e8e\u662f Actor c \u5f00\u59cb\u6267\u884c\uff0c\u8bfb Regst_b_0\uff0c\u5199 Regst_c_0\uff1bActor a \u6536\u5230\u4e86 Actor b \u7528\u5b8c\u8fd8\u56de\u6765\u7684 Regst_a_0\uff0c\u68c0\u67e5 Regst_a_0 \u6240\u6709\u7684\u6d88\u8d39\u8005\u90fd\u7528\u5b8c\u4e86\uff0c\u4e8e\u662f\u5c06 Regst_a_0 \u56de\u6536\uff0c\u6807\u8bb0\u4e3a\u7a7a\u95f2\u5757\uff0c\u540c\u65f6 Actor a \u8fd8\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u5199 Regst_a_2\u3002 \u56fe2 Actor \u751f\u4ea7\u6d88\u8d39\u5173\u7cfb\u548c\u6267\u884c\u65f6\u5e8f\u56fe \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5230\u4e86 Time2 \u65f6\u523b\uff0c\u5176\u5b9e Actor a\u3001b\u3001c \u90fd\u5728\u5de5\u4f5c\uff0c\u5728\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u4efb\u52a1\u4e2d\uff0cTime2 \u65f6\u523b Regst_b_0\u3001Regst_c_0 \u5b58\u653e\u7684\u662f Batch 0 \u7684\u6570\u636e\uff0cRegst_a_1\u3001Regst_b_1 \u5b58\u653e\u7684\u662f Batch 1 \u7684\u6570\u636e\uff0cRegst_a_2 \u5b58\u653e\u7684\u662f Batch 2 \u7684\u6570\u636e\u3002\u901a\u8fc7\u4e00\u4e2a Register \u6709\u591a\u4e2a\u7a7a\u95f2\u5757\u7684\u8bbe\u8ba1\uff0cActor \u673a\u5236\u5c31\u5b9e\u73b0\u4e86\u6d41\u6c34\u5e76\u884c\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u629b\u51fa\u4e00\u4e2a\u66f4\u8fdb\u4e00\u6b65\u6df1\u5165\u7684\u95ee\u9898\uff1a\u6574\u4e2a\u6570\u636e\u6d41\u7684\u6267\u884c\u50cf\u4e00\u4e2a\u7f51\u7edc\uff0c\u6570\u636e\u5728\u7f51\u7edc\u4e2d\u7684\u6d41\u52a8\u5c31\u5b8c\u6210\u4e86\u8ba1\u7b97\uff0c\u5982\u4f55\u907f\u514d\u751f\u4ea7\u8005\u751f\u4ea7\u592a\u5feb\uff0c\u6d88\u8d39\u8005\u6d88\u8d39\u4e0d\u53ca\uff0c\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u751f\u4ea7\u8005\u751f\u4ea7\u592a\u6162\uff0c\u6d88\u8d39\u8005\u611f\u5230\u9965\u997f\u7684\u95ee\u9898\uff0c\u8fd9\u6d89\u53ca\u5230\u5bf9\u8ba1\u7b97\u3001\u5185\u5b58\u3001\u4f20\u8f93\u5e26\u5bbd\u7684\u89c4\u5212\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7cfb\u7edf\u7684\u74f6\u9888\u4e4b\u5904\u6700\u5bbd\uff0c\u9700\u8981\u89e3\u51b3\u6d41\u63a7\uff08flow control\uff09\u7684\u95ee\u9898\u4ee5\u53ca\u8d44\u6e90\u5206\u914d\u95ee\u9898\uff08\u5982\u6bcf\u4e2a Actor \u7684 Register \u5230\u5e95\u5206\u914d\u51e0\u4e2a\u5185\u5b58\u5757\u914d\u989d\uff09\uff0c\u8fd9\u975e\u5e38\u5173\u952e\uff0c\u4e5f\u662f OneFlow \u7cfb\u7edf\u5df2\u89e3\u51b3\u7684\u95ee\u9898\u3002","title":"2. Actor \u673a\u5236\u5b9e\u73b0\u6d41\u6c34\u7ebf"},{"location":"basics_topics/essentials_of_oneflow.html#3","text":"\u5728\u591a\u673a\u591a\u5361\u7684\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u5404\u4e2a\u673a\u5668\u548c\u5404\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\u5f80\u5f80\u662f\u5f71\u54cd\u7cfb\u7edf\u7684\u6a2a\u5411\u6269\u5c55\u6027\u7684\u6700\u91cd\u8981\u56e0\u7d20\uff0c\u5982\u679c\u4f20\u8f93\u5f00\u9500\u53ef\u4ee5\u88ab\u8ba1\u7b97\u5f00\u9500\u63a9\u76d6\uff0c\u90a3\u4e48\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u5c31\u53ef\u4ee5\u8fbe\u5230\u7406\u60f3\u7684\u7ebf\u6027\u52a0\u901f\u6bd4\u3002\u76f8\u8f83\u4e8e\u5176\u4ed6\u7684\u6846\u67b6\uff0cOneFlow \u628a\u6570\u636e\u642c\u8fd0\u89c6\u4e3a\u8ddf\u6570\u636e\u8ba1\u7b97\u540c\u7b49\u5730\u4f4d\u7684\u64cd\u4f5c\uff0c\u63d0\u51fa \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11 \u7684\u601d\u60f3\u3002 \u5df2\u6709\u6846\u67b6\u5728\u7f16\u8bd1\u671f\u7684\u5173\u6ce8\u7126\u70b9\u662f\u6570\u636e\u8ba1\u7b97\uff0c\u8ba4\u4e3a\u6570\u636e\u642c\u8fd0\u662f\u80cc\u540e\u9690\u5f0f\u53d1\u751f\u7684\uff0c\u56e0\u6b64\u5728\u9759\u6001\u5206\u6790\u8ba1\u7b97\u56fe\u65f6\u7565\u8fc7\u8ba1\u7b97\u548c\u642c\u8fd0\u7684\u91cd\u53e0\u7f16\u6392\uff0cOneFlow \u5728\u8ba1\u7b97\u56fe\u4e2d\u663e\u5f0f\u8868\u8fbe\u4e86\u6570\u636e\u642c\u8fd0\uff0c\u800c\u4e14\u5728\u9759\u6001\u5206\u6790\u65f6\u540c\u7b49\u5bf9\u5f85\u6570\u636e\u642c\u8fd0\u548c\u6570\u636e\u8ba1\u7b97\uff0c\u4ee5\u6700\u5927\u5316\u91cd\u53e0\u642c\u8fd0\u548c\u8ba1\u7b97\u3002 \u5728\u6700\u7ec8\u7684\u6267\u884c\u56fe\u4e2d\uff0c\u6570\u636e\u642c\u8fd0\u64cd\u4f5c\u4e5f\u662f\u4e00\u4e2a\u4e2a Actor\u3002\u9664\u4e86\u5728\u8bbe\u5907\u4e0a\u505a\u6570\u636e\u8ba1\u7b97\u7528\u7684 Actor \u4ee5\u5916\uff0c\u8fd8\u6709\u8ba1\u7b97\u673a\u5185\u5b58\u5230 GPU \u663e\u5b58\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d Actor\uff0c\u673a\u5668\u4e4b\u95f4\u505a\u7f51\u7edc\u901a\u4fe1\u7684\u7f51\u7edc Actor\uff0c\u8d1f\u8d23\u6570\u636e\u7684\u5207\u5206\u3001\u5408\u5e76\u3001\u590d\u5236\u7684Actor\uff0c\u8d1f\u8d23\u8bfb\u53d6\u78c1\u76d8\u6570\u636e\u7684 Actor\uff0c\u8d1f\u8d23\u52a0\u8f7d\u4fdd\u5b58\u6a21\u578b\u7684 Actor \u7b49\u7b49\u3002\u5f88\u591a\u5176\u4ed6\u6846\u67b6\u90fd\u628a\u6570\u636e\u52a0\u8f7d\u3001\u591a\u5361\u6a21\u578b\u68af\u5ea6\u7684\u540c\u6b65\u3001\u7f51\u7edc\u3001\u6a21\u578b\u52a0\u8f7d\u66f4\u65b0\u7b49\u5206\u522b\u505a\u6210\u4e00\u4e2a\u5355\u72ec\u7684\u6a21\u5757\uff0c\u800c OneFlow \u7684\u8bbe\u8ba1\u662f\u6240\u6709\u7684\u529f\u80fd\u90fd\u5728\u4e00\u5f20\u7531Actor\u7ec4\u6210\u7684\u9759\u6001\u6267\u884c\u56fe\u91cc\u5b9e\u73b0\u4e86\u3002OneFlow \u8fd9\u6837\u7684\u8bbe\u8ba1\u4e0d\u4ec5\u7b80\u6d01\u3001\u4f18\u96c5\uff0c\u8fd8\u975e\u5e38\u9ad8\u6548\u3002 \u56fe 3 \u6570\u636e\u662f\u5982\u4f55\u4ece\u4e00\u4e2a\u8bbe\u5907\u642c\u8fd0\u5230\u53e6\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684 \u56fe3\u8868\u793a\u4e86\u6ca1\u6709 GPU-Direct \u7684\u51b5\u4e0b\uff0c\u5728 OneFlow \u7684 Runtime \u9636\u6bb5\uff0c\u4e00\u4e2a\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\u8282\u70b9\u5982\u679c\u6d88\u8d39\u4e86\u53e6\u4e00\u4e2a\u8bbe\u5907\u7684\u8ba1\u7b97\u8282\u70b9\uff0c\u6570\u636e\u662f\u5982\u4f55\u642c\u8fd0\u8fc7\u53bb\u7684\u3002","title":"3. \u6570\u636e\u642c\u8fd0\u662f\u4e00\u7b49\u516c\u6c11"},{"location":"basics_topics/essentials_of_oneflow.html#4","text":"\u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u6240\u6709\u7684\u51fa\u53d1\u70b9\u90fd\u662f\u5e0c\u671b\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5e76\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6700\u4f18\u7684\u5206\u5e03\u5f0f\u6027\u80fd\u3002\u6bd4\u5982\u8003\u8651\u5230\u5206\u5e03\u5f0f\u8bad\u7ec3\u6a21\u578b\u68af\u5ea6\u540c\u6b65\u65f6\uff0c\u663e\u5b58\u5230\u5185\u5b58\u7684\u4f20\u8f93\u5e26\u5bbd\u9ad8\u4e8e\u673a\u5668\u4e4b\u95f4\u7684\u7f51\u7edc\u4f20\u8f93\u5e26\u5bbd\uff0cOneFlow \u4f1a\u505a\u4e24\u7ea7\u7684 scatter \u548c gather \u64cd\u4f5c\uff08\u672c\u673a\u7684\u548c\u5404\u4e2a\u673a\u5668\u4e4b\u95f4\u7684\uff09\uff0c\u7528\u4e8e\u589e\u52a0 locality\uff0c\u63d0\u9ad8\u6574\u4f53\u6027\u80fd\u3002 \u53c8\u6bd4\u5982\u5728\u5f02\u6b65\u542f\u52a8\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\u65f6\uff0cPython \u7aef\u7528\u6237\u7684\u63a7\u5236\u903b\u8f91\u8ddf OneFlow \u8fd0\u884c\u65f6\u7684\u6267\u884c\u56fe\u662f\u5e76\u884c\u6267\u884c\u7684\uff0c\u540c\u65f6 OneFlow \u6709\u4e00\u5957\u4e92\u65a5\u4e34\u754c\u533a\u7684\u8bbe\u8ba1\u4fdd\u8bc1\u6267\u884c\u7684\u9ad8\u6548\u6027\u548c\u6b63\u786e\u6027\u3002 \u6570\u636e\u52a0\u8f7d\u90e8\u5206\u65e0\u8bba\u662f\u4ece\u78c1\u76d8\u8bfb\u6570\u636e\u8fd8\u662f\u4ece Python \u7aef\u5582\u6570\u636e\uff0cOneFlow \u90fd\u80fd\u4fdd\u8bc1\u5c3d\u53ef\u80fd\u5e76\u884c\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8bbe\u5907\u4e0d\u4f1a\u56e0\u4e3a\u8981\u7b49\u6570\u636e\u800c\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002 \u5df2\u6709\u6846\u67b6\u5982\u679c\u60f3\u8981\u5c3d\u53ef\u80fd\u91cd\u53e0\u6570\u636e\u642c\u8fd0\u548c\u8ba1\u7b97\uff0c\u4e00\u822c\u501f\u52a9\u591a\u5c42\u56de\u8c03\uff08Callback\uff09\u51fd\u6570\uff0c\u5f53\u5d4c\u5957\u5c42\u6b21\u8fc7\u591a\u65f6\uff0c\u4f1a\u9047\u5230\u6240\u8c13\u7684 Callback Hell \u9ebb\u70e6\uff0c\u6b63\u786e\u6027\u548c\u53ef\u8bfb\u6027\u90fd\u53ef\u80fd\u4e0b\u964d\u3002\u4f46\u5728 OneFlow \u4e2d\uff0c\u4ee5\u4e0a\u7684\u8fd9\u4e9b\u5e76\u884c\u5e76\u53d1\u7279\u6027\uff0c\u90fd\u662f\u5728\u8fd9\u4e00\u5957\u7b80\u6d01\u7684 Actor \u673a\u5236\u4e0b\u5b9e\u73b0\u7684\uff0c\u89e3\u51b3\u4e86\u4ee4\u4eba\u5934\u79c3\u7684 Callback Hell \u95ee\u9898\u3002 \u6b64\u5916\uff0c\u5728\u591a\u673a\u7684\u7f51\u7edc\u901a\u4fe1\u90e8\u5206\uff0cOneFlow \u5e95\u5c42\u7684\u7f51\u7edc\u901a\u4fe1\u5e93\u539f\u751f\u652f\u6301 RDMA \u7684\u9ad8\u6027\u80fd\u901a\u4fe1\uff0c\u4e5f\u6709\u4e00\u5957\u57fa\u4e8e epoll \u7684\u9ad8\u6548\u901a\u4fe1\u8bbe\u8ba1\u3002\u800c\u76ee\u524d\u6700\u6d41\u884c\u7684 Pytorch\uff0c\u591a\u673a\u8fd8\u9700\u8981\u901a\u8fc7 RPC \u6765\u505a\u6570\u636e\u540c\u6b65\u3002","title":"4. \u5c3d\u53ef\u80fd\u5e76\u884c"},{"location":"basics_topics/essentials_of_oneflow.html#oneflow_2","text":"OneFlow \u662f\u76ee\u524d\u5206\u5e03\u5f0f\u573a\u666f\u4e2d\u652f\u6301\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u7b49\u6700\u6613\u7528\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002\u7528\u6237\u53ea\u9700\u8981\u50cf\u5355\u5361\u4e00\u6837\u53bb\u642d\u5efa\u7f51\u7edc\u6a21\u578b\uff0c\u5e76\u544a\u8bc9 OneFlow \u6709\u54ea\u4e9b\u673a\u5668\u54ea\u4e9b\u5361\uff0cOneFlow \u5c31\u4f1a\u7528\u6700\u9ad8\u6548\u7684\u65b9\u5f0f\u628a\u8fd9\u4e9b\u673a\u5668\u548c\u8bbe\u5907\u4f7f\u7528\u8d77\u6765\u3002 \u8fd9\u6e90\u4e8e OneFlow \u7684\u4e00\u5957\u72ec\u7279\u7684\u8bbe\u8ba1\uff1aConsistentView\uff08\u4e00\u81f4\u6027\u89c6\u89d2\uff09\u3002\u5bf9\u4e8e\u591a\u673a\u591a\u5361\uff0cOneFlow \u4f1a \u628a\u5b83\u62bd\u8c61\u6210\u4e00\u4e2a\u8d85\u7ea7\u5927\u7684\u8bbe\u5907 \uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u903b\u8f91\u4e0a\u7684\u8bbe\u5907\uff0c\u8fd9\u4e2a\u903b\u8f91\u8bbe\u5907\u7684\u663e\u5b58\u662f\u5b9e\u9645\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u7684\u663e\u5b58\u4e4b\u548c\uff0c\u8fd9\u4e2a\u903b\u8f91\u8bbe\u5907\u7684\u7b97\u529b\u4e5f\u662f\u5b9e\u9645\u591a\u4e2a\u7269\u7406\u8bbe\u5907\u7684\u7b97\u529b\u4e4b\u548c\u3002 \u7528\u6237\u53ea\u9700\u8981\u5728\u8fd9\u4e2a\u903b\u8f91\u4e0a\u7684\u8d85\u7ea7\u8bbe\u5907\u91cc\uff0c\u5b9a\u4e49\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u662f\u5982\u4f55\u6784\u5efa\u7684\uff0c\u5176\u4f59\u7684\u4fbf\u4e0d\u9700\u8981\u7528\u6237\u6765\u64cd\u4f5c\uff0c\u7531 OneFlow \u6765\u5b8c\u6210\u903b\u8f91\u4e0a\u7684\u8bbe\u5907\u5230\u7269\u7406\u4e0a\u7684\u8bbe\u5907\u7684\u6620\u5c04\u3002 \u8fd9\u91cc\u5148\u660e\u786e\u4e24\u4e2a\u6982\u5ff5\uff1a\u201c\u903b\u8f91\u4e0a\u7684\u201d\u548c\u201c\u7269\u7406\u4e0a\u7684\u201d\u3002\u201c\u903b\u8f91\u4e0a\u7684\u201d\u8868\u793a OneFlow \u628a\u5206\u5e03\u5f0f\u96c6\u7fa4\u62bd\u8c61\u6210\u4e00\u4e2a\u8d85\u7ea7\u8ba1\u7b97\u673a\u4e4b\u540e\u7684\u8ba1\u7b97\u548c\u6570\u636e\uff0c\u201c\u7269\u7406\u4e0a\u7684\u201d\u8868\u793a\u90a3\u4e9b\u771f\u5b9e\u7684\u90e8\u7f72\u5230\u5404\u4e2a\u673a\u5668\u548c\u8bbe\u5907\u4e0a\u7684\u8ba1\u7b97\u548c\u6570\u636e\u3002 \u6df1\u5ea6\u5b66\u4e60\u7f51\u7edc\u662f\u7531 Op \u6784\u6210\u7684\u8ba1\u7b97\u56fe\uff0cOp \u4e4b\u95f4\u751f\u4ea7\u6d88\u8d39 Tensor \u6570\u636e\u3002\u5728\u591a\u673a\u591a\u5361\u7684\u73af\u5883\u4e0b\uff0c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Op \u4f1a\u5bf9\u5e94\u591a\u4e2a\u771f\u5b9e\u7684\u7269\u7406\u4e0a\u7684 Op\uff0c\u6bcf\u4e2a\u7269\u7406\u4e0a\u7684 Op \u5b9e\u9645\u6267\u884c\u7684\u8ba1\u7b97\u90fd\u662f\u8fd9\u4e2a\u903b\u8f91 Op \u8ba1\u7b97\u7684\u4e00\u90e8\u5206\uff0c\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Tensor \u4e5f\u4f1a\u5bf9\u5e94\u591a\u4e2a\u7269\u7406\u4e0a\u7684 Tensor\uff0c\u6bcf\u4e2a\u7269\u7406\u4e0a\u7684 Tensor \u90fd\u662f\u903b\u8f91 Tensor \u7684\u4e00\u90e8\u5206\u3002 \u5bf9\u4e8e\u5176\u4ed6\u7684\u6846\u67b6\u5b9a\u4e49\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u6bcf\u5f20\u5361\u662f\u4e00\u4e2a\u201cworld\u201d\uff0c\u591a\u5361\u4e4b\u95f4\u6839\u636e\u66b4\u9732\u51fa\u6765\u7684\u63a5\u53e3\u6765\u540c\u6b65\u6a21\u578b\u68af\u5ea6\uff1b\u800c\u5bf9\u4e8e OneFlow \u800c\u8a00\uff0c\u591a\u673a\u591a\u5361\u4e5f\u90fd\u662f\u4e00\u4e2a\u201cworld\u201d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u5957 Placement+SBP \u7684\u65b9\u5f0f\u505a\u5168\u5c40\u7684\u7edf\u7b79\u7ba1\u7406\u3002","title":"\u4e09\u3001OneFlow \u5982\u4f55\u505a\u5230\u5206\u5e03\u5f0f\u6700\u6613\u7528"},{"location":"basics_topics/essentials_of_oneflow.html#placement","text":"\u5728 OneFlow \u7684\u8ba1\u7b97\u56fe\u642d\u5efa\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u8ba1\u7b97 Op \u90fd\u6709\u4e00\u4e2a\u5c5e\u6027\u53eb\u505a Placement\uff0c\u8868\u793a\u4e86\u8be5\u903b\u8f91\u4e0a\u7684 Op\uff0c\u662f\u8981\u90e8\u7f72\u5230\u54ea\u4e9b\u673a\u5668\u54ea\u4e9b\u8bbe\u5907\u4e0a\u7684\u3002\u5bf9\u4e8e\u5e38\u89c1\u7684\u6570\u636e\u5e76\u884c\uff0c\u5c31\u662f\u6240\u6709\u7684 Op \u90fd\u90e8\u7f72\u5230\u6240\u6709\u7684\u8bbe\u5907\u4e0a\u3002\u4f46 OneFlow \u4e5f\u652f\u6301\u7528\u6237\u6307\u5b9a Op \u7684 Placement\uff0c\u6bd4\u5982\u5f53\u7f51\u7edc\u8fc7\u5927\u5355\u5361\u6839\u672c\u653e\u4e0d\u4e0b\u7684\u65f6\u5019\uff0c\u5728 OneFlow \u53ef\u4ee5\u8ba9\u7f51\u7edc\u7684\u524d\u4e00\u90e8\u5206\u5728\u4e00\u5f20\u5361\u4e0a\uff0c\u540e\u4e00\u90e8\u5206\u5728\u53e6\u4e00\u5f20\u5361\u4e0a\uff0c\u7528\u4e00\u79cd\u201c\u63a5\u529b\u201d\u7684\u65b9\u5f0f\u5de5\u4f5c\uff0c\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u3002 \u56fe4\u5c55\u793a\u4e86\u4e00\u79cd\u53ef\u80fd\u7684 Placement \u4f8b\u5b50\u3002\u7528\u6237\u5b9a\u4e49\u4e86\u4e00\u4e2a\u75313\u4e2a Op \u7ec4\u6210\u7684\u7f51\u7edc\uff1aOp_0 -> Op_1 -> Op_2\u3002 \u5176\u4e2d Op_0 \u548c Op_1 \u7684 Placement \u662f Device 0\uff0cOp_2 \u7684 Placement \u662f Device 1\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u6d41\u6c34\u5e76\u884c\u7684\u4f8b\u5b50\uff0cOneflow \u4f1a\u81ea\u52a8\u5728 Op_1 \u548c Op_2 \u4e4b\u95f4\u63d2\u5165\u9700\u8981\u7684\u6570\u636e\u642c\u8fd0\u7684 Copy Op\u3002 \u56fe4 \u4e00\u4e2a\u6d41\u6c34\u5e76\u884c\u7684Placement\u793a\u4f8b\u56fe","title":"Placement"},{"location":"basics_topics/essentials_of_oneflow.html#sbp","text":"SBP \u662f OneFlow \u72ec\u6709\u7684\u6982\u5ff5\uff0c\u4ed6\u662f\u4e09\u4e2a\u5355\u8bcd\u7684\u9996\u5b57\u6bcd\u7ec4\u5408\uff1aSplit\u3001Broadcast\u3001PartialSum\uff08\u4ee5 PartialSum \u4e3a\u4f8b\uff0c\u5b9e\u9645\u4e0a\u8fd8\u53ef\u4ee5\u662fPartialMin\u3001 PartialMax \u7b49 reduce \u64cd\u4f5c\uff09\uff0c\u5168\u79f0\u53eb SbpParallel\uff0c\u8868\u793a\u4e00\u79cd\u903b\u8f91\u4e0a\u7684 Tensor \u8ddf\u7269\u7406\u4e0a\u7684\u591a\u4e2a Tensor \u7684\u6620\u5c04\u5173\u7cfb\u3002 \u5176\u4e2d Split \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u662f\u903b\u8f91 Tensor \u6309\u7167\u67d0\u4e00\u7ef4\u5ea6\u5207\u5206\u540e\u5f97\u5230\u7684\uff0c Split \u6709\u4e2a\u53c2\u6570 axis\uff0c\u8868\u793a\u5207\u5206\u7684\u7ef4\u5ea6\uff0c\u5982\u679c\u628a\u591a\u4e2a\u7269\u7406\u4e0a\u7684 Tensor \u6309\u7167 Split \u7684\u7ef4\u5ea6\u8fdb\u884c\u62fc\u63a5\uff0c\u5c31\u80fd\u8fd8\u539f\u51fa\u903b\u8f91 Tensor\u3002 Broadcast \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u662f\u8ddf\u903b\u8f91\u4e0a\u7684 Tensor \u5b8c\u5168\u76f8\u540c\u7684\u3002 PartialSum \u8868\u793a\u7269\u7406\u4e0a\u7684 Tensor \u867d\u7136\u8ddf\u903b\u8f91\u4e0a\u7684 Tensor \u5f62\u72b6\u4e00\u81f4\uff0c\u4f46\u662f\u7269\u7406\u4e0a\u7684 Tensor \u91cc\u7684\u503c\u662f\u903b\u8f91 Tensor \u91cc\u5bf9\u5e94\u4f4d\u7f6e\u7684\u4e00\u90e8\u5206\uff0c\u5982\u679c\u628a\u7269\u7406\u4e0a\u7684\u591a\u4e2a Tensor \u6309\u7167\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\uff0c\u5373\u53ef\u8fd8\u539f\u51fa\u903b\u8f91\u4e0a\u7684 Tensor\u3002 \u56fe5\u5c55\u793a\u4e86 SBP \u7684\u7b80\u5355\u793a\u4f8b\u3002 \u56fe5 \u51e0\u79cd SbpParallel \u7684\u7b80\u5355\u60c5\u5f62 SbpSignature \u662f\u4e00\u4e2a SbpParallel \u7684\u96c6\u5408\uff0c\u5728 OneFlow \u7684\u8bbe\u8ba1\u91cc\u662f Op \u7684\u5c5e\u6027\uff0c\u5b83\u63cf\u7ed8\u4e86\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 Op \u88ab\u6620\u5c04\u6210\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u591a\u4e2a\u7269\u7406\u4e0a\u7684Op\u4ee5\u540e\uff0c\u8fd9\u4e9b\u7269\u7406\u4e0a\u7684 Op \u662f\u5982\u4f55\u770b\u5f85\u4ed6\u4eec\u8f93\u5165\u8f93\u51faTensor\u5728\u903b\u8f91\u4e0a\u548c\u7269\u7406\u4e0a\u7684\u6620\u5c04\u5173\u7cfb\u7684\u3002\u4e00\u4e2a Op \u4f1a\u6709\u591a\u4e2a\u5408\u6cd5\u7684 SbpSignature\uff0c\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u5408\u6cd5 signature \u5c31\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u662f Broadcast\uff0c\u8fd9\u8868\u793a\u4e86\u8fd9\u4e2a Op \u9700\u8981\u6574\u4e2a\u903b\u8f91\u4e0a\u7684 Tensor \u6570\u636e\u3002 \u5f53\u7528\u6237\u6784\u5efa\u7684\u903b\u8f91\u4e0a\u7684\u8ba1\u7b97\u56fe\u786e\u5b9a\u4ee5\u540e\uff0cOneFlow \u5728 Compiler \u751f\u6210\u5206\u5e03\u5f0f\u7684\u7269\u7406\u4e0a\u7684\u6267\u884c\u56fe\u65f6\uff0c\u4f1a\u8003\u8651\u6bcf\u4e2a Op \u7684 Placement \u548c\u8be5 Op \u5141\u8bb8\u7684\u5408\u6cd5 SbpSignature \u5217\u8868\uff0c\u5728\u5176\u4e2d\u9009\u62e9\u4e00\u4e2a\u4f20\u8f93\u5f00\u9500\u6700\u5c0f\u7684 SbpSignature \u4f5c\u4e3a\u672c\u6b21\u8bad\u7ec3\u7684 SbpSignature\uff0c\u7528\u4e8e\u6307\u5bfc Compiler \u751f\u6210\u6700\u9ad8\u6548\u7684\u6267\u884c\u56fe\u3002 \u5173\u4e8e Op \u7684\u5408\u6cd5 SbpSignature \u7684\u5217\u8868\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u77e9\u9635\u4e58\u6cd5\uff08matmul\uff09\u7684Op\u7684\u4f8b\u5b50\u3002 \u5b9a\u4e49: Y = matmul(A, B) , A , B , Y \u90fd\u662f Tensor \uff0c\u8868\u793a Y = AB \u3002\u90a3\u4e48\u81f3\u5c11\u5b58\u5728\u4e24\u79cd\u5408\u6cd5\u7684 SbpSignature\uff1a 1) Y: Split(0) , A: Split(0) , B: Broadcast 2) Y: Split(1) , A: Broadcast , B: Split(1) \u4e24\u79cd\u5408\u6cd5\u7684 signature \u5728\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u793a\u610f\u56fe\u5982\u56fe6\u6240\u793a\u3002\u5047\u8bbe\u903b\u8f91\u4e0a\u7684 MatMul \u7684\u8f93\u5165\u8f93\u51fa Tensor \u7684\u5f62\u72b6\u662f\uff1a A(64, 10) \u00d7 B(10, 50) -> Y(64, 50) \u56fe6 MatMul\u7684\u4e24\u79cd\u5408\u6cd5SbpSignature \u4e14\u8be5 Op \u5206\u5e03\u5728\u4e24\u4e2a\u8bbe\u5907\u4e0a\u3002\u5728\u7b2c\u4e00\u79cd SbpSignature \u4e0b\uff0c0\u53f7\u8bbe\u5907\u4e0a\u7684A\u662f\u903b\u8f91\u4e0a A \u7684\u524d\u4e00\u534a\uff0c1\u53f7\u8bbe\u5907\u4e0a\u7684 A \u662f\u903b\u8f91 A \u7684\u540e\u4e00\u534a\uff08\u6309\u7167\u7b2c0\u7ef4\u5207\u5206\uff09\uff0c\u800c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684 B \u8ddf\u903b\u8f91\u4e0a\u7684 B \u5b8c\u5168\u4e00\u81f4\uff0c\u4e24\u4e2a\u8bbe\u5907\u8f93\u51fa\u7684 Y \u5206\u522b\u662f\u903b\u8f91\u4e0a\u7684 Y \u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u3002\u540c\u6837\u53ef\u4ee5\u5206\u6790\u7b2c\u4e8c\u79cd SbpSignature\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5f53 A \u662f\u6570\u636e\uff0cB \u662f\u6a21\u578b\u7684\u65f6\u5019\uff0c\u7b2c\u4e00\u79cd SbpSignature \u5c31\u662f \u6570\u636e\u5e76\u884c \uff0c\u7b2c\u4e8c\u79cd SbpSignature \u5c31\u662f \u6a21\u578b\u5e76\u884c \u3002\u5982\u679c\u4e24\u4e2a\u76f8\u90bb\u7684 MatMul op\uff0c\u524d\u4e00\u4e2a\u4f7f\u7528\u7b2c\u4e00\u79cd SbpSignature\uff0c\u540e\u4e00\u4e2a\u4f7f\u7528\u7b2c\u4e8c\u79cd SbpSignature\uff0c\u6574\u4e2a\u7f51\u7edc\u5c31\u5b9e\u73b0\u4e86 \u6df7\u5408\u5e76\u884c \u3002 \u56fe7\u662f\u4e00\u4e2a\u6df7\u5408\u5e76\u884c\u7684\u793a\u4f8b\uff0c\u5b9a\u4e49\u4e86 Y0 = MatMul_0(A0, B0) , Y1 = MatMul_1(Y0, B1) \u8fd9\u6837\u4e00\u4e2a\u7531\u4e24\u4e2aop\u7ec4\u6210\u7684\u8ba1\u7b97\u56fe\uff0c\u5176\u4e2dA0, Y0, Y1\u662f\u6570\u636eTensor\uff0cB0, B1 \u662f\u6a21\u578bTensor\u3002 \u56fe7 \u6df7\u5408\u5e76\u884c\u793a\u4f8b \u5728\u56fe7\u4e2d MatMul_0 \u4ea7\u51fa\u7684 Y0 \u88ab MatMul_1 \u6d88\u8d39\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a op \u5bf9\u540c\u4e00\u4e2a Tensor \u7684 SBP \u770b\u5f85\u65b9\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\uff0cMatMul_0 \u8ba4\u4e3a Y0 \u662f Split(axis=0) \u5207\u5206\uff0c\u4f46\u662f MatMul_1 \u9700\u8981\u4e00\u4e2a Broadcast \u7684 Y0 \u8f93\u5165\u3002\u8fd9\u65f6\u5019OneFlow\u4f1a\u81ea\u52a8\u63d2\u5165\u4e00\u4e2a\u201c\u4e07\u80fd\u201d\u7684 Boxing Op \u505a\u5fc5\u8981\u7684\u6570\u636e\u88c1\u526a\u3001\u62fc\u63a5\u3001\u642c\u8fd0\u548c\u6c42\u548c\u7b49\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6240\u6709\u7684Op\u90fd\u53ef\u4ee5\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e0b\u9ad8\u6548\u7684\u62ff\u5230\u81ea\u5df1\u60f3\u8981\u7684\u6570\u636e\u3002 \u53e6\u5916\u5728\u6570\u636e\u5e76\u884c\u7684\u65f6\u5019\uff0c\u8bad\u7ec3\u7684\u524d\u5411\u6a21\u578b Tensor \u7684\u662f Broadcast\uff0c\u5bf9\u5e94\u53cd\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u5c31\u662fPartialSum\uff0c\u5f53 Optimizer \u9700\u8981\u5168\u90e8\u7684\u68af\u5ea6\u6765\u66f4\u65b0\u6a21\u578b\u65f6\uff0c\u5c31\u4f1a\u89e6\u53d1 OneFlow \u7684 Boxing \u673a\u5236\u8fdb\u884c\u9ad8\u6548\u7684\u68af\u5ea6\u540c\u6b65\u5de5\u4f5c\u3002","title":"SBP"},{"location":"basics_topics/essentials_of_oneflow.html#_1","text":"OneFlow \u7684\u8fd9\u5957 Placement + SBP + Boxing \u7684\u673a\u5236\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7528\u6237\u5b9a\u4e49\u7684\u8ba1\u7b97\u56fe\u4e2d\u7684 Op\u3001Tensor \u4ee5\u4efb\u610f\u7684\u65b9\u5f0f\u5206\u5e03\u5728\u5404\u4e2a\u673a\u5668\u548c\u5404\u4e2a\u8bbe\u5907\u4e0a\uff0c\u65e0\u8bba\u662f\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u6d41\u6c34\u5e76\u884c\uff0c\u5bf9\u4e8e OneFlow \u800c\u8a00\uff0c\u90fd\u53ea\u662f\u4e00\u4e2a\u7279\u5b9a Placement \u4e0b\u7684\u7279\u5b9a SbpSignature \u7684\u7ec4\u5408\u800c\u5df2\uff0c\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u914d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4ea4\u7ed9 OneFlow \u6765\u505a\u81ea\u52a8\u7684\u5904\u7406\u3002 \u53e6\u5916\uff0c\u65e9\u5728\u5fae\u8f6f\u63a8\u51fa ZeRO-2 \u6846\u67b6\u4e4b\u524d\uff0cOneFlow \u5c31\u5df2\u7ecf\u652f\u6301\u4e86\u7c7b\u4f3c\u7684\u529f\u80fd\uff0c\u591a\u673a\u591a\u5361\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u6a21\u578b Tensor \u90fd\u53ea\u4fdd\u5b58\u5728\u5176\u4e2d\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff0c\u964d\u4f4e\u68af\u5ea6\u8ba1\u7b97\u4e2d\u7684\u5185\u5b58\u5360\u7528\u3002","title":"\u6700\u6613\u7528\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6846\u67b6"},{"location":"basics_topics/essentials_of_oneflow.html#_2","text":"\u7efc\u4e0a\uff0c\u5728\u7f16\u8bd1\u671f\uff0cOneFlow \u901a\u8fc7\u8bbe\u8ba1\u4e00\u5957\u6570\u5b66\u4e0a\u4e25\u8c28\u7684\u5f62\u5f0f\u7cfb\u7edf\u6765\u8868\u793a\u6240\u6709\u5408\u6cd5\u7684\u5e76\u884c\u6a21\u5f0f\uff0c\u5e76\u652f\u6301\u7f16\u8bd1\u5668\u8f83\u65b9\u4fbf\u5730\u81ea\u52a8\u641c\u7d22\u6700\u4f18\u5e76\u884c\u65b9\u6848\u3002 \u5728\u8fd0\u884c\u671f\uff0cOneFlow \u901a\u8fc7 Actor \u7cfb\u7edf\u6700\u4f18\u5730\u3001\u7075\u6d3b\u5730\u652f\u6301\u5e76\u884c\u3001\u5e76\u53d1\u6267\u884c\u3002OneFlow \u7684\u5185\u6838\u5177\u6709\u7b80\u6d01\u3001\u9ad8\u6548\u548c\u9ad8\u6269\u5c55\u6027\u7684\u4f18\u70b9\u3002 \u57fa\u4e8e\u6b64\u8bbe\u8ba1\uff0cOneFlow \u4f7f\u5f97\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u6027\u80fd\u8fbe\u5230\u6781\u81f4\uff0c\u4e14\u5206\u5e03\u5f0f\u8bad\u7ec3\u8ddf\u5355\u5361\u4e00\u6837\u7b80\u5355\u6613\u7528\u3002","title":"\u56db\u3001\u603b\u7ed3"},{"location":"basics_topics/model_load_save.html","text":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58 \u00b6 \u5bf9\u4e8e\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58\uff0c\u5e38\u7528\u7684\u573a\u666f\u6709\uff1a \u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u7ee7\u7eed\u8bad\u7ec3 \u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u540e\u7eed\u76f4\u63a5\u90e8\u7f72\u4f7f\u7528 \u4e25\u683c\u6765\u8bf4\uff0c\u5c1a\u672a\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u7684\u4fdd\u5b58\uff0c\u79f0\u4e3a checkpoint \u6216\u8005 snapshot \u3002\u4e0e\u4fdd\u5b58\u5df2\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff08 model saving \uff09 \uff0c\u5728\u6982\u5ff5\u4e0a\uff0c\u7565\u6709\u4e0d\u540c\u3002 \u4e0d\u8fc7\uff0c\u5728 OneFlow \u4e2d\uff0c\u65e0\u8bba\u6a21\u578b\u662f\u5426\u8bad\u7ec3\u5b8c\u6bd5\uff0c\u6211\u4eec\u90fd\u4f7f\u7528 \u7edf\u4e00\u7684\u63a5\u53e3 \u5c06\u5176\u4fdd\u5b58\uff0c\u56e0\u6b64\uff0c\u5728\u5176\u5b83\u6846\u67b6\u4e2d\u770b\u5230\u7684 model \u3001 checkpoint \u3001 snapshot \u7b49\u8868\u8ff0\uff0c\u5728 OneFlow \u4e2d\u4e0d\u505a\u533a\u5206\u3002 \u5728 OneFlow \u4e2d\uff0c flow.checkpoint \u540d\u79f0\u7a7a\u95f4\u4e0b\u6709\u6a21\u578b\u4fdd\u5b58\u3001\u52a0\u8f7d\u7684\u63a5\u53e3\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u5982\u4f55\u521b\u5efa\u6a21\u578b\u53c2\u6570 \u5982\u4f55\u4fdd\u5b58/\u52a0\u8f7d\u6a21\u578b OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u5982\u4f55\u5fae\u8c03\u4e0e\u6269\u5c55\u6a21\u578b get_variable \u521b\u5efa\u6216\u83b7\u53d6\u53c2\u6570 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.get_variable \u65b9\u6cd5\u521b\u9020\u6216\u8005\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u4ee5\u7528\u4e8e\u5728\u5168\u5c40\u4f5c\u4e1a\u51fd\u6570\u4e2d\u4ea4\u4e92\u4fe1\u606f\uff1b\u5f53\u8c03\u7528 oneflow.get_all_variables \u548c oneflow.load_variables \u63a5\u53e3\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u6216\u66f4\u65b0 get_variable \u521b\u5efa\u7684\u5bf9\u8c61\u7684\u503c\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u7279\u70b9\uff0c get_variable \u521b\u5efa\u7684\u5bf9\u8c61\uff0c\u5e38\u7528\u4e8e\u5b58\u50a8\u6a21\u578b\u53c2\u6570\u3002\u5b9e\u9645\u4e0a\uff0cOneFlow \u4e2d\u5f88\u591a\u8f83\u9ad8\u5c42\u63a5\u53e3\uff08\u5982 oneflow.layers.conv2d \uff09\uff0c\u5185\u90e8\u4f7f\u7528 get_variable \u521b\u5efa\u6a21\u578b\u53c2\u6570\u3002 \u6d41\u7a0b \u00b6 get_variable \u9700\u8981\u4e00\u4e2a\u6307\u5b9a\u4e00\u4e2a name \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u4f5c\u4e3a\u521b\u5efa\u5bf9\u8c61\u7684\u6807\u8bc6\u3002 \u5982\u679c name \u6307\u5b9a\u7684\u503c\u5728\u5f53\u524d\u4e0a\u4e0b\u6587\u73af\u5883\u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48 get_variable \u4f1a\u53d6\u51fa\u5df2\u6709\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u3002 \u5982\u679c name \u6307\u5b9a\u7684\u503c\u4e0d\u5b58\u5728\uff0c\u5219 get_varialbe \u5185\u90e8\u4f1a\u521b\u5efa\u4e00\u4e2a blob \u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u3002 \u4f7f\u7528 get_variable \u521b\u5efa\u5bf9\u8c61 \u00b6 oneflow.get_variable \u7684\u539f\u578b\u5982\u4e0b\uff1a def get_variable ( name , shape = None , dtype = None , initializer = None , regularizer = None , trainable = None , model_name = None , random_seed = None , distribute = distribute_util . broadcast (), ) \u4ee5\u4e0b\u662f oneflow.layers.conv2d \u4e2d\uff0c\u4f7f\u7528 get_variable \u521b\u9020\u53c2\u6570\u53d8\u91cf\uff0c\u5e76\u8fdb\u4e00\u6b65\u6784\u5efa\u7f51\u7edc\u7684\u4f8b\u5b50\uff1a #... weight = flow . get_variable ( weight_name if weight_name else name_prefix + \"-weight\" , shape = weight_shape , dtype = inputs . dtype , initializer = kernel_initializer if kernel_initializer is not None else flow . constant_initializer ( 0 ), regularizer = kernel_regularizer , trainable = trainable , model_name = \"weight\" , ) output = flow . nn . conv2d ( inputs , weight , strides , padding , data_format , dilation_rate , groups = groups , name = name ) #... initializer \u8bbe\u7f6e\u521d\u59cb\u5316\u65b9\u5f0f \u00b6 \u6211\u4eec\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u770b\u5230\uff0c\u5728\u8c03\u7528 get_variable \u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u521d\u59cb\u5316\u5668 initializer \u6765\u6307\u5b9a\u53c2\u6570\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0cOneFlow \u4e2d\u63d0\u4f9b\u4e86\u591a\u79cd\u521d\u59cb\u5316\u5668\uff0c\u53ef\u4ee5\u5728 oneflow \u6a21\u5757\u4e0b\u67e5\u770b\u3002 \u5728\u9759\u6001\u56fe\u673a\u5236\u4e0b\uff0c\u8bbe\u7f6e initializer \u540e\uff0c\u53c2\u6570\u521d\u59cb\u5316\u5de5\u4f5c\u7531 OneFlow \u6846\u67b6\u81ea\u52a8\u5b8c\u6210\u3002 OneFlow \u76ee\u524d\u652f\u6301\u7684 initializer \u5217\u4e3e\u5982\u4e0b\uff0c\u70b9\u51fb\u94fe\u63a5\u53ef\u4ee5\u67e5\u770b\u76f8\u5173\u7b97\u6cd5\uff1a constant_initializer zeros_initializer ones_initializer random_uniform_initializer random_normal_initializer truncated_normal_initializer glorot_uniform_initializer glorot_normal_initializer variance_scaling_initializer kaiming_initializer xavier_normal_initializer xavier_uniform_initializer OneFlow \u6a21\u578b\u7684 Python \u63a5\u53e3 \u00b6 \u6ce8\u610f \uff1a\u7531\u4e8e\u591a\u7248\u672c\u517c\u5bb9\u7684\u539f\u56e0\uff0c\u4f7f\u7528\u672c\u8282\u4ecb\u7ecd\u7684\u63a5\u53e3\uff0c\u5728\u811a\u672c\u4e2d\u90fd\u9700\u5148\u914d\u7f6e\uff1a flow . config . enable_legacy_model_io ( False ) \u83b7\u53d6/\u66f4\u65b0 variable \u5bf9\u8c61\u7684\u503c \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u63a5\u53e3\uff0c\u83b7\u53d6\u6216\u66f4\u65b0\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7531 oneflow.get_variable \u6240\u521b\u5efa\u7684 variable \u5bf9\u8c61\u7684\u503c oneflow.get_all_variables : \u83b7\u53d6\u6240\u6709\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684\u7684 variable \u5bf9\u8c61 oneflow.load_variables : \u66f4\u65b0\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 variable \u5bf9\u8c61 oneflow.get_all_variables \u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5b57\u5178\u7684 key \u5c31\u662f\u521b\u5efa variable \u65f6\u6307\u5b9a\u7684 name \uff0ckey \u5bf9\u5e94\u7684 value \u5c31\u662f\u4e00\u4e2a\u5f20\u91cf\u5bf9\u8c61\uff0c\u8be5\u5f20\u91cf\u5bf9\u8c61\u6709 numpy() \u65b9\u6cd5\u8f6c\u4e3a numpy \u6570\u7ec4\u3002 \u6bd4\u5982\uff0c\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u540d\u4e3a myblob \u7684\u5bf9\u8c61\uff1a @flow . global_function () def job () -> tp . Numpy : ... myblob = flow . get_variable ( \"myblob\" , shape = ( 3 , 3 ), initializer = flow . random_normal_initializer () ) ... \u5982\u679c\u60f3\u6253\u5370 myblob \u7684\u503c\uff0c\u53ef\u4ee5\u8c03\u7528\uff1a ... for epoch in range ( 20 ): ... job () all_variables = flow . get_all_variables () print ( all_variables [ \"myblob\" ] . numpy ()) ... \u5176\u4e2d\u7684 flow.get_all_variables \u83b7\u53d6\u5230\u4e86\u5b57\u5178\uff0c all_variables[\"myblob\"].numpy() \u83b7\u53d6\u4e86 myblob \u5bf9\u8c61\u5e76\u5c06\u5176\u8f6c\u4e3a numpy \u6570\u7ec4\u3002 \u4e0e get_all_variables \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.load_variables \u66f4\u65b0 variable \u5bf9\u8c61\u7684\u503c\u3002 oneflow.load_variables \u7684\u539f\u578b\u5982\u4e0b\uff1a def load_variables ( value_dict , ignore_mismatch = True ) \u4f7f\u7528 load_variables \u524d\uff0c\u6211\u4eec\u8981\u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u7684 key \u4e3a\u521b\u5efa variable \u65f6\u6307\u5b9a\u7684 name \uff0cvalue \u662f numpy \u6570\u7ec4\uff1b\u5c06\u5b57\u5178\u4f20\u9012\u7ed9 load_variables \u540e\uff0c load_variables \u4f1a\u5c06\u6839\u636e key \u627e\u5230\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 variable \u5bf9\u8c61\uff0c\u5e76\u66f4\u65b0\u503c\u3002 \u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a @flow . global_function ( type = \"predict\" ) def job () -> tp . Numpy : myblob = flow . get_variable ( \"myblob\" , shape = ( 3 , 3 ), initializer = flow . random_normal_initializer () ) return myblob myvardict = { \"myblob\" : np . ones (( 3 , 3 )) . astype ( np . float32 )} flow . load_variables ( myvardict ) print ( flow . get_all_variables ()[ \"myblob\" ] . numpy ()) \u867d\u7136\u6211\u4eec\u9009\u62e9\u4e86 random_normal_initializer \u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4f46\u662f\u56e0\u4e3a flow.load_variables(myvardict) \u66f4\u65b0\u4e86 myblob \u7684\u503c\uff0c\u6240\u4ee5\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u662f\uff1a [[1. 1. 1.] [1. 1. 1.] [1. 1. 1.]] \u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u00b6 \u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4fdd\u5b58/\u52a0\u8f7d\u6a21\u578b\uff1a oneflow.checkpoint.save : \u8d1f\u8d23\u4fdd\u5b58\u5f53\u524d\u7684\u6a21\u578b\u5230\u6307\u5b9a\u8def\u5f84 oneflow.checkpoint.get : \u4ece\u6307\u5b9a\u8def\u5f84\u4e2d\u5bfc\u5165\u6a21\u578b save \u7684\u539f\u578b\u5982\u4e0b\uff0c\u53ef\u4ee5\u5c06\u6a21\u578b\u4fdd\u5b58\u81f3 path \u6240\u6307\u5b9a\u7684\u8def\u5f84\u3002 def save ( path , var_dict = None ) \u53ef\u9009\u53c2\u6570 var_dict \u5982\u679c\u4e0d\u4e3a None \uff0c\u5219\u5c06 var_dict \u4e2d\u6307\u5b9a\u7684\u5bf9\u8c61\u4fdd\u5b58\u5230\u6307\u5b9a\u8def\u5f84\u3002 get \u7684\u539f\u578b\u5982\u4e0b\uff0c\u53ef\u4ee5\u52a0\u8f7d\u4e4b\u524d\u5df2\u7ecf\u4fdd\u5b58\u7684\uff0c\u7531 path \u8def\u5f84\u6240\u6307\u5b9a\u7684\u6a21\u578b\u3002 def get ( path ) \u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u53ef\u4ee5\u7528\u4e0a\u6587\u4ecb\u7ecd\u7684 load_variables \u65b9\u6cd5\u66f4\u65b0\u5230\u6a21\u578b\u4e2d\uff1a flow . load_variables ( flow . checkpoint . get ( save_dir )) \u6ce8\u610f \uff1a save \u53c2\u6570\u6240\u6307\u5b9a\u8def\u5f84\u5bf9\u5e94\u7684\u76ee\u5f55\u8981\u4e48\u4e0d\u5b58\u5728\uff0c\u8981\u4e48\u5e94\u8be5\u4e3a\u7a7a\u76ee\u5f55\uff0c\u5426\u5219 save \u4f1a\u62a5\u9519(\u9632\u6b62\u8986\u76d6\u6389\u539f\u6709\u4fdd\u5b58\u7684\u6a21\u578b) OneFlow \u6a21\u578b\u4ee5\u4e00\u5b9a\u7684\u7ec4\u7ec7\u5f62\u5f0f\u4fdd\u5b58\u5728\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\uff0c\u5177\u4f53\u7ed3\u6784\u53c2\u89c1\u4e0b\u6587\u4e2d\u7684 OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u867d\u7136 OneFlow \u5bf9 save \u7684\u9891\u7387\u6ca1\u6709\u9650\u5236\uff0c\u4f46\u662f\u8fc7\u9ad8\u7684\u4fdd\u5b58\u9891\u7387\uff0c\u4f1a\u52a0\u91cd\u78c1\u76d8\u53ca\u5e26\u5bbd\u7b49\u8d44\u6e90\u7684\u8d1f\u62c5\u3002 OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u00b6 OneFlow \u6a21\u578b\u662f\u4e00\u7ec4\u5df2\u7ecf\u88ab\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u7684 \u53c2\u6570\u503c \u3002\u6a21\u578b\u6240\u4fdd\u5b58\u7684\u8def\u5f84\u4e0b\uff0c\u6709\u591a\u4e2a\u5b50\u76ee\u5f55\uff0c\u6bcf\u4e2a\u5b50\u76ee\u5f55\u5bf9\u5e94\u4e86 \u4f5c\u4e1a\u51fd\u6570 \u4e2d\u6a21\u578b\u7684 name \u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u5148\u901a\u8fc7\u4ee3\u7801\u5b9a\u4e49\u4ee5\u4e0b\u7684\u6a21\u578b\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u5047\u8bbe\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u6a21\u578b\uff1a flow . checkpoint . save ( './lenet_models_name' ) \u90a3\u4e48 lenet_models_name \u53ca\u5176\u5b50\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a lenet_models_name/ \u251c\u2500\u2500 conv1-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv1-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv2-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv2-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense1-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense1-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense2-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense2-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 snapshot_done \u2514\u2500\u2500 System-Train-TrainStep-train_job \u251c\u2500\u2500 meta \u2514\u2500\u2500 out \u53ef\u4ee5\u770b\u5230\uff1a \u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684\u7f51\u7edc\u6a21\u578b\uff0c\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u5e94\u4e00\u4e2a\u5b50\u76ee\u5f55 \u4ee5\u4e0a\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4e2d\uff0c\u90fd\u6709 out \u548c meta \u6587\u4ef6\uff0c out \u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u7f51\u7edc\u53c2\u6570\u7684\u503c\uff0c meta \u4ee5\u6587\u672c\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u7f51\u7edc\u7684\u7ed3\u6784\u4fe1\u606f snapshot_done \u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6\uff0c\u5982\u679c\u5b83\u5b58\u5728\uff0c\u8868\u793a\u7f51\u7edc\u5df2\u7ecf\u8bad\u7ec3\u5b8c\u6210 System-Train-TrainStep-train_job \u4e2d\u4fdd\u5b58\u6709\u5feb\u7167\u7684\u8bad\u7ec3\u6b65\u6570 \u6a21\u578b\u7684\u5fae\u8c03\u4e0e\u6269\u5c55 \u00b6 \u5728\u6a21\u578b\u7684\u5fae\u8c03\u548c\u8fc1\u79fb\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\uff1a \u6a21\u578b\u4e2d\u7684\u4e00\u90e8\u5206\u53c2\u6570\u52a0\u8f7d\u81ea\u539f\u6709\u6a21\u578b \u6a21\u578b\u4e2d\u7684\u53e6\u4e00\u90e8\u5206\uff08\u65b0\u589e\u7684\uff09\u53c2\u6570\u9700\u8981\u521d\u59cb\u5316 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.load_variables \u5b8c\u6210\u4ee5\u4e0a\u64cd\u4f5c\u3002\u4ee5\u4e0b\u4e3e\u4e00\u4e2a\u7528\u4e8e\u9610\u8ff0\u6982\u5ff5\u7684\u7b80\u5355\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u6a21\u578b\uff0c\u8bad\u7ec3\u540e\u4fdd\u5b58\u81f3 ./mlp_models_1 \uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) dense2 = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , dense2 ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u7136\u540e\uff0c\u6211\u4eec\u62d3\u5c55\u7f51\u7edc\u7ed3\u6784\uff0c\u4e3a\u4ee5\u4e0a\u6a21\u578b\u591a\u589e\u52a0\u4e00\u5c42 dense3 \uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): #... \u539f\u6709\u7f51\u7edc\u7ed3\u6784 dense3 = flow . layers . dense ( dense2 , 10 , kernel_initializer = initializer , name = \"dense3\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , dense3 ) #... \u6700\u540e\uff0c\u4ece\u539f\u6765\u4fdd\u5b58\u7684\u6a21\u578b\u52a0\u8f7d\u53c2\u6570\uff0c\u5e76\u5f00\u59cb\u8bad\u7ec3\uff1a if __name__ == \"__main__\" : flow . load_variables ( flow . checkpoint . get ( \"./mlp_models_1\" )) ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) flow . checkpoint . save ( \"./mlp_ext_models_1\" ) \u65b0\u589e\u7684 dense3 \u5c42\u53c2\u6570\uff0c\u5728\u539f\u6a21\u578b\u4e2d\u4e0d\u5b58\u5728\uff0cOneFlow \u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u5b83\u4eec\u7684\u503c\u3002 \u4ee3\u7801 \u00b6 \u811a\u672c mlp_mnist_origin.py \u4e2d\u6784\u5efa\u4e86\u201c\u9aa8\u5e72\u7f51\u7edc\u201d\uff0c\u5e76\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\u81f3 ./mlp_models_1 \u3002 \u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/mlp_mnist_origin.py python3 mlp_mnist_origin.py \u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u5c06\u4f1a\u5728\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\u4e0b\u5f97\u5230 mlp_models_1 \u76ee\u5f55\u3002 \u811a\u672c mlp_mnist_finetune.py \u4e2d\u7684\u7f51\u7edc\u5728\u539f\u6709\u57fa\u7840\u4e0a\u8fdb\u884c\u201c\u5fae\u8c03\u201d\uff08\u4e3a\u9aa8\u5e72\u7f51\u7edc\u589e\u52a0\u4e00\u5c42 dense3 \uff09\u540e\uff0c\u52a0\u8f7d ./mlp_models_1 \uff0c\u5e76\u7ee7\u7eed\u8bad\u7ec3\u3002 \u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/mlp_mnist_finetune.py python3 mlp_mnist_finetune.py \u5fae\u8c03\u540e\u7684\u6a21\u578b\uff0c\u4fdd\u5b58\u5728 ./mlp_ext_models_1 \u4e2d\u3002","title":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58"},{"location":"basics_topics/model_load_save.html#_1","text":"\u5bf9\u4e8e\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58\uff0c\u5e38\u7528\u7684\u573a\u666f\u6709\uff1a \u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u7ee7\u7eed\u8bad\u7ec3 \u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u540e\u7eed\u76f4\u63a5\u90e8\u7f72\u4f7f\u7528 \u4e25\u683c\u6765\u8bf4\uff0c\u5c1a\u672a\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u7684\u4fdd\u5b58\uff0c\u79f0\u4e3a checkpoint \u6216\u8005 snapshot \u3002\u4e0e\u4fdd\u5b58\u5df2\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff08 model saving \uff09 \uff0c\u5728\u6982\u5ff5\u4e0a\uff0c\u7565\u6709\u4e0d\u540c\u3002 \u4e0d\u8fc7\uff0c\u5728 OneFlow \u4e2d\uff0c\u65e0\u8bba\u6a21\u578b\u662f\u5426\u8bad\u7ec3\u5b8c\u6bd5\uff0c\u6211\u4eec\u90fd\u4f7f\u7528 \u7edf\u4e00\u7684\u63a5\u53e3 \u5c06\u5176\u4fdd\u5b58\uff0c\u56e0\u6b64\uff0c\u5728\u5176\u5b83\u6846\u67b6\u4e2d\u770b\u5230\u7684 model \u3001 checkpoint \u3001 snapshot \u7b49\u8868\u8ff0\uff0c\u5728 OneFlow \u4e2d\u4e0d\u505a\u533a\u5206\u3002 \u5728 OneFlow \u4e2d\uff0c flow.checkpoint \u540d\u79f0\u7a7a\u95f4\u4e0b\u6709\u6a21\u578b\u4fdd\u5b58\u3001\u52a0\u8f7d\u7684\u63a5\u53e3\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u5982\u4f55\u521b\u5efa\u6a21\u578b\u53c2\u6570 \u5982\u4f55\u4fdd\u5b58/\u52a0\u8f7d\u6a21\u578b OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u5982\u4f55\u5fae\u8c03\u4e0e\u6269\u5c55\u6a21\u578b","title":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58"},{"location":"basics_topics/model_load_save.html#get_variable","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.get_variable \u65b9\u6cd5\u521b\u9020\u6216\u8005\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u4ee5\u7528\u4e8e\u5728\u5168\u5c40\u4f5c\u4e1a\u51fd\u6570\u4e2d\u4ea4\u4e92\u4fe1\u606f\uff1b\u5f53\u8c03\u7528 oneflow.get_all_variables \u548c oneflow.load_variables \u63a5\u53e3\u65f6\uff0c\u53ef\u4ee5\u83b7\u53d6\u6216\u66f4\u65b0 get_variable \u521b\u5efa\u7684\u5bf9\u8c61\u7684\u503c\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u7279\u70b9\uff0c get_variable \u521b\u5efa\u7684\u5bf9\u8c61\uff0c\u5e38\u7528\u4e8e\u5b58\u50a8\u6a21\u578b\u53c2\u6570\u3002\u5b9e\u9645\u4e0a\uff0cOneFlow \u4e2d\u5f88\u591a\u8f83\u9ad8\u5c42\u63a5\u53e3\uff08\u5982 oneflow.layers.conv2d \uff09\uff0c\u5185\u90e8\u4f7f\u7528 get_variable \u521b\u5efa\u6a21\u578b\u53c2\u6570\u3002","title":"get_variable \u521b\u5efa\u6216\u83b7\u53d6\u53c2\u6570"},{"location":"basics_topics/model_load_save.html#_2","text":"get_variable \u9700\u8981\u4e00\u4e2a\u6307\u5b9a\u4e00\u4e2a name \u53c2\u6570\uff0c\u8be5\u53c2\u6570\u4f5c\u4e3a\u521b\u5efa\u5bf9\u8c61\u7684\u6807\u8bc6\u3002 \u5982\u679c name \u6307\u5b9a\u7684\u503c\u5728\u5f53\u524d\u4e0a\u4e0b\u6587\u73af\u5883\u4e2d\u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48 get_variable \u4f1a\u53d6\u51fa\u5df2\u6709\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u3002 \u5982\u679c name \u6307\u5b9a\u7684\u503c\u4e0d\u5b58\u5728\uff0c\u5219 get_varialbe \u5185\u90e8\u4f1a\u521b\u5efa\u4e00\u4e2a blob \u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u3002","title":"\u6d41\u7a0b"},{"location":"basics_topics/model_load_save.html#get_variable_1","text":"oneflow.get_variable \u7684\u539f\u578b\u5982\u4e0b\uff1a def get_variable ( name , shape = None , dtype = None , initializer = None , regularizer = None , trainable = None , model_name = None , random_seed = None , distribute = distribute_util . broadcast (), ) \u4ee5\u4e0b\u662f oneflow.layers.conv2d \u4e2d\uff0c\u4f7f\u7528 get_variable \u521b\u9020\u53c2\u6570\u53d8\u91cf\uff0c\u5e76\u8fdb\u4e00\u6b65\u6784\u5efa\u7f51\u7edc\u7684\u4f8b\u5b50\uff1a #... weight = flow . get_variable ( weight_name if weight_name else name_prefix + \"-weight\" , shape = weight_shape , dtype = inputs . dtype , initializer = kernel_initializer if kernel_initializer is not None else flow . constant_initializer ( 0 ), regularizer = kernel_regularizer , trainable = trainable , model_name = \"weight\" , ) output = flow . nn . conv2d ( inputs , weight , strides , padding , data_format , dilation_rate , groups = groups , name = name ) #...","title":"\u4f7f\u7528 get_variable \u521b\u5efa\u5bf9\u8c61"},{"location":"basics_topics/model_load_save.html#initializer","text":"\u6211\u4eec\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u770b\u5230\uff0c\u5728\u8c03\u7528 get_variable \u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u521d\u59cb\u5316\u5668 initializer \u6765\u6307\u5b9a\u53c2\u6570\u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0cOneFlow \u4e2d\u63d0\u4f9b\u4e86\u591a\u79cd\u521d\u59cb\u5316\u5668\uff0c\u53ef\u4ee5\u5728 oneflow \u6a21\u5757\u4e0b\u67e5\u770b\u3002 \u5728\u9759\u6001\u56fe\u673a\u5236\u4e0b\uff0c\u8bbe\u7f6e initializer \u540e\uff0c\u53c2\u6570\u521d\u59cb\u5316\u5de5\u4f5c\u7531 OneFlow \u6846\u67b6\u81ea\u52a8\u5b8c\u6210\u3002 OneFlow \u76ee\u524d\u652f\u6301\u7684 initializer \u5217\u4e3e\u5982\u4e0b\uff0c\u70b9\u51fb\u94fe\u63a5\u53ef\u4ee5\u67e5\u770b\u76f8\u5173\u7b97\u6cd5\uff1a constant_initializer zeros_initializer ones_initializer random_uniform_initializer random_normal_initializer truncated_normal_initializer glorot_uniform_initializer glorot_normal_initializer variance_scaling_initializer kaiming_initializer xavier_normal_initializer xavier_uniform_initializer","title":"initializer \u8bbe\u7f6e\u521d\u59cb\u5316\u65b9\u5f0f"},{"location":"basics_topics/model_load_save.html#oneflow-python","text":"\u6ce8\u610f \uff1a\u7531\u4e8e\u591a\u7248\u672c\u517c\u5bb9\u7684\u539f\u56e0\uff0c\u4f7f\u7528\u672c\u8282\u4ecb\u7ecd\u7684\u63a5\u53e3\uff0c\u5728\u811a\u672c\u4e2d\u90fd\u9700\u5148\u914d\u7f6e\uff1a flow . config . enable_legacy_model_io ( False )","title":"OneFlow \u6a21\u578b\u7684 Python \u63a5\u53e3"},{"location":"basics_topics/model_load_save.html#variable","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u4e2a\u63a5\u53e3\uff0c\u83b7\u53d6\u6216\u66f4\u65b0\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7531 oneflow.get_variable \u6240\u521b\u5efa\u7684 variable \u5bf9\u8c61\u7684\u503c oneflow.get_all_variables : \u83b7\u53d6\u6240\u6709\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684\u7684 variable \u5bf9\u8c61 oneflow.load_variables : \u66f4\u65b0\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 variable \u5bf9\u8c61 oneflow.get_all_variables \u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5b57\u5178\u7684 key \u5c31\u662f\u521b\u5efa variable \u65f6\u6307\u5b9a\u7684 name \uff0ckey \u5bf9\u5e94\u7684 value \u5c31\u662f\u4e00\u4e2a\u5f20\u91cf\u5bf9\u8c61\uff0c\u8be5\u5f20\u91cf\u5bf9\u8c61\u6709 numpy() \u65b9\u6cd5\u8f6c\u4e3a numpy \u6570\u7ec4\u3002 \u6bd4\u5982\uff0c\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u540d\u4e3a myblob \u7684\u5bf9\u8c61\uff1a @flow . global_function () def job () -> tp . Numpy : ... myblob = flow . get_variable ( \"myblob\" , shape = ( 3 , 3 ), initializer = flow . random_normal_initializer () ) ... \u5982\u679c\u60f3\u6253\u5370 myblob \u7684\u503c\uff0c\u53ef\u4ee5\u8c03\u7528\uff1a ... for epoch in range ( 20 ): ... job () all_variables = flow . get_all_variables () print ( all_variables [ \"myblob\" ] . numpy ()) ... \u5176\u4e2d\u7684 flow.get_all_variables \u83b7\u53d6\u5230\u4e86\u5b57\u5178\uff0c all_variables[\"myblob\"].numpy() \u83b7\u53d6\u4e86 myblob \u5bf9\u8c61\u5e76\u5c06\u5176\u8f6c\u4e3a numpy \u6570\u7ec4\u3002 \u4e0e get_all_variables \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.load_variables \u66f4\u65b0 variable \u5bf9\u8c61\u7684\u503c\u3002 oneflow.load_variables \u7684\u539f\u578b\u5982\u4e0b\uff1a def load_variables ( value_dict , ignore_mismatch = True ) \u4f7f\u7528 load_variables \u524d\uff0c\u6211\u4eec\u8981\u51c6\u5907\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u7684 key \u4e3a\u521b\u5efa variable \u65f6\u6307\u5b9a\u7684 name \uff0cvalue \u662f numpy \u6570\u7ec4\uff1b\u5c06\u5b57\u5178\u4f20\u9012\u7ed9 load_variables \u540e\uff0c load_variables \u4f1a\u5c06\u6839\u636e key \u627e\u5230\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 variable \u5bf9\u8c61\uff0c\u5e76\u66f4\u65b0\u503c\u3002 \u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a @flow . global_function ( type = \"predict\" ) def job () -> tp . Numpy : myblob = flow . get_variable ( \"myblob\" , shape = ( 3 , 3 ), initializer = flow . random_normal_initializer () ) return myblob myvardict = { \"myblob\" : np . ones (( 3 , 3 )) . astype ( np . float32 )} flow . load_variables ( myvardict ) print ( flow . get_all_variables ()[ \"myblob\" ] . numpy ()) \u867d\u7136\u6211\u4eec\u9009\u62e9\u4e86 random_normal_initializer \u7684\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4f46\u662f\u56e0\u4e3a flow.load_variables(myvardict) \u66f4\u65b0\u4e86 myblob \u7684\u503c\uff0c\u6240\u4ee5\u6700\u7ec8\u8f93\u51fa\u7ed3\u679c\u662f\uff1a [[1. 1. 1.] [1. 1. 1.] [1. 1. 1.]]","title":"\u83b7\u53d6/\u66f4\u65b0 variable \u5bf9\u8c61\u7684\u503c"},{"location":"basics_topics/model_load_save.html#_3","text":"\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4e24\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u4fdd\u5b58/\u52a0\u8f7d\u6a21\u578b\uff1a oneflow.checkpoint.save : \u8d1f\u8d23\u4fdd\u5b58\u5f53\u524d\u7684\u6a21\u578b\u5230\u6307\u5b9a\u8def\u5f84 oneflow.checkpoint.get : \u4ece\u6307\u5b9a\u8def\u5f84\u4e2d\u5bfc\u5165\u6a21\u578b save \u7684\u539f\u578b\u5982\u4e0b\uff0c\u53ef\u4ee5\u5c06\u6a21\u578b\u4fdd\u5b58\u81f3 path \u6240\u6307\u5b9a\u7684\u8def\u5f84\u3002 def save ( path , var_dict = None ) \u53ef\u9009\u53c2\u6570 var_dict \u5982\u679c\u4e0d\u4e3a None \uff0c\u5219\u5c06 var_dict \u4e2d\u6307\u5b9a\u7684\u5bf9\u8c61\u4fdd\u5b58\u5230\u6307\u5b9a\u8def\u5f84\u3002 get \u7684\u539f\u578b\u5982\u4e0b\uff0c\u53ef\u4ee5\u52a0\u8f7d\u4e4b\u524d\u5df2\u7ecf\u4fdd\u5b58\u7684\uff0c\u7531 path \u8def\u5f84\u6240\u6307\u5b9a\u7684\u6a21\u578b\u3002 def get ( path ) \u5b83\u5c06\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u8be5\u5b57\u5178\u53ef\u4ee5\u7528\u4e0a\u6587\u4ecb\u7ecd\u7684 load_variables \u65b9\u6cd5\u66f4\u65b0\u5230\u6a21\u578b\u4e2d\uff1a flow . load_variables ( flow . checkpoint . get ( save_dir )) \u6ce8\u610f \uff1a save \u53c2\u6570\u6240\u6307\u5b9a\u8def\u5f84\u5bf9\u5e94\u7684\u76ee\u5f55\u8981\u4e48\u4e0d\u5b58\u5728\uff0c\u8981\u4e48\u5e94\u8be5\u4e3a\u7a7a\u76ee\u5f55\uff0c\u5426\u5219 save \u4f1a\u62a5\u9519(\u9632\u6b62\u8986\u76d6\u6389\u539f\u6709\u4fdd\u5b58\u7684\u6a21\u578b) OneFlow \u6a21\u578b\u4ee5\u4e00\u5b9a\u7684\u7ec4\u7ec7\u5f62\u5f0f\u4fdd\u5b58\u5728\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\uff0c\u5177\u4f53\u7ed3\u6784\u53c2\u89c1\u4e0b\u6587\u4e2d\u7684 OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784 \u867d\u7136 OneFlow \u5bf9 save \u7684\u9891\u7387\u6ca1\u6709\u9650\u5236\uff0c\u4f46\u662f\u8fc7\u9ad8\u7684\u4fdd\u5b58\u9891\u7387\uff0c\u4f1a\u52a0\u91cd\u78c1\u76d8\u53ca\u5e26\u5bbd\u7b49\u8d44\u6e90\u7684\u8d1f\u62c5\u3002","title":"\u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d"},{"location":"basics_topics/model_load_save.html#oneflow","text":"OneFlow \u6a21\u578b\u662f\u4e00\u7ec4\u5df2\u7ecf\u88ab\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u7684 \u53c2\u6570\u503c \u3002\u6a21\u578b\u6240\u4fdd\u5b58\u7684\u8def\u5f84\u4e0b\uff0c\u6709\u591a\u4e2a\u5b50\u76ee\u5f55\uff0c\u6bcf\u4e2a\u5b50\u76ee\u5f55\u5bf9\u5e94\u4e86 \u4f5c\u4e1a\u51fd\u6570 \u4e2d\u6a21\u578b\u7684 name \u3002 \u6bd4\u5982\uff0c\u6211\u4eec\u5148\u901a\u8fc7\u4ee3\u7801\u5b9a\u4e49\u4ee5\u4e0b\u7684\u6a21\u578b\uff1a def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u5047\u8bbe\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8c03\u7528\u4ee5\u4e0b\u4ee3\u7801\u4fdd\u5b58\u6a21\u578b\uff1a flow . checkpoint . save ( './lenet_models_name' ) \u90a3\u4e48 lenet_models_name \u53ca\u5176\u5b50\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a lenet_models_name/ \u251c\u2500\u2500 conv1-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv1-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv2-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 conv2-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense1-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense1-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense2-bias \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 dense2-weight \u2502 \u251c\u2500\u2500 meta \u2502 \u2514\u2500\u2500 out \u251c\u2500\u2500 snapshot_done \u2514\u2500\u2500 System-Train-TrainStep-train_job \u251c\u2500\u2500 meta \u2514\u2500\u2500 out \u53ef\u4ee5\u770b\u5230\uff1a \u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684\u7f51\u7edc\u6a21\u578b\uff0c\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u5e94\u4e00\u4e2a\u5b50\u76ee\u5f55 \u4ee5\u4e0a\u6bcf\u4e2a\u5b50\u76ee\u5f55\u4e2d\uff0c\u90fd\u6709 out \u548c meta \u6587\u4ef6\uff0c out \u4ee5\u4e8c\u8fdb\u5236\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u7f51\u7edc\u53c2\u6570\u7684\u503c\uff0c meta \u4ee5\u6587\u672c\u7684\u5f62\u5f0f\u5b58\u50a8\u4e86\u7f51\u7edc\u7684\u7ed3\u6784\u4fe1\u606f snapshot_done \u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6\uff0c\u5982\u679c\u5b83\u5b58\u5728\uff0c\u8868\u793a\u7f51\u7edc\u5df2\u7ecf\u8bad\u7ec3\u5b8c\u6210 System-Train-TrainStep-train_job \u4e2d\u4fdd\u5b58\u6709\u5feb\u7167\u7684\u8bad\u7ec3\u6b65\u6570","title":"OneFlow \u6a21\u578b\u7684\u5b58\u50a8\u7ed3\u6784"},{"location":"basics_topics/model_load_save.html#_4","text":"\u5728\u6a21\u578b\u7684\u5fae\u8c03\u548c\u8fc1\u79fb\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\uff1a \u6a21\u578b\u4e2d\u7684\u4e00\u90e8\u5206\u53c2\u6570\u52a0\u8f7d\u81ea\u539f\u6709\u6a21\u578b \u6a21\u578b\u4e2d\u7684\u53e6\u4e00\u90e8\u5206\uff08\u65b0\u589e\u7684\uff09\u53c2\u6570\u9700\u8981\u521d\u59cb\u5316 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.load_variables \u5b8c\u6210\u4ee5\u4e0a\u64cd\u4f5c\u3002\u4ee5\u4e0b\u4e3e\u4e00\u4e2a\u7528\u4e8e\u9610\u8ff0\u6982\u5ff5\u7684\u7b80\u5355\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u6a21\u578b\uff0c\u8bad\u7ec3\u540e\u4fdd\u5b58\u81f3 ./mlp_models_1 \uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) dense2 = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , dense2 ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u7136\u540e\uff0c\u6211\u4eec\u62d3\u5c55\u7f51\u7edc\u7ed3\u6784\uff0c\u4e3a\u4ee5\u4e0a\u6a21\u578b\u591a\u589e\u52a0\u4e00\u5c42 dense3 \uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): #... \u539f\u6709\u7f51\u7edc\u7ed3\u6784 dense3 = flow . layers . dense ( dense2 , 10 , kernel_initializer = initializer , name = \"dense3\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , dense3 ) #... \u6700\u540e\uff0c\u4ece\u539f\u6765\u4fdd\u5b58\u7684\u6a21\u578b\u52a0\u8f7d\u53c2\u6570\uff0c\u5e76\u5f00\u59cb\u8bad\u7ec3\uff1a if __name__ == \"__main__\" : flow . load_variables ( flow . checkpoint . get ( \"./mlp_models_1\" )) ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) flow . checkpoint . save ( \"./mlp_ext_models_1\" ) \u65b0\u589e\u7684 dense3 \u5c42\u53c2\u6570\uff0c\u5728\u539f\u6a21\u578b\u4e2d\u4e0d\u5b58\u5728\uff0cOneFlow \u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u5b83\u4eec\u7684\u503c\u3002","title":"\u6a21\u578b\u7684\u5fae\u8c03\u4e0e\u6269\u5c55"},{"location":"basics_topics/model_load_save.html#_5","text":"\u811a\u672c mlp_mnist_origin.py \u4e2d\u6784\u5efa\u4e86\u201c\u9aa8\u5e72\u7f51\u7edc\u201d\uff0c\u5e76\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\u81f3 ./mlp_models_1 \u3002 \u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/mlp_mnist_origin.py python3 mlp_mnist_origin.py \u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u5c06\u4f1a\u5728\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\u4e0b\u5f97\u5230 mlp_models_1 \u76ee\u5f55\u3002 \u811a\u672c mlp_mnist_finetune.py \u4e2d\u7684\u7f51\u7edc\u5728\u539f\u6709\u57fa\u7840\u4e0a\u8fdb\u884c\u201c\u5fae\u8c03\u201d\uff08\u4e3a\u9aa8\u5e72\u7f51\u7edc\u589e\u52a0\u4e00\u5c42 dense3 \uff09\u540e\uff0c\u52a0\u8f7d ./mlp_models_1 \uff0c\u5e76\u7ee7\u7eed\u8bad\u7ec3\u3002 \u8fd0\u884c\uff1a wget https://docs.oneflow.org/code/basics_topics/mlp_mnist_finetune.py python3 mlp_mnist_finetune.py \u5fae\u8c03\u540e\u7684\u6a21\u578b\uff0c\u4fdd\u5b58\u5728 ./mlp_ext_models_1 \u4e2d\u3002","title":"\u4ee3\u7801"},{"location":"basics_topics/optimizer_in_function_config.html","text":"\u914d\u7f6e\u4f18\u5316\u7b97\u6cd5\u548c\u8d85\u53c2 \u00b6 \u5f53\u642d\u5efa\u597d\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u540e\uff0c\u9700\u8981\u7ecf\u8fc7\u8bad\u7ec3\u624d\u80fd\u7528\u6765\u505a\u9884\u6d4b\u3002\u800c\u8bad\u7ec3\u7684\u8fc7\u7a0b\u5c31\u662f\u7f51\u7edc\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u88ab\u4f18\u5316\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u91c7\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u6307\u5b9a\u7684 Optimizer \u66f4\u65b0\u53c2\u6570\uff0c\u672c\u6587\u91cd\u70b9\u4ecb\u7ecd\u5728 OneFlow \u4e2d\u5982\u4f55\u8bbe\u7f6e Optimizer \u548c \u8d85\u53c2(Hyperparameters) \u3002 \u6587\u7ae0\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a \u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\u548c\u7528\u4e8e\u9884\u6d4b\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u914d\u7f6e\u793a\u4f8b\uff1b optimizer \u53ca \u5b66\u4e60\u7b56\u7565\u7684\u4f7f\u7528\uff1b \u7531\u4e8e\u9519\u8bef\u914d\u7f6e\u5bfc\u81f4\u7684\u5e38\u89c1\u9519\u8bef\u53ca\u89e3\u51b3\u65b9\u6cd5 \u53ef\u4ee5\u5728\u4e0d\u4e86\u89e3 OneFlow \u8bbe\u8ba1\u548c\u6982\u5ff5\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u91c7\u7528 \u914d\u7f6e\u793a\u4f8b \u90e8\u5206\u7684\u8bad\u7ec3\u6216\u9884\u6d4b\u914d\u7f6e\uff1b\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\u8bf7\u53c2\u8003 optimizer API \u6587\u6863 \u4f5c\u4e1a\u51fd\u6570\u914d\u7f6e\u7684\u57fa\u672c\u6982\u5ff5 \u00b6 \u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 oneflow.global_function \u88c5\u9970\u5668\u53ca\u4f5c\u4e1a\u51fd\u6570\u7684\u6982\u5ff5\uff0c\u672c\u6587\u7684\u914d\u7f6e\uff0c\u5efa\u7acb\u5728\u6b64\u57fa\u7840\u4e0a\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5411\u8be5\u88c5\u9970\u5668\u4f20\u9012 function_config \u53c2\u6570\u8fbe\u5230\u914d\u7f6e\u4f5c\u4e1a\u51fd\u6570\u7684\u76ee\u7684\u3002 \u5982\u679c\u5bf9\u4e8e oneflow.global_function \u8fd8\u4e0d\u4e86\u89e3\uff0c\u8bf7\u5148\u53c2\u9605 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u53ca \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u3002 \u914d\u7f6e\u793a\u4f8b \u00b6 \u9884\u6d4b\u914d\u7f6e \u00b6 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u4e8e\u9884\u6d4b\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a eval_job \u3002 \u6211\u4eec\u901a\u8fc7 get_eval_config() \u5b9a\u4e49\u4e86 eval_job() \u7684\u914d\u7f6e\uff0c\u5e76\u5c06 get_eval_config() \u4f5c\u4e3a @flow.global_function \u7684\u53c2\u6570\uff0c\u5e94\u7528\u5230 eval_job() \u51fd\u6570\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 type=\"predict\" \u6765\u8868\u660e\u8be5\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u9884\u6d4b\uff0c\u8fd9\u6837\uff0cOneFlow \u4e0d\u4f1a\u5728\u8fd9\u4e2a\u4f5c\u4e1a\u51fd\u6570\u4e2d\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u3002 def get_eval_config (): config = flow . function_config () config . default_data_type ( flow . float ) return config @flow . global_function ( type = \"predict\" , get_eval_config ()) def eval_job () -> tp . Numpy : # build neural network here \u8bad\u7ec3\u914d\u7f6e \u00b6 \u5982\u679c\u6307\u5b9a @flow.global_function \u7684 type \u53c2\u6570\u4e3a train \uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u4e2a\u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c train_job \u4e3a\u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u91c7\u7528\u9ed8\u8ba4\u7684 function_config \u914d\u7f6e\uff08\u56e0\u6b64\u6ca1\u6709\u5411 function_config \u4f20\u53c2)\u3002 \u56e0\u4e3a OneFlow \u4f1a\u4e3a train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u56e0\u6b64\u9700\u8981\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u6307\u5b9a optimizer\u3001\u5b66\u4e60\u7387\u7b49\u8d85\u53c2\u6570\u7684\u8bbe\u5b9a\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a flow.optimizer.PiecewiseConstantScheduler \u8bbe\u7f6e\u4e86\u5b66\u4e60\u7387\uff080.1\uff09\u53ca\u5b66\u4e60\u7b56\u7565\uff08PiecewiseConstantScheduler\uff0c\u5206\u6bb5\u7f29\u653e\u7b56\u7565\uff09\uff0cOneFlow \u4e2d\u8fd8\u5185\u7f6e\u4e86\u5176\u5b83\u5b66\u4e60\u7b56\u7565\uff0c\u5982\uff1a CosineScheduler \u3001 CustomScheduler \u3001 InverseTimeScheduler \u7b49\u3002 \u5728 flow.optimizer.SGD(lr_scheduler, momentum=0).minimize(loss) \u8bbe\u7f6e optimizer \u4e3a SGD\uff0c\u5e76\u6307\u5b9a\u4f18\u5316\u76ee\u6807\u4e3a loss \u3002OneFlow \u4e2d\u5185\u7f6e\u4e86\u591a\u79cd optimizer\uff0c\u5b83\u4eec\u5206\u522b\u662f\uff1a SGD \u3001 Adam \u3001 AdamW \u3001 LazyAdam \u3001 LARS \u3001 RMSProp \uff0c\u53ef\u53c2\u9605 API \u6587\u6863\u83b7\u53d6\u4f7f\u7528\u65b9\u6cd5\u53ca\u7b97\u6cd5\u7ec6\u8282\u3002 FAQ \u00b6 \u62a5\u9519 Check failed: job().job_conf().train_conf().has_model_update_conf() \u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684 type \u4e3a \"train\" \uff0c\u4f46\u662f\u6ca1\u6709\u8bbe\u7f6e optimizer \u53ca\u4f18\u5316\u76ee\u6807\uff0c\u90a3\u4e48\u5728\u53cd\u5411\u4f20\u64ad\u65f6\uff0cOneFlow \u4f1a\u56e0\u4e3a\u4e0d\u77e5\u9053\u5982\u4f55\u66f4\u65b0\u53c2\u6570\u800c\u62a5\u9519\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u4e3a\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570\u914d\u7f6e optimizer \u5e76\u6307\u5b9a\u4f18\u5316\u76ee\u6807\u3002 \u62a5\u9519 Check failed: NeedBackwardOp \u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684 type \u4e3a \"predict\" \uff0c\u5374\uff08\u9519\u8bef\u5730\uff09\u914d\u7f6e\u4e86 optimizer \u65f6\uff0c\u56e0\u4e3a OneFlow \u4e0d\u4f1a\u4e3a predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u751f\u6210\u53cd\u5411\u56fe\uff0c\u6240\u4ee5\u6b64\u65f6 optimizer \u65e0\u6cd5\u62ff\u5230\u53cd\u5411\u7684\u6570\u636e\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u53bb\u6389 predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 optimizer \u76f8\u5173\u8bed\u53e5\u3002","title":"\u4f18\u5316\u7b97\u6cd5\u53ca\u8d85\u53c2\u914d\u7f6e"},{"location":"basics_topics/optimizer_in_function_config.html#_1","text":"\u5f53\u642d\u5efa\u597d\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u540e\uff0c\u9700\u8981\u7ecf\u8fc7\u8bad\u7ec3\u624d\u80fd\u7528\u6765\u505a\u9884\u6d4b\u3002\u800c\u8bad\u7ec3\u7684\u8fc7\u7a0b\u5c31\u662f\u7f51\u7edc\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u88ab\u4f18\u5316\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u91c7\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u548c\u6307\u5b9a\u7684 Optimizer \u66f4\u65b0\u53c2\u6570\uff0c\u672c\u6587\u91cd\u70b9\u4ecb\u7ecd\u5728 OneFlow \u4e2d\u5982\u4f55\u8bbe\u7f6e Optimizer \u548c \u8d85\u53c2(Hyperparameters) \u3002 \u6587\u7ae0\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a \u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\u548c\u7528\u4e8e\u9884\u6d4b\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u914d\u7f6e\u793a\u4f8b\uff1b optimizer \u53ca \u5b66\u4e60\u7b56\u7565\u7684\u4f7f\u7528\uff1b \u7531\u4e8e\u9519\u8bef\u914d\u7f6e\u5bfc\u81f4\u7684\u5e38\u89c1\u9519\u8bef\u53ca\u89e3\u51b3\u65b9\u6cd5 \u53ef\u4ee5\u5728\u4e0d\u4e86\u89e3 OneFlow \u8bbe\u8ba1\u548c\u6982\u5ff5\u7684\u60c5\u51b5\u4e0b\uff0c\u76f4\u63a5\u91c7\u7528 \u914d\u7f6e\u793a\u4f8b \u90e8\u5206\u7684\u8bad\u7ec3\u6216\u9884\u6d4b\u914d\u7f6e\uff1b\u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\u8bf7\u53c2\u8003 optimizer API \u6587\u6863","title":"\u914d\u7f6e\u4f18\u5316\u7b97\u6cd5\u548c\u8d85\u53c2"},{"location":"basics_topics/optimizer_in_function_config.html#_2","text":"\u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 oneflow.global_function \u88c5\u9970\u5668\u53ca\u4f5c\u4e1a\u51fd\u6570\u7684\u6982\u5ff5\uff0c\u672c\u6587\u7684\u914d\u7f6e\uff0c\u5efa\u7acb\u5728\u6b64\u57fa\u7840\u4e0a\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5411\u8be5\u88c5\u9970\u5668\u4f20\u9012 function_config \u53c2\u6570\u8fbe\u5230\u914d\u7f6e\u4f5c\u4e1a\u51fd\u6570\u7684\u76ee\u7684\u3002 \u5982\u679c\u5bf9\u4e8e oneflow.global_function \u8fd8\u4e0d\u4e86\u89e3\uff0c\u8bf7\u5148\u53c2\u9605 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u53ca \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u914d\u7f6e\u7684\u57fa\u672c\u6982\u5ff5"},{"location":"basics_topics/optimizer_in_function_config.html#_3","text":"","title":"\u914d\u7f6e\u793a\u4f8b"},{"location":"basics_topics/optimizer_in_function_config.html#_4","text":"\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u4e8e\u9884\u6d4b\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a eval_job \u3002 \u6211\u4eec\u901a\u8fc7 get_eval_config() \u5b9a\u4e49\u4e86 eval_job() \u7684\u914d\u7f6e\uff0c\u5e76\u5c06 get_eval_config() \u4f5c\u4e3a @flow.global_function \u7684\u53c2\u6570\uff0c\u5e94\u7528\u5230 eval_job() \u51fd\u6570\u3002\u540c\u65f6\uff0c\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 type=\"predict\" \u6765\u8868\u660e\u8be5\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u9884\u6d4b\uff0c\u8fd9\u6837\uff0cOneFlow \u4e0d\u4f1a\u5728\u8fd9\u4e2a\u4f5c\u4e1a\u51fd\u6570\u4e2d\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u3002 def get_eval_config (): config = flow . function_config () config . default_data_type ( flow . float ) return config @flow . global_function ( type = \"predict\" , get_eval_config ()) def eval_job () -> tp . Numpy : # build neural network here","title":"\u9884\u6d4b\u914d\u7f6e"},{"location":"basics_topics/optimizer_in_function_config.html#_5","text":"\u5982\u679c\u6307\u5b9a @flow.global_function \u7684 type \u53c2\u6570\u4e3a train \uff0c\u5c31\u80fd\u591f\u5f97\u5230\u4e00\u4e2a\u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\u3002 \u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c train_job \u4e3a\u7528\u4e8e\u8bad\u7ec3\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u91c7\u7528\u9ed8\u8ba4\u7684 function_config \u914d\u7f6e\uff08\u56e0\u6b64\u6ca1\u6709\u5411 function_config \u4f20\u53c2)\u3002 \u56e0\u4e3a OneFlow \u4f1a\u4e3a train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u56e0\u6b64\u9700\u8981\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u6307\u5b9a optimizer\u3001\u5b66\u4e60\u7387\u7b49\u8d85\u53c2\u6570\u7684\u8bbe\u5b9a\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a flow.optimizer.PiecewiseConstantScheduler \u8bbe\u7f6e\u4e86\u5b66\u4e60\u7387\uff080.1\uff09\u53ca\u5b66\u4e60\u7b56\u7565\uff08PiecewiseConstantScheduler\uff0c\u5206\u6bb5\u7f29\u653e\u7b56\u7565\uff09\uff0cOneFlow \u4e2d\u8fd8\u5185\u7f6e\u4e86\u5176\u5b83\u5b66\u4e60\u7b56\u7565\uff0c\u5982\uff1a CosineScheduler \u3001 CustomScheduler \u3001 InverseTimeScheduler \u7b49\u3002 \u5728 flow.optimizer.SGD(lr_scheduler, momentum=0).minimize(loss) \u8bbe\u7f6e optimizer \u4e3a SGD\uff0c\u5e76\u6307\u5b9a\u4f18\u5316\u76ee\u6807\u4e3a loss \u3002OneFlow \u4e2d\u5185\u7f6e\u4e86\u591a\u79cd optimizer\uff0c\u5b83\u4eec\u5206\u522b\u662f\uff1a SGD \u3001 Adam \u3001 AdamW \u3001 LazyAdam \u3001 LARS \u3001 RMSProp \uff0c\u53ef\u53c2\u9605 API \u6587\u6863\u83b7\u53d6\u4f7f\u7528\u65b9\u6cd5\u53ca\u7b97\u6cd5\u7ec6\u8282\u3002","title":"\u8bad\u7ec3\u914d\u7f6e"},{"location":"basics_topics/optimizer_in_function_config.html#faq","text":"\u62a5\u9519 Check failed: job().job_conf().train_conf().has_model_update_conf() \u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684 type \u4e3a \"train\" \uff0c\u4f46\u662f\u6ca1\u6709\u8bbe\u7f6e optimizer \u53ca\u4f18\u5316\u76ee\u6807\uff0c\u90a3\u4e48\u5728\u53cd\u5411\u4f20\u64ad\u65f6\uff0cOneFlow \u4f1a\u56e0\u4e3a\u4e0d\u77e5\u9053\u5982\u4f55\u66f4\u65b0\u53c2\u6570\u800c\u62a5\u9519\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u4e3a\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570\u914d\u7f6e optimizer \u5e76\u6307\u5b9a\u4f18\u5316\u76ee\u6807\u3002 \u62a5\u9519 Check failed: NeedBackwardOp \u5982\u679c\u4f5c\u4e1a\u51fd\u6570\u7684 type \u4e3a \"predict\" \uff0c\u5374\uff08\u9519\u8bef\u5730\uff09\u914d\u7f6e\u4e86 optimizer \u65f6\uff0c\u56e0\u4e3a OneFlow \u4e0d\u4f1a\u4e3a predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u751f\u6210\u53cd\u5411\u56fe\uff0c\u6240\u4ee5\u6b64\u65f6 optimizer \u65e0\u6cd5\u62ff\u5230\u53cd\u5411\u7684\u6570\u636e\u3002\u89e3\u51b3\u65b9\u6cd5\uff1a\u53bb\u6389 predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u4e2d\u7684 optimizer \u76f8\u5173\u8bed\u53e5\u3002","title":"FAQ"},{"location":"contribute/intro.html","text":"OneFlow \u4f5c\u4e3a\u6838\u5fc3\u7ade\u4e89\u529b\u7a81\u51fa\u3001\u5177\u6709\u9ad8\u58c1\u5792\u7684\u5f00\u6e90\u57fa\u7840\u8f6f\u4ef6\u8bbe\u65bd\uff0c\u8fd8\u5728\u5feb\u901f\u8fed\u4ee3\u548c\u8fdb\u6b65\u4e4b\u4e2d\u3002 OneFlow\u7684\u6210\u957f\uff0c\u79bb\u4e0d\u5f00\u50cf\u4f60\u4e00\u6837\u70ed\u7231\u5f00\u6e90\u7684\u670b\u53cb\u4eec\u3002\u4f60\u6240\u8d21\u732e\u7684\u6bcf\u4e00\u884c\u4ee3\u7801\uff0c\u63d0\u4ea4\u7684\u6bcf\u4e00\u4e2a issue\uff0c\u62a5\u544a\u7684\u6bcf\u4e00\u4e2a bug\uff0c\u751a\u81f3\u6bcf\u4e00\u6b21\u63d0\u95ee\uff0c\u90fd\u5bf9 OneFlow \u5f25\u8db3\u73cd\u8d35\u3002 \u52a9\u529bOneFlow \u00b6 \u65e0\u8bba\u662f\u8d21\u732e\u4ee3\u7801\u3001\u6dfb\u52a0 API \u6587\u6863\u3001\u6574\u7406 bugs \u548c issues\u3001review \u4ee3\u7801\u2026\u2026 OneFlow \u5728\u65b9\u65b9\u9762\u9762\u90fd\u671f\u5f85\u4f60\u7684\u52a9\u529b\u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u81ea\u8eab\u7684\u60c5\u51b5\uff0c\u9009\u62e9\u4ee5\u4e0b\u7684\u4e00\u9879\u6216\u8005\u591a\u9879\uff0c\u53c2\u4e0e\u5230 OneFlow \u7684\u5f00\u6e90\u9879\u76ee\u4e2d\u6765\uff1a \u8d21\u732e\u4ee3\u7801 \u8d21\u732e\u6d4b\u8bd5\u6848\u4f8b \u5efa\u8bbeAPI\u6587\u6863 Review PR \u5411\u6709\u9700\u8981\u7684\u4eba\u63a8\u8350 OneFlow \u53c2\u4e0e OneFlow \u7684\u7fa4\u8ba8\u8bba \u2026\u2026 \u6240\u6709\u4f60\u80fd\u60f3\u5230\u7684\u8ba9 OneFlow \u53d8\u5f97\u66f4\u597d\u7684\u4e8b\u60c5 \u8d21\u732e\u4ee3\u7801 \u00b6 \u6211\u4eec\u7684\u4e3b\u8981\u5f00\u6e90\u4ed3\u5e93\u6709\uff1a oneflow \uff1a\u5305\u542bOneFlow \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7684\u5b8c\u6574\u4ee3\u7801 OneFlow-Benchmark \uff1a\u5305\u542b\u5728OneFlow\u4e0a\u5b9e\u73b0\u7684\u591a\u79cd\u6a21\u578b\uff08\u542b\u811a\u672c\u3001\u6587\u6863\u3001\u6570\u636e\u96c6\u5904\u7406\u65b9\u6cd5\u7b49\uff09 \u4f60\u4e5f\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u6216\u8005\u521b\u5efa\u66f4\u591a\u7684 OneFlow \u5f00\u6e90\u9879\u76ee\u3002 \u8d21\u732e\u6d4b\u8bd5\u6848\u4f8b \u00b6 OneFlow \u5df2\u7ecf\u5bf9\u73b0\u6709\u7684\u591a\u79cd\u6d41\u884c\u3001\u524d\u6cbf\u7684\u6a21\u578b\uff0c\u8fdb\u884c\u4e86\u590d\u73b0\u53ca\u6d4b\u8bd5\uff0c\u76f8\u5173\u7684\u811a\u672c\u53ca\u6587\u6863\u5747\u653e\u7f6e\u5728 OneFlow-Benchmark \u4ed3\u5e93\u3002 \u4f46\u662f OneFlow \u8fd8\u6709\u66f4\u591a\u6ca1\u6709\u6db5\u76d6\u7684\u6a21\u578b\uff0c\u671f\u5f85\u7531\u4f60\u8fc1\u79fb\u5230 OneFlow\u3002 \u6211\u4eec\u4e5f\u5f3a\u70c8\u6b22\u8fce\u4f7f\u7528 OneFlow \u5b9e\u73b0\u4f60\u81ea\u5df1\u7684\u539f\u521b\u7814\u7a76\uff0c\u5e76\u5728 OneFlow-Benchmark \u4e2d\u5206\u4eab\u3002 \u5efa\u8bbeAPI\u6587\u6863 \u00b6 OneFlow \u7684 API \u6587\u6863\u4f7f\u7528 sphinx \u63d0\u53d6\u51fd\u6570\u539f\u578b\u53ca docstring\u3002 API \u6587\u6863\u5de5\u7a0b\u5728 oneflow \u4ed3\u5e93\u7684 docs \u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\uff1a cd oneflow/docs && make dev \u6211\u4eec\u671f\u5f85\u6709\u4f60\u7684\u5e2e\u52a9\uff0c\u4e3a OneFlow Python API \u6dfb\u52a0 docstring \u53ca function annotation \u3002 Review \u00b6 \u6211\u4eec\u4ee5\u5851\u9020\u827a\u672f\u54c1\u7684\u5fc3\u6001\uff0c\u81f4\u529b\u4e8e\u5c06 OneFlow \u6253\u9020\u6210\u5145\u6ee1\u5de5\u4e1a\u7f8e\u611f\u7684\u57fa\u7840\u8f6f\u4ef6\u4ea7\u54c1\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e5f\u79bb\u4e0d\u5f00\u5f00\u6e90\u793e\u533a\u5bf9 OneFlow \u4ee3\u7801\u7684 review\u3002 \u671f\u5f85\u5927\u5bb6\u5728\u5404\u4e2a\u4ed3\u5e93\u4e2d\uff0c\u591a\u63d0\u4ea4issue\u3001PR\uff0c\u591a review\uff0cOneFlow \u524d\u8fdb\u7684\u8def\u4e2d\uff0c\u4e5f\u671f\u5f85\u6709\u4f60\u7684\u52a0\u5165\u3002 \u4ea4\u6d41QQ\u7fa4 \u00b6 \u52a0QQ\u7fa4 331883 \u6216\u626b\u63cf\u4e0b\u65b9\u4e8c\u7ef4\u7801","title":"OneFlow \u5f00\u6e90\u8ba1\u5212"},{"location":"contribute/intro.html#oneflow","text":"\u65e0\u8bba\u662f\u8d21\u732e\u4ee3\u7801\u3001\u6dfb\u52a0 API \u6587\u6863\u3001\u6574\u7406 bugs \u548c issues\u3001review \u4ee3\u7801\u2026\u2026 OneFlow \u5728\u65b9\u65b9\u9762\u9762\u90fd\u671f\u5f85\u4f60\u7684\u52a9\u529b\u3002 \u4f60\u53ef\u4ee5\u6839\u636e\u4f60\u81ea\u8eab\u7684\u60c5\u51b5\uff0c\u9009\u62e9\u4ee5\u4e0b\u7684\u4e00\u9879\u6216\u8005\u591a\u9879\uff0c\u53c2\u4e0e\u5230 OneFlow \u7684\u5f00\u6e90\u9879\u76ee\u4e2d\u6765\uff1a \u8d21\u732e\u4ee3\u7801 \u8d21\u732e\u6d4b\u8bd5\u6848\u4f8b \u5efa\u8bbeAPI\u6587\u6863 Review PR \u5411\u6709\u9700\u8981\u7684\u4eba\u63a8\u8350 OneFlow \u53c2\u4e0e OneFlow \u7684\u7fa4\u8ba8\u8bba \u2026\u2026 \u6240\u6709\u4f60\u80fd\u60f3\u5230\u7684\u8ba9 OneFlow \u53d8\u5f97\u66f4\u597d\u7684\u4e8b\u60c5","title":"\u52a9\u529bOneFlow"},{"location":"contribute/intro.html#_1","text":"\u6211\u4eec\u7684\u4e3b\u8981\u5f00\u6e90\u4ed3\u5e93\u6709\uff1a oneflow \uff1a\u5305\u542bOneFlow \u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u7684\u5b8c\u6574\u4ee3\u7801 OneFlow-Benchmark \uff1a\u5305\u542b\u5728OneFlow\u4e0a\u5b9e\u73b0\u7684\u591a\u79cd\u6a21\u578b\uff08\u542b\u811a\u672c\u3001\u6587\u6863\u3001\u6570\u636e\u96c6\u5904\u7406\u65b9\u6cd5\u7b49\uff09 \u4f60\u4e5f\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u6216\u8005\u521b\u5efa\u66f4\u591a\u7684 OneFlow \u5f00\u6e90\u9879\u76ee\u3002","title":"\u8d21\u732e\u4ee3\u7801"},{"location":"contribute/intro.html#_2","text":"OneFlow \u5df2\u7ecf\u5bf9\u73b0\u6709\u7684\u591a\u79cd\u6d41\u884c\u3001\u524d\u6cbf\u7684\u6a21\u578b\uff0c\u8fdb\u884c\u4e86\u590d\u73b0\u53ca\u6d4b\u8bd5\uff0c\u76f8\u5173\u7684\u811a\u672c\u53ca\u6587\u6863\u5747\u653e\u7f6e\u5728 OneFlow-Benchmark \u4ed3\u5e93\u3002 \u4f46\u662f OneFlow \u8fd8\u6709\u66f4\u591a\u6ca1\u6709\u6db5\u76d6\u7684\u6a21\u578b\uff0c\u671f\u5f85\u7531\u4f60\u8fc1\u79fb\u5230 OneFlow\u3002 \u6211\u4eec\u4e5f\u5f3a\u70c8\u6b22\u8fce\u4f7f\u7528 OneFlow \u5b9e\u73b0\u4f60\u81ea\u5df1\u7684\u539f\u521b\u7814\u7a76\uff0c\u5e76\u5728 OneFlow-Benchmark \u4e2d\u5206\u4eab\u3002","title":"\u8d21\u732e\u6d4b\u8bd5\u6848\u4f8b"},{"location":"contribute/intro.html#api","text":"OneFlow \u7684 API \u6587\u6863\u4f7f\u7528 sphinx \u63d0\u53d6\u51fd\u6570\u539f\u578b\u53ca docstring\u3002 API \u6587\u6863\u5de5\u7a0b\u5728 oneflow \u4ed3\u5e93\u7684 docs \u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u751f\u6210\uff1a cd oneflow/docs && make dev \u6211\u4eec\u671f\u5f85\u6709\u4f60\u7684\u5e2e\u52a9\uff0c\u4e3a OneFlow Python API \u6dfb\u52a0 docstring \u53ca function annotation \u3002","title":"\u5efa\u8bbeAPI\u6587\u6863"},{"location":"contribute/intro.html#review","text":"\u6211\u4eec\u4ee5\u5851\u9020\u827a\u672f\u54c1\u7684\u5fc3\u6001\uff0c\u81f4\u529b\u4e8e\u5c06 OneFlow \u6253\u9020\u6210\u5145\u6ee1\u5de5\u4e1a\u7f8e\u611f\u7684\u57fa\u7840\u8f6f\u4ef6\u4ea7\u54c1\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e5f\u79bb\u4e0d\u5f00\u5f00\u6e90\u793e\u533a\u5bf9 OneFlow \u4ee3\u7801\u7684 review\u3002 \u671f\u5f85\u5927\u5bb6\u5728\u5404\u4e2a\u4ed3\u5e93\u4e2d\uff0c\u591a\u63d0\u4ea4issue\u3001PR\uff0c\u591a review\uff0cOneFlow \u524d\u8fdb\u7684\u8def\u4e2d\uff0c\u4e5f\u671f\u5f85\u6709\u4f60\u7684\u52a0\u5165\u3002","title":"Review"},{"location":"contribute/intro.html#qq","text":"\u52a0QQ\u7fa4 331883 \u6216\u626b\u63cf\u4e0b\u65b9\u4e8c\u7ef4\u7801","title":"\u4ea4\u6d41QQ\u7fa4"},{"location":"extended_topics/consistent_mirrored.html","text":"Consistent \u4e0e Mirrored \u89c6\u89d2 \u00b6 \u5728\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0cOneFlow \u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cd\u89d2\u5ea6\u770b\u5f85\u6570\u636e\u4e0e\u6a21\u578b\u7684\u5173\u7cfb\uff0c\u88ab\u79f0\u4f5c consistent \u89c6\u89d2\u4e0e mirrored \u89c6\u89d2\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u7684\u533a\u522b\u53ca\u9002\u7528\u573a\u666f \u5728\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u91c7\u7528 mirrored \u89c6\u89d2\u53ca\u5176\u7279\u70b9 \u5728\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u91c7\u7528 consistent \u89c6\u89d2\u53ca\u5176\u7279\u70b9 \u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c \u00b6 \u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3 OneFlow \u4e2d\u7684 consistent \u548c mirrored \u89c6\u89d2\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u7684 \u6570\u636e\u5e76\u884c \u3001 \u6a21\u578b\u5e76\u884c \u4e24\u79cd\u5e76\u884c\u65b9\u5f0f\u7684\u533a\u522b\u3002 \u4e3a\u4e86\u66f4\u76f4\u89c2\u5730\u5c55\u793a\u4e24\u8005\u7684\u5dee\u522b\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u7b80\u5355\u7684 Op \uff1a\u77e9\u9635\u4e58\u6cd5\u3002 \u6211\u4eec\u5047\u5b9a\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u8f93\u5165\u77e9\u9635 I \uff0c\u901a\u8fc7\u77e9\u9635 I \u4e0e\u77e9\u9635 W \u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u5f97\u5230\u8f93\u51fa\u77e9\u9635 O \u3002 \u5982\u4ee5\u4e0a\u6240\u793a\uff0cI\u7684\u5927\u5c0f\u4e3a(N, C1)\uff0cW\u7684\u5927\u5c0f\u4e3a(C1, C2)\uff0cO\u7684\u5927\u5c0f\u4e3a(N, C2)\u3002 \u7ed3\u5408\u673a\u5668\u5b66\u4e60\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u53ef\u4ee5\u8d4b\u4e88\u4ee5\u4e0a\u51e0\u4e2a\u77e9\u9635\u76f4\u89c2\u610f\u4e49\uff1a I \u77e9\u9635\u4f5c\u4e3a\u8f93\u5165\u77e9\u9635\uff0c\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u6837\u672c\uff0c\u4e00\u884c\u4e2d\u7684\u5404\u5217\u4ee3\u8868\u4e86\u6837\u672c\u7684\u7279\u5f81 W \u77e9\u9635\u4ee3\u8868\u4e86\u6a21\u578b\u53c2\u6570 O \u662f\u9884\u6d4b\u7ed3\u679c\u6216\u8005 label \uff0c\u5982\u679c\u662f\u9884\u6d4b\u4f5c\u4e1a\uff0c\u90a3\u4e48\u5c31\u662f\u7531 I\u3001W \u6c42\u89e3 O\uff0c\u5f97\u5230\u5206\u7c7b\u7ed3\u679c\u7684\u8fc7\u7a0b\uff1b\u5982\u679c\u662f\u8bad\u7ec3\u4f5c\u4e1a\uff0c\u90a3\u4e48\u5c31\u662f\u7531 I \u4e0e O \u6c42\u89e3 W \u7684\u8fc7\u7a0b \u5f53\u4ee5\u4e0a I \u77e9\u9635\u7684\u884c N \u5f88\u5927\uff0c\u8bf4\u660e\u6837\u672c\u5f88\u591a\uff1b\u5982\u679c W \u77e9\u9635\u7684\u5217 C2 \u5f88\u5927\uff0c\u8bf4\u660e\u6a21\u578b\u590d\u6742\uff1b\u5f53\u6837\u672c\u6570\u76ee\u3001\u6a21\u578b\u590d\u6742\u7a0b\u5ea6\u590d\u6742\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff0c\u5355\u673a\u5355\u5361\u7684\u786c\u4ef6\u6761\u4ef6\u5df2\u7ecf\u65e0\u6cd5\u627f\u8f7d\u8bad\u7ec3\u4f5c\u4e1a\uff0c\u5c31\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u8bad\u7ec3\u3002\u800c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9 \u6570\u636e\u5e76\u884c \u548c \u6a21\u578b\u5e76\u884c \u3002 \u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\uff0c\u6211\u4eec\u5148\u7528\u4e0b\u56fe\u4f5c\u4e3a\u77e9\u9635\u76f8\u4e58 Op \u7684\u793a\u4f8b\uff1a \u7b49\u5f0f\u5de6\u8fb9\u7b2c1\u4e2a\u7070\u8272\u7684\u77e9\u9635\u4ee3\u8868\u8f93\u5165\u6837\u672c\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6837\u672c\uff1b\u7b49\u5f0f\u5de6\u8fb9\u7b2c2\u4e2a\u84dd\u8272\u7684\u77e9\u9635\u4ee3\u8868\u6a21\u578b\u3002 \u5728\u540e\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4ee5\u4e0a\u7684 op\uff0c\u5728\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u4e0b\uff0c\u4e0d\u540c\u7684\u201c\u5207\u5206\u201d\u65b9\u5f0f\u3002 \u6570\u636e\u5e76\u884c\u56fe\u793a \u00b6 \u5728 \u6570\u636e\u5e76\u884c \u4e2d\uff0c\u5c06\u6837\u672c\u6570\u636e\u8fdb\u884c\u5207\u5206\uff0c \u5207\u5206\u540e\u7684\u6570\u636e \u88ab\u9001\u81f3\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\uff0c\u4e0e \u5b8c\u6574\u7684\u6a21\u578b \u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u540e\u5c06\u591a\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u8fdb\u884c\u5408\u5e76\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6a21\u578b\u5e76\u884c\u56fe\u793a \u00b6 \u5728 \u6a21\u578b\u5e76\u884c \u4e2d\uff0c\u5c06\u6a21\u578b\u8fdb\u884c\u5207\u5206\uff0c \u5b8c\u6574\u7684\u6570\u636e \u88ab\u9001\u81f3\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\uff0c\u4e0e \u5207\u5206\u540e\u7684\u6a21\u578b \u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u540e\u5c06\u591a\u4e2a\u8282\u70b9\u7684\u8fd0\u7b97\u7ed3\u679c\u5408\u5e76\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u603b\u4e4b\uff1a \u6570\u636e\u5e76\u884c\u4e0b\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u7684\u6a21\u578b\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u6570\u636e\u88ab\u5207\u5206\uff1b \u6a21\u578b\u5e76\u884c\u4e0b\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u90fd\u63a5\u6536\u4e00\u6837\u7684\u5b8c\u6574\u6570\u636e\uff0c \u6a21\u578b\u88ab\u5207\u5206\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ecb\u7ecd OneFlow \u770b\u5f85\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e24\u79cd\u89c6\u89d2\uff08 mirrored \u89c6\u89d2\u4e0e consistent \u89c6\u89d2\uff09\uff0c\u5b66\u4e60\u5728\u4e0d\u540c\u7684\u89c6\u89d2\u4e0b\u5982\u4f55\u9009\u62e9\u5e76\u884c\u65b9\u5f0f\u3002 \u4e24\u7c7b\u5360\u4f4d\u7b26 \u00b6 \u5728 \u4f7f\u7528OneFlow\u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u53ca \u5b9a\u4e49\u4e0e\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 \u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u4e86 \u6570\u636e\u5360\u4f4d\u7b26 \u4e0e Blob \u7684\u6982\u5ff5\u3002 \u5b9e\u9645\u4e0a\uff0c\u9488\u5bf9\u5e76\u884c\uff0cOneFlow\u7684\u6570\u636e\u5360\u4f4d\u7b26\u8fd8\u53ef\u4ee5\u7ec6\u5206\u4e3a \u4e24\u7c7b\uff1a\u5206\u522b\u901a\u8fc7\u63a5\u53e3 oneflow.typing.Numpy.Placeholder \u548c oneflow.typing.ListNumpy.Placeholder \u6784\u9020\u7684\u5360\u4f4d\u7b26\uff0c\u5206\u522b\u5bf9\u5e94 Consistent \u4e0e Mirrored \u60c5\u51b5\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4e2d\u770b\u5230\u5b83\u4eec\u7684\u5177\u4f53\u5e94\u7528\u3002 \u5728 OneFlow \u4e2d\u4f7f\u7528 mirrored \u89c6\u89d2 \u00b6 \u5176\u5b83\u7684\u6846\u67b6\uff0c\u5982 TensorFlow\u3001Pytorch \u5747\u652f\u6301 mirroed view \uff1bOneFlow \u7684 mirrored \u89c6\u89d2\u4e0e\u5b83\u4eec\u7c7b\u4f3c\u3002 \u5728 mirrored \u89c6\u89d2\u4e0b\uff0c\u6a21\u578b\u88ab\u955c\u50cf\u590d\u5236\u5230\u6bcf\u5f20\u5361\u4e0a\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6a21\u578b\u6784\u56fe\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u80fd\u91c7\u7528 \u6570\u636e\u5e76\u884c \u3002 \u5728 OneFlow \u4e2d\uff0c\u9ed8\u8ba4\u4e0d\u662f mirrored \u7b56\u7565\uff0c\u9700\u8981\u901a\u8fc7 flow.function_config() \u7684 default_logical_view \u63a5\u53e3\u6765\u663e\u5f0f\u6307\u5b9a\uff1a func_config = flow . function_config () func_config . default_logical_view ( flow . scope . mirrored_view ()) \u5728 mirrored_view \u4e0b\uff0c\u53ea\u80fd\u91c7\u7528 \u6570\u636e\u5e76\u884c \u7684\u5e76\u884c\u6a21\u5f0f\uff0c\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u6309\u7167\u8bad\u7ec3\u8282\u70b9\u7684\u6570\u76ee\uff08\u663e\u5361\u603b\u6570\uff09\u8fdb\u884c\u5e73\u5747\u5207\u5206\uff0c\u5e76\u5c06\u5207\u5206\u540e\u7684\u6570\u636e\u653e\u5165 list \u4e2d\u8fdb\u884c\u4f20\u9012\uff0c list \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u540e\u5206\u914d\u7ed9 \u5404\u4e2a\u663e\u5361 \u7684\u5b9e\u9645\u6570\u636e\u3002 \u8bad\u7ec3\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e5f\u53d8\u4f5c\u4e86 oneflow.typing.ListNumpy \uff0c\u662f\u4e00\u4e2a list \uff0c list \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5bf9\u5e94\u4e86\u6bcf\u5f20\u5361\u4e0a\u8bad\u7ec3\u7ed3\u679c\u3002 \u4ee5\u4e0a\u63d0\u53ca\u7684 list \u4e2d\u7684\u6240\u6709\u5143\u7d20 \u62fc\u63a5\u5728\u4e00\u8d77 \uff0c\u624d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 BATCH\u3002\u800cOneFlow\u4f1a\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u62fc\u63a5\u7684\u8fc7\u7a0b\uff0c\u65e0\u9700\u7528\u6237\u8fdb\u884c\u591a\u4f59\u7684\u64cd\u4f5c\u3002 \u4ee3\u7801 \u00b6 \u5728\u4ee5\u4e0b\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u91c7\u7528 mirrored_view \u89c6\u89d2\uff0c\u4f7f\u75282\u4e2a GPU \u8fdb\u884c\u8bad\u7ec3\u3002 \u4ee3\u7801\uff1a mirrored_strategy.py \u91cd\u70b9\u90e8\u5206\u7684\u8bf4\u660e\u8bf7\u89c1\u540e\u6587\u201c\u4ee3\u7801\u89e3\u6790\u201d\u90e8\u5206\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a \u4f7f\u7528 flow.config.gpu_device_num \u8bbe\u7f6e GPU \u6570\u76ee\u4e3a2 flow . config . gpu_device_num ( 2 ) oneflow.typing.ListNumpy.Placeholder \u5b9a\u4e49\u7684\u6837\u672c\u6570\u76ee\uff0c\u662f\u88ab\u5207\u5206\u540e\u7684\u6570\u76ee\uff0c\u5373\u4ee3\u7801\u4e2d\u7684 BATCH_SIZE_PER_GPU \u4e0e\u603b\u6837\u672c\u6570 BATCH_SIZE \u7684\u5173\u7cfb\u4e3a\uff1a BATCH_SIZE=BATCH_SIZE_PER_GPU\u00d7GPU_NUM def train_job ( images : tp . ListNumpy . Placeholder (( BATCH_SIZE_PER_GPU , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . ListNumpy . Placeholder (( BATCH_SIZE_PER_GPU ,), dtype = flow . int32 ), ) -> tp . ListNumpy : \u5207\u5206\u540e\u7684\u6570\u636e\uff0c\u9700\u8981\u4fdd\u5b58\u81f3 list \u4e2d\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\uff1b list \u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u4e0e \u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee \u4e00\u81f4\uff1bOneFlow \u5c06\u6309\u7167 list \u4e2d\u5143\u7d20\u987a\u5e8f\uff0c\u5411\u5404\u5361\u4f20\u9012\u6570\u636e( list \u4e2d\u7b2c i \u4e2a\u5143\u7d20\u5bf9\u5e94\u7b2c i \u5f20\u5361)\uff1a images1 = images [: BATCH_SIZE_PER_GPU ] images2 = images [ BATCH_SIZE_PER_GPU :] labels1 = labels [: BATCH_SIZE_PER_GPU ] labels2 = labels [ BATCH_SIZE_PER_GPU :] imgs_list = [ images1 , images2 ] labels_list = [ labels1 , labels2 ] loss = np . array ( train_job ( imgs_list , labels_list )) \u8fd4\u56de\u7684\u5f97\u5230\u7684\u7ed3\u679c loss \uff0c\u662f\u4e00\u4e2a list \u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8be5 list \u4e2d\u5143\u7d20\u4e2a\u6570\u5e94\u4e0e \u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee \u4e00\u81f4\uff1b list \u4e2d\u7684\u7b2ci\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e86\u7b2c i \u5f20 GPU \u5361\u4e0a\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u4f46\u7531\u4e8eOneFlow\u4f1a\u5728\u540e\u53f0\u81ea\u52a8\u6267\u884c\u62fc\u63a5\u64cd\u4f5c\uff0c\u6211\u4eec\u65e0\u9700\u518d\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u591a\u4f59\u7684\u62fc\u63a5\u6b65\u9aa4\u3002\u53ea\u9700\u5c06loss\u5408\u5e76\u540e\u8fdb\u884c\u8ba1\u7b97\u5e76\u6253\u5370\u5176\u5e73\u5747\u503c\u3002 total_loss = np . array ([ * loss [ 0 ], * loss [ 1 ]]) if i % 20 == 0 : print ( loss . mean ()) \u5728 OneFlow \u4e2d\u4f7f\u7528 consistent \u89c6\u89d2 \u00b6 \u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 mirrored \u89c6\u89d2\uff0c\u77e5\u9053\u5728 mirrored_view \u89c6\u89d2\u4e0b\uff0c\u6837\u672c\u4f1a\u88ab\u5e73\u5747\u5206\u914d\u5230\u591a\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u6a21\u578b\u4e0a\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u4e0a\u7684\u7ed3\u679c\uff0c\u9700\u8981\u7ec4\u88c5\u624d\u80fd\u5f97\u5230\u771f\u6b63\u5b8c\u6574\u7684 BATCH\uff0c\u5bf9\u5e94\u4e86\u903b\u8f91\u4e0a\u7684 op \u4e0e Blob\u3002 \u9664\u4e86 mirrored \u89c6\u89d2\u5916\uff0cOneFlow \u8fd8\u63d0\u4f9b\u4e86 consistent \u89c6\u89d2\u3002consistent \u89c6\u89d2\u662f OneFlow \u7684\u4e00\u5927\u7279\u8272\uff0c\u4e0e mirrored \u89c6\u89d2\u76f8\u6bd4\u6709\u5f88\u5927\u7684\u4f18\u52bf\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b OneFlow \u91c7\u53d6\u7684\u662f consistent \u89c6\u89d2\uff0c\u5982\u679c\u60f3\u663e\u5f0f\u58f0\u660e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u8bbe\u7f6e\uff1a config = flow . function_config () config . default_logical_view ( flow . scope . consistent_view ()) \u4e4b\u6240\u4ee5\u8bf4 consistent \u89c6\u89d2\u662f OneFlow \u7684\u4e00\u5927\u7279\u8272\uff0c\u662f\u56e0\u4e3a\u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u82e5\u91c7\u7528 consistent_view \uff0c\u90a3\u4e48\u4ece\u7528\u6237\u7684\u89c6\u89d2\u770b\uff0c\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u591a\u4e2a\u8bbe\u5907\u5c06\u83b7\u5f97 \u903b\u8f91\u4e0a\u7684\u7edf\u4e00 \uff0c\u540c\u6837\u4ee5\u672c\u6587\u5f00\u5934\u7684\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8 \u77e9\u9635\u4e58\u6cd5 \u672c\u8eab\u6570\u5b66\u8ba1\u7b97\u4e0a\u7684\u610f\u4e49\uff1b\u800c\u5728\u5de5\u7a0b\u4e0a\u5230\u5e95\u5982\u4f55\u914d\u7f6e\u3001\u91c7\u7528\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u6570\u636e\u5e76\u884c\u7b49\u7ec6\u8282\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528 OneFlow \u7684\u63a5\u53e3\u8f7b\u677e\u5b8c\u6210\u3002OneFlow \u5185\u90e8\u4f1a\u9ad8\u6548\u53ef\u9760\u5730\u89e3\u51b3 \u6570\u636e\u5e76\u884c\u4e2d\u7684\u6570\u636e\u5207\u5206 \u3001 \u6a21\u578b\u5e76\u884c\u4e2d\u7684\u6a21\u578b\u5207\u5206 \u3001 \u4e32\u884c\u903b\u8f91 \u7b49\u95ee\u9898\u3002 \u5728 OneFlow \u7684 consistent \u89c6\u89d2\u4e0b\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6a21\u578b\u5e76\u884c\u3001\u6570\u636e\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u6216\u8005\u6df7\u5408\u5e76\u884c\u3002 \u4ee3\u7801 \u00b6 \u4ee5\u4e0b\u811a\u672c\uff0c\u6211\u4eec\u91c7\u7528 consistent \u89c6\u89d2\uff0c\u4f7f\u75282\u4e2a GPU \u8fdb\u884c\u8bad\u7ec3\uff0cconsistent \u7b56\u7565\u4e0b\u9ed8\u8ba4\u7684\u5e76\u884c\u65b9\u5f0f\u4ecd\u7136\u662f \u6570\u636e\u5e76\u884c \u3002\u5173\u4e8e\u5982\u4f55\u5728 consistent \u7b56\u7565\u4e0b\u8bbe\u7f6e \u6a21\u578b\u5e76\u884c \u53ca \u6df7\u5408\u5e76\u884c \u4e0d\u5728\u672c\u6587\u8ba8\u8bba\u8303\u56f4\uff0c\u6211\u4eec\u5728 OneFlow \u7684\u5e76\u884c\u7279\u8272 \u4e2d\u6709\u4e13\u95e8\u7684\u4ecb\u7ecd\u4e0e\u793a\u4f8b\u3002 \u4ee3\u7801\uff1a consistent_strategy.py \u4ee3\u7801\u4e2d\u7684\u91cd\u70b9\u5c06\u5728\u4e0b\u6587\u4ecb\u7ecd\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a \u4f7f\u7528 flow.config.gpu_device_num \u8bbe\u7f6eGPU\u6570\u76ee\uff1a flow . config . gpu_device_num ( 2 ) \u4f7f\u7528 tp.Numpy.Placeholder \u5b9a\u4e49 consistent \u89c6\u89d2\u4e0b\u7684\u5360\u4f4d\u7b26\uff0c\u56e0\u4e3a Numpy.Placeholder \u4ea7\u51fa\u7684 Blob \u4ee3\u8868\u903b\u8f91\u4e0a\u7684 op \u53ca\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u56e0\u6b64\u6b64\u5904\u7684 BATCH_SIZE \u5c31\u662f\u6574\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u6837\u672c\u603b\u548c\uff0c\u4e0d\u9700\u8981\u4eba\u4e3a\u5207\u5206\u6216\u8005\u7ec4\u5408 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u76f4\u63a5\u5f97\u5230\u8bad\u7ec3\u7ed3\u679c\uff0c\u8bad\u7ec3\u7ed3\u679c\u5df2\u7ecf\u7531 OneFlow \u5b8c\u6210\u5206\u5e03\u5f0f\u8fc7\u7a0b\u4e2d\u5207\u5206\u4e0e\u5408\u5e76\u7684\u5de5\u4f5c\u3002\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u591a\u5361\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e0e\u5355\u5361\u7684\u8bad\u7ec3\uff0c\u4ee3\u7801\u5dee\u522b\u6781\u5c11\uff0c\u4e0a\u624b\u4f53\u9a8c\u51e0\u4e4e\u4e00\u6837 for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u6269\u5c55 \u00b6 \u968f\u7740\u673a\u5668\u5b66\u4e60\u7406\u8bba\u4e0e\u5b9e\u8df5\u53d1\u5c55\uff0c\u73b0\u5728\u5df2\u7ecf\u51fa\u73b0\u4e86\u5f88\u591a\u5355\u673a\u65e0\u6cd5\u8bad\u7ec3\u7684\u7f51\u7edc\uff1b\u4e5f\u51fa\u73b0\u4e86\u8d8a\u6765\u8d8a\u591a\u4ec5\u91c7\u7528\u6570\u636e\u5e76\u884c\u65e0\u6cd5\u5f88\u597d\u5b8c\u6210\u8bad\u7ec3\u7684\u6a21\u578b\u3002 \u91c7\u7528 OneFlow \u7684 consistent \u89c6\u89d2\uff0c\u901a\u8fc7\u81ea\u7531\u9009\u62e9\u53ca\u7ec4\u5408\u5e76\u884c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u5728 OneFlow \u7684\u5e76\u884c\u7279\u8272 \u8fdb\u884c\u4e86\u4e13\u95e8\u7684\u4ecb\u7ecd\u3002","title":"Consistent \u4e0e Mirrored \u89c6\u89d2"},{"location":"extended_topics/consistent_mirrored.html#consistent-mirrored","text":"\u5728\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0cOneFlow \u6846\u67b6\u63d0\u4f9b\u4e86\u4e24\u79cd\u89d2\u5ea6\u770b\u5f85\u6570\u636e\u4e0e\u6a21\u578b\u7684\u5173\u7cfb\uff0c\u88ab\u79f0\u4f5c consistent \u89c6\u89d2\u4e0e mirrored \u89c6\u89d2\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a \u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u7684\u533a\u522b\u53ca\u9002\u7528\u573a\u666f \u5728\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u91c7\u7528 mirrored \u89c6\u89d2\u53ca\u5176\u7279\u70b9 \u5728\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u91c7\u7528 consistent \u89c6\u89d2\u53ca\u5176\u7279\u70b9","title":"Consistent \u4e0e Mirrored \u89c6\u89d2"},{"location":"extended_topics/consistent_mirrored.html#_1","text":"\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3 OneFlow \u4e2d\u7684 consistent \u548c mirrored \u89c6\u89d2\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u5206\u5e03\u5f0f\u4efb\u52a1\u4e2d\u7684 \u6570\u636e\u5e76\u884c \u3001 \u6a21\u578b\u5e76\u884c \u4e24\u79cd\u5e76\u884c\u65b9\u5f0f\u7684\u533a\u522b\u3002 \u4e3a\u4e86\u66f4\u76f4\u89c2\u5730\u5c55\u793a\u4e24\u8005\u7684\u5dee\u522b\uff0c\u6211\u4eec\u5148\u770b\u4e00\u4e2a\u7b80\u5355\u7684 Op \uff1a\u77e9\u9635\u4e58\u6cd5\u3002 \u6211\u4eec\u5047\u5b9a\u5728\u6a21\u578b\u8bad\u7ec3\u4e2d\uff0c\u5b58\u5728\u4e00\u4e2a\u8f93\u5165\u77e9\u9635 I \uff0c\u901a\u8fc7\u77e9\u9635 I \u4e0e\u77e9\u9635 W \u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u5f97\u5230\u8f93\u51fa\u77e9\u9635 O \u3002 \u5982\u4ee5\u4e0a\u6240\u793a\uff0cI\u7684\u5927\u5c0f\u4e3a(N, C1)\uff0cW\u7684\u5927\u5c0f\u4e3a(C1, C2)\uff0cO\u7684\u5927\u5c0f\u4e3a(N, C2)\u3002 \u7ed3\u5408\u673a\u5668\u5b66\u4e60\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u53ef\u4ee5\u8d4b\u4e88\u4ee5\u4e0a\u51e0\u4e2a\u77e9\u9635\u76f4\u89c2\u610f\u4e49\uff1a I \u77e9\u9635\u4f5c\u4e3a\u8f93\u5165\u77e9\u9635\uff0c\u6bcf\u4e00\u884c\u90fd\u662f\u4e00\u4e2a\u6837\u672c\uff0c\u4e00\u884c\u4e2d\u7684\u5404\u5217\u4ee3\u8868\u4e86\u6837\u672c\u7684\u7279\u5f81 W \u77e9\u9635\u4ee3\u8868\u4e86\u6a21\u578b\u53c2\u6570 O \u662f\u9884\u6d4b\u7ed3\u679c\u6216\u8005 label \uff0c\u5982\u679c\u662f\u9884\u6d4b\u4f5c\u4e1a\uff0c\u90a3\u4e48\u5c31\u662f\u7531 I\u3001W \u6c42\u89e3 O\uff0c\u5f97\u5230\u5206\u7c7b\u7ed3\u679c\u7684\u8fc7\u7a0b\uff1b\u5982\u679c\u662f\u8bad\u7ec3\u4f5c\u4e1a\uff0c\u90a3\u4e48\u5c31\u662f\u7531 I \u4e0e O \u6c42\u89e3 W \u7684\u8fc7\u7a0b \u5f53\u4ee5\u4e0a I \u77e9\u9635\u7684\u884c N \u5f88\u5927\uff0c\u8bf4\u660e\u6837\u672c\u5f88\u591a\uff1b\u5982\u679c W \u77e9\u9635\u7684\u5217 C2 \u5f88\u5927\uff0c\u8bf4\u660e\u6a21\u578b\u590d\u6742\uff1b\u5f53\u6837\u672c\u6570\u76ee\u3001\u6a21\u578b\u590d\u6742\u7a0b\u5ea6\u590d\u6742\u5230\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff0c\u5355\u673a\u5355\u5361\u7684\u786c\u4ef6\u6761\u4ef6\u5df2\u7ecf\u65e0\u6cd5\u627f\u8f7d\u8bad\u7ec3\u4f5c\u4e1a\uff0c\u5c31\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u8bad\u7ec3\u3002\u800c\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9 \u6570\u636e\u5e76\u884c \u548c \u6a21\u578b\u5e76\u884c \u3002 \u4e3a\u4e86\u4fbf\u4e8e\u7406\u89e3\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\uff0c\u6211\u4eec\u5148\u7528\u4e0b\u56fe\u4f5c\u4e3a\u77e9\u9635\u76f8\u4e58 Op \u7684\u793a\u4f8b\uff1a \u7b49\u5f0f\u5de6\u8fb9\u7b2c1\u4e2a\u7070\u8272\u7684\u77e9\u9635\u4ee3\u8868\u8f93\u5165\u6837\u672c\uff0c\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u6837\u672c\uff1b\u7b49\u5f0f\u5de6\u8fb9\u7b2c2\u4e2a\u84dd\u8272\u7684\u77e9\u9635\u4ee3\u8868\u6a21\u578b\u3002 \u5728\u540e\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4ee5\u4e0a\u7684 op\uff0c\u5728\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u4e0b\uff0c\u4e0d\u540c\u7684\u201c\u5207\u5206\u201d\u65b9\u5f0f\u3002","title":"\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c"},{"location":"extended_topics/consistent_mirrored.html#_2","text":"\u5728 \u6570\u636e\u5e76\u884c \u4e2d\uff0c\u5c06\u6837\u672c\u6570\u636e\u8fdb\u884c\u5207\u5206\uff0c \u5207\u5206\u540e\u7684\u6570\u636e \u88ab\u9001\u81f3\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\uff0c\u4e0e \u5b8c\u6574\u7684\u6a21\u578b \u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u540e\u5c06\u591a\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u8fdb\u884c\u5408\u5e76\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u6570\u636e\u5e76\u884c\u56fe\u793a"},{"location":"extended_topics/consistent_mirrored.html#_3","text":"\u5728 \u6a21\u578b\u5e76\u884c \u4e2d\uff0c\u5c06\u6a21\u578b\u8fdb\u884c\u5207\u5206\uff0c \u5b8c\u6574\u7684\u6570\u636e \u88ab\u9001\u81f3\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\uff0c\u4e0e \u5207\u5206\u540e\u7684\u6a21\u578b \u8fdb\u884c\u8fd0\u7b97\uff0c\u6700\u540e\u5c06\u591a\u4e2a\u8282\u70b9\u7684\u8fd0\u7b97\u7ed3\u679c\u5408\u5e76\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u603b\u4e4b\uff1a \u6570\u636e\u5e76\u884c\u4e0b\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u7684\u6a21\u578b\u662f\u5b8c\u5168\u4e00\u6837\u7684\uff0c\u6570\u636e\u88ab\u5207\u5206\uff1b \u6a21\u578b\u5e76\u884c\u4e0b\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u90fd\u63a5\u6536\u4e00\u6837\u7684\u5b8c\u6574\u6570\u636e\uff0c \u6a21\u578b\u88ab\u5207\u5206\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4ecb\u7ecd OneFlow \u770b\u5f85\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e24\u79cd\u89c6\u89d2\uff08 mirrored \u89c6\u89d2\u4e0e consistent \u89c6\u89d2\uff09\uff0c\u5b66\u4e60\u5728\u4e0d\u540c\u7684\u89c6\u89d2\u4e0b\u5982\u4f55\u9009\u62e9\u5e76\u884c\u65b9\u5f0f\u3002","title":"\u6a21\u578b\u5e76\u884c\u56fe\u793a"},{"location":"extended_topics/consistent_mirrored.html#_4","text":"\u5728 \u4f7f\u7528OneFlow\u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u53ca \u5b9a\u4e49\u4e0e\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 \u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u4e86 \u6570\u636e\u5360\u4f4d\u7b26 \u4e0e Blob \u7684\u6982\u5ff5\u3002 \u5b9e\u9645\u4e0a\uff0c\u9488\u5bf9\u5e76\u884c\uff0cOneFlow\u7684\u6570\u636e\u5360\u4f4d\u7b26\u8fd8\u53ef\u4ee5\u7ec6\u5206\u4e3a \u4e24\u7c7b\uff1a\u5206\u522b\u901a\u8fc7\u63a5\u53e3 oneflow.typing.Numpy.Placeholder \u548c oneflow.typing.ListNumpy.Placeholder \u6784\u9020\u7684\u5360\u4f4d\u7b26\uff0c\u5206\u522b\u5bf9\u5e94 Consistent \u4e0e Mirrored \u60c5\u51b5\u3002 \u6211\u4eec\u5c06\u5728\u4e0b\u6587\u4e2d\u770b\u5230\u5b83\u4eec\u7684\u5177\u4f53\u5e94\u7528\u3002","title":"\u4e24\u7c7b\u5360\u4f4d\u7b26"},{"location":"extended_topics/consistent_mirrored.html#oneflow-mirrored","text":"\u5176\u5b83\u7684\u6846\u67b6\uff0c\u5982 TensorFlow\u3001Pytorch \u5747\u652f\u6301 mirroed view \uff1bOneFlow \u7684 mirrored \u89c6\u89d2\u4e0e\u5b83\u4eec\u7c7b\u4f3c\u3002 \u5728 mirrored \u89c6\u89d2\u4e0b\uff0c\u6a21\u578b\u88ab\u955c\u50cf\u590d\u5236\u5230\u6bcf\u5f20\u5361\u4e0a\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u6a21\u578b\u6784\u56fe\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u53ea\u80fd\u91c7\u7528 \u6570\u636e\u5e76\u884c \u3002 \u5728 OneFlow \u4e2d\uff0c\u9ed8\u8ba4\u4e0d\u662f mirrored \u7b56\u7565\uff0c\u9700\u8981\u901a\u8fc7 flow.function_config() \u7684 default_logical_view \u63a5\u53e3\u6765\u663e\u5f0f\u6307\u5b9a\uff1a func_config = flow . function_config () func_config . default_logical_view ( flow . scope . mirrored_view ()) \u5728 mirrored_view \u4e0b\uff0c\u53ea\u80fd\u91c7\u7528 \u6570\u636e\u5e76\u884c \u7684\u5e76\u884c\u6a21\u5f0f\uff0c\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6570\u636e\u6309\u7167\u8bad\u7ec3\u8282\u70b9\u7684\u6570\u76ee\uff08\u663e\u5361\u603b\u6570\uff09\u8fdb\u884c\u5e73\u5747\u5207\u5206\uff0c\u5e76\u5c06\u5207\u5206\u540e\u7684\u6570\u636e\u653e\u5165 list \u4e2d\u8fdb\u884c\u4f20\u9012\uff0c list \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u540e\u5206\u914d\u7ed9 \u5404\u4e2a\u663e\u5361 \u7684\u5b9e\u9645\u6570\u636e\u3002 \u8bad\u7ec3\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e5f\u53d8\u4f5c\u4e86 oneflow.typing.ListNumpy \uff0c\u662f\u4e00\u4e2a list \uff0c list \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5bf9\u5e94\u4e86\u6bcf\u5f20\u5361\u4e0a\u8bad\u7ec3\u7ed3\u679c\u3002 \u4ee5\u4e0a\u63d0\u53ca\u7684 list \u4e2d\u7684\u6240\u6709\u5143\u7d20 \u62fc\u63a5\u5728\u4e00\u8d77 \uff0c\u624d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 BATCH\u3002\u800cOneFlow\u4f1a\u81ea\u52a8\u6267\u884c\u8fd9\u4e2a\u62fc\u63a5\u7684\u8fc7\u7a0b\uff0c\u65e0\u9700\u7528\u6237\u8fdb\u884c\u591a\u4f59\u7684\u64cd\u4f5c\u3002","title":"\u5728 OneFlow \u4e2d\u4f7f\u7528 mirrored \u89c6\u89d2"},{"location":"extended_topics/consistent_mirrored.html#_5","text":"\u5728\u4ee5\u4e0b\u7684\u811a\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u91c7\u7528 mirrored_view \u89c6\u89d2\uff0c\u4f7f\u75282\u4e2a GPU \u8fdb\u884c\u8bad\u7ec3\u3002 \u4ee3\u7801\uff1a mirrored_strategy.py \u91cd\u70b9\u90e8\u5206\u7684\u8bf4\u660e\u8bf7\u89c1\u540e\u6587\u201c\u4ee3\u7801\u89e3\u6790\u201d\u90e8\u5206\u3002","title":"\u4ee3\u7801"},{"location":"extended_topics/consistent_mirrored.html#_6","text":"\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a \u4f7f\u7528 flow.config.gpu_device_num \u8bbe\u7f6e GPU \u6570\u76ee\u4e3a2 flow . config . gpu_device_num ( 2 ) oneflow.typing.ListNumpy.Placeholder \u5b9a\u4e49\u7684\u6837\u672c\u6570\u76ee\uff0c\u662f\u88ab\u5207\u5206\u540e\u7684\u6570\u76ee\uff0c\u5373\u4ee3\u7801\u4e2d\u7684 BATCH_SIZE_PER_GPU \u4e0e\u603b\u6837\u672c\u6570 BATCH_SIZE \u7684\u5173\u7cfb\u4e3a\uff1a BATCH_SIZE=BATCH_SIZE_PER_GPU\u00d7GPU_NUM def train_job ( images : tp . ListNumpy . Placeholder (( BATCH_SIZE_PER_GPU , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . ListNumpy . Placeholder (( BATCH_SIZE_PER_GPU ,), dtype = flow . int32 ), ) -> tp . ListNumpy : \u5207\u5206\u540e\u7684\u6570\u636e\uff0c\u9700\u8981\u4fdd\u5b58\u81f3 list \u4e2d\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\uff1b list \u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u4e0e \u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee \u4e00\u81f4\uff1bOneFlow \u5c06\u6309\u7167 list \u4e2d\u5143\u7d20\u987a\u5e8f\uff0c\u5411\u5404\u5361\u4f20\u9012\u6570\u636e( list \u4e2d\u7b2c i \u4e2a\u5143\u7d20\u5bf9\u5e94\u7b2c i \u5f20\u5361)\uff1a images1 = images [: BATCH_SIZE_PER_GPU ] images2 = images [ BATCH_SIZE_PER_GPU :] labels1 = labels [: BATCH_SIZE_PER_GPU ] labels2 = labels [ BATCH_SIZE_PER_GPU :] imgs_list = [ images1 , images2 ] labels_list = [ labels1 , labels2 ] loss = np . array ( train_job ( imgs_list , labels_list )) \u8fd4\u56de\u7684\u5f97\u5230\u7684\u7ed3\u679c loss \uff0c\u662f\u4e00\u4e2a list \u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8be5 list \u4e2d\u5143\u7d20\u4e2a\u6570\u5e94\u4e0e \u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee \u4e00\u81f4\uff1b list \u4e2d\u7684\u7b2ci\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e86\u7b2c i \u5f20 GPU \u5361\u4e0a\u7684\u8fd0\u7b97\u7ed3\u679c\u3002\u4f46\u7531\u4e8eOneFlow\u4f1a\u5728\u540e\u53f0\u81ea\u52a8\u6267\u884c\u62fc\u63a5\u64cd\u4f5c\uff0c\u6211\u4eec\u65e0\u9700\u518d\u5728\u4ee3\u7801\u4e2d\u8fdb\u884c\u591a\u4f59\u7684\u62fc\u63a5\u6b65\u9aa4\u3002\u53ea\u9700\u5c06loss\u5408\u5e76\u540e\u8fdb\u884c\u8ba1\u7b97\u5e76\u6253\u5370\u5176\u5e73\u5747\u503c\u3002 total_loss = np . array ([ * loss [ 0 ], * loss [ 1 ]]) if i % 20 == 0 : print ( loss . mean ())","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"extended_topics/consistent_mirrored.html#oneflow-consistent","text":"\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86 mirrored \u89c6\u89d2\uff0c\u77e5\u9053\u5728 mirrored_view \u89c6\u89d2\u4e0b\uff0c\u6837\u672c\u4f1a\u88ab\u5e73\u5747\u5206\u914d\u5230\u591a\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u6a21\u578b\u4e0a\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u4e0a\u7684\u7ed3\u679c\uff0c\u9700\u8981\u7ec4\u88c5\u624d\u80fd\u5f97\u5230\u771f\u6b63\u5b8c\u6574\u7684 BATCH\uff0c\u5bf9\u5e94\u4e86\u903b\u8f91\u4e0a\u7684 op \u4e0e Blob\u3002 \u9664\u4e86 mirrored \u89c6\u89d2\u5916\uff0cOneFlow \u8fd8\u63d0\u4f9b\u4e86 consistent \u89c6\u89d2\u3002consistent \u89c6\u89d2\u662f OneFlow \u7684\u4e00\u5927\u7279\u8272\uff0c\u4e0e mirrored \u89c6\u89d2\u76f8\u6bd4\u6709\u5f88\u5927\u7684\u4f18\u52bf\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b OneFlow \u91c7\u53d6\u7684\u662f consistent \u89c6\u89d2\uff0c\u5982\u679c\u60f3\u663e\u5f0f\u58f0\u660e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u8bbe\u7f6e\uff1a config = flow . function_config () config . default_logical_view ( flow . scope . consistent_view ()) \u4e4b\u6240\u4ee5\u8bf4 consistent \u89c6\u89d2\u662f OneFlow \u7684\u4e00\u5927\u7279\u8272\uff0c\u662f\u56e0\u4e3a\u5728 OneFlow \u7684\u8bbe\u8ba1\u4e2d\uff0c\u82e5\u91c7\u7528 consistent_view \uff0c\u90a3\u4e48\u4ece\u7528\u6237\u7684\u89c6\u89d2\u770b\uff0c\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u591a\u4e2a\u8bbe\u5907\u5c06\u83b7\u5f97 \u903b\u8f91\u4e0a\u7684\u7edf\u4e00 \uff0c\u540c\u6837\u4ee5\u672c\u6587\u5f00\u5934\u7684\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u6ce8 \u77e9\u9635\u4e58\u6cd5 \u672c\u8eab\u6570\u5b66\u8ba1\u7b97\u4e0a\u7684\u610f\u4e49\uff1b\u800c\u5728\u5de5\u7a0b\u4e0a\u5230\u5e95\u5982\u4f55\u914d\u7f6e\u3001\u91c7\u7528\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u6570\u636e\u5e76\u884c\u7b49\u7ec6\u8282\u95ee\u9898\uff0c\u53ef\u4ee5\u4f7f\u7528 OneFlow \u7684\u63a5\u53e3\u8f7b\u677e\u5b8c\u6210\u3002OneFlow \u5185\u90e8\u4f1a\u9ad8\u6548\u53ef\u9760\u5730\u89e3\u51b3 \u6570\u636e\u5e76\u884c\u4e2d\u7684\u6570\u636e\u5207\u5206 \u3001 \u6a21\u578b\u5e76\u884c\u4e2d\u7684\u6a21\u578b\u5207\u5206 \u3001 \u4e32\u884c\u903b\u8f91 \u7b49\u95ee\u9898\u3002 \u5728 OneFlow \u7684 consistent \u89c6\u89d2\u4e0b\uff0c\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6a21\u578b\u5e76\u884c\u3001\u6570\u636e\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u6216\u8005\u6df7\u5408\u5e76\u884c\u3002","title":"\u5728 OneFlow \u4e2d\u4f7f\u7528 consistent \u89c6\u89d2"},{"location":"extended_topics/consistent_mirrored.html#_7","text":"\u4ee5\u4e0b\u811a\u672c\uff0c\u6211\u4eec\u91c7\u7528 consistent \u89c6\u89d2\uff0c\u4f7f\u75282\u4e2a GPU \u8fdb\u884c\u8bad\u7ec3\uff0cconsistent \u7b56\u7565\u4e0b\u9ed8\u8ba4\u7684\u5e76\u884c\u65b9\u5f0f\u4ecd\u7136\u662f \u6570\u636e\u5e76\u884c \u3002\u5173\u4e8e\u5982\u4f55\u5728 consistent \u7b56\u7565\u4e0b\u8bbe\u7f6e \u6a21\u578b\u5e76\u884c \u53ca \u6df7\u5408\u5e76\u884c \u4e0d\u5728\u672c\u6587\u8ba8\u8bba\u8303\u56f4\uff0c\u6211\u4eec\u5728 OneFlow \u7684\u5e76\u884c\u7279\u8272 \u4e2d\u6709\u4e13\u95e8\u7684\u4ecb\u7ecd\u4e0e\u793a\u4f8b\u3002 \u4ee3\u7801\uff1a consistent_strategy.py \u4ee3\u7801\u4e2d\u7684\u91cd\u70b9\u5c06\u5728\u4e0b\u6587\u4ecb\u7ecd\u3002","title":"\u4ee3\u7801"},{"location":"extended_topics/consistent_mirrored.html#_8","text":"\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff1a \u4f7f\u7528 flow.config.gpu_device_num \u8bbe\u7f6eGPU\u6570\u76ee\uff1a flow . config . gpu_device_num ( 2 ) \u4f7f\u7528 tp.Numpy.Placeholder \u5b9a\u4e49 consistent \u89c6\u89d2\u4e0b\u7684\u5360\u4f4d\u7b26\uff0c\u56e0\u4e3a Numpy.Placeholder \u4ea7\u51fa\u7684 Blob \u4ee3\u8868\u903b\u8f91\u4e0a\u7684 op \u53ca\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u56e0\u6b64\u6b64\u5904\u7684 BATCH_SIZE \u5c31\u662f\u6574\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u6837\u672c\u603b\u548c\uff0c\u4e0d\u9700\u8981\u4eba\u4e3a\u5207\u5206\u6216\u8005\u7ec4\u5408 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u76f4\u63a5\u5f97\u5230\u8bad\u7ec3\u7ed3\u679c\uff0c\u8bad\u7ec3\u7ed3\u679c\u5df2\u7ecf\u7531 OneFlow \u5b8c\u6210\u5206\u5e03\u5f0f\u8fc7\u7a0b\u4e2d\u5207\u5206\u4e0e\u5408\u5e76\u7684\u5de5\u4f5c\u3002\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u591a\u5361\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e0e\u5355\u5361\u7684\u8bad\u7ec3\uff0c\u4ee3\u7801\u5dee\u522b\u6781\u5c11\uff0c\u4e0a\u624b\u4f53\u9a8c\u51e0\u4e4e\u4e00\u6837 for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ())","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"extended_topics/consistent_mirrored.html#_9","text":"\u968f\u7740\u673a\u5668\u5b66\u4e60\u7406\u8bba\u4e0e\u5b9e\u8df5\u53d1\u5c55\uff0c\u73b0\u5728\u5df2\u7ecf\u51fa\u73b0\u4e86\u5f88\u591a\u5355\u673a\u65e0\u6cd5\u8bad\u7ec3\u7684\u7f51\u7edc\uff1b\u4e5f\u51fa\u73b0\u4e86\u8d8a\u6765\u8d8a\u591a\u4ec5\u91c7\u7528\u6570\u636e\u5e76\u884c\u65e0\u6cd5\u5f88\u597d\u5b8c\u6210\u8bad\u7ec3\u7684\u6a21\u578b\u3002 \u91c7\u7528 OneFlow \u7684 consistent \u89c6\u89d2\uff0c\u901a\u8fc7\u81ea\u7531\u9009\u62e9\u53ca\u7ec4\u5408\u5e76\u884c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\uff0c\u6211\u4eec\u5728 OneFlow \u7684\u5e76\u884c\u7279\u8272 \u8fdb\u884c\u4e86\u4e13\u95e8\u7684\u4ecb\u7ecd\u3002","title":"\u6269\u5c55"},{"location":"extended_topics/debug_by_vscode.html","text":"\u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u914d\u7f6e VS Code\uff0c\u642d\u5efa OneFlow \u7684 GUI \u5f00\u53d1\u73af\u5883\u3002 \u5982\u679c\u5bf9\u4e8e VS Code \u53ca\u5176\u63d2\u4ef6\u7cfb\u7edf\u8fd8\u4e0d\u719f\u6089\uff0c\u53ef\u4ee5\u53c2\u9605 \u5b98\u65b9\u6587\u6863 \u3002 \u672c\u6587\u5305\u62ec\uff1a \u5982\u4f55\u7f16\u8bd1 Debug \u7248\u672c\u7684 OneFlow \u8fdc\u7a0b\u8c03\u8bd5\u6240\u5fc5\u9700\u7684 VS Code \u63d2\u4ef6\u7684\u5b89\u88c5\u914d\u7f6e \u7f16\u8bd1 Debug \u7248\u672c\u7684 OneFlow \u00b6 \u5982\u679c\u4f7f\u7528 Release \u7248\u672c\u7684 OneFlow\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f18\u5316\uff0c\u5bfc\u81f4\u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u4f4d\u7f6e\u4e0e\u6e90\u7801\u884c\u4e0d\u5bf9\u5e94\u3002 \u56e0\u6b64\u6211\u4eec\u9700\u8981\u7f16\u8bd1 Debug \u7248\u672c\u7684 OneFlow\uff0c\u5e76\u4e14\u9700\u8981\u751f\u6210 clangd \u6240\u9700\u8981\u7684 json \u6587\u4ef6\u3002 \u5728\u8fd0\u884c cmake \u7684\u65f6\u5019\u9700\u8981\u52a0\u4e0a Debug \u53ca CMAKE_EXPORT_COMPILE_COMMANDS \u7684 flag\u3002 cmake .. \\ -DCMAKE_BUILD_TYPE=Debug \\ -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug \u9009\u9879\u6307\u5b9a\u7f16\u8bd1 Debug \u7248\u672c -DCMAKE_EXPORT_COMPILE_COMMANDS \u9009\u9879\u4f1a\u5728 build \u76ee\u5f55\u4e0b\u751f\u6210\u540e\u6587 clangd \u914d\u7f6e\u65f6\u6240\u9700\u8981\u7684 compile_commands.json \u6587\u4ef6 Remote - SSH \u00b6 \u672c\u8282\u5185\u5bb9\u4ec5\u4e3a\u90a3\u4e9b\u9700\u8981\u8fdc\u7a0b\u5f00\u53d1\u7684\u4eba\u5458\u51c6\u5907\uff0c\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u8fdb\u884c\u5f00\u53d1\u7684\u4eba\u5458 \u53ef\u4ee5\u7565\u8fc7\u6b64\u8282 \u3002 \u901a\u8fc7 VS Code \u7684 Remote SSH \u63d2\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7 SSH \u7684\u65b9\u5f0f\u8fde\u63a5\u8fdc\u7a0b\u670d\u52a1\u5668\u3002 \u6211\u4eec\u7684\u88ab\u8c03\u8bd5\u5bf9\u8c61 OneFlow \u53ef\u4ee5\u8fd0\u884c\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\uff0c\u7136\u540e\u901a\u8fc7 Remote SSH \u5c06\u8fdc\u7a0b\u7684\u60c5\u51b5\u548c\u672c\u5730\u7684 VS Code \u7528\u6237\u64cd\u4f5c\u8fde\u63a5\u8d77\u6765\uff0c \u50cf\u8c03\u8bd5\u672c\u5730\u7a0b\u5e8f\u4e00\u6837\u8c03\u8bd5\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u7684\u7a0b\u5e8f \u3002 \u5b89\u88c5\u5b8c\u6210 Remote - SSH \u540e\uff0c\u6309 F1\uff0c\u5728\u5f39\u51fa\u7684\u641c\u7d22\u680f\u4e2d\u9009\u62e9 Remote-SSH: Connect to Host... \uff0c\u5373\u53ef\u8bbe\u7f6e SSH \u7684\u8fde\u63a5\u4fe1\u606f\uff0c\u8fde\u63a5\u8fdc\u7a0b\u4e3b\u673a\u3002 Remote - SSH \u8fde\u63a5\u8fdc\u7a0b\u4e3b\u673a\u540e\uff0c\u5728\u63d2\u4ef6\u4e00\u680f\uff0c\u4f1a\u81ea\u52a8\u5206\u7c7b\u201c\u8fdc\u7a0b\u201d\u4e0e\u201c\u672c\u5730\u201d\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u9700\u8981\u5728\u8fdc\u7a0b\u7535\u8111\u4e0a\u5b89\u88c5\u7684\u63d2\u4ef6\uff0c\u4f1a\u663e\u793a\u4e3a\u7070\u8272\uff0c\u5e76\u5e26\u6709 Install in SSH:\u8fdc\u7a0b\u4e3b\u673a\u540d \u7684\u6309\u94ae\uff0c\u70b9\u51fb\u5373\u53ef\u5c06\u5bf9\u5e94\u63d2\u4ef6\u5b89\u88c5\u5728\u8fdc\u7a0b\u4e3b\u673a\u3002 \u5982\u4e0a\u56fe\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u8fdc\u7a0b\u4e3b\u673a\u5b89\u88c5 Python\u3001clangd\u3001Native Debug \u63d2\u4ef6\uff0c\u7528\u4e8e\u652f\u6301\u8fdc\u7a0b\u8c03\u8bd5 OneFlow\u3002 \u4f46\u662f\u8fdc\u7a0b\u4e3b\u673a\u5e76\u6ca1\uff08\u672c\u5730\u4e3b\u673a\u5df2\u7ecf\u5b89\u88c5\u7684\uff09Go \u548c HTML CSS Support \u63d2\u4ef6\u3002 clangd \u00b6 \u7ecf\u8fc7\u7b80\u5355\u7684\u914d\u7f6e\uff0cclangd\u53ef\u4ee5\u4e3a\u6211\u4eec\u63d0\u4f9b\u4ee3\u7801\u8865\u5168\u3001\u7b26\u53f7\u8df3\u8f6c\u7b49\u4fbf\u5229\u3002 \u5728\u914d\u7f6e clangd \u4e4b\u524d\uff0c\u9700\u8981\u786e\u8ba4\uff1a \u5df2\u7ecf\u901a\u8fc7\u7f16\u8bd1\uff0c\u751f\u6210\u4e86 compile_commands.json \u6587\u4ef6 \u5df2\u7ecf\u901a\u8fc7 Remote - SSH \u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u5b89\u88c5\u4e86 clangd \u63d2\u4ef6 \u4e0d\u8981 \u5b89\u88c5 VS Code \u9ed8\u8ba4\u63a8\u8350\u7684 ms-vscode.cpptools C/C++ \u63d2\u4ef6\uff0c\u56e0\u4e3a clangd \u4e0e\u4e4b\u6709\u51b2\u7a81 \u914d\u7f6e VS Code \u4e2d\u7684 clangd \u63d2\u4ef6 \u00b6 \u5c06 build \u76ee\u5f55\u4e0b\u7684 compile_commands.json \u6587\u4ef6\u8f6f\u94fe\u63a5\u5230 OneFlow \u7684\u6e90\u7801\u6839\u76ee\u5f55\u4e0b\uff0c\u5728 OneFlow \u7684\u6e90\u7801\u6839\u76ee\u5f55\u4e0b\uff1a ln -s ./build/compile_commands.json compile_commands.json \u7136\u540e Ctrl+Shift+P (macOS \u4e0b command+shift+p )\uff0c\u627e\u5230 Open Remote Settings \u9009\u9879\uff0c\u6253\u5f00 settings.json \u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u52a0\u5165\u4ee5\u4e0b\u914d\u7f6e\uff1a \"clangd.path\" : \"/path/to/bin/clangd\" , \"clangd.arguments\" : [ \"-j\" , \"12\" , \"-clang-tidy\" ] clangd.arguments \u7684\u610f\u4e49\u53ca\u66f4\u591a\u53c2\u6570\u9009\u9879\uff0c\u53ef\u67e5\u9605 clangd --help \u3002 \u4f7f\u7528 clangd \u00b6 \u5728 VS Code \u7684 View->Output \u9762\u677f\uff0c\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9 \"Clang Language Server\"\uff0c\u53ef\u4ee5\u770b\u5230 clangd \u7684\u89e3\u6790\u8f93\u51fa\uff0c\u89e3\u6790\u5b8c\u6210\u540e\u3002\u9009\u62e9 C/C++ \u6e90\u7801\u4e2d\u7684\u7b26\u53f7\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8df3\u8f6c\u3002 \u6309 Ctrl+P (macOS \u4e0b command+P ) \u540e\u901a\u8fc7 @\u7b26\u53f7\u540d \u6216 #\u7b26\u53f7\u540d \u53ef\u4ee5\u5206\u522b\u5b9e\u73b0\u5f53\u524d\u6587\u4ef6\u5185\u67e5\u627e\u7b26\u53f7\uff0c\u6216\u5de5\u7a0b\u8303\u56f4\u5185\u67e5\u627e\u7b26\u53f7\u3002 native debug \u00b6 Ctrl + Shift + D (macOS \u4e0b command+shift+D ) \u6216\u8005\u70b9\u51fb activity bar \u7684 Run \u6309\u94ae\uff0c\u8fdb\u5165\u5230 Run \u89c6\u56fe\u3002 \u9009\u62e9 Create a launch.json file \uff0c\u9009\u62e9 gdb \u6a21\u677f\u3002 \u7136\u540e\u8bbe\u7f6e\u76f8\u5173\u53c2\u6570\uff1a { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"lenet\" , //\u81ea\u5b9a\u4e49\u4efb\u52a1\u540d \"type\" : \"gdb\" , \"request\" : \"launch\" , \"target\" : \"/home/yaochi/.conda/envs/ycof/bin/python3\" , //python\u8def\u5f84 \"arguments\" : \"lenet_train.py\" , //\u811a\u672c \"cwd\" : \"/home/yaochi/of_example\" , //\u811a\u672c\u6240\u5728\u8def\u5f84 \"valuesFormatting\" : \"parseText\" } ] } \u8bbe\u7f6e\u65ad\u70b9\u540e\uff0cF5 \u542f\u52a8\u8c03\u8bd5\uff1a \u5176\u5b83 \u00b6 \u5982\u679c VS Code \u4e0b\u8f7d\u63d2\u4ef6\u901f\u5ea6\u8fc7\u6162\uff0c\u53ef\u4ee5\u6309\u7167 \u5b98\u65b9\u6587\u6863 \u7684\u6b65\u9aa4\u5207\u6362 hostname \u6216\u8005\u8bbe\u7f6e\u4ee3\u7406\u3002 \u5173\u4e8e clangd \u5b89\u88c5\u914d\u7f6e\u7684 \u5b98\u65b9\u4ecb\u7ecd \u5173\u4e8e VS Code \u7684\u8c03\u8bd5\u8bbe\u7f6e\u7684 \u5b98\u65b9\u4ecb\u7ecd clangd \u7684\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5bf9 glibc \u7248\u672c\u8981\u6c42\u8fc7\u9ad8\uff0c\u5bfc\u81f4\u62a5\u7f3a\u5c11\u5e93\u7684\u9519\u8bef\u3002 ./bin/clangd: /lib64/libc.so.6: version `GLIBC_2.18' not found (required by ./bin/clangd) \u6b64\u65f6\u53ef\u4ee5\u4e0b\u8f7d\u5176\u5b83\u66f4\u4f4e clangd \u7684\u7248\u672c\uff08\u672c\u6587\u63a8\u8350\u7248\u672c\u4e3a 9.0.0\uff09\uff0c\u65e9\u671f\u7248\u672c\u7684 clangd \u9700\u8981\u5230 LLVM\u5b98\u7f51 \u4e0b\u8f7d\u6574\u4e2aLLVM\u5de5\u5177\u94fe\uff0c\u5176\u4e2d\u5305\u542b\u6709 clangd\u3002","title":"\u4f7f\u7528 VS Code \u8c03\u8bd5 OneFlow"},{"location":"extended_topics/debug_by_vscode.html#debug-oneflow","text":"\u5982\u679c\u4f7f\u7528 Release \u7248\u672c\u7684 OneFlow\uff0c\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f18\u5316\uff0c\u5bfc\u81f4\u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u4f4d\u7f6e\u4e0e\u6e90\u7801\u884c\u4e0d\u5bf9\u5e94\u3002 \u56e0\u6b64\u6211\u4eec\u9700\u8981\u7f16\u8bd1 Debug \u7248\u672c\u7684 OneFlow\uff0c\u5e76\u4e14\u9700\u8981\u751f\u6210 clangd \u6240\u9700\u8981\u7684 json \u6587\u4ef6\u3002 \u5728\u8fd0\u884c cmake \u7684\u65f6\u5019\u9700\u8981\u52a0\u4e0a Debug \u53ca CMAKE_EXPORT_COMPILE_COMMANDS \u7684 flag\u3002 cmake .. \\ -DCMAKE_BUILD_TYPE=Debug \\ -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug \u9009\u9879\u6307\u5b9a\u7f16\u8bd1 Debug \u7248\u672c -DCMAKE_EXPORT_COMPILE_COMMANDS \u9009\u9879\u4f1a\u5728 build \u76ee\u5f55\u4e0b\u751f\u6210\u540e\u6587 clangd \u914d\u7f6e\u65f6\u6240\u9700\u8981\u7684 compile_commands.json \u6587\u4ef6","title":"\u7f16\u8bd1 Debug \u7248\u672c\u7684 OneFlow"},{"location":"extended_topics/debug_by_vscode.html#remote-ssh","text":"\u672c\u8282\u5185\u5bb9\u4ec5\u4e3a\u90a3\u4e9b\u9700\u8981\u8fdc\u7a0b\u5f00\u53d1\u7684\u4eba\u5458\u51c6\u5907\uff0c\u5728\u672c\u5730\u4e3b\u673a\u4e0a\u8fdb\u884c\u5f00\u53d1\u7684\u4eba\u5458 \u53ef\u4ee5\u7565\u8fc7\u6b64\u8282 \u3002 \u901a\u8fc7 VS Code \u7684 Remote SSH \u63d2\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7 SSH \u7684\u65b9\u5f0f\u8fde\u63a5\u8fdc\u7a0b\u670d\u52a1\u5668\u3002 \u6211\u4eec\u7684\u88ab\u8c03\u8bd5\u5bf9\u8c61 OneFlow \u53ef\u4ee5\u8fd0\u884c\u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\uff0c\u7136\u540e\u901a\u8fc7 Remote SSH \u5c06\u8fdc\u7a0b\u7684\u60c5\u51b5\u548c\u672c\u5730\u7684 VS Code \u7528\u6237\u64cd\u4f5c\u8fde\u63a5\u8d77\u6765\uff0c \u50cf\u8c03\u8bd5\u672c\u5730\u7a0b\u5e8f\u4e00\u6837\u8c03\u8bd5\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u7684\u7a0b\u5e8f \u3002 \u5b89\u88c5\u5b8c\u6210 Remote - SSH \u540e\uff0c\u6309 F1\uff0c\u5728\u5f39\u51fa\u7684\u641c\u7d22\u680f\u4e2d\u9009\u62e9 Remote-SSH: Connect to Host... \uff0c\u5373\u53ef\u8bbe\u7f6e SSH \u7684\u8fde\u63a5\u4fe1\u606f\uff0c\u8fde\u63a5\u8fdc\u7a0b\u4e3b\u673a\u3002 Remote - SSH \u8fde\u63a5\u8fdc\u7a0b\u4e3b\u673a\u540e\uff0c\u5728\u63d2\u4ef6\u4e00\u680f\uff0c\u4f1a\u81ea\u52a8\u5206\u7c7b\u201c\u8fdc\u7a0b\u201d\u4e0e\u201c\u672c\u5730\u201d\uff0c\u5982\u679c\u68c0\u6d4b\u5230\u9700\u8981\u5728\u8fdc\u7a0b\u7535\u8111\u4e0a\u5b89\u88c5\u7684\u63d2\u4ef6\uff0c\u4f1a\u663e\u793a\u4e3a\u7070\u8272\uff0c\u5e76\u5e26\u6709 Install in SSH:\u8fdc\u7a0b\u4e3b\u673a\u540d \u7684\u6309\u94ae\uff0c\u70b9\u51fb\u5373\u53ef\u5c06\u5bf9\u5e94\u63d2\u4ef6\u5b89\u88c5\u5728\u8fdc\u7a0b\u4e3b\u673a\u3002 \u5982\u4e0a\u56fe\uff0c\u6211\u4eec\u5df2\u7ecf\u5728\u8fdc\u7a0b\u4e3b\u673a\u5b89\u88c5 Python\u3001clangd\u3001Native Debug \u63d2\u4ef6\uff0c\u7528\u4e8e\u652f\u6301\u8fdc\u7a0b\u8c03\u8bd5 OneFlow\u3002 \u4f46\u662f\u8fdc\u7a0b\u4e3b\u673a\u5e76\u6ca1\uff08\u672c\u5730\u4e3b\u673a\u5df2\u7ecf\u5b89\u88c5\u7684\uff09Go \u548c HTML CSS Support \u63d2\u4ef6\u3002","title":"Remote - SSH"},{"location":"extended_topics/debug_by_vscode.html#clangd","text":"\u7ecf\u8fc7\u7b80\u5355\u7684\u914d\u7f6e\uff0cclangd\u53ef\u4ee5\u4e3a\u6211\u4eec\u63d0\u4f9b\u4ee3\u7801\u8865\u5168\u3001\u7b26\u53f7\u8df3\u8f6c\u7b49\u4fbf\u5229\u3002 \u5728\u914d\u7f6e clangd \u4e4b\u524d\uff0c\u9700\u8981\u786e\u8ba4\uff1a \u5df2\u7ecf\u901a\u8fc7\u7f16\u8bd1\uff0c\u751f\u6210\u4e86 compile_commands.json \u6587\u4ef6 \u5df2\u7ecf\u901a\u8fc7 Remote - SSH \u5728\u8fdc\u7a0b\u4e3b\u673a\u4e0a\u5b89\u88c5\u4e86 clangd \u63d2\u4ef6 \u4e0d\u8981 \u5b89\u88c5 VS Code \u9ed8\u8ba4\u63a8\u8350\u7684 ms-vscode.cpptools C/C++ \u63d2\u4ef6\uff0c\u56e0\u4e3a clangd \u4e0e\u4e4b\u6709\u51b2\u7a81","title":"clangd"},{"location":"extended_topics/debug_by_vscode.html#vs-code-clangd","text":"\u5c06 build \u76ee\u5f55\u4e0b\u7684 compile_commands.json \u6587\u4ef6\u8f6f\u94fe\u63a5\u5230 OneFlow \u7684\u6e90\u7801\u6839\u76ee\u5f55\u4e0b\uff0c\u5728 OneFlow \u7684\u6e90\u7801\u6839\u76ee\u5f55\u4e0b\uff1a ln -s ./build/compile_commands.json compile_commands.json \u7136\u540e Ctrl+Shift+P (macOS \u4e0b command+shift+p )\uff0c\u627e\u5230 Open Remote Settings \u9009\u9879\uff0c\u6253\u5f00 settings.json \u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u52a0\u5165\u4ee5\u4e0b\u914d\u7f6e\uff1a \"clangd.path\" : \"/path/to/bin/clangd\" , \"clangd.arguments\" : [ \"-j\" , \"12\" , \"-clang-tidy\" ] clangd.arguments \u7684\u610f\u4e49\u53ca\u66f4\u591a\u53c2\u6570\u9009\u9879\uff0c\u53ef\u67e5\u9605 clangd --help \u3002","title":"\u914d\u7f6e VS Code \u4e2d\u7684 clangd \u63d2\u4ef6"},{"location":"extended_topics/debug_by_vscode.html#clangd_1","text":"\u5728 VS Code \u7684 View->Output \u9762\u677f\uff0c\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9 \"Clang Language Server\"\uff0c\u53ef\u4ee5\u770b\u5230 clangd \u7684\u89e3\u6790\u8f93\u51fa\uff0c\u89e3\u6790\u5b8c\u6210\u540e\u3002\u9009\u62e9 C/C++ \u6e90\u7801\u4e2d\u7684\u7b26\u53f7\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8df3\u8f6c\u3002 \u6309 Ctrl+P (macOS \u4e0b command+P ) \u540e\u901a\u8fc7 @\u7b26\u53f7\u540d \u6216 #\u7b26\u53f7\u540d \u53ef\u4ee5\u5206\u522b\u5b9e\u73b0\u5f53\u524d\u6587\u4ef6\u5185\u67e5\u627e\u7b26\u53f7\uff0c\u6216\u5de5\u7a0b\u8303\u56f4\u5185\u67e5\u627e\u7b26\u53f7\u3002","title":"\u4f7f\u7528 clangd"},{"location":"extended_topics/debug_by_vscode.html#native-debug","text":"Ctrl + Shift + D (macOS \u4e0b command+shift+D ) \u6216\u8005\u70b9\u51fb activity bar \u7684 Run \u6309\u94ae\uff0c\u8fdb\u5165\u5230 Run \u89c6\u56fe\u3002 \u9009\u62e9 Create a launch.json file \uff0c\u9009\u62e9 gdb \u6a21\u677f\u3002 \u7136\u540e\u8bbe\u7f6e\u76f8\u5173\u53c2\u6570\uff1a { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"lenet\" , //\u81ea\u5b9a\u4e49\u4efb\u52a1\u540d \"type\" : \"gdb\" , \"request\" : \"launch\" , \"target\" : \"/home/yaochi/.conda/envs/ycof/bin/python3\" , //python\u8def\u5f84 \"arguments\" : \"lenet_train.py\" , //\u811a\u672c \"cwd\" : \"/home/yaochi/of_example\" , //\u811a\u672c\u6240\u5728\u8def\u5f84 \"valuesFormatting\" : \"parseText\" } ] } \u8bbe\u7f6e\u65ad\u70b9\u540e\uff0cF5 \u542f\u52a8\u8c03\u8bd5\uff1a","title":"native debug"},{"location":"extended_topics/debug_by_vscode.html#_1","text":"\u5982\u679c VS Code \u4e0b\u8f7d\u63d2\u4ef6\u901f\u5ea6\u8fc7\u6162\uff0c\u53ef\u4ee5\u6309\u7167 \u5b98\u65b9\u6587\u6863 \u7684\u6b65\u9aa4\u5207\u6362 hostname \u6216\u8005\u8bbe\u7f6e\u4ee3\u7406\u3002 \u5173\u4e8e clangd \u5b89\u88c5\u914d\u7f6e\u7684 \u5b98\u65b9\u4ecb\u7ecd \u5173\u4e8e VS Code \u7684\u8c03\u8bd5\u8bbe\u7f6e\u7684 \u5b98\u65b9\u4ecb\u7ecd clangd \u7684\u6700\u65b0\u7248\u672c\u53ef\u80fd\u5bf9 glibc \u7248\u672c\u8981\u6c42\u8fc7\u9ad8\uff0c\u5bfc\u81f4\u62a5\u7f3a\u5c11\u5e93\u7684\u9519\u8bef\u3002 ./bin/clangd: /lib64/libc.so.6: version `GLIBC_2.18' not found (required by ./bin/clangd) \u6b64\u65f6\u53ef\u4ee5\u4e0b\u8f7d\u5176\u5b83\u66f4\u4f4e clangd \u7684\u7248\u672c\uff08\u672c\u6587\u63a8\u8350\u7248\u672c\u4e3a 9.0.0\uff09\uff0c\u65e9\u671f\u7248\u672c\u7684 clangd \u9700\u8981\u5230 LLVM\u5b98\u7f51 \u4e0b\u8f7d\u6574\u4e2aLLVM\u5de5\u5177\u94fe\uff0c\u5176\u4e2d\u5305\u542b\u6709 clangd\u3002","title":"\u5176\u5b83"},{"location":"extended_topics/how_to_convert_image_to_ofrecord.html","text":"\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6 \u00b6 \u5728 OFRecord \u6570\u636e\u683c\u5f0f \u548c \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u4e2d\uff0c\u6211\u4eec\u5206\u522b\u5b66\u4e60\u4e86 OFRecord \u6570\u636e\u683c\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u5b83\u6570\u636e\u96c6\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6\u5e76\u4f7f\u7528\u3002 \u672c\u6587\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6\uff0c\u5e76\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u5236\u4f5c\u811a\u672c\uff0c\u65b9\u4fbf\u7528\u6237\u76f4\u63a5\u4f7f\u7528\u6216\u8005\u5728\u6b64\u57fa\u7840\u4e0a\u4fee\u6539\u3002\u5185\u5bb9\u5305\u62ec\uff1a \u5236\u4f5c\u57fa\u4e8e MNIST \u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\u7684 OFRecord \u6570\u636e\u96c6 OFRecord \u7684\u7f16\u89e3\u7801\u65b9\u5f0f \u5728\u81ea\u5236\u7684 OFRecord \u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bad\u7ec3 \u7528\u56fe\u7247\u6587\u4ef6\u5236\u4f5c OFRecord \u6587\u4ef6 \u00b6 \u6211\u4eec\u4f7f\u7528 MNIST \u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u6587\u4ef6 \u6765\u5236\u4f5c\u4e00\u4e2a OFRecord \u683c\u5f0f\u6587\u4ef6\u3002 \u4f5c\u4e3a\u793a\u4f8b\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528\u4e8650\u5f20\u56fe\u7247\uff0c\u76f8\u5173\u811a\u672c\u548c\u6570\u636e\u96c6\u7684\u4e0b\u8f7d\u5730\u5740\u4e3a img2ofrecord \u4e0b\u8f7d\u76f8\u5173\u538b\u7f29\u5305\u5e76\u89e3\u538b $ wget https://oneflow-static.oss-cn-beijing.aliyuncs.com/oneflow-tutorial-attachments/img2ofrecord.zip $ unzip img2ofrecord.zip \u8fdb\u5165\u5230\u5bf9\u5e94\u76ee\u5f55\uff0c\u5e76\u8fd0\u884c OFRecord \u5236\u4f5c\u811a\u672c img2ofrecord.py $ cd ./img_to_ofrecord $ python img2ofrecord.py --part_num=5 --save_dir=./dataset/ --img_format=.png --image_root=./images/train_set/ \u811a\u672c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u5185\u5bb9 The image root is: ./images/train_set/ The amount of OFRecord data part is: 5 The directory of Labels is: ./images/train_label/label.txt The image format is: .png The OFRecord save directory is: ./dataset/ Start Processing...... ./images/train_set/00000030_3.png feature saved ./images/train_set/00000034_0.png feature saved ./images/train_set/00000026_4.png feature saved ./images/train_set/00000043_9.png feature saved ...... Process image successfully !!! \u81f3\u6b64\u6211\u4eec OFRecord \u6587\u4ef6\u5236\u4f5c\u5b8c\u6bd5\uff0c\u5e76\u4fdd\u5b58\u5728 ./dataset \u76ee\u5f55\u4e0b \u4ee3\u7801\u89e3\u8bfb \u00b6 \u6574\u4e2a\u4ee3\u7801\u76ee\u5f55\u6784\u9020\u5982\u4e0b img_to_ofrecord \u251c\u2500\u2500 images \u251c\u2500\u2500 train_set \u251c\u2500\u2500 00000000_5.png \u251c\u2500\u2500 00000001_0.png \u251c\u2500\u2500 00000002_4.png ...... \u251c\u2500\u2500 train_label \u251c\u2500\u2500 label.txt \u251c\u2500\u2500 img2ofrecord.py \u251c\u2500\u2500 lenet_train.py images \u76ee\u5f55\u5b58\u653e\u539f\u59cb\u793a\u4f8b\u8bad\u7ec3\u6570\u636e\u96c6\u4ee5\u53ca\u6807\u7b7e\u6587\u4ef6 \u6211\u4eec\u7684\u6807\u7b7e\u6587\u4ef6\u662f\u4ee5 json \u683c\u5f0f\u5b58\u50a8\u7684\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a {\"00000030_3.png\": 3} {\"00000034_0.png\": 0} {\"00000026_4.png\": 4} {\"00000043_9.png\": 9} {\"00000047_5.png\": 5} {\"00000003_1.png\": 1} ...... img2ofrecord.py \u811a\u672c\u5c06 MNIST \u56fe\u7247\u8f6c\u6362\u6210 OFRecord \u6570\u636e\u96c6 lenet_train.py \u811a\u672c\u5219\u8bfb\u53d6\u6211\u4eec\u5236\u4f5c\u597d\u7684 OFRecord \u6570\u636e\u96c6\uff0c\u5e76\u4f7f\u7528 LeNet \u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002 img2ofrecord.py \u7684\u547d\u4ee4\u884c\u9009\u9879\u5982\u4e0b\uff1a image_root \u6307\u5b9a\u56fe\u7247\u7684\u6839\u76ee\u5f55\u8def\u5f84 part_num \u6307\u5b9a\u751f\u6210 OFRecord \u6587\u4ef6\u4e2a\u6570\uff0c\u5982\u679c\u8be5\u6570\u76ee\u5927\u4e8e\u603b\u56fe\u7247\u6570\u76ee\uff0c\u4f1a\u62a5\u9519 label_dir \u6307\u5b9a\u6807\u7b7e\u7684\u76ee\u5f55\u8def\u5f84 img_format \u6307\u5b9a\u56fe\u7247\u7684\u683c\u5f0f save_dir \u6307\u5b9a OFRecord \u6587\u4ef6\u4fdd\u5b58\u7684\u76ee\u5f55 \u811a\u672c\u7684\u7f16\u7801\u6d41\u7a0b \u00b6 \u4e0e OFRecord \u6587\u4ef6\u7f16\u7801\u7684\u76f8\u5173\u903b\u8f91\u4e5f\u5728 img2ofrecord.py \u5185\uff0c\u5176\u7f16\u7801\u6d41\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u5bf9\u8bfb\u53d6\u8fdb\u6765\u7684\u56fe\u7247\u6570\u636e\u8fdb\u884c\u7f16\u7801 def encode_img_file ( filename , ext = \".jpg\" ): img = cv2 . imread ( filename ) encoded_data = cv2 . imencode ( ext , img )[ 1 ] return encoded_data . tostring () \u8fd9\u91cc\u7684 ext \u662f\u56fe\u7247\u7f16\u7801\u683c\u5f0f\uff0c\u76ee\u524d\uff0cOneFlow \u56fe\u7247\u7f16\u89e3\u7801\u652f\u6301\u7684\u683c\u5f0f\u4e0e OpenCV \u7684\u4e00\u81f4\uff0c\u53ef\u53c2\u89c1 cv::ImwriteFlags \uff0c\u5305\u62ec\uff1a JPEG\uff0c\u4e00\u79cd\u6700\u5e38\u89c1\u7684\u6709\u635f\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 JPEG PNG\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u65e0\u635f\u4f4d\u56fe\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 Portable Network Graphics TIFF\uff0c\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u538b\u7f29\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 Tagged Image File Format \u7136\u540e\uff0c\u8f6c\u5316\u6210 Feature \u7684\u5f62\u5f0f\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5e76\u5c06\u6570\u636e\u957f\u5ea6\u5199\u5165\u5230\u6587\u4ef6\u4e2d def ndarray2ofrecords ( dsfile , dataname , encoded_data , labelname , encoded_label ): topack = { dataname : bytes_feature ( encoded_data ), labelname : int32_feature ( encoded_label )} ofrecord_features = ofrecord . OFRecord ( feature = topack ) serilizedBytes = ofrecord_features . SerializeToString () length = ofrecord_features . ByteSize () dsfile . write ( struct . pack ( \"q\" , length )) dsfile . write ( serilizedBytes ) \u4f7f\u7528\u81ea\u5236\u7684 OFRecord \u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3 \u00b6 \u6211\u4eec\u8fd0\u884c\u76ee\u5f55\u4e0b\u7684 lenet_train.py \uff0c\u5b83\u5c06\u8bfb\u53d6\u6211\u4eec\u521a\u5236\u4f5c\u597d\u7684 OFRecord \u6570\u636e\u96c6\uff0c\u5728 Lenet \u6a21\u578b\u4e0a\u8fdb\u884c\u8bad\u7ec3 \u8be5\u8bad\u7ec3\u811a\u672c\u8f93\u51fa\u5982\u4e0b\uff1a [6.778578] [2.0212684] [1.3814741] [0.47514156] [0.13277876] [0.16388433] [0.03788032] [0.01225162] ...... \u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5b8c\u6210\u4e86\u6570\u636e\u96c6\u5236\u4f5c\u3001\u8bfb\u53d6\u4e0e\u8bad\u7ec3\u6574\u4e2a\u6d41\u7a0b\u3002","title":"\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6"},{"location":"extended_topics/how_to_convert_image_to_ofrecord.html#ofrecord","text":"\u5728 OFRecord \u6570\u636e\u683c\u5f0f \u548c \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u4e2d\uff0c\u6211\u4eec\u5206\u522b\u5b66\u4e60\u4e86 OFRecord \u6570\u636e\u683c\u5f0f\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u5b83\u6570\u636e\u96c6\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6\u5e76\u4f7f\u7528\u3002 \u672c\u6587\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6\uff0c\u5e76\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u5236\u4f5c\u811a\u672c\uff0c\u65b9\u4fbf\u7528\u6237\u76f4\u63a5\u4f7f\u7528\u6216\u8005\u5728\u6b64\u57fa\u7840\u4e0a\u4fee\u6539\u3002\u5185\u5bb9\u5305\u62ec\uff1a \u5236\u4f5c\u57fa\u4e8e MNIST \u624b\u5199\u6570\u5b57\u6570\u636e\u96c6\u7684 OFRecord \u6570\u636e\u96c6 OFRecord \u7684\u7f16\u89e3\u7801\u65b9\u5f0f \u5728\u81ea\u5236\u7684 OFRecord \u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bad\u7ec3","title":"\u5c06\u56fe\u7247\u6587\u4ef6\u5236\u4f5c\u4e3a OFRecord \u6570\u636e\u96c6"},{"location":"extended_topics/how_to_convert_image_to_ofrecord.html#ofrecord_1","text":"\u6211\u4eec\u4f7f\u7528 MNIST \u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u6587\u4ef6 \u6765\u5236\u4f5c\u4e00\u4e2a OFRecord \u683c\u5f0f\u6587\u4ef6\u3002 \u4f5c\u4e3a\u793a\u4f8b\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528\u4e8650\u5f20\u56fe\u7247\uff0c\u76f8\u5173\u811a\u672c\u548c\u6570\u636e\u96c6\u7684\u4e0b\u8f7d\u5730\u5740\u4e3a img2ofrecord \u4e0b\u8f7d\u76f8\u5173\u538b\u7f29\u5305\u5e76\u89e3\u538b $ wget https://oneflow-static.oss-cn-beijing.aliyuncs.com/oneflow-tutorial-attachments/img2ofrecord.zip $ unzip img2ofrecord.zip \u8fdb\u5165\u5230\u5bf9\u5e94\u76ee\u5f55\uff0c\u5e76\u8fd0\u884c OFRecord \u5236\u4f5c\u811a\u672c img2ofrecord.py $ cd ./img_to_ofrecord $ python img2ofrecord.py --part_num=5 --save_dir=./dataset/ --img_format=.png --image_root=./images/train_set/ \u811a\u672c\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u8f93\u51fa\u4ee5\u4e0b\u5185\u5bb9 The image root is: ./images/train_set/ The amount of OFRecord data part is: 5 The directory of Labels is: ./images/train_label/label.txt The image format is: .png The OFRecord save directory is: ./dataset/ Start Processing...... ./images/train_set/00000030_3.png feature saved ./images/train_set/00000034_0.png feature saved ./images/train_set/00000026_4.png feature saved ./images/train_set/00000043_9.png feature saved ...... Process image successfully !!! \u81f3\u6b64\u6211\u4eec OFRecord \u6587\u4ef6\u5236\u4f5c\u5b8c\u6bd5\uff0c\u5e76\u4fdd\u5b58\u5728 ./dataset \u76ee\u5f55\u4e0b","title":"\u7528\u56fe\u7247\u6587\u4ef6\u5236\u4f5c OFRecord \u6587\u4ef6"},{"location":"extended_topics/how_to_convert_image_to_ofrecord.html#_1","text":"\u6574\u4e2a\u4ee3\u7801\u76ee\u5f55\u6784\u9020\u5982\u4e0b img_to_ofrecord \u251c\u2500\u2500 images \u251c\u2500\u2500 train_set \u251c\u2500\u2500 00000000_5.png \u251c\u2500\u2500 00000001_0.png \u251c\u2500\u2500 00000002_4.png ...... \u251c\u2500\u2500 train_label \u251c\u2500\u2500 label.txt \u251c\u2500\u2500 img2ofrecord.py \u251c\u2500\u2500 lenet_train.py images \u76ee\u5f55\u5b58\u653e\u539f\u59cb\u793a\u4f8b\u8bad\u7ec3\u6570\u636e\u96c6\u4ee5\u53ca\u6807\u7b7e\u6587\u4ef6 \u6211\u4eec\u7684\u6807\u7b7e\u6587\u4ef6\u662f\u4ee5 json \u683c\u5f0f\u5b58\u50a8\u7684\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a {\"00000030_3.png\": 3} {\"00000034_0.png\": 0} {\"00000026_4.png\": 4} {\"00000043_9.png\": 9} {\"00000047_5.png\": 5} {\"00000003_1.png\": 1} ...... img2ofrecord.py \u811a\u672c\u5c06 MNIST \u56fe\u7247\u8f6c\u6362\u6210 OFRecord \u6570\u636e\u96c6 lenet_train.py \u811a\u672c\u5219\u8bfb\u53d6\u6211\u4eec\u5236\u4f5c\u597d\u7684 OFRecord \u6570\u636e\u96c6\uff0c\u5e76\u4f7f\u7528 LeNet \u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002 img2ofrecord.py \u7684\u547d\u4ee4\u884c\u9009\u9879\u5982\u4e0b\uff1a image_root \u6307\u5b9a\u56fe\u7247\u7684\u6839\u76ee\u5f55\u8def\u5f84 part_num \u6307\u5b9a\u751f\u6210 OFRecord \u6587\u4ef6\u4e2a\u6570\uff0c\u5982\u679c\u8be5\u6570\u76ee\u5927\u4e8e\u603b\u56fe\u7247\u6570\u76ee\uff0c\u4f1a\u62a5\u9519 label_dir \u6307\u5b9a\u6807\u7b7e\u7684\u76ee\u5f55\u8def\u5f84 img_format \u6307\u5b9a\u56fe\u7247\u7684\u683c\u5f0f save_dir \u6307\u5b9a OFRecord \u6587\u4ef6\u4fdd\u5b58\u7684\u76ee\u5f55","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"extended_topics/how_to_convert_image_to_ofrecord.html#_2","text":"\u4e0e OFRecord \u6587\u4ef6\u7f16\u7801\u7684\u76f8\u5173\u903b\u8f91\u4e5f\u5728 img2ofrecord.py \u5185\uff0c\u5176\u7f16\u7801\u6d41\u7a0b\u5982\u4e0b\uff1a \u9996\u5148\uff0c\u5bf9\u8bfb\u53d6\u8fdb\u6765\u7684\u56fe\u7247\u6570\u636e\u8fdb\u884c\u7f16\u7801 def encode_img_file ( filename , ext = \".jpg\" ): img = cv2 . imread ( filename ) encoded_data = cv2 . imencode ( ext , img )[ 1 ] return encoded_data . tostring () \u8fd9\u91cc\u7684 ext \u662f\u56fe\u7247\u7f16\u7801\u683c\u5f0f\uff0c\u76ee\u524d\uff0cOneFlow \u56fe\u7247\u7f16\u89e3\u7801\u652f\u6301\u7684\u683c\u5f0f\u4e0e OpenCV \u7684\u4e00\u81f4\uff0c\u53ef\u53c2\u89c1 cv::ImwriteFlags \uff0c\u5305\u62ec\uff1a JPEG\uff0c\u4e00\u79cd\u6700\u5e38\u89c1\u7684\u6709\u635f\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 JPEG PNG\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u65e0\u635f\u4f4d\u56fe\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 Portable Network Graphics TIFF\uff0c\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u538b\u7f29\u7f16\u7801\u683c\u5f0f\uff0c\u53ef\u53c2\u8003 Tagged Image File Format \u7136\u540e\uff0c\u8f6c\u5316\u6210 Feature \u7684\u5f62\u5f0f\uff0c\u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u5e76\u5c06\u6570\u636e\u957f\u5ea6\u5199\u5165\u5230\u6587\u4ef6\u4e2d def ndarray2ofrecords ( dsfile , dataname , encoded_data , labelname , encoded_label ): topack = { dataname : bytes_feature ( encoded_data ), labelname : int32_feature ( encoded_label )} ofrecord_features = ofrecord . OFRecord ( feature = topack ) serilizedBytes = ofrecord_features . SerializeToString () length = ofrecord_features . ByteSize () dsfile . write ( struct . pack ( \"q\" , length )) dsfile . write ( serilizedBytes )","title":"\u811a\u672c\u7684\u7f16\u7801\u6d41\u7a0b"},{"location":"extended_topics/how_to_convert_image_to_ofrecord.html#ofrecord_2","text":"\u6211\u4eec\u8fd0\u884c\u76ee\u5f55\u4e0b\u7684 lenet_train.py \uff0c\u5b83\u5c06\u8bfb\u53d6\u6211\u4eec\u521a\u5236\u4f5c\u597d\u7684 OFRecord \u6570\u636e\u96c6\uff0c\u5728 Lenet \u6a21\u578b\u4e0a\u8fdb\u884c\u8bad\u7ec3 \u8be5\u8bad\u7ec3\u811a\u672c\u8f93\u51fa\u5982\u4e0b\uff1a [6.778578] [2.0212684] [1.3814741] [0.47514156] [0.13277876] [0.16388433] [0.03788032] [0.01225162] ...... \u81f3\u6b64\uff0c\u6211\u4eec\u6210\u529f\u5b8c\u6210\u4e86\u6570\u636e\u96c6\u5236\u4f5c\u3001\u8bfb\u53d6\u4e0e\u8bad\u7ec3\u6574\u4e2a\u6d41\u7a0b\u3002","title":"\u4f7f\u7528\u81ea\u5236\u7684 OFRecord \u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3"},{"location":"extended_topics/how_to_make_ofdataset.html","text":"\u5728 \u6570\u636e\u8f93\u5165 \u4e00\u6587\u4e2d\u6211\u4eec\u77e5\u9053\u4e86\u4f7f\u7528 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50\u52a0\u8f7d\u6570\u636e\uff0c\u5f80\u5f80\u6548\u7387\u66f4\u9ad8\uff0c\u5e76\u4e14\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50\u3002 \u5728 OFrecord \u6570\u636e\u683c\u5f0f \u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86 OFRecord \u6587\u4ef6\u7684\u5b58\u50a8\u683c\u5f0f\u3002 \u672c\u6587\uff0c\u5c06\u56f4\u7ed5 OneFlow \u7684 OFRecord \u6570\u636e\u96c6\u7684\u52a0\u8f7d\u4e0e\u5236\u4f5c\u5c55\u5f00\uff0c\u4e3b\u8981\u5305\u62ec\uff1a OFRecord \u6570\u636e\u96c6\u7684\u7ec4\u7ec7\u5f62\u5f0f \u52a0\u8f7d OFRecord \u6570\u636e\u96c6\u7684\u591a\u79cd\u65b9\u5f0f OFRecord \u6570\u636e\u96c6\u4e0e\u5176\u5b83\u6570\u636e\u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316 \u4ec0\u4e48\u662fOFRecord\u6570\u636e\u96c6 \u00b6 \u5728 OFrecord \u6570\u636e\u683c\u5f0f \u4e2d\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7 OFRecord \u6587\u4ef6 \u7684\u5b58\u50a8\u683c\u5f0f\uff0c\u77e5\u9053\u4e86\u4ec0\u4e48\u662f OFRecord\u6587\u4ef6 \u3002 OFRecord \u6570\u636e\u96c6\u662f OFRecord \u6587\u4ef6\u7684\u96c6\u5408 \u3002\u5c06\u591a\u4e2a OFRecord\u6587\u4ef6 \uff0c\u6309\u7167 OneFlow \u7ea6\u5b9a\u7684\u6587\u4ef6\u540d\u683c\u5f0f\uff0c\u5b58\u653e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e2d\uff0c\u5c31\u5f97\u5230\u4e86 OFRecord \u6570\u636e\u96c6\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOFRecord \u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\uff0c\u7edf\u4e00\u4ee5 part-xxx \u7684\u65b9\u5f0f\u547d\u540d\uff0c\u5176\u4e2d\u7684 \"xxx\" \u662f\u4ece0\u5f00\u59cb\u7684\u6587\u4ef6\u7f16\u53f7\uff0c\u6709\u8865\u9f50\u548c\u4e0d\u8865\u9f50\u4e24\u79cd\u9009\u62e9\u3002 \u4ee5\u4e0b\u662f\u6ca1\u6709\u91c7\u7528\u8865\u9f50\u7684\u547d\u540d\u98ce\u683c\u793a\u4f8b\uff1a mnist_kaggle/train/ \u251c\u2500\u2500 part-0 \u251c\u2500\u2500 part-1 \u251c\u2500\u2500 part-10 \u251c\u2500\u2500 part-11 \u251c\u2500\u2500 part-12 \u251c\u2500\u2500 part-13 \u251c\u2500\u2500 part-14 \u251c\u2500\u2500 part-15 \u251c\u2500\u2500 part-2 \u251c\u2500\u2500 part-3 \u251c\u2500\u2500 part-4 \u251c\u2500\u2500 part-5 \u251c\u2500\u2500 part-6 \u251c\u2500\u2500 part-7 \u251c\u2500\u2500 part-8 \u2514\u2500\u2500 part-9 \u4ee5\u4e0b\u662f\u6709\u8865\u9f50\u7684\u547d\u540d\u98ce\u683c\uff1a mnist_kaggle/train/ \u251c\u2500\u2500 part-00000 \u251c\u2500\u2500 part-00001 \u251c\u2500\u2500 part-00002 \u251c\u2500\u2500 part-00003 \u251c\u2500\u2500 part-00004 \u251c\u2500\u2500 part-00005 \u251c\u2500\u2500 part-00006 \u251c\u2500\u2500 part-00007 \u251c\u2500\u2500 part-00008 \u251c\u2500\u2500 part-00009 \u251c\u2500\u2500 part-00010 \u251c\u2500\u2500 part-00011 \u251c\u2500\u2500 part-00012 \u251c\u2500\u2500 part-00013 \u251c\u2500\u2500 part-00014 \u251c\u2500\u2500 part-00015 OneFlow \u91c7\u7528\u6b64\u7ea6\u5b9a\uff0c\u4e0e spark \u7684\u9ed8\u8ba4\u5b58\u50a8\u7684\u6587\u4ef6\u540d\u4e00\u81f4\uff0c\u65b9\u4fbf\u4f7f\u7528 spark \u5236\u4f5c\u4e0e\u8f6c\u5316 OFRecord \u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0c\u6587\u4ef6\u540d\u524d\u7f00( part- )\u3001\u6587\u4ef6\u540d\u7f16\u53f7\u662f\u5426\u8865\u9f50\u3001\u6309\u591a\u5c11\u4f4d\u8865\u9f50\uff0c\u5747\u53ef\u4ee5\u81ea\u884c\u6307\u5b9a\uff0c\u53ea\u9700\u8981\u5728\u52a0\u8f7d\u6570\u636e\u96c6(\u4e0b\u6587\u4f1a\u4ecb\u7ecd)\u65f6\uff0c\u4fdd\u6301\u76f8\u5173\u53c2\u6570\u4e00\u81f4\u5373\u53ef\u3002 OneFlow \u63d0\u4f9b\u4e86\u52a0\u8f7d OFRecord \u6570\u636e\u96c6\u7684\u63a5\u53e3\uff0c\u4f7f\u5f97\u6211\u4eec\u53ea\u8981\u6307\u5b9a\u6570\u636e\u96c6\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u4eab\u53d7 OneFlow \u6846\u67b6\u6240\u5e26\u6765\u7684\u591a\u7ebf\u7a0b\u3001\u6570\u636e\u6d41\u6c34\u7ebf\u7b49\u4f18\u52bf\u3002 \u52a0\u8f7dOFRecord\u6570\u636e\u96c6\u7684\u65b9\u6cd5 \u00b6 \u6211\u4eec\u4f7f\u7528 ofrecord_reader \u52a0\u8f7d\u5e76\u9884\u5904\u7406\u6570\u636e\u96c6\u3002 \u5728 \u6570\u636e\u8f93\u5165 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 ofrecord_reader \u63a5\u53e3\u52a0\u8f7d OFRecord \u6570\u636e\uff0c\u5e76\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u3002 \u4ee3\u7801\u89c1\uff1a of_data_pipeline.py ofrecord_reader \u7684\u63a5\u53e3\u5982\u4e0b\uff1a def ofrecord_reader ( ofrecord_dir , batch_size = 1 , data_part_num = 1 , part_name_prefix = \"part-\" , part_name_suffix_length =- 1 , random_shuffle = False , shuffle_buffer_size = 1024 , shuffle_after_epoch = False , name = None , ) ofrecord_dir \u6307\u5b9a\u5b58\u653e\u6570\u636e\u96c6\u7684\u76ee\u5f55\u8def\u5f84 batch_size \u6307\u5b9a\u6bcf\u8f6e\u8bfb\u53d6\u7684 batch \u5927\u5c0f data_part_num \u6307\u5b9a\u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a ofrecord \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u5927\u4e8e\u771f\u5b9e\u5b58\u5728\u7684\u6587\u4ef6\u6570\uff0c\u4f1a\u62a5\u9519 part_name_prefix \u6307\u5b9a ofrecord \u6587\u4ef6\u7684\u6587\u4ef6\u540d\u524d\u7f00\uff0c OneFlow \u6839\u636e\u524d\u7f00+\u5e8f\u53f7\u5728\u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u5b9a\u4f4d ofrecord \u6587\u4ef6 part_name_suffix_length \u6307\u5b9a ofrecord \u6587\u4ef6\u7684\u5e8f\u53f7\u7684\u5bf9\u9f50\u957f\u5ea6\uff0c-1\u8868\u793a\u4e0d\u7528\u5bf9\u9f50 random_shuffle \u8868\u793a\u8bfb\u53d6\u65f6\u662f\u5426\u9700\u8981\u968f\u673a\u6253\u4e71\u6837\u672c\u987a\u5e8f shuffle_buffer_size \u6307\u5b9a\u4e86\u8bfb\u53d6\u6837\u672c\u7684\u7f13\u51b2\u533a\u5927\u5c0f shuffle_after_epoch \u8868\u793a\u6bcf\u8f6e\u8bfb\u53d6\u5b8c\u540e\u662f\u5426\u9700\u8981\u91cd\u65b0\u6253\u4e71\u6837\u672c\u987a\u5e8f \u4f7f\u7528 ofrecord_reader \u7684\u597d\u5904\u5728\u4e8e\uff0c ofrecord_reader \u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u7b97\u5b50\uff0c\u53c2\u4e0e OneFlow \u6784\u56fe\u4f18\u5316\uff0c\u5e76\u4eab\u6709 OneFlow \u6d41\u6c34\u7ebf\u52a0\u901f\u3002 \u5bf9\u4e8e\u4e0e\u4e1a\u52a1\u903b\u8f91\u8026\u5408\u7684\u7279\u5b9a\u64cd\u4f5c\uff08\u5982\u89e3\u7801\u3001\u89e3\u538b\u7b49\uff09\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4e3a ofrecord_reader \u5b9a\u4e49\u9884\u5904\u7406 op\uff0c\u8ba9\u7a0b\u5e8f\u62e5\u6709\u5f88\u9ad8\u7684\u7075\u6d3b\u6027\u548c\u6269\u5c55\u6027\u3002 \u5173\u4e8e DataLoader \u53ca\u76f8\u5173\u7b97\u5b50\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u8f93\u5165 \u5173\u4e8e\u81ea\u5b9a\u4e49 Op \u53ef\u4ee5\u53c2\u8003 \u7528\u6237\u81ea\u5b9a\u4e49 op \u5176\u5b83\u683c\u5f0f\u6570\u636e\u4e0e OFRecord \u6570\u636e\u96c6\u7684\u76f8\u4e92\u8f6c\u5316 \u00b6 \u53c2\u8003 OFrecord\u6570\u636e\u683c\u5f0f \u4e2d OFRecord \u6587\u4ef6\u7684\u5b58\u50a8\u683c\u5f0f\u53ca\u672c\u6587\u5f00\u5934\u4ecb\u7ecd\u7684 OFRecord \u6570\u636e\u96c6\u7684\u6587\u4ef6\u540d\u683c\u5f0f\u7ea6\u5b9a\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u81ea\u5df1\u5236\u4f5c OFRecord \u6570\u636e\u96c6\u3002 \u4e0d\u8fc7\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 Spark \u7684 jar \u5305\uff0c\u65b9\u4fbf OFRecord \u4e0e\u5e38\u89c1\u6570\u636e\u683c\u5f0f(\u5982 TFRecord\u3001json)\u8fdb\u884c\u76f8\u4e92\u8f6c\u5316\u3002 spark \u7684\u5b89\u88c5\u4e0e\u542f\u52a8 \u00b6 \u9996\u5148\uff0c\u4e0b\u8f7d spark \u53ca spark-oneflow-connector\uff1a \u5728 spark \u5b98\u7f51\u4e0b\u8f7d spark-2.4.7-bin-hadoop2.7.tgz \u5728 \u8fd9\u91cc \u4e0b\u8f7d jar \u5305\uff0cspark \u9700\u8981\u5b83\u6765\u652f\u6301 ofrecord \u683c\u5f0f \u63a5\u7740\uff0c\u89e3\u538b spark-2.4.7-bin-hadoop2.7.tgz \uff0c\u5e76\u914d\u7f6e\u73af\u5883\u53d8\u91cf SPARK_HOME : export SPARK_HOME=path/to/spark-2.4.7-bin-hadoop2.7 export PATH=$SPARK_HOME/bin:$PATH \u7136\u540e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 pyspark shell\uff1a pyspark --master \"local[*]\"\\ --jars spark-oneflow-connector-assembly-0.1.0_int64.jar\\ --packages org.tensorflow:spark-tensorflow-connector_2.11:1.13.1 ... Welcome to ____ __ / __/__ ___ _____/ /__ _\\ \\/ _ \\/ _ `/ __/ '_/ /__ / .__/\\_,_/_/ /_/\\_\\ version 2.4.7 /_/ Using Python version 3.6.10 (default, Mar 25 2020 18:53:43) SparkSession available as 'spark'. >>> \u5728\u542f\u52a8\u7684 pyspark shell \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210 OFRecord \u6570\u636e\u96c6\u4e0e\u5176\u5b83\u6570\u636e\u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316\u3002 \u4f7f\u7528 spark \u67e5\u770b OFRecord \u6570\u636e\u96c6 \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b OFRecord \u6570\u636e\uff1a spark.read.format(\"ofrecord\").load(\"file:///path/to/ofrecord_file\").show() \u9ed8\u8ba4\u663e\u793a\u524d20\u6761\u6570\u636e: +--------------------+------+ | images|labels| +--------------------+------+ |[0.33967614, 0.87...| 2| |[0.266905, 0.9730...| 3| |[0.66661334, 0.67...| 1| |[0.91943026, 0.89...| 6| |[0.014844197, 0.0...| 6| |[0.5366513, 0.748...| 4| |[0.055148937, 0.7...| 7| |[0.7814437, 0.228...| 4| |[0.31193638, 0.55...| 3| |[0.20034336, 0.24...| 4| |[0.09441255, 0.07...| 3| |[0.5177533, 0.397...| 0| |[0.23703437, 0.44...| 9| |[0.9425567, 0.859...| 9| |[0.017339867, 0.0...| 3| |[0.827106, 0.3122...| 0| |[0.8641392, 0.194...| 2| |[0.95585227, 0.29...| 3| |[0.7508129, 0.464...| 4| |[0.035597708, 0.3...| 9| +--------------------+------+ only showing top 20 rows \u4e0e TFRecord \u6570\u636e\u96c6\u7684\u76f8\u4e92\u8f6c\u5316 \u00b6 \u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5c06 TFRecord \u8f6c\u5316\u4e3a OFRecrod\uff1a reader = spark . read . format ( \"tfrecords\" ) dataframe = reader . load ( \"file:///path/to/tfrecord_file\" ) writer = dataframe . write . format ( \"ofrecord\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 outputdir \u76ee\u5f55\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa\uff0c\u5e76\u5728\u5176\u4e2d\u4fdd\u5b58 ofrecord \u6587\u4ef6\u3002\u5728\u6267\u884c\u547d\u4ee4\u524d\u5e94\u4fdd\u8bc1 outputdir \u76ee\u5f55\u4e0d\u5b58\u5728\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u8f6c\u5316\u7684\u540c\u65f6\uff0c\u5c06\u6570\u636e\u5207\u5206\u4e3a\u591a\u4e2a ofrecord \u6587\u4ef6\uff1a reader = spark . read . format ( \"tfrecords\" ) dataframe = reader . load ( \"file:///path/to/tfrecord_file\" ) writer = dataframe . repartition ( 10 ) . write . format ( \"ofrecord\" ) writer . save ( \"file://path/to/outputdir\" ) \u4ee5\u4e0a\u547d\u4ee4\u6267\u884c\u540e\uff0c\u5728 outputdir \u76ee\u5f55\u4e0b\u4f1a\u4ea7\u751f10\u4e2a part-xxx \u683c\u5f0f\u7684ofrecord\u6587\u4ef6\u3002 \u5c06 OFRecord \u6587\u4ef6\u8f6c\u4e3a TFRecord \u6587\u4ef6\u7684\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u4ea4\u6362\u8bfb/\u5199\u65b9\u7684 format \u5373\u53ef\uff1a reader = spark . read . format ( \"ofrecord\" ) dataframe = reader . load ( \"file:///path/to/ofrecord_file\" ) writer = dataframe . write . format ( \"tfrecords\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4e0e JSON \u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316 \u00b6 \u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5c06 JSON \u683c\u5f0f\u6570\u636e\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6: dataframe = spark . read . json ( \"file:///path/to/json_file\" ) writer = dataframe . write . format ( \"ofrecord\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4ee5\u4e0b\u547d\u4ee4\u5c06 OFRecord \u6570\u636e\u8f6c\u4e3a JSON \u6587\u4ef6\uff1a reader = spark . read . format ( \"ofrecord\" ) dataframe = reader . load ( \"file:///path/to/ofrecord_file\" ) dataframe . write . json ( \"file://path/to/outputdir\" )","title":"\u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6"},{"location":"extended_topics/how_to_make_ofdataset.html#ofrecord","text":"\u5728 OFrecord \u6570\u636e\u683c\u5f0f \u4e2d\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u8fc7 OFRecord \u6587\u4ef6 \u7684\u5b58\u50a8\u683c\u5f0f\uff0c\u77e5\u9053\u4e86\u4ec0\u4e48\u662f OFRecord\u6587\u4ef6 \u3002 OFRecord \u6570\u636e\u96c6\u662f OFRecord \u6587\u4ef6\u7684\u96c6\u5408 \u3002\u5c06\u591a\u4e2a OFRecord\u6587\u4ef6 \uff0c\u6309\u7167 OneFlow \u7ea6\u5b9a\u7684\u6587\u4ef6\u540d\u683c\u5f0f\uff0c\u5b58\u653e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e2d\uff0c\u5c31\u5f97\u5230\u4e86 OFRecord \u6570\u636e\u96c6\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOFRecord \u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\uff0c\u7edf\u4e00\u4ee5 part-xxx \u7684\u65b9\u5f0f\u547d\u540d\uff0c\u5176\u4e2d\u7684 \"xxx\" \u662f\u4ece0\u5f00\u59cb\u7684\u6587\u4ef6\u7f16\u53f7\uff0c\u6709\u8865\u9f50\u548c\u4e0d\u8865\u9f50\u4e24\u79cd\u9009\u62e9\u3002 \u4ee5\u4e0b\u662f\u6ca1\u6709\u91c7\u7528\u8865\u9f50\u7684\u547d\u540d\u98ce\u683c\u793a\u4f8b\uff1a mnist_kaggle/train/ \u251c\u2500\u2500 part-0 \u251c\u2500\u2500 part-1 \u251c\u2500\u2500 part-10 \u251c\u2500\u2500 part-11 \u251c\u2500\u2500 part-12 \u251c\u2500\u2500 part-13 \u251c\u2500\u2500 part-14 \u251c\u2500\u2500 part-15 \u251c\u2500\u2500 part-2 \u251c\u2500\u2500 part-3 \u251c\u2500\u2500 part-4 \u251c\u2500\u2500 part-5 \u251c\u2500\u2500 part-6 \u251c\u2500\u2500 part-7 \u251c\u2500\u2500 part-8 \u2514\u2500\u2500 part-9 \u4ee5\u4e0b\u662f\u6709\u8865\u9f50\u7684\u547d\u540d\u98ce\u683c\uff1a mnist_kaggle/train/ \u251c\u2500\u2500 part-00000 \u251c\u2500\u2500 part-00001 \u251c\u2500\u2500 part-00002 \u251c\u2500\u2500 part-00003 \u251c\u2500\u2500 part-00004 \u251c\u2500\u2500 part-00005 \u251c\u2500\u2500 part-00006 \u251c\u2500\u2500 part-00007 \u251c\u2500\u2500 part-00008 \u251c\u2500\u2500 part-00009 \u251c\u2500\u2500 part-00010 \u251c\u2500\u2500 part-00011 \u251c\u2500\u2500 part-00012 \u251c\u2500\u2500 part-00013 \u251c\u2500\u2500 part-00014 \u251c\u2500\u2500 part-00015 OneFlow \u91c7\u7528\u6b64\u7ea6\u5b9a\uff0c\u4e0e spark \u7684\u9ed8\u8ba4\u5b58\u50a8\u7684\u6587\u4ef6\u540d\u4e00\u81f4\uff0c\u65b9\u4fbf\u4f7f\u7528 spark \u5236\u4f5c\u4e0e\u8f6c\u5316 OFRecord \u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0c\u6587\u4ef6\u540d\u524d\u7f00( part- )\u3001\u6587\u4ef6\u540d\u7f16\u53f7\u662f\u5426\u8865\u9f50\u3001\u6309\u591a\u5c11\u4f4d\u8865\u9f50\uff0c\u5747\u53ef\u4ee5\u81ea\u884c\u6307\u5b9a\uff0c\u53ea\u9700\u8981\u5728\u52a0\u8f7d\u6570\u636e\u96c6(\u4e0b\u6587\u4f1a\u4ecb\u7ecd)\u65f6\uff0c\u4fdd\u6301\u76f8\u5173\u53c2\u6570\u4e00\u81f4\u5373\u53ef\u3002 OneFlow \u63d0\u4f9b\u4e86\u52a0\u8f7d OFRecord \u6570\u636e\u96c6\u7684\u63a5\u53e3\uff0c\u4f7f\u5f97\u6211\u4eec\u53ea\u8981\u6307\u5b9a\u6570\u636e\u96c6\u76ee\u5f55\u7684\u8def\u5f84\uff0c\u5c31\u53ef\u4ee5\u4eab\u53d7 OneFlow \u6846\u67b6\u6240\u5e26\u6765\u7684\u591a\u7ebf\u7a0b\u3001\u6570\u636e\u6d41\u6c34\u7ebf\u7b49\u4f18\u52bf\u3002","title":"\u4ec0\u4e48\u662fOFRecord\u6570\u636e\u96c6"},{"location":"extended_topics/how_to_make_ofdataset.html#ofrecord_1","text":"\u6211\u4eec\u4f7f\u7528 ofrecord_reader \u52a0\u8f7d\u5e76\u9884\u5904\u7406\u6570\u636e\u96c6\u3002 \u5728 \u6570\u636e\u8f93\u5165 \u4e00\u6587\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 ofrecord_reader \u63a5\u53e3\u52a0\u8f7d OFRecord \u6570\u636e\uff0c\u5e76\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u3002 \u4ee3\u7801\u89c1\uff1a of_data_pipeline.py ofrecord_reader \u7684\u63a5\u53e3\u5982\u4e0b\uff1a def ofrecord_reader ( ofrecord_dir , batch_size = 1 , data_part_num = 1 , part_name_prefix = \"part-\" , part_name_suffix_length =- 1 , random_shuffle = False , shuffle_buffer_size = 1024 , shuffle_after_epoch = False , name = None , ) ofrecord_dir \u6307\u5b9a\u5b58\u653e\u6570\u636e\u96c6\u7684\u76ee\u5f55\u8def\u5f84 batch_size \u6307\u5b9a\u6bcf\u8f6e\u8bfb\u53d6\u7684 batch \u5927\u5c0f data_part_num \u6307\u5b9a\u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a ofrecord \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u5927\u4e8e\u771f\u5b9e\u5b58\u5728\u7684\u6587\u4ef6\u6570\uff0c\u4f1a\u62a5\u9519 part_name_prefix \u6307\u5b9a ofrecord \u6587\u4ef6\u7684\u6587\u4ef6\u540d\u524d\u7f00\uff0c OneFlow \u6839\u636e\u524d\u7f00+\u5e8f\u53f7\u5728\u6570\u636e\u96c6\u76ee\u5f55\u4e2d\u5b9a\u4f4d ofrecord \u6587\u4ef6 part_name_suffix_length \u6307\u5b9a ofrecord \u6587\u4ef6\u7684\u5e8f\u53f7\u7684\u5bf9\u9f50\u957f\u5ea6\uff0c-1\u8868\u793a\u4e0d\u7528\u5bf9\u9f50 random_shuffle \u8868\u793a\u8bfb\u53d6\u65f6\u662f\u5426\u9700\u8981\u968f\u673a\u6253\u4e71\u6837\u672c\u987a\u5e8f shuffle_buffer_size \u6307\u5b9a\u4e86\u8bfb\u53d6\u6837\u672c\u7684\u7f13\u51b2\u533a\u5927\u5c0f shuffle_after_epoch \u8868\u793a\u6bcf\u8f6e\u8bfb\u53d6\u5b8c\u540e\u662f\u5426\u9700\u8981\u91cd\u65b0\u6253\u4e71\u6837\u672c\u987a\u5e8f \u4f7f\u7528 ofrecord_reader \u7684\u597d\u5904\u5728\u4e8e\uff0c ofrecord_reader \u4f5c\u4e3a\u4e00\u4e2a\u666e\u901a\u7b97\u5b50\uff0c\u53c2\u4e0e OneFlow \u6784\u56fe\u4f18\u5316\uff0c\u5e76\u4eab\u6709 OneFlow \u6d41\u6c34\u7ebf\u52a0\u901f\u3002 \u5bf9\u4e8e\u4e0e\u4e1a\u52a1\u903b\u8f91\u8026\u5408\u7684\u7279\u5b9a\u64cd\u4f5c\uff08\u5982\u89e3\u7801\u3001\u89e3\u538b\u7b49\uff09\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4e3a ofrecord_reader \u5b9a\u4e49\u9884\u5904\u7406 op\uff0c\u8ba9\u7a0b\u5e8f\u62e5\u6709\u5f88\u9ad8\u7684\u7075\u6d3b\u6027\u548c\u6269\u5c55\u6027\u3002 \u5173\u4e8e DataLoader \u53ca\u76f8\u5173\u7b97\u5b50\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 \u6570\u636e\u8f93\u5165 \u5173\u4e8e\u81ea\u5b9a\u4e49 Op \u53ef\u4ee5\u53c2\u8003 \u7528\u6237\u81ea\u5b9a\u4e49 op","title":"\u52a0\u8f7dOFRecord\u6570\u636e\u96c6\u7684\u65b9\u6cd5"},{"location":"extended_topics/how_to_make_ofdataset.html#ofrecord_2","text":"\u53c2\u8003 OFrecord\u6570\u636e\u683c\u5f0f \u4e2d OFRecord \u6587\u4ef6\u7684\u5b58\u50a8\u683c\u5f0f\u53ca\u672c\u6587\u5f00\u5934\u4ecb\u7ecd\u7684 OFRecord \u6570\u636e\u96c6\u7684\u6587\u4ef6\u540d\u683c\u5f0f\u7ea6\u5b9a\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u81ea\u5df1\u5236\u4f5c OFRecord \u6570\u636e\u96c6\u3002 \u4e0d\u8fc7\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86 Spark \u7684 jar \u5305\uff0c\u65b9\u4fbf OFRecord \u4e0e\u5e38\u89c1\u6570\u636e\u683c\u5f0f(\u5982 TFRecord\u3001json)\u8fdb\u884c\u76f8\u4e92\u8f6c\u5316\u3002","title":"\u5176\u5b83\u683c\u5f0f\u6570\u636e\u4e0e OFRecord \u6570\u636e\u96c6\u7684\u76f8\u4e92\u8f6c\u5316"},{"location":"extended_topics/how_to_make_ofdataset.html#spark","text":"\u9996\u5148\uff0c\u4e0b\u8f7d spark \u53ca spark-oneflow-connector\uff1a \u5728 spark \u5b98\u7f51\u4e0b\u8f7d spark-2.4.7-bin-hadoop2.7.tgz \u5728 \u8fd9\u91cc \u4e0b\u8f7d jar \u5305\uff0cspark \u9700\u8981\u5b83\u6765\u652f\u6301 ofrecord \u683c\u5f0f \u63a5\u7740\uff0c\u89e3\u538b spark-2.4.7-bin-hadoop2.7.tgz \uff0c\u5e76\u914d\u7f6e\u73af\u5883\u53d8\u91cf SPARK_HOME : export SPARK_HOME=path/to/spark-2.4.7-bin-hadoop2.7 export PATH=$SPARK_HOME/bin:$PATH \u7136\u540e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 pyspark shell\uff1a pyspark --master \"local[*]\"\\ --jars spark-oneflow-connector-assembly-0.1.0_int64.jar\\ --packages org.tensorflow:spark-tensorflow-connector_2.11:1.13.1 ... Welcome to ____ __ / __/__ ___ _____/ /__ _\\ \\/ _ \\/ _ `/ __/ '_/ /__ / .__/\\_,_/_/ /_/\\_\\ version 2.4.7 /_/ Using Python version 3.6.10 (default, Mar 25 2020 18:53:43) SparkSession available as 'spark'. >>> \u5728\u542f\u52a8\u7684 pyspark shell \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5b8c\u6210 OFRecord \u6570\u636e\u96c6\u4e0e\u5176\u5b83\u6570\u636e\u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316\u3002","title":"spark \u7684\u5b89\u88c5\u4e0e\u542f\u52a8"},{"location":"extended_topics/how_to_make_ofdataset.html#spark-ofrecord","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b OFRecord \u6570\u636e\uff1a spark.read.format(\"ofrecord\").load(\"file:///path/to/ofrecord_file\").show() \u9ed8\u8ba4\u663e\u793a\u524d20\u6761\u6570\u636e: +--------------------+------+ | images|labels| +--------------------+------+ |[0.33967614, 0.87...| 2| |[0.266905, 0.9730...| 3| |[0.66661334, 0.67...| 1| |[0.91943026, 0.89...| 6| |[0.014844197, 0.0...| 6| |[0.5366513, 0.748...| 4| |[0.055148937, 0.7...| 7| |[0.7814437, 0.228...| 4| |[0.31193638, 0.55...| 3| |[0.20034336, 0.24...| 4| |[0.09441255, 0.07...| 3| |[0.5177533, 0.397...| 0| |[0.23703437, 0.44...| 9| |[0.9425567, 0.859...| 9| |[0.017339867, 0.0...| 3| |[0.827106, 0.3122...| 0| |[0.8641392, 0.194...| 2| |[0.95585227, 0.29...| 3| |[0.7508129, 0.464...| 4| |[0.035597708, 0.3...| 9| +--------------------+------+ only showing top 20 rows","title":"\u4f7f\u7528 spark \u67e5\u770b OFRecord \u6570\u636e\u96c6"},{"location":"extended_topics/how_to_make_ofdataset.html#tfrecord","text":"\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5c06 TFRecord \u8f6c\u5316\u4e3a OFRecrod\uff1a reader = spark . read . format ( \"tfrecords\" ) dataframe = reader . load ( \"file:///path/to/tfrecord_file\" ) writer = dataframe . write . format ( \"ofrecord\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 outputdir \u76ee\u5f55\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa\uff0c\u5e76\u5728\u5176\u4e2d\u4fdd\u5b58 ofrecord \u6587\u4ef6\u3002\u5728\u6267\u884c\u547d\u4ee4\u524d\u5e94\u4fdd\u8bc1 outputdir \u76ee\u5f55\u4e0d\u5b58\u5728\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u8f6c\u5316\u7684\u540c\u65f6\uff0c\u5c06\u6570\u636e\u5207\u5206\u4e3a\u591a\u4e2a ofrecord \u6587\u4ef6\uff1a reader = spark . read . format ( \"tfrecords\" ) dataframe = reader . load ( \"file:///path/to/tfrecord_file\" ) writer = dataframe . repartition ( 10 ) . write . format ( \"ofrecord\" ) writer . save ( \"file://path/to/outputdir\" ) \u4ee5\u4e0a\u547d\u4ee4\u6267\u884c\u540e\uff0c\u5728 outputdir \u76ee\u5f55\u4e0b\u4f1a\u4ea7\u751f10\u4e2a part-xxx \u683c\u5f0f\u7684ofrecord\u6587\u4ef6\u3002 \u5c06 OFRecord \u6587\u4ef6\u8f6c\u4e3a TFRecord \u6587\u4ef6\u7684\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u4ea4\u6362\u8bfb/\u5199\u65b9\u7684 format \u5373\u53ef\uff1a reader = spark . read . format ( \"ofrecord\" ) dataframe = reader . load ( \"file:///path/to/ofrecord_file\" ) writer = dataframe . write . format ( \"tfrecords\" ) writer . save ( \"file:///path/to/outputdir\" )","title":"\u4e0e TFRecord \u6570\u636e\u96c6\u7684\u76f8\u4e92\u8f6c\u5316"},{"location":"extended_topics/how_to_make_ofdataset.html#json","text":"\u4ee5\u4e0b\u547d\u4ee4\u53ef\u4ee5\u5c06 JSON \u683c\u5f0f\u6570\u636e\u8f6c\u4e3a OFRecord \u6570\u636e\u96c6: dataframe = spark . read . json ( \"file:///path/to/json_file\" ) writer = dataframe . write . format ( \"ofrecord\" ) writer . save ( \"file:///path/to/outputdir\" ) \u4ee5\u4e0b\u547d\u4ee4\u5c06 OFRecord \u6570\u636e\u8f6c\u4e3a JSON \u6587\u4ef6\uff1a reader = spark . read . format ( \"ofrecord\" ) dataframe = reader . load ( \"file:///path/to/ofrecord_file\" ) dataframe . write . json ( \"file://path/to/outputdir\" )","title":"\u4e0e JSON \u683c\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316"},{"location":"extended_topics/implement_data_loader.html","text":"\u81ea\u5b9a\u4e49 DataLoader \u00b6 \u5982 \u6570\u636e\u8f93\u5165 \u4e00\u6587\u6240\u4ecb\u7ecd\uff0cOneFlow \u652f\u6301\u4e24\u79cd\u6570\u636e\u52a0\u8f7d\u65b9\u5f0f\uff1a\u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u6216\u8005\u4f7f\u7528 DataLoader \u53ca\u5176\u76f8\u5173\u7b97\u5b50\u3002 \u5728\u5927\u578b\u5de5\u4e1a\u573a\u666f\u4e0b\uff0c\u6570\u636e\u52a0\u8f7d\u5bb9\u6613\u6210\u4e3a\u8bad\u7ec3\u7684\u74f6\u9888\u3002\u5728\u5176\u5b83\u7684\u6846\u67b6\u4e2d\uff0c\u6570\u636e\u52a0\u8f7d\u6d41\u6c34\u7ebf\u5f80\u5f80\u4f5c\u4e3a\u5355\u72ec\u7684\u6a21\u5757\u5b58\u5728\uff0c\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u573a\u666f\u8fdb\u884c\u8c03\u6574\uff0c\u901a\u7528\u6027\u4e0d\u9ad8\u3002\u5728 OneFlow \u4e2d\uff0cDataLoader \u53ca\u76f8\u5173\u9884\u5904\u7406\u7b97\u5b50\uff0c\u4e0e\u5176\u5b83\u666e\u901a\u7b97\u5b50\u5730\u4f4d\u7b49\u540c\uff0c\u53ef\u4ee5\u4eab\u53d7\u4e0e\u5176\u5b83\u7b97\u5b50\u4e00\u6837\u7684\u6d41\u6c34\u52a0\u901f\u6548\u679c\uff0c\u8f7b\u677e\u89e3\u51b3\u5927\u89c4\u6a21\u6570\u636e\u52a0\u8f7d\u7684\u75db\u70b9\u3002 \u5728 OneFlow \u4e2d\u4f7f\u7528 DataLoader\uff0c\u4e00\u822c\u901a\u8fc7\u8c03\u7528 XXXReader \u52a0\u8f7d\u6587\u4ef6\u4e2d\u7684\u6570\u636e\uff0c\u8c03\u7528 XXXDeocde \u7b49\u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u7801\u6216\u5176\u5b83\u9884\u5904\u7406\uff0c\u4ed6\u4eec\u4e00\u8d77\u534f\u540c\u5b8c\u6210 Dataloader \u7684\u529f\u80fd\u3002 OneFlow \u76ee\u524d\u5185\u7f6e\u4e86\u4e00\u4e9b\u6587\u4ef6\u683c\u5f0f\u7684 DataLoader \u3002\u5982\u679c\u6211\u4eec\u60f3\u4f7f\u7528 DataLoader \u63d0\u9ad8\u6570\u636e\u52a0\u8f7d\u7684\u6548\u7387\uff0c\u4f46\u662f\u52a0\u8f7d\u7684\u6570\u636e\u683c\u5f0f\u6682\u65f6\u6ca1\u6709\u5185\u7f6e\u5728 OneFlow \u4e2d\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0 DataLoader\uff0c\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u683c\u5f0f\u3002 \u672c\u6587\u5b9e\u73b0\u4e86\u4e00\u4e2a Mini Dataloader\uff0c\u5728\u4ed3\u5e93\u4e2d\u53ef\u67e5\u770b \u5b8c\u6574\u4ee3\u7801 \u3002 \u4f5c\u4e3a\u793a\u4f8b\uff0cMini Dataloader \u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u6bcf\u884c\u4e24\u5217\u6570\u5b57\u7684\u7eaf\u6587\u672c\u6587\u4ef6(\u89c1\u4ee3\u7801\u4e2d\u7684 part-000 \u53ca part-001 \u6587\u4ef6)\uff1a 1.01,2.02 2.01,4.02 3.0,6.05 4.1,8.205 5,10 6.0,12.0 7.0,14.2 8.0,16.3 9.1,18.03 \u672c\u6587\u5c06\u4ee5 Mini Dataloader \u4e3a\u4f8b\uff0c\u5bf9\u81ea\u5b9a\u4e49\u683c\u5f0f\u7684 DataLoader \u7684\u5b9e\u73b0\u8981\u70b9\uff0c\u8fdb\u884c\u8bb2\u89e3\u3002 Dataloader \u7684\u7ec4\u6210 \u00b6 \u5b8c\u6574\u7684 Dataloader \u4e00\u822c\u5305\u62ec\u4e24\u7c7b Op\uff1a Data Reader\uff1a\u8d1f\u8d23\u5c06\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\uff0c\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u8f93\u5165\u6d41\uff0c\u5e76\u6700\u7ec8\u5c06\u6570\u636e\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\u3002\u5b83\u53c8\u53ef\u4ee5\u7ec6\u5206\u4e3a Loader \u4e0e Parser \u4e24\u90e8\u5206\uff0cLoader \u8d1f\u8d23\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u539f\u59cb\u6570\u636e\uff0cParser \u8d1f\u8d23\u5c06\u539f\u59cb\u6570\u636e\u7ec4\u7ec7\u4e3a Data Reader Op \u7684\u8f93\u51fa Data Preprocessor\uff1a\u5c06 Data Reader Op \u7684\u8f93\u51fa\u7684\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5e38\u89c1\u7684\u9884\u5904\u7406\u6709\u56fe\u7247\u89e3\u7801\u3001\u526a\u88c1\u56fe\u7247\u3001\u89e3\u7801\u7b49 \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u6570\u636e\u683c\u5f0f\uff0c\u4e0d\u9700\u8981\u9884\u5904\u7406\uff0c\u53ef\u4ee5\u7701\u7565\u6389 Data Preprocessor\uff0c\u53ea\u4f7f\u7528 Data Reader \u5373\u53ef\u3002 \u4f5c\u4e3a\u793a\u4f8b\uff0c Mini Dataloader \u5904\u7406\u7684\u6570\u636e\u683c\u5f0f\u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u4f9d\u7136\u5b9e\u73b0\u4e86 DataReader \u53ca Data Preprocessor \u4e24\u7c7b op\uff0c\u5176\u4e2d\uff1a MiniReader \u8d1f\u8d23\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u6309\u9017\u53f7\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u5c06\u6587\u672c\u8f6c\u4e3a\u6d6e\u70b9\u6570\u636e\u540e\uff0c\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\uff0c\u8f93\u51fa\u5f62\u72b6\u4e3a\u6bcf\u884c\u4e24\u5217 MiniDecoder \u8d1f\u8d23\u5c06\u4ee5\u4e0a\u6bcf\u884c\u4e24\u5217\u7684\u8f93\u51fa\u8fdb\u884c\u5206\u5272\uff0c\u5f97\u52302\u4e2a\u6bcf\u884c1\u5217\u7684\u8f93\u51fa x \u4e0e y \u5728 test_mini_dataloader.py \u4e2d\u53ef\u4ee5\u770b\u5230 Python \u5c42\u6b21\u4e24\u8005\u7684\u4f7f\u7528\uff1a miniRecord = MiniReader ( \"./\" , batch_size = batch_size , data_part_num = 2 , part_name_suffix_length = 3 , random_shuffle = True , shuffle_after_epoch = True , ) x , y = MiniDecoder ( miniRecord , name = \"d1\" ) \u4ee5\u4e0b\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd C++ \u5c42\u6b21\u5982\u4f55\u5b9e\u73b0 Data Reader \u7b97\u5b50\u4e0e Data Preprocessor \u7b97\u5b50\u3002 Data Reader \u7b97\u5b50 \u00b6 Data Reader \u7684\u7c7b\u5173\u7cfb \u00b6 \u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u7ee7\u627f\u81ea DataReader \u7684\u7c7b\uff0c\u8be5\u7c7b\u5305\u542b\u4e86\u4e24\u4e2a\u91cd\u8981\u5bf9\u8c61 loader_ \u4e0e parser_ \uff0c\u5206\u522b\u7ee7\u627f\u81ea Dataset \u4e0e Parser \u3002 loader_ \u7684\u5de5\u4f5c\u662f\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u6570\u636e\u81f3\u7f13\u51b2\u533a\uff0cOp \u4f5c\u8005\u901a\u8fc7\u91cd\u5199 Next \u65b9\u6cd5\u7f16\u5199\u8fd9\u90e8\u5206\u7684\u903b\u8f91 parser_ \u7684\u5de5\u4f5c\u662f\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\uff0c\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\uff0cOp \u4f5c\u8005\u901a\u8fc7\u91cd\u5199 Parser \u65b9\u6cd5\u7f16\u5199\u8fd9\u90e8\u5206\u7684\u903b\u8f91 \u5f53 Data Reader Op \u5de5\u4f5c\u65f6\uff0c\u4f1a\u8c03\u7528 loader_ \u4e2d\u7684\u76f8\u5173\u65b9\u6cd5\u6253\u5f00\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6587\u4ef6\uff0c\u5e76\u8c03\u7528 loader_ \u7684 Next \u65b9\u6cd5\u6309\u7167 Op \u4f5c\u8005\u9884\u5b9a\u7684\u903b\u8f91\u4ece\u6587\u4ef6\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\uff0c\u7136\u540e\uff0c\u518d\u8c03\u7528 parser_ \u7684 Parser \u65b9\u6cd5\uff0c\u5c06\u6570\u636e\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\u3002 \u4ee5\u4e0b\u7684\u4f2a\u4ee3\u7801\u5c55\u793a\u4e86\u4ee5\u4e0a\u7c7b\u5173\u7cfb\u548c\u8c03\u7528\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4ee3\u7801\u6bd4\u4f2a\u4ee3\u7801\u8981\u590d\u6742\uff0c\u5e76\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff1a class DataReader { void Read ( user_op :: KernelComputeContext * ctx ) { // \u8fd0\u884c\u5230\u6b64\u5904\uff0c\u5df2\u7ecf\u542f\u52a8\u4e86\u591a\u7ebf\u7a0b\u52a0\u901f\u6570\u636e\u5904\u7406 loader -> next (); parser_ -> Parse (); } Dataset * loader_ ; Parser * parser_ ; }; class MiniDataReader : DataReader { loader_ = new MiniDataSet ; parser_ = new MiniParser ; }; class MiniDataset : Dataset { MiniDataset () { //\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u627e\u5230\u6570\u636e\u96c6\uff0c\u5e76\u6253\u5f00\u6587\u4ef6\uff0c\u521d\u59cb\u5316\u8f93\u5165\u6d41 //... } Next () { // \u4ece\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u903b\u8f91 } }; class MiniParser : Parser { void Parse (){ // \u5c06 DataSet \u4e2d\u7684\u6570\u636e \u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d } }; \u5728 Data Reader Op \u7684 Kernel \u4e2d\uff0c\u4f1a\u89e6\u53d1 DataReader \u7684 Read \u65b9\u6cd5\uff0c\u8fdb\u800c\u5b8c\u6210\u4ee5\u4e0a\u4f2a\u4ee3\u7801\u6240\u5c55\u793a\u7684\u4e00\u8fde\u4e32\u64cd\u4f5c\u3002 \u4ee5\u4e0b\u6211\u4eec\u9488\u5bf9 MiniReader \u7b97\u5b50\u7684\u771f\u5b9e\u4ee3\u7801\u8fdb\u884c\u89e3\u6790\u3002 Op \u53ca Kernel \u6ce8\u518c \u00b6 \u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\uff0c\u6ce8\u518c\u4e86 MiniReader \u7684 Op\uff1a REGISTER_CPU_ONLY_USER_OP ( \"MiniReader\" ) . Output ( \"out\" ) . Attr < std :: string > ( \"data_dir\" ) . Attr < std :: int32_t > ( \"data_part_num\" ) . Attr < std :: string > ( \"part_name_prefix\" , \"part-\" ) . Attr < int32_t > ( \"part_name_suffix_length\" , -1 ) . Attr < int32_t > ( \"batch_size\" ) . Attr < bool > ( \"random_shuffle\" , false ) . Attr < bool > ( \"shuffle_after_epoch\" , false ) . Attr < int64_t > ( \"seed\" , -1 ) . Attr < int32_t > ( \"shuffle_buffer_size\" , 1024 ) . SetTensorDescInferFn ([]( user_op :: InferContext * ctx ) -> Maybe < void > { //... * out_tensor -> mut_shape () = Shape ({ local_batch_size , 2 }); * out_tensor -> mut_data_type () = DataType :: kDouble ; //... }) . SetGetSbpFn ([]( user_op :: SbpContext * ctx ) -> Maybe < void > { ctx -> NewBuilder (). Split ( ctx -> outputs (), 0 ). Build (); //... }); \u53ef\u4ee5\u770b\u5230\uff0c\u56e0\u4e3a Data Reader \u662f\u6bd4\u8f83\u7279\u6b8a\u7684 Op\uff0c\u53ea\u6709\u8f93\u51fa\uff0c\u6ca1\u6709\u8f93\u5165\uff08\u6570\u636e\u6765\u81ea\u6587\u4ef6\u7cfb\u7edf\uff0c\u800c\u4e0d\u662f\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u67d0\u4e2a\u4e0a\u6e38\u8282\u70b9\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u901a\u8fc7 Out \u65b9\u6cd5\u8bbe\u7f6e\u4e86\u8f93\u51fa\uff0c\u5e76\u5728 SetTensorDescInferFn \u8bbe\u7f6e\u4e86\u8f93\u51fa\u7684\u6027\u8d28\u4e3a\u6bcf\u884c2\u5217\uff0c\u6570\u636e\u7c7b\u4e3a DataType::kDouble \u3002\u540c\u7406\uff0c\u5728\u8bbe\u7f6e SetGetSbpFn \u4e2d\u8bbe\u7f6e SBP Signature \u65f6\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e\u8f93\u51fa\u7684 SBP \u5c5e\u6027\uff0c\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u4e3a Split(0)\u3002 \u800c\u8bbe\u7f6e\u7684\u5404\u79cd\u5c5e\u6027\uff08 data_dir \u3001 data_part_num \u7b49\uff09\uff0c\u6cbf\u7528\u4e86 OFRecord \u6570\u636e\u96c6 \u4e2d\u5173\u4e8e\u6587\u4ef6\u547d\u540d\u89c4\u8303\u7684\u8981\u6c42\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u590d\u7528 OneFlow \u4e2d\u5df2\u6709\u7684\u76f8\u5173\u4ee3\u7801\uff0c\u50cf \u52a0\u8f7d OFRecord \u6570\u636e\u96c6 \u90a3\u6837\uff0c\u52a0\u8f7d\u6211\u4eec\u81ea\u5b9a\u4e49\u683c\u5f0f\u7684\u6587\u4ef6\u3002 \u63a5\u7740\u770b\u8fd9\u4e2a Op \u7684 Kernel \u5b9e\u73b0\uff1a class MiniReaderKernel final : public user_op :: OpKernel { public : //... std :: shared_ptr < user_op :: OpKernelState > CreateOpKernelState ( user_op :: KernelInitContext * ctx ) override { std :: shared_ptr < MiniReaderWrapper > reader ( new MiniReaderWrapper ( ctx )); return reader ; } void Compute ( user_op :: KernelComputeContext * ctx , user_op :: OpKernelState * state ) override { auto * reader = dynamic_cast < MiniReaderWrapper *> ( state ); reader -> Read ( ctx ); } //... }; REGISTER_USER_KERNEL ( \"MiniReader\" ) . SetCreateFn < MiniReaderKernel > () . SetIsMatchedHob (( user_op :: HobDeviceTag () == \"cpu\" ) & ( user_op :: HobDataType ( \"out\" , 0 ) == DataType :: kDouble )); \u4f9d\u636e \u81ea\u5b9a\u4e49 Op \u4e00\u6587\u4e2d\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053 MiniReaderKernel::Compute \u8d1f\u8d23 Op \u7684\u8fd0\u7b97\u903b\u8f91\u3002\u4e0d\u8fc7\u6b64\u5904\u4f7f\u7528\u4f7f\u7528\u7684 Compute \u662f\u5305\u542b2\u4e2a\u53c2\u6570\u7684\u91cd\u8f7d\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u4ecb\u7ecd\u4e0b\u5b83\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 OpKernelState \u3002 \u5f53\u6211\u4eec\u8fdb\u884c Compute \u65f6\uff0c\u6709\u65f6\u9664\u4e86\u4ece ctx \u83b7\u53d6\u7684\u4fe1\u606f\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e9b\u5176\u4ed6\u7684\u5bf9\u8c61\uff0c\u8fd9\u79cd\u5bf9\u8c61\u4e0d\u9700\u8981\u53cd\u590d\u521b\u5efa\uff0c\u4f46\u662f\u5176\u4e2d\u7684\u4fe1\u606f\u72b6\u6001\u53ef\u80fd\u968f\u7740 Compute \u591a\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u79cd\u9700\u6c42\uff0cOneFlow \u63d0\u4f9b\u4e862\u4e2a\u53c2\u6570\u7684 Compute \u7684\u91cd\u8f7d\uff0c\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u5fc5\u987b\u540c\u65f6\u91cd\u5199 CreateOpKernelState \uff0c CreateOpKernelState \u7684\u4f5c\u7528\u662f\u8fd4\u56de\u4e00\u4e2a user_op::OpKernelState \u6d3e\u751f\u7c7b\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5c06\u5728 Compute \u8c03\u7528\u65f6\uff0c\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u9664 ctx \u5916\u60f3\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u5c01\u88c5\u4e3a user_op::OpKernelState \u7684\u6d3e\u751f\u7c7b\uff0c\u5e76\u5728 CreateOpKernelState \u5b9e\u4f8b\u5316\u5e76\u8fd4\u56de\u5373\u53ef\u3002 \u5177\u4f53\u5230\u6211\u4eec\u5b9e\u73b0\u7684 Mini Reader \u7684 Kernel\uff0c\u6211\u4eec\u5148\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7ee7\u627f\u81ea user_op::OpKernelState \u7684\u7c7b MiniReaderWrapper \uff0c \u5b83\u662f\u5bf9 MiniDataReader \u7684\u7b80\u5355\u5c01\u88c5\uff0c\u4e4b\u6240\u4ee5\u5c01\u88c5\u4e00\u5c42 MiniReaderWrapper \u800c\u4e0d\u76f4\u63a5\u4f7f\u7528 MiniDataReader \uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u7b26\u5408\u4ee5\u4e0a\u6240\u8ff0\u7684 OneFlow \u6846\u67b6\u8981\u6c42\u3002 class MiniReaderWrapper final : public user_op :: OpKernelState { public : explicit MiniReaderWrapper ( user_op :: KernelInitContext * ctx ) : reader_ ( ctx ) {} ~ MiniReaderWrapper () = default ; void Read ( user_op :: KernelComputeContext * ctx ) { reader_ . Read ( ctx ); } private : data :: MiniDataReader reader_ ; }; \u7136\u540e\uff0c\u91cd\u5199 CreateOpKernelState \uff0c\u5728\u5176\u5185\u90e8\u521b\u5efa\u4e00\u4e2a MiniReaderWrapper \u5bf9\u8c61\uff1a std :: shared_ptr < user_op :: OpKernelState > CreateOpKernelState ( user_op :: KernelInitContext * ctx ) override { std :: shared_ptr < MiniReaderWrapper > reader ( new MiniReaderWrapper ( ctx )); return reader ; } \u8fd9\u6837\uff0c\u5728\u9002\u5f53\u7684\u65f6\u673a\uff0cOneFlow \u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 CreateOpKernelState \u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u7b2c2\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 Compute \u3002\u6211\u4eec\u53ef\u4ee5\u5728 Compute \u4e2d\u62ff\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\uff1a auto * reader = dynamic_cast < MiniReaderWrapper *> ( state ); reader -> Read ( ctx ); \u53ef\u4ee5\u770b\u5230\uff0c\u5728 MiniReader \u7684 Kernel \u4e2d\uff0c\u6211\u4eec\u4ec5\u4ec5\u662f\u7b80\u5355\u8c03\u7528\u4e86 MiniReaderWrapper::Reader \uff0c\u8fd9\u4f1a\u89e6\u53d1\u4e0a\u6587\u4f2a\u4ee3\u7801\u4e2d\u6240\u63d0\u53ca\u7684 DataReader::Read \u6d41\u7a0b\u3002 MiniDataReader \u00b6 \u4e0a\u6587\u4f2a\u4ee3\u7801\u4e2d\u5df2\u7ecf\u63d0\u53ca\uff0c\u5728 MiniDataReader \u5185\u90e8\uff0c\u4f1a\u5b9e\u4f8b\u5316\u4e00\u4e2a MiniDataset \u5e76\u8d4b\u503c\u7ed9 loader_ \u6307\u9488\u3002 \u4ee5\u4e0b\u662f\u771f\u5b9e\u4ee3\u7801\uff1a class MiniDataReader final : public DataReader < TensorBuffer > { public : MiniDataReader ( user_op :: KernelInitContext * ctx ) : DataReader < TensorBuffer > ( ctx ) { loader_ . reset ( new MiniDataset ( ctx )); parser_ . reset ( new MiniParser ()); if ( ctx -> Attr < bool > ( \"random_shuffle\" )) { loader_ . reset ( new RandomShuffleDataset < TensorBuffer > ( ctx , std :: move ( loader_ ))); } int32_t batch_size = ctx -> TensorDesc4ArgNameAndIndex ( \"out\" , 0 ) -> shape (). elem_cnt (); loader_ . reset ( new BatchDataset < TensorBuffer > ( batch_size , std :: move ( loader_ ))); StartLoadThread (); } }; \u53ef\u4ee5\u770b\u5230\uff0c\u9664\u4e86\u6211\u4eec\u81ea\u5df1\u7ee7\u627f\u81ea DataSet \u7684 MiniDataset \u7c7b\u4e4b\u5916\uff0cOneFlow \u8fd8\u5185\u7f6e\u4e86\u5176\u4ed6\u7684 XXXDataSet \uff0c\u79f0\u4e3a \u4fee\u9970\u5668 \u3002 \u4fee\u9970\u5668\u53ef\u4ee5\u5728\u5df2\u6709\u7684 DataSet \u57fa\u7840\u4e0a\u589e\u52a0\u989d\u5916\u529f\u80fd\uff0c\u5982\u4ee5\u4e0a\u7684 BatchDataset \u7528\u4e8e\u6279\u91cf\u8bfb\u53d6\u6570\u636e\u3002DataSet \u4fee\u9970\u5668\u5747\u5728 user/data \u76ee\u5f55 \uff0c\u5e38\u89c1\u7684\u4fee\u9970\u5668\u6709\uff1a BatchDataset\uff1a\u7528\u4e8e\u6279\u91cf\u8bfb\u53d6\u6570\u636e RandomShuffleDataset\uff1a\u7528\u4e8e\u5c06\u6570\u636e\u7684\u987a\u5e8f\u968f\u673a\u5316 GroupBatchDataset\uff1a\u7528\u4e8e\u66f4\u5b9a\u5236\u5316\u5730\u7ec4 batch\uff0c\u4f1a\u628a\u76f8\u540c group id \u7684\u6570\u636e\u5b9e\u4f8b\u653e\u5728\u540c\u4e00\u4e2a batch \u5185\uff0c\u53ef\u53c2\u8003 \u8fd9\u91cc DistributedTrainingDataset\uff1a\u7528\u4e8e\u5206\u5e03\u5f0f\u7684\u60c5\u51b5\u4e0b\uff0c\u628a\u4e00\u4e2a epoch \u5185\u7684\u6570\u636e\u5e73\u5747\u5206\u914d\u5230\u4e0d\u540c\u8282\u70b9\u8bfb\u53d6\uff0c\u53ef\u53c2\u8003 \u8fd9\u91cc \u4e00\u5207\u5b8c\u6210\u540e\uff0c\u6700\u540e\u8c03\u7528 StartLoadThread \uff0c\u987e\u540d\u601d\u4e49\uff0c\u542f\u52a8\u52a0\u8f7d\u7ebf\u7a0b\uff0c\u5728 StartLoadThread \u4e2d\uff0c\u6700\u7ec8\u4f1a\u89e6\u53d1\u91cd\u5199\u7684 MiniDataset::Next \u65b9\u6cd5\u3002 \u4ee5\u4e0a MiniDataReader \u7684\u6784\u9020\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6a21\u677f\uff0c\u6ca1\u6709\u7279\u6b8a\u8981\u6c42\uff0c\u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684 DataLoader \u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u3002 MiniDataset \u00b6 \u5bf9\u4e8e MiniDataSet \uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3\u5b83\u7684\u6784\u9020\u51fd\u6570\u4ee5\u53ca\u91cd\u5199\u7684 Next \u65b9\u6cd5\u3002 \u6784\u9020\u51fd\u6570\u4e3b\u8981\u662f\u901a\u8fc7 Attr \u83b7\u53d6\u7528\u6237\u7684\u914d\u7f6e\uff0c\u7136\u540e\u6839\u636e\u7528\u6237\u914d\u7f6e\uff0c\u521d\u59cb\u5316\u8f93\u5165\u6d41\u3002\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u7684 JoinDirPath \u5185\u90e8\uff0c\u4e3b\u8981\u6839\u636e\u6570\u636e\u96c6\u6587\u4ef6\u540d\u7684\u7ea6\u5b9a\uff08\u524d\u7f00\u3001\u6587\u4ef6\u6570\u76ee\uff0c\u6587\u4ef6\u540d\u7f16\u53f7\u662f\u5426\u8865\u9f50\u7b49\uff09\uff0c\u83b7\u53d6\u6240\u6709\u7684\u6587\u4ef6\u540d\u79f0\uff1b\u800c InitInStream \u662f\u5c06\u6570\u636e\u96c6\u4e2d\u7684\u6587\u4ef6\uff0c\u90fd\u521d\u59cb\u5316\u4e3a OneFlow \u5c01\u88c5\u7684\u8f93\u5165\u6d41\uff08 in_stream_ \u6210\u5458\uff09\uff0c\u8fd9\u5728\u540e\u7eed\u7684 Next \u65b9\u6cd5\u4e2d\u4f1a\u4f7f\u7528\u3002 MiniDataset ( user_op :: KernelInitContext * ctx ) { current_epoch_ = 0 ; shuffle_after_epoch_ = ctx -> Attr < bool > ( \"shuffle_after_epoch\" ); //Join Dir Path JoinDirPath ( ctx ); // in stream InitInStream ( ctx ); } \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u7684\u903b\u8f91\uff0c\u5199\u5728 Next \u865a\u51fd\u6570\u4e2d\uff1a LoadTargetPtrList Next () override { LoadTargetPtrList ret ; LoadTargetPtr sample_ptr ( new TensorBuffer ()); std :: string sampleline ; if ( in_stream_ -> ReadLine ( & sampleline ) != 0 ) { ShuffleAfterEpoch (); in_stream_ -> ReadLine ( & sampleline ); } auto numbers = CommaSplit ( sampleline ); sample_ptr -> Resize ( Shape ({ 2 }), DataType :: kDouble ); auto pNums = sample_ptr -> mut_data < double > (); pNums [ 0 ] = std :: stod ( numbers [ 0 ]); pNums [ 1 ] = std :: stod ( numbers [ 1 ]); ret . push_back ( std :: move ( sample_ptr )); return ret ; } \u5728\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528 in_stream_ \u7684 ReadLine \u65b9\u6cd5\uff0c\u5c06\u6587\u4ef6\u4e2d\u7684\u6570\u636e\uff0c\u8bfb\u53d6\u81f3 string \u5bf9\u8c61 sampleline \u4e2d\u3002\u7136\u540e\u901a\u8fc7 CommaSplit \u7b49\u64cd\u4f5c\uff0c\u5c06\u5b57\u7b26\u4e32\u6309\u9017\u53f7\u5206\u9694\uff0c\u5e76\u8f6c\u4e3a\u6d6e\u70b9\u6570\uff0c\u653e\u7f6e\u5230 TensorBuffer \u5bf9\u8c61\u4e2d\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c in_stream_ \u67092\u79cd\u65b9\u6cd5\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5206\u522b\u662f\uff1a int32_t PersistentInStream::ReadLine ( std :: string * l ); int32_t PersistentInStream::ReadFully ( char * s , size_t n ); ReadLine \u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u4e00\u884c\uff0c\u81f3 l \u5bf9\u8c61\uff1b ReadFully \u8bfb\u53d6 n \u4e2a\u5b57\u8282\u7684\u6570\u636e\uff0c\u81f3 s \u6240\u6307\u5411\u7684\u5185\u5b58\u3002\u5747\u4ee50\u4f5c\u4e3a\u6210\u529f\u65f6\u7684\u8fd4\u56de\u503c\u3002 MiniDataSet \u5b8c\u6210\u4ece\u6587\u4ef6\u5230\u5185\u5b58\u7f13\u51b2\u533a\u7684\u5de5\u4f5c\uff0c\u63a5\u7740\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 MiniParser \uff0c\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5bb9\uff0c\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\u3002 MiniParser \u00b6 MiniParser \u7ee7\u627f\u81ea Parser \uff0c\u6211\u4eec\u53ea\u9700\u8981\u91cd\u5199\u5176\u4e2d\u7684 Parser \u65b9\u6cd5\u5373\u53ef\uff1a class MiniParser final : public Parser < TensorBuffer > { public : using LoadTargetPtr = std :: shared_ptr < TensorBuffer > ; using LoadTargetPtrList = std :: vector < LoadTargetPtr > ; void Parse ( std :: shared_ptr < LoadTargetPtrList > batch_data , user_op :: KernelComputeContext * ctx ) override { user_op :: Tensor * out_tensor = ctx -> Tensor4ArgNameAndIndex ( \"out\" , 0 ); double * dptr = out_tensor -> mut_dptr < double > (); MultiThreadLoop ( batch_data -> size (), [ & ]( size_t i ) { TensorBuffer * buffer = batch_data -> at ( i ). get (); dptr [ i * 2 ] = * ( buffer -> data < double > ()); dptr [ i * 2 + 1 ] = * ( buffer -> data < double > () + 1 ); }); } }; Parser \u5305\u542b2\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d batch_data \u5176\u5b9e\u662f\u4e00\u4e2a\u5c01\u88c5\u4e86\u7684 vecotr \uff0c\u8fd9\u4e2a\u5bb9\u5668\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u4e4b\u524d MiniDataSet \u901a\u8fc7 Next \u8bfb\u53d6\u7684\u6570\u636e\u3002 \u53c2\u6570 ctx \u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 Op \u7684\u4fe1\u606f\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u901a\u8fc7 ctx \u83b7\u53d6\u8f93\u51fa\uff0c\u5e76\u83b7\u53d6\u6307\u5411\u8f93\u51fa\u7f13\u51b2\u533a\u7684\u6307\u9488 dptr \u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u5c06 batch_data \u4e2d\u7684\u6570\u636e\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa dptr \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u4e86\u5b8f MultiThreadLoop \u3002 MultiThreadLoop \u53ef\u4ee5\u8ba9\u6211\u4eec\u7684\u5faa\u73af\u903b\u8f91\u5728\u591a\u7ebf\u7a0b\u4e2d\u6267\u884c\uff0c\u5b83\u63a5\u53d72\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5faa\u73af\u7684\u603b\u6b21\u6570\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u539f\u578b\u4e3a void callback(size_t i) \uff0cOneFlow \u4f1a\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u5e76\u53d1\u8c03\u7528\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u3002\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570 i \u8868\u660e\u4e86\u5f53\u524d\u5faa\u73af\u7684\u5e8f\u53f7\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u6839\u636e i \u6765\u5212\u5206\u6570\u636e\uff0c\u5b8c\u6210\u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u5728\u4ee5\u4e0a\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 batch_data->at(i).get() \u83b7\u53d6\u4e86\u7f13\u51b2\u533a\u7684\u7b2c i \u4e2a\u7684\u6570\u636e\uff0c\u7136\u540e\u5c06\u5176\u8bbe\u7f6e\u5230\u8f93\u51fa\u7684\u5185\u5b58\u533a\u7684\u7b2c i \u884c\u7684\u4f4d\u7f6e\uff0c\u4e00\u51712\u5217\u3002 Data Preprocessor \u7b97\u5b50 \u00b6 Data Preprocessor \u7b97\u5b50\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u666e\u901a\u7684\u7b97\u5b50\uff0c\u5b83\u63a5\u53d7 DataReader \u7684\u8f93\u51fa\u4f5c\u4e3a\u81ea\u5df1\u7684\u8f93\u5165\uff0c\u7136\u540e\u901a\u8fc7\u8fd0\u7b97\u540e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6216\u8005\u591a\u4e2a Blob\u3002 \u5728 ofrecord_decoder_ops.cpp \u53ef\u4ee5\u770b\u5230\u9488\u5bf9 OFRecord \u6570\u636e\u7684\u5404\u79cd\u9884\u5904\u7406\u64cd\u4f5c\uff08\u4ee5\u89e3\u7801\u4e3a\u4e3b\uff09\u3002 \u6211\u4eec\u7684 Mini Dataloader \u5904\u7406\u7684\u6570\u636e\u6bd4\u8f83\u7b80\u5355\uff0c\u56e0\u6b64 MiniDecoder \u6240\u505a\u7684\u5de5\u4f5c\u4e5f\u5f88\u7b80\u5355\uff0c\u4ec5\u4ec5\u662f\u5c06 DataReader \u6240\u8f93\u51fa\u7684\u6bcf\u884c2\u5217\u7684\u6570\u636e\uff0c\u62c6\u5206\u4e3a2\u4e2a\u6bcf\u884c1\u5217\u7684\u8f93\u51fa x \u4e0e y \u3002 Mini Decoder \u7684 Op \u6ce8\u518c\u4e3a\uff1a REGISTER_CPU_ONLY_USER_OP ( \"mini_decoder\" ) . Input ( \"in\" ) . Output ( \"x\" ) . Output ( \"y\" ) . SetTensorDescInferFn ([]( user_op :: InferContext * ctx ) -> Maybe < void > { user_op :: TensorDesc * in_tensor = ctx -> TensorDesc4ArgNameAndIndex ( \"in\" , 0 ); user_op :: TensorDesc * out_tensor_x = ctx -> TensorDesc4ArgNameAndIndex ( \"x\" , 0 ); user_op :: TensorDesc * out_tensor_y = ctx -> TensorDesc4ArgNameAndIndex ( \"y\" , 0 ); // \u8bbe\u7f6e\u8f93\u5165\u8f93\u51fa Blob \u7684\u5c5e\u6027 // ... }) . SetGetSbpFn ([]( user_op :: SbpContext * ctx ) -> Maybe < void > { ctx -> NewBuilder () . Split ( user_op :: OpArg ( \"in\" , 0 ), 0 ) . Split ( user_op :: OpArg ( \"x\" , 0 ), 0 ) . Split ( user_op :: OpArg ( \"y\" , 0 ), 0 ) . Build (); //... }); Mini Decoder \u7684 Kernel \u7684\u5b9e\u73b0\uff1a class MiniDecoderKernel final : public user_op :: OpKernel { //... void Compute ( user_op :: KernelComputeContext * ctx ) const override { user_op :: Tensor * in_blob = ctx -> Tensor4ArgNameAndIndex ( \"in\" , 0 ); user_op :: Tensor * out_blob_x = ctx -> Tensor4ArgNameAndIndex ( \"x\" , 0 ); user_op :: Tensor * out_blob_y = ctx -> Tensor4ArgNameAndIndex ( \"y\" , 0 ); int64_t record_num = in_blob -> shape (). At ( 0 ); const double * input = in_blob -> dptr < double > (); double * out_dptr_x = out_blob_x -> mut_dptr < double > (); double * out_dptr_y = out_blob_y -> mut_dptr < double > (); MultiThreadLoop ( record_num , [ & ]( size_t i ){ * ( out_dptr_x + i ) = * ( input + i * 2 ); * ( out_dptr_y + i ) = * ( input + i * 2 + 1 ); }); } //... }; \u53ef\u89c1\uff0c\u5728 MiniDecoderKernel::Compute \u4e2d\u4e3b\u8981\u662f\u83b7\u53d6\u5230\u8f93\u5165 in_blob \uff0c \u7136\u540e\u5728\u591a\u7ebf\u7a0b\u5faa\u73af MultiThreadLoop \u4e2d\uff0c\u5c06\u8f93\u5165\u7684\u6570\u636e\u62c6\u5206\u5230 out_dptr_x \u4e0e out_dptr_y \u4e2d\uff0c\u5b83\u4eec\u5206\u522b\u5bf9\u5e94\u4e86\u8f93\u51fa x \u4e0e y \u3002 \u81ea\u5b9a\u4e49 DataLoader \u7684\u4f7f\u7528 \u00b6 \u5982 \u81ea\u5b9a\u4e49 Op \u4e00\u6587\u4e2d\u6240\u63cf\u8ff0\uff0c\u8981\u4f7f\u7528 C++ \u5c42\u7f16\u5199\u7684 Op\uff0c\u8fd8\u9700\u8981\u5728 Python \u5c42\u5c01\u88c5\u4e00\u4e2a Python Wrapper\u3002\u8fd9\u4e9b\u5de5\u4f5c\u653e\u5230\u4e86 test_mini_dataloader.py \u4e2d\uff1a def MiniDecoder ( input_blob , name = None , ): if name is None : name = \"Mini_Decoder_uniqueID\" return ( flow . user_op_builder ( name ) . Op ( \"mini_decoder\" ) . Input ( \"in\" , [ input_blob ]) . Output ( \"x\" ) . Output ( \"y\" ) . Build () . InferAndTryRun () . RemoteBlobList () ) def MiniReader ( minidata_dir : str , batch_size : int = 1 , data_part_num : int = 2 , part_name_prefix : str = \"part-\" , part_name_suffix_length : int = - 1 , random_shuffle : bool = False , shuffle_after_epoch : bool = False , shuffle_buffer_size : int = 1024 , name = None , ): if name is None : name = \"Mini_Reader_uniqueID\" return ( flow . user_op_builder ( name ) . Op ( \"MiniReader\" ) . Output ( \"out\" ) . Attr ( \"data_dir\" , minidata_dir ) . Attr ( \"data_part_num\" , data_part_num ) . Attr ( \"batch_size\" , batch_size ) . Attr ( \"part_name_prefix\" , part_name_prefix ) . Attr ( \"random_shuffle\" , random_shuffle ) . Attr ( \"shuffle_after_epoch\" , shuffle_after_epoch ) . Attr ( \"part_name_suffix_length\" , part_name_suffix_length ) . Attr ( \"shuffle_buffer_size\" , shuffle_buffer_size ) . Build () . InferAndTryRun () . RemoteBlobList ()[ 0 ] ) \u5728 test_mini_dataloader.py \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684 MiniReader \u4e0e MiniDecoder \u52a0\u8f7d\u5e76\u89e3\u7801\u4e86\u6570\u636e\u96c6\uff08 part-000 \u4e0e part-001 \uff09\u4e2d\u7684\u6570\u636e\uff0c\u5b8c\u6210\u4e86\u4e00\u6b21\u8bad\u7ec3\u3002 Mini Dataloader \u7684\u7f16\u8bd1\u4e0e\u6d4b\u8bd5 \u00b6 \u8fdb\u5165\u5230\u672c\u6587\u5bf9\u5e94\u7684 data_loader \u76ee\u5f55\u3002 \u4fee\u6539 Makefile \u6587\u4ef6\u4e2d\u7684 ONEFLOW_ROOT \u53d8\u91cf\u4e3a OneFlow \u6e90\u7801\u8def\u5f84\u3002 \u7136\u540e\u901a\u8fc7 make \u53ef\u751f\u6210 miniloader.so \u6587\u4ef6\u3002 \u7136\u540e\u8fd0\u884c test_mini_dataloader.py \u811a\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 Mini Dataloader \u52a0\u8f7d\u6570\u636e\u5e76\u5b8c\u6210\u8bad\u7ec3\u3002 python test_mini_dataloader.py","title":"\u81ea\u5b9a\u4e49 DataLoader"},{"location":"extended_topics/implement_data_loader.html#dataloader","text":"\u5982 \u6570\u636e\u8f93\u5165 \u4e00\u6587\u6240\u4ecb\u7ecd\uff0cOneFlow \u652f\u6301\u4e24\u79cd\u6570\u636e\u52a0\u8f7d\u65b9\u5f0f\uff1a\u76f4\u63a5\u4f7f\u7528 NumPy \u6570\u636e\u6216\u8005\u4f7f\u7528 DataLoader \u53ca\u5176\u76f8\u5173\u7b97\u5b50\u3002 \u5728\u5927\u578b\u5de5\u4e1a\u573a\u666f\u4e0b\uff0c\u6570\u636e\u52a0\u8f7d\u5bb9\u6613\u6210\u4e3a\u8bad\u7ec3\u7684\u74f6\u9888\u3002\u5728\u5176\u5b83\u7684\u6846\u67b6\u4e2d\uff0c\u6570\u636e\u52a0\u8f7d\u6d41\u6c34\u7ebf\u5f80\u5f80\u4f5c\u4e3a\u5355\u72ec\u7684\u6a21\u5757\u5b58\u5728\uff0c\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u573a\u666f\u8fdb\u884c\u8c03\u6574\uff0c\u901a\u7528\u6027\u4e0d\u9ad8\u3002\u5728 OneFlow \u4e2d\uff0cDataLoader \u53ca\u76f8\u5173\u9884\u5904\u7406\u7b97\u5b50\uff0c\u4e0e\u5176\u5b83\u666e\u901a\u7b97\u5b50\u5730\u4f4d\u7b49\u540c\uff0c\u53ef\u4ee5\u4eab\u53d7\u4e0e\u5176\u5b83\u7b97\u5b50\u4e00\u6837\u7684\u6d41\u6c34\u52a0\u901f\u6548\u679c\uff0c\u8f7b\u677e\u89e3\u51b3\u5927\u89c4\u6a21\u6570\u636e\u52a0\u8f7d\u7684\u75db\u70b9\u3002 \u5728 OneFlow \u4e2d\u4f7f\u7528 DataLoader\uff0c\u4e00\u822c\u901a\u8fc7\u8c03\u7528 XXXReader \u52a0\u8f7d\u6587\u4ef6\u4e2d\u7684\u6570\u636e\uff0c\u8c03\u7528 XXXDeocde \u7b49\u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u7801\u6216\u5176\u5b83\u9884\u5904\u7406\uff0c\u4ed6\u4eec\u4e00\u8d77\u534f\u540c\u5b8c\u6210 Dataloader \u7684\u529f\u80fd\u3002 OneFlow \u76ee\u524d\u5185\u7f6e\u4e86\u4e00\u4e9b\u6587\u4ef6\u683c\u5f0f\u7684 DataLoader \u3002\u5982\u679c\u6211\u4eec\u60f3\u4f7f\u7528 DataLoader \u63d0\u9ad8\u6570\u636e\u52a0\u8f7d\u7684\u6548\u7387\uff0c\u4f46\u662f\u52a0\u8f7d\u7684\u6570\u636e\u683c\u5f0f\u6682\u65f6\u6ca1\u6709\u5185\u7f6e\u5728 OneFlow \u4e2d\uff0c\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0 DataLoader\uff0c\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u6570\u636e\u683c\u5f0f\u3002 \u672c\u6587\u5b9e\u73b0\u4e86\u4e00\u4e2a Mini Dataloader\uff0c\u5728\u4ed3\u5e93\u4e2d\u53ef\u67e5\u770b \u5b8c\u6574\u4ee3\u7801 \u3002 \u4f5c\u4e3a\u793a\u4f8b\uff0cMini Dataloader \u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1a\u4ee5\u9017\u53f7\u5206\u9694\u7684\u6bcf\u884c\u4e24\u5217\u6570\u5b57\u7684\u7eaf\u6587\u672c\u6587\u4ef6(\u89c1\u4ee3\u7801\u4e2d\u7684 part-000 \u53ca part-001 \u6587\u4ef6)\uff1a 1.01,2.02 2.01,4.02 3.0,6.05 4.1,8.205 5,10 6.0,12.0 7.0,14.2 8.0,16.3 9.1,18.03 \u672c\u6587\u5c06\u4ee5 Mini Dataloader \u4e3a\u4f8b\uff0c\u5bf9\u81ea\u5b9a\u4e49\u683c\u5f0f\u7684 DataLoader \u7684\u5b9e\u73b0\u8981\u70b9\uff0c\u8fdb\u884c\u8bb2\u89e3\u3002","title":"\u81ea\u5b9a\u4e49 DataLoader"},{"location":"extended_topics/implement_data_loader.html#dataloader_1","text":"\u5b8c\u6574\u7684 Dataloader \u4e00\u822c\u5305\u62ec\u4e24\u7c7b Op\uff1a Data Reader\uff1a\u8d1f\u8d23\u5c06\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\uff0c\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u8f93\u5165\u6d41\uff0c\u5e76\u6700\u7ec8\u5c06\u6570\u636e\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\u3002\u5b83\u53c8\u53ef\u4ee5\u7ec6\u5206\u4e3a Loader \u4e0e Parser \u4e24\u90e8\u5206\uff0cLoader \u8d1f\u8d23\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u539f\u59cb\u6570\u636e\uff0cParser \u8d1f\u8d23\u5c06\u539f\u59cb\u6570\u636e\u7ec4\u7ec7\u4e3a Data Reader Op \u7684\u8f93\u51fa Data Preprocessor\uff1a\u5c06 Data Reader Op \u7684\u8f93\u51fa\u7684\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\uff0c\u5e38\u89c1\u7684\u9884\u5904\u7406\u6709\u56fe\u7247\u89e3\u7801\u3001\u526a\u88c1\u56fe\u7247\u3001\u89e3\u7801\u7b49 \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u6570\u636e\u683c\u5f0f\uff0c\u4e0d\u9700\u8981\u9884\u5904\u7406\uff0c\u53ef\u4ee5\u7701\u7565\u6389 Data Preprocessor\uff0c\u53ea\u4f7f\u7528 Data Reader \u5373\u53ef\u3002 \u4f5c\u4e3a\u793a\u4f8b\uff0c Mini Dataloader \u5904\u7406\u7684\u6570\u636e\u683c\u5f0f\u867d\u7136\u7b80\u5355\uff0c\u4f46\u662f\u4f9d\u7136\u5b9e\u73b0\u4e86 DataReader \u53ca Data Preprocessor \u4e24\u7c7b op\uff0c\u5176\u4e2d\uff1a MiniReader \u8d1f\u8d23\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u6309\u9017\u53f7\u5206\u9694\u5b57\u7b26\u4e32\uff0c\u5c06\u6587\u672c\u8f6c\u4e3a\u6d6e\u70b9\u6570\u636e\u540e\uff0c\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\uff0c\u8f93\u51fa\u5f62\u72b6\u4e3a\u6bcf\u884c\u4e24\u5217 MiniDecoder \u8d1f\u8d23\u5c06\u4ee5\u4e0a\u6bcf\u884c\u4e24\u5217\u7684\u8f93\u51fa\u8fdb\u884c\u5206\u5272\uff0c\u5f97\u52302\u4e2a\u6bcf\u884c1\u5217\u7684\u8f93\u51fa x \u4e0e y \u5728 test_mini_dataloader.py \u4e2d\u53ef\u4ee5\u770b\u5230 Python \u5c42\u6b21\u4e24\u8005\u7684\u4f7f\u7528\uff1a miniRecord = MiniReader ( \"./\" , batch_size = batch_size , data_part_num = 2 , part_name_suffix_length = 3 , random_shuffle = True , shuffle_after_epoch = True , ) x , y = MiniDecoder ( miniRecord , name = \"d1\" ) \u4ee5\u4e0b\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd C++ \u5c42\u6b21\u5982\u4f55\u5b9e\u73b0 Data Reader \u7b97\u5b50\u4e0e Data Preprocessor \u7b97\u5b50\u3002","title":"Dataloader \u7684\u7ec4\u6210"},{"location":"extended_topics/implement_data_loader.html#data-reader","text":"","title":"Data Reader \u7b97\u5b50"},{"location":"extended_topics/implement_data_loader.html#data-reader_1","text":"\u6211\u4eec\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u7ee7\u627f\u81ea DataReader \u7684\u7c7b\uff0c\u8be5\u7c7b\u5305\u542b\u4e86\u4e24\u4e2a\u91cd\u8981\u5bf9\u8c61 loader_ \u4e0e parser_ \uff0c\u5206\u522b\u7ee7\u627f\u81ea Dataset \u4e0e Parser \u3002 loader_ \u7684\u5de5\u4f5c\u662f\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u8bfb\u53d6\u6570\u636e\u81f3\u7f13\u51b2\u533a\uff0cOp \u4f5c\u8005\u901a\u8fc7\u91cd\u5199 Next \u65b9\u6cd5\u7f16\u5199\u8fd9\u90e8\u5206\u7684\u903b\u8f91 parser_ \u7684\u5de5\u4f5c\u662f\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\uff0c\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\uff0cOp \u4f5c\u8005\u901a\u8fc7\u91cd\u5199 Parser \u65b9\u6cd5\u7f16\u5199\u8fd9\u90e8\u5206\u7684\u903b\u8f91 \u5f53 Data Reader Op \u5de5\u4f5c\u65f6\uff0c\u4f1a\u8c03\u7528 loader_ \u4e2d\u7684\u76f8\u5173\u65b9\u6cd5\u6253\u5f00\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u6587\u4ef6\uff0c\u5e76\u8c03\u7528 loader_ \u7684 Next \u65b9\u6cd5\u6309\u7167 Op \u4f5c\u8005\u9884\u5b9a\u7684\u903b\u8f91\u4ece\u6587\u4ef6\u7cfb\u7edf\u8bfb\u53d6\u6570\u636e\uff0c\u7136\u540e\uff0c\u518d\u8c03\u7528 parser_ \u7684 Parser \u65b9\u6cd5\uff0c\u5c06\u6570\u636e\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\u3002 \u4ee5\u4e0b\u7684\u4f2a\u4ee3\u7801\u5c55\u793a\u4e86\u4ee5\u4e0a\u7c7b\u5173\u7cfb\u548c\u8c03\u7528\u8fc7\u7a0b\uff0c\u5b9e\u9645\u4ee3\u7801\u6bd4\u4f2a\u4ee3\u7801\u8981\u590d\u6742\uff0c\u5e76\u4e0d\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff1a class DataReader { void Read ( user_op :: KernelComputeContext * ctx ) { // \u8fd0\u884c\u5230\u6b64\u5904\uff0c\u5df2\u7ecf\u542f\u52a8\u4e86\u591a\u7ebf\u7a0b\u52a0\u901f\u6570\u636e\u5904\u7406 loader -> next (); parser_ -> Parse (); } Dataset * loader_ ; Parser * parser_ ; }; class MiniDataReader : DataReader { loader_ = new MiniDataSet ; parser_ = new MiniParser ; }; class MiniDataset : Dataset { MiniDataset () { //\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u627e\u5230\u6570\u636e\u96c6\uff0c\u5e76\u6253\u5f00\u6587\u4ef6\uff0c\u521d\u59cb\u5316\u8f93\u5165\u6d41 //... } Next () { // \u4ece\u8f93\u5165\u6d41\u4e2d\u8bfb\u53d6\u6570\u636e\u7684\u903b\u8f91 } }; class MiniParser : Parser { void Parse (){ // \u5c06 DataSet \u4e2d\u7684\u6570\u636e \u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d } }; \u5728 Data Reader Op \u7684 Kernel \u4e2d\uff0c\u4f1a\u89e6\u53d1 DataReader \u7684 Read \u65b9\u6cd5\uff0c\u8fdb\u800c\u5b8c\u6210\u4ee5\u4e0a\u4f2a\u4ee3\u7801\u6240\u5c55\u793a\u7684\u4e00\u8fde\u4e32\u64cd\u4f5c\u3002 \u4ee5\u4e0b\u6211\u4eec\u9488\u5bf9 MiniReader \u7b97\u5b50\u7684\u771f\u5b9e\u4ee3\u7801\u8fdb\u884c\u89e3\u6790\u3002","title":"Data Reader \u7684\u7c7b\u5173\u7cfb"},{"location":"extended_topics/implement_data_loader.html#op-kernel","text":"\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\uff0c\u6ce8\u518c\u4e86 MiniReader \u7684 Op\uff1a REGISTER_CPU_ONLY_USER_OP ( \"MiniReader\" ) . Output ( \"out\" ) . Attr < std :: string > ( \"data_dir\" ) . Attr < std :: int32_t > ( \"data_part_num\" ) . Attr < std :: string > ( \"part_name_prefix\" , \"part-\" ) . Attr < int32_t > ( \"part_name_suffix_length\" , -1 ) . Attr < int32_t > ( \"batch_size\" ) . Attr < bool > ( \"random_shuffle\" , false ) . Attr < bool > ( \"shuffle_after_epoch\" , false ) . Attr < int64_t > ( \"seed\" , -1 ) . Attr < int32_t > ( \"shuffle_buffer_size\" , 1024 ) . SetTensorDescInferFn ([]( user_op :: InferContext * ctx ) -> Maybe < void > { //... * out_tensor -> mut_shape () = Shape ({ local_batch_size , 2 }); * out_tensor -> mut_data_type () = DataType :: kDouble ; //... }) . SetGetSbpFn ([]( user_op :: SbpContext * ctx ) -> Maybe < void > { ctx -> NewBuilder (). Split ( ctx -> outputs (), 0 ). Build (); //... }); \u53ef\u4ee5\u770b\u5230\uff0c\u56e0\u4e3a Data Reader \u662f\u6bd4\u8f83\u7279\u6b8a\u7684 Op\uff0c\u53ea\u6709\u8f93\u51fa\uff0c\u6ca1\u6709\u8f93\u5165\uff08\u6570\u636e\u6765\u81ea\u6587\u4ef6\u7cfb\u7edf\uff0c\u800c\u4e0d\u662f\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u67d0\u4e2a\u4e0a\u6e38\u8282\u70b9\uff09\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u901a\u8fc7 Out \u65b9\u6cd5\u8bbe\u7f6e\u4e86\u8f93\u51fa\uff0c\u5e76\u5728 SetTensorDescInferFn \u8bbe\u7f6e\u4e86\u8f93\u51fa\u7684\u6027\u8d28\u4e3a\u6bcf\u884c2\u5217\uff0c\u6570\u636e\u7c7b\u4e3a DataType::kDouble \u3002\u540c\u7406\uff0c\u5728\u8bbe\u7f6e SetGetSbpFn \u4e2d\u8bbe\u7f6e SBP Signature \u65f6\uff0c\u53ea\u9700\u8981\u8bbe\u7f6e\u8f93\u51fa\u7684 SBP \u5c5e\u6027\uff0c\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u4e3a Split(0)\u3002 \u800c\u8bbe\u7f6e\u7684\u5404\u79cd\u5c5e\u6027\uff08 data_dir \u3001 data_part_num \u7b49\uff09\uff0c\u6cbf\u7528\u4e86 OFRecord \u6570\u636e\u96c6 \u4e2d\u5173\u4e8e\u6587\u4ef6\u547d\u540d\u89c4\u8303\u7684\u8981\u6c42\uff0c\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u590d\u7528 OneFlow \u4e2d\u5df2\u6709\u7684\u76f8\u5173\u4ee3\u7801\uff0c\u50cf \u52a0\u8f7d OFRecord \u6570\u636e\u96c6 \u90a3\u6837\uff0c\u52a0\u8f7d\u6211\u4eec\u81ea\u5b9a\u4e49\u683c\u5f0f\u7684\u6587\u4ef6\u3002 \u63a5\u7740\u770b\u8fd9\u4e2a Op \u7684 Kernel \u5b9e\u73b0\uff1a class MiniReaderKernel final : public user_op :: OpKernel { public : //... std :: shared_ptr < user_op :: OpKernelState > CreateOpKernelState ( user_op :: KernelInitContext * ctx ) override { std :: shared_ptr < MiniReaderWrapper > reader ( new MiniReaderWrapper ( ctx )); return reader ; } void Compute ( user_op :: KernelComputeContext * ctx , user_op :: OpKernelState * state ) override { auto * reader = dynamic_cast < MiniReaderWrapper *> ( state ); reader -> Read ( ctx ); } //... }; REGISTER_USER_KERNEL ( \"MiniReader\" ) . SetCreateFn < MiniReaderKernel > () . SetIsMatchedHob (( user_op :: HobDeviceTag () == \"cpu\" ) & ( user_op :: HobDataType ( \"out\" , 0 ) == DataType :: kDouble )); \u4f9d\u636e \u81ea\u5b9a\u4e49 Op \u4e00\u6587\u4e2d\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u77e5\u9053 MiniReaderKernel::Compute \u8d1f\u8d23 Op \u7684\u8fd0\u7b97\u903b\u8f91\u3002\u4e0d\u8fc7\u6b64\u5904\u4f7f\u7528\u4f7f\u7528\u7684 Compute \u662f\u5305\u542b2\u4e2a\u53c2\u6570\u7684\u91cd\u8f7d\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u4ecb\u7ecd\u4e0b\u5b83\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 OpKernelState \u3002 \u5f53\u6211\u4eec\u8fdb\u884c Compute \u65f6\uff0c\u6709\u65f6\u9664\u4e86\u4ece ctx \u83b7\u53d6\u7684\u4fe1\u606f\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u7ef4\u62a4\u4e00\u4e9b\u5176\u4ed6\u7684\u5bf9\u8c61\uff0c\u8fd9\u79cd\u5bf9\u8c61\u4e0d\u9700\u8981\u53cd\u590d\u521b\u5efa\uff0c\u4f46\u662f\u5176\u4e2d\u7684\u4fe1\u606f\u72b6\u6001\u53ef\u80fd\u968f\u7740 Compute \u591a\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u79cd\u9700\u6c42\uff0cOneFlow \u63d0\u4f9b\u4e862\u4e2a\u53c2\u6570\u7684 Compute \u7684\u91cd\u8f7d\uff0c\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u6211\u4eec\u5fc5\u987b\u540c\u65f6\u91cd\u5199 CreateOpKernelState \uff0c CreateOpKernelState \u7684\u4f5c\u7528\u662f\u8fd4\u56de\u4e00\u4e2a user_op::OpKernelState \u6d3e\u751f\u7c7b\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5c06\u5728 Compute \u8c03\u7528\u65f6\uff0c\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4f20\u9012\u3002 \u4e3a\u6b64\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u9664 ctx \u5916\u60f3\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\uff0c\u5c01\u88c5\u4e3a user_op::OpKernelState \u7684\u6d3e\u751f\u7c7b\uff0c\u5e76\u5728 CreateOpKernelState \u5b9e\u4f8b\u5316\u5e76\u8fd4\u56de\u5373\u53ef\u3002 \u5177\u4f53\u5230\u6211\u4eec\u5b9e\u73b0\u7684 Mini Reader \u7684 Kernel\uff0c\u6211\u4eec\u5148\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7ee7\u627f\u81ea user_op::OpKernelState \u7684\u7c7b MiniReaderWrapper \uff0c \u5b83\u662f\u5bf9 MiniDataReader \u7684\u7b80\u5355\u5c01\u88c5\uff0c\u4e4b\u6240\u4ee5\u5c01\u88c5\u4e00\u5c42 MiniReaderWrapper \u800c\u4e0d\u76f4\u63a5\u4f7f\u7528 MiniDataReader \uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u7b26\u5408\u4ee5\u4e0a\u6240\u8ff0\u7684 OneFlow \u6846\u67b6\u8981\u6c42\u3002 class MiniReaderWrapper final : public user_op :: OpKernelState { public : explicit MiniReaderWrapper ( user_op :: KernelInitContext * ctx ) : reader_ ( ctx ) {} ~ MiniReaderWrapper () = default ; void Read ( user_op :: KernelComputeContext * ctx ) { reader_ . Read ( ctx ); } private : data :: MiniDataReader reader_ ; }; \u7136\u540e\uff0c\u91cd\u5199 CreateOpKernelState \uff0c\u5728\u5176\u5185\u90e8\u521b\u5efa\u4e00\u4e2a MiniReaderWrapper \u5bf9\u8c61\uff1a std :: shared_ptr < user_op :: OpKernelState > CreateOpKernelState ( user_op :: KernelInitContext * ctx ) override { std :: shared_ptr < MiniReaderWrapper > reader ( new MiniReaderWrapper ( ctx )); return reader ; } \u8fd9\u6837\uff0c\u5728\u9002\u5f53\u7684\u65f6\u673a\uff0cOneFlow \u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 CreateOpKernelState \u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u7b2c2\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 Compute \u3002\u6211\u4eec\u53ef\u4ee5\u5728 Compute \u4e2d\u62ff\u5230\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\uff1a auto * reader = dynamic_cast < MiniReaderWrapper *> ( state ); reader -> Read ( ctx ); \u53ef\u4ee5\u770b\u5230\uff0c\u5728 MiniReader \u7684 Kernel \u4e2d\uff0c\u6211\u4eec\u4ec5\u4ec5\u662f\u7b80\u5355\u8c03\u7528\u4e86 MiniReaderWrapper::Reader \uff0c\u8fd9\u4f1a\u89e6\u53d1\u4e0a\u6587\u4f2a\u4ee3\u7801\u4e2d\u6240\u63d0\u53ca\u7684 DataReader::Read \u6d41\u7a0b\u3002","title":"Op \u53ca Kernel \u6ce8\u518c"},{"location":"extended_topics/implement_data_loader.html#minidatareader","text":"\u4e0a\u6587\u4f2a\u4ee3\u7801\u4e2d\u5df2\u7ecf\u63d0\u53ca\uff0c\u5728 MiniDataReader \u5185\u90e8\uff0c\u4f1a\u5b9e\u4f8b\u5316\u4e00\u4e2a MiniDataset \u5e76\u8d4b\u503c\u7ed9 loader_ \u6307\u9488\u3002 \u4ee5\u4e0b\u662f\u771f\u5b9e\u4ee3\u7801\uff1a class MiniDataReader final : public DataReader < TensorBuffer > { public : MiniDataReader ( user_op :: KernelInitContext * ctx ) : DataReader < TensorBuffer > ( ctx ) { loader_ . reset ( new MiniDataset ( ctx )); parser_ . reset ( new MiniParser ()); if ( ctx -> Attr < bool > ( \"random_shuffle\" )) { loader_ . reset ( new RandomShuffleDataset < TensorBuffer > ( ctx , std :: move ( loader_ ))); } int32_t batch_size = ctx -> TensorDesc4ArgNameAndIndex ( \"out\" , 0 ) -> shape (). elem_cnt (); loader_ . reset ( new BatchDataset < TensorBuffer > ( batch_size , std :: move ( loader_ ))); StartLoadThread (); } }; \u53ef\u4ee5\u770b\u5230\uff0c\u9664\u4e86\u6211\u4eec\u81ea\u5df1\u7ee7\u627f\u81ea DataSet \u7684 MiniDataset \u7c7b\u4e4b\u5916\uff0cOneFlow \u8fd8\u5185\u7f6e\u4e86\u5176\u4ed6\u7684 XXXDataSet \uff0c\u79f0\u4e3a \u4fee\u9970\u5668 \u3002 \u4fee\u9970\u5668\u53ef\u4ee5\u5728\u5df2\u6709\u7684 DataSet \u57fa\u7840\u4e0a\u589e\u52a0\u989d\u5916\u529f\u80fd\uff0c\u5982\u4ee5\u4e0a\u7684 BatchDataset \u7528\u4e8e\u6279\u91cf\u8bfb\u53d6\u6570\u636e\u3002DataSet \u4fee\u9970\u5668\u5747\u5728 user/data \u76ee\u5f55 \uff0c\u5e38\u89c1\u7684\u4fee\u9970\u5668\u6709\uff1a BatchDataset\uff1a\u7528\u4e8e\u6279\u91cf\u8bfb\u53d6\u6570\u636e RandomShuffleDataset\uff1a\u7528\u4e8e\u5c06\u6570\u636e\u7684\u987a\u5e8f\u968f\u673a\u5316 GroupBatchDataset\uff1a\u7528\u4e8e\u66f4\u5b9a\u5236\u5316\u5730\u7ec4 batch\uff0c\u4f1a\u628a\u76f8\u540c group id \u7684\u6570\u636e\u5b9e\u4f8b\u653e\u5728\u540c\u4e00\u4e2a batch \u5185\uff0c\u53ef\u53c2\u8003 \u8fd9\u91cc DistributedTrainingDataset\uff1a\u7528\u4e8e\u5206\u5e03\u5f0f\u7684\u60c5\u51b5\u4e0b\uff0c\u628a\u4e00\u4e2a epoch \u5185\u7684\u6570\u636e\u5e73\u5747\u5206\u914d\u5230\u4e0d\u540c\u8282\u70b9\u8bfb\u53d6\uff0c\u53ef\u53c2\u8003 \u8fd9\u91cc \u4e00\u5207\u5b8c\u6210\u540e\uff0c\u6700\u540e\u8c03\u7528 StartLoadThread \uff0c\u987e\u540d\u601d\u4e49\uff0c\u542f\u52a8\u52a0\u8f7d\u7ebf\u7a0b\uff0c\u5728 StartLoadThread \u4e2d\uff0c\u6700\u7ec8\u4f1a\u89e6\u53d1\u91cd\u5199\u7684 MiniDataset::Next \u65b9\u6cd5\u3002 \u4ee5\u4e0a MiniDataReader \u7684\u6784\u9020\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6a21\u677f\uff0c\u6ca1\u6709\u7279\u6b8a\u8981\u6c42\uff0c\u5728\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684 DataLoader \u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u3002","title":"MiniDataReader"},{"location":"extended_topics/implement_data_loader.html#minidataset","text":"\u5bf9\u4e8e MiniDataSet \uff0c\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3\u5b83\u7684\u6784\u9020\u51fd\u6570\u4ee5\u53ca\u91cd\u5199\u7684 Next \u65b9\u6cd5\u3002 \u6784\u9020\u51fd\u6570\u4e3b\u8981\u662f\u901a\u8fc7 Attr \u83b7\u53d6\u7528\u6237\u7684\u914d\u7f6e\uff0c\u7136\u540e\u6839\u636e\u7528\u6237\u914d\u7f6e\uff0c\u521d\u59cb\u5316\u8f93\u5165\u6d41\u3002\u4ee5\u4e0b\u4ee3\u7801\u4e2d\u7684 JoinDirPath \u5185\u90e8\uff0c\u4e3b\u8981\u6839\u636e\u6570\u636e\u96c6\u6587\u4ef6\u540d\u7684\u7ea6\u5b9a\uff08\u524d\u7f00\u3001\u6587\u4ef6\u6570\u76ee\uff0c\u6587\u4ef6\u540d\u7f16\u53f7\u662f\u5426\u8865\u9f50\u7b49\uff09\uff0c\u83b7\u53d6\u6240\u6709\u7684\u6587\u4ef6\u540d\u79f0\uff1b\u800c InitInStream \u662f\u5c06\u6570\u636e\u96c6\u4e2d\u7684\u6587\u4ef6\uff0c\u90fd\u521d\u59cb\u5316\u4e3a OneFlow \u5c01\u88c5\u7684\u8f93\u5165\u6d41\uff08 in_stream_ \u6210\u5458\uff09\uff0c\u8fd9\u5728\u540e\u7eed\u7684 Next \u65b9\u6cd5\u4e2d\u4f1a\u4f7f\u7528\u3002 MiniDataset ( user_op :: KernelInitContext * ctx ) { current_epoch_ = 0 ; shuffle_after_epoch_ = ctx -> Attr < bool > ( \"shuffle_after_epoch\" ); //Join Dir Path JoinDirPath ( ctx ); // in stream InitInStream ( ctx ); } \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u7684\u903b\u8f91\uff0c\u5199\u5728 Next \u865a\u51fd\u6570\u4e2d\uff1a LoadTargetPtrList Next () override { LoadTargetPtrList ret ; LoadTargetPtr sample_ptr ( new TensorBuffer ()); std :: string sampleline ; if ( in_stream_ -> ReadLine ( & sampleline ) != 0 ) { ShuffleAfterEpoch (); in_stream_ -> ReadLine ( & sampleline ); } auto numbers = CommaSplit ( sampleline ); sample_ptr -> Resize ( Shape ({ 2 }), DataType :: kDouble ); auto pNums = sample_ptr -> mut_data < double > (); pNums [ 0 ] = std :: stod ( numbers [ 0 ]); pNums [ 1 ] = std :: stod ( numbers [ 1 ]); ret . push_back ( std :: move ( sample_ptr )); return ret ; } \u5728\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528 in_stream_ \u7684 ReadLine \u65b9\u6cd5\uff0c\u5c06\u6587\u4ef6\u4e2d\u7684\u6570\u636e\uff0c\u8bfb\u53d6\u81f3 string \u5bf9\u8c61 sampleline \u4e2d\u3002\u7136\u540e\u901a\u8fc7 CommaSplit \u7b49\u64cd\u4f5c\uff0c\u5c06\u5b57\u7b26\u4e32\u6309\u9017\u53f7\u5206\u9694\uff0c\u5e76\u8f6c\u4e3a\u6d6e\u70b9\u6570\uff0c\u653e\u7f6e\u5230 TensorBuffer \u5bf9\u8c61\u4e2d\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c in_stream_ \u67092\u79cd\u65b9\u6cd5\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5206\u522b\u662f\uff1a int32_t PersistentInStream::ReadLine ( std :: string * l ); int32_t PersistentInStream::ReadFully ( char * s , size_t n ); ReadLine \u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u4e00\u884c\uff0c\u81f3 l \u5bf9\u8c61\uff1b ReadFully \u8bfb\u53d6 n \u4e2a\u5b57\u8282\u7684\u6570\u636e\uff0c\u81f3 s \u6240\u6307\u5411\u7684\u5185\u5b58\u3002\u5747\u4ee50\u4f5c\u4e3a\u6210\u529f\u65f6\u7684\u8fd4\u56de\u503c\u3002 MiniDataSet \u5b8c\u6210\u4ece\u6587\u4ef6\u5230\u5185\u5b58\u7f13\u51b2\u533a\u7684\u5de5\u4f5c\uff0c\u63a5\u7740\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 MiniParser \uff0c\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5bb9\uff0c\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa\u4e2d\u3002","title":"MiniDataset"},{"location":"extended_topics/implement_data_loader.html#miniparser","text":"MiniParser \u7ee7\u627f\u81ea Parser \uff0c\u6211\u4eec\u53ea\u9700\u8981\u91cd\u5199\u5176\u4e2d\u7684 Parser \u65b9\u6cd5\u5373\u53ef\uff1a class MiniParser final : public Parser < TensorBuffer > { public : using LoadTargetPtr = std :: shared_ptr < TensorBuffer > ; using LoadTargetPtrList = std :: vector < LoadTargetPtr > ; void Parse ( std :: shared_ptr < LoadTargetPtrList > batch_data , user_op :: KernelComputeContext * ctx ) override { user_op :: Tensor * out_tensor = ctx -> Tensor4ArgNameAndIndex ( \"out\" , 0 ); double * dptr = out_tensor -> mut_dptr < double > (); MultiThreadLoop ( batch_data -> size (), [ & ]( size_t i ) { TensorBuffer * buffer = batch_data -> at ( i ). get (); dptr [ i * 2 ] = * ( buffer -> data < double > ()); dptr [ i * 2 + 1 ] = * ( buffer -> data < double > () + 1 ); }); } }; Parser \u5305\u542b2\u4e2a\u53c2\u6570\uff0c\u5176\u4e2d batch_data \u5176\u5b9e\u662f\u4e00\u4e2a\u5c01\u88c5\u4e86\u7684 vecotr \uff0c\u8fd9\u4e2a\u5bb9\u5668\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5c31\u662f\u4e4b\u524d MiniDataSet \u901a\u8fc7 Next \u8bfb\u53d6\u7684\u6570\u636e\u3002 \u53c2\u6570 ctx \u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 Op \u7684\u4fe1\u606f\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u901a\u8fc7 ctx \u83b7\u53d6\u8f93\u51fa\uff0c\u5e76\u83b7\u53d6\u6307\u5411\u8f93\u51fa\u7f13\u51b2\u533a\u7684\u6307\u9488 dptr \u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u5c06 batch_data \u4e2d\u7684\u6570\u636e\u8bbe\u7f6e\u5230 Op \u7684\u8f93\u51fa dptr \u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u4e86\u5b8f MultiThreadLoop \u3002 MultiThreadLoop \u53ef\u4ee5\u8ba9\u6211\u4eec\u7684\u5faa\u73af\u903b\u8f91\u5728\u591a\u7ebf\u7a0b\u4e2d\u6267\u884c\uff0c\u5b83\u63a5\u53d72\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5faa\u73af\u7684\u603b\u6b21\u6570\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u539f\u578b\u4e3a void callback(size_t i) \uff0cOneFlow \u4f1a\u521b\u5efa\u591a\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u5e76\u53d1\u8c03\u7528\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u3002\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570 i \u8868\u660e\u4e86\u5f53\u524d\u5faa\u73af\u7684\u5e8f\u53f7\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u6839\u636e i \u6765\u5212\u5206\u6570\u636e\uff0c\u5b8c\u6210\u81ea\u5df1\u7684\u4e1a\u52a1\u903b\u8f91\u3002 \u5728\u4ee5\u4e0a\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 batch_data->at(i).get() \u83b7\u53d6\u4e86\u7f13\u51b2\u533a\u7684\u7b2c i \u4e2a\u7684\u6570\u636e\uff0c\u7136\u540e\u5c06\u5176\u8bbe\u7f6e\u5230\u8f93\u51fa\u7684\u5185\u5b58\u533a\u7684\u7b2c i \u884c\u7684\u4f4d\u7f6e\uff0c\u4e00\u51712\u5217\u3002","title":"MiniParser"},{"location":"extended_topics/implement_data_loader.html#data-preprocessor","text":"Data Preprocessor \u7b97\u5b50\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u666e\u901a\u7684\u7b97\u5b50\uff0c\u5b83\u63a5\u53d7 DataReader \u7684\u8f93\u51fa\u4f5c\u4e3a\u81ea\u5df1\u7684\u8f93\u5165\uff0c\u7136\u540e\u901a\u8fc7\u8fd0\u7b97\u540e\uff0c\u8f93\u51fa\u4e00\u4e2a\u6216\u8005\u591a\u4e2a Blob\u3002 \u5728 ofrecord_decoder_ops.cpp \u53ef\u4ee5\u770b\u5230\u9488\u5bf9 OFRecord \u6570\u636e\u7684\u5404\u79cd\u9884\u5904\u7406\u64cd\u4f5c\uff08\u4ee5\u89e3\u7801\u4e3a\u4e3b\uff09\u3002 \u6211\u4eec\u7684 Mini Dataloader \u5904\u7406\u7684\u6570\u636e\u6bd4\u8f83\u7b80\u5355\uff0c\u56e0\u6b64 MiniDecoder \u6240\u505a\u7684\u5de5\u4f5c\u4e5f\u5f88\u7b80\u5355\uff0c\u4ec5\u4ec5\u662f\u5c06 DataReader \u6240\u8f93\u51fa\u7684\u6bcf\u884c2\u5217\u7684\u6570\u636e\uff0c\u62c6\u5206\u4e3a2\u4e2a\u6bcf\u884c1\u5217\u7684\u8f93\u51fa x \u4e0e y \u3002 Mini Decoder \u7684 Op \u6ce8\u518c\u4e3a\uff1a REGISTER_CPU_ONLY_USER_OP ( \"mini_decoder\" ) . Input ( \"in\" ) . Output ( \"x\" ) . Output ( \"y\" ) . SetTensorDescInferFn ([]( user_op :: InferContext * ctx ) -> Maybe < void > { user_op :: TensorDesc * in_tensor = ctx -> TensorDesc4ArgNameAndIndex ( \"in\" , 0 ); user_op :: TensorDesc * out_tensor_x = ctx -> TensorDesc4ArgNameAndIndex ( \"x\" , 0 ); user_op :: TensorDesc * out_tensor_y = ctx -> TensorDesc4ArgNameAndIndex ( \"y\" , 0 ); // \u8bbe\u7f6e\u8f93\u5165\u8f93\u51fa Blob \u7684\u5c5e\u6027 // ... }) . SetGetSbpFn ([]( user_op :: SbpContext * ctx ) -> Maybe < void > { ctx -> NewBuilder () . Split ( user_op :: OpArg ( \"in\" , 0 ), 0 ) . Split ( user_op :: OpArg ( \"x\" , 0 ), 0 ) . Split ( user_op :: OpArg ( \"y\" , 0 ), 0 ) . Build (); //... }); Mini Decoder \u7684 Kernel \u7684\u5b9e\u73b0\uff1a class MiniDecoderKernel final : public user_op :: OpKernel { //... void Compute ( user_op :: KernelComputeContext * ctx ) const override { user_op :: Tensor * in_blob = ctx -> Tensor4ArgNameAndIndex ( \"in\" , 0 ); user_op :: Tensor * out_blob_x = ctx -> Tensor4ArgNameAndIndex ( \"x\" , 0 ); user_op :: Tensor * out_blob_y = ctx -> Tensor4ArgNameAndIndex ( \"y\" , 0 ); int64_t record_num = in_blob -> shape (). At ( 0 ); const double * input = in_blob -> dptr < double > (); double * out_dptr_x = out_blob_x -> mut_dptr < double > (); double * out_dptr_y = out_blob_y -> mut_dptr < double > (); MultiThreadLoop ( record_num , [ & ]( size_t i ){ * ( out_dptr_x + i ) = * ( input + i * 2 ); * ( out_dptr_y + i ) = * ( input + i * 2 + 1 ); }); } //... }; \u53ef\u89c1\uff0c\u5728 MiniDecoderKernel::Compute \u4e2d\u4e3b\u8981\u662f\u83b7\u53d6\u5230\u8f93\u5165 in_blob \uff0c \u7136\u540e\u5728\u591a\u7ebf\u7a0b\u5faa\u73af MultiThreadLoop \u4e2d\uff0c\u5c06\u8f93\u5165\u7684\u6570\u636e\u62c6\u5206\u5230 out_dptr_x \u4e0e out_dptr_y \u4e2d\uff0c\u5b83\u4eec\u5206\u522b\u5bf9\u5e94\u4e86\u8f93\u51fa x \u4e0e y \u3002","title":"Data Preprocessor \u7b97\u5b50"},{"location":"extended_topics/implement_data_loader.html#dataloader_2","text":"\u5982 \u81ea\u5b9a\u4e49 Op \u4e00\u6587\u4e2d\u6240\u63cf\u8ff0\uff0c\u8981\u4f7f\u7528 C++ \u5c42\u7f16\u5199\u7684 Op\uff0c\u8fd8\u9700\u8981\u5728 Python \u5c42\u5c01\u88c5\u4e00\u4e2a Python Wrapper\u3002\u8fd9\u4e9b\u5de5\u4f5c\u653e\u5230\u4e86 test_mini_dataloader.py \u4e2d\uff1a def MiniDecoder ( input_blob , name = None , ): if name is None : name = \"Mini_Decoder_uniqueID\" return ( flow . user_op_builder ( name ) . Op ( \"mini_decoder\" ) . Input ( \"in\" , [ input_blob ]) . Output ( \"x\" ) . Output ( \"y\" ) . Build () . InferAndTryRun () . RemoteBlobList () ) def MiniReader ( minidata_dir : str , batch_size : int = 1 , data_part_num : int = 2 , part_name_prefix : str = \"part-\" , part_name_suffix_length : int = - 1 , random_shuffle : bool = False , shuffle_after_epoch : bool = False , shuffle_buffer_size : int = 1024 , name = None , ): if name is None : name = \"Mini_Reader_uniqueID\" return ( flow . user_op_builder ( name ) . Op ( \"MiniReader\" ) . Output ( \"out\" ) . Attr ( \"data_dir\" , minidata_dir ) . Attr ( \"data_part_num\" , data_part_num ) . Attr ( \"batch_size\" , batch_size ) . Attr ( \"part_name_prefix\" , part_name_prefix ) . Attr ( \"random_shuffle\" , random_shuffle ) . Attr ( \"shuffle_after_epoch\" , shuffle_after_epoch ) . Attr ( \"part_name_suffix_length\" , part_name_suffix_length ) . Attr ( \"shuffle_buffer_size\" , shuffle_buffer_size ) . Build () . InferAndTryRun () . RemoteBlobList ()[ 0 ] ) \u5728 test_mini_dataloader.py \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684 MiniReader \u4e0e MiniDecoder \u52a0\u8f7d\u5e76\u89e3\u7801\u4e86\u6570\u636e\u96c6\uff08 part-000 \u4e0e part-001 \uff09\u4e2d\u7684\u6570\u636e\uff0c\u5b8c\u6210\u4e86\u4e00\u6b21\u8bad\u7ec3\u3002","title":"\u81ea\u5b9a\u4e49 DataLoader \u7684\u4f7f\u7528"},{"location":"extended_topics/implement_data_loader.html#mini-dataloader","text":"\u8fdb\u5165\u5230\u672c\u6587\u5bf9\u5e94\u7684 data_loader \u76ee\u5f55\u3002 \u4fee\u6539 Makefile \u6587\u4ef6\u4e2d\u7684 ONEFLOW_ROOT \u53d8\u91cf\u4e3a OneFlow \u6e90\u7801\u8def\u5f84\u3002 \u7136\u540e\u901a\u8fc7 make \u53ef\u751f\u6210 miniloader.so \u6587\u4ef6\u3002 \u7136\u540e\u8fd0\u884c test_mini_dataloader.py \u811a\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 Mini Dataloader \u52a0\u8f7d\u6570\u636e\u5e76\u5b8c\u6210\u8bad\u7ec3\u3002 python test_mini_dataloader.py","title":"Mini Dataloader \u7684\u7f16\u8bd1\u4e0e\u6d4b\u8bd5"},{"location":"extended_topics/job_function_define_call.html","text":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528 \u00b6 \u5728 OneFlow \u4e2d\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u3001\u9884\u6d4b\u4efb\u52a1\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u7edf\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570(job function)\uff0c\u4f5c\u4e1a\u51fd\u6570\u8054\u7cfb\u7528\u6237\u7684\u4e1a\u52a1\u903b\u8f91\u4e0e OneFlow \u7ba1\u7406\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u5728 OneFlow \u4e2d\uff0c\u88ab @oneflow.global_function \u88c5\u9970\u5668\u6240\u4fee\u9970\u7684 python \u51fd\u6570\uff0c\u5c31\u662f OneFlow \u4f5c\u4e1a\u51fd\u6570\u3002 \u6211\u4eec\u4e3b\u8981\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u5b9a\u4e49\u7f51\u7edc\u6a21\u578b\u7684\u7ed3\u6784\u3001\u9009\u62e9\u4f18\u5316\u6307\u6807\uff1b\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06\u8bad\u7ec3\u6709\u5173\u7684\u8d85\u53c2\u53ca\u73af\u5883\u914d\u7f6e\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9\u4f5c\u4e1a\u51fd\u6570(\u5982:\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\uff1a get_train_config() )\uff0cOneFlow \u4f1a\u6839\u636e\u8bbe\u7f6e\u4e3a\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u3001GPU \u7b49\u786c\u4ef6\u8d44\u6e90\u3002 \u672c\u6587\u4e2d\u6211\u4eec\u5c06\u5177\u4f53\u5b66\u4e60\uff1a \u5982\u4f55\u5b9a\u4e49\u548c\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 \u5982\u4f55\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c \u4f5c\u4e1a\u51fd\u6570\u4e0e OneFlow \u8fd0\u884c\u6d41\u7a0b\u7684\u5173\u7cfb \u00b6 \u4f5c\u4e1a\u51fd\u6570\u5206\u4e3a\u5b9a\u4e49\u548c\u8c03\u7528\u4e24\u4e2a\u9636\u6bb5\u3002 \u8fd9\u4e0e OneFlow \u672c\u8eab\u7684\u8fd0\u884c\u673a\u5236\u6709\u5173\uff0c\u7b80\u5316\u5730\u8bf4\uff0cOneFlow Python \u5c42\u63a5\u53e3\uff0c\u53ea\u662f\u5728\u63cf\u8ff0\u7f51\u7edc\u6a21\u578b\u548c\u8bad\u7ec3\u73af\u5883\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5c06\u4f20\u9012\u7ed9\u5e95\u5c42\u7684 C++ \u4ee3\u7801\uff0c\u7ecf\u8fc7\u7f16\u8bd1\u3001\u4f18\u5316\u7b49\u5de5\u4f5c\u5f97\u5230\u8ba1\u7b97\u56fe\uff0c\u6700\u7ec8\u4ea4\u7ed9 OneFlow \u8fd0\u884c\u65f6(runtime)\uff0c\u7531 OneFlow \u8fd0\u884c\u65f6\u6267\u884c\u3002 \u56e0\u4e3a\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u53ea\u662f\u505a\u63cf\u8ff0\u5de5\u4f5c\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\uff0c\u800c\u53ea\u80fd\u901a\u8fc7\u89c4\u5b9a\u7f51\u7edc\u8282\u70b9\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u7b49\u4fe1\u606f\uff0c\u8d77\u5230 \u6570\u636e\u5360\u4f4d\u7b26 \u7684\u4f5c\u7528\uff0c\u65b9\u4fbf OneFlow \u7684\u7f16\u8bd1\u6784\u56fe\u8fc7\u7a0b\u8fdb\u884c\u6a21\u578b\u63a8\u7406\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u53d1\u751f\u5728 OneFlow runtime \u5df2\u7ecf\u542f\u52a8\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5411\u5176\u4f20\u9012\u771f\u5b9e\u7684\u6570\u636e\uff0c\u5e76\u83b7\u53d6\u8fd4\u56de\u7ed3\u679c\u3002 \u4ee5\u4e0b\u5c06\u5177\u4f53\u4ecb\u7ecd\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528\u65b9\u6cd5\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49 \u00b6 \u6211\u4eec\u5c06\u6a21\u578b\u5c01\u88c5\u5728 Python \u4e2d\uff0c\u518d\u4f7f\u7528 oneflow.global_function \u4fee\u9970\u7b26\u8fdb\u884c\u4fee\u9970\u3002\u5c31\u5b8c\u6210\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u4f5c\u4e1a\u51fd\u6570\u4e3b\u8981\u63cf\u8ff0\u4e24\u65b9\u9762\u7684\u4e8b\u60c5\uff1a \u6a21\u578b\u7ed3\u6784 \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4f18\u5316\u76ee\u6807 \u4ee5\u4e0b\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a mlp \u6a21\u578b\u3002\u5e76\u4e14\u5c06\u7531 flow.nn.sparse_softmax_cross_entropy_with_logits \u8ba1\u7b97\u5f97\u5230\u4ea4\u53c9\u71b5\u635f\u5931\u7ed3\u679c\u4f5c\u4e3a\u4f18\u5316\u76ee\u6807\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ tp . Numpy ]: # mlp initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"output\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss oneflow.global_function \u7684\u53c2\u6570 \u00b6 oneflow.global_function \u4fee\u9970\u7b26\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f type \u4e0e function_config \u3002 type \u53c2\u6570\u63a5\u6536\u5b57\u7b26\u4e32\uff0c\u53ea\u80fd\u8bbe\u5b9a\u4e3a train \u6216\u8005 predict \uff0c\u5f53\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u8bbe\u5b9a\u4e3a train \uff0c\u5f53\u5b9a\u4e49\u6d4b\u8bd5\u6a21\u578b\u65f6\uff0c\u8bbe\u5b9a\u4e3a predict function_config \u53c2\u6570\u63a5\u6536\u4e00\u4e2a oneflow.function_config() \u6240\u6784\u9020\u7684\u5bf9\u8c61\uff0c\u5728 function_config \u5bf9\u8c61\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6210\u5458\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\u3002\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a def get_train_config (): config = flow . function_config () config . default_data_type ( flow . float ) return config \u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u6570\u636e\u7c7b\u578b\uff0c\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u5411 global_function \u88c5\u9970\u5668\u4f20\u9012\u8fd9\u4e2a function_config \u5bf9\u8c61\uff1a @flow . global_function ( type = \"train\" , function_config = get_train_config ()) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : \u5305\u542b\u4ee5\u4e0a\u4ee3\u7801\u7684\u5b8c\u6574\u793a\u4f8b\u53ef\u89c1\u6587\u7ae0 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\u7684 mixed_parallel_mlp.py \u6570\u636e\u5360\u4f4d\u7b26 \u00b6 \u6ce8\u610f\uff0c\u4ee5\u4e0a\u7684 images \u3001 logits \u3001 labels \u3001 loss \u7b49\u5bf9\u8c61\uff0c\u5728\u6211\u4eec\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u53ea\u662f \u63cf\u8ff0\u6570\u636e\u7684\u5f62\u72b6\u548c\u5c5e\u6027 \uff0c\u8d77\u5230 \u5360\u4f4d\u7b26 \u7684\u4f5c\u7528\u3002 \u5728\u4f5c\u4e1a\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u7684\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u4f7f\u7528 oneflow.typing \u4e0b\u7684 Numpy.Placeholder \u3001 ListNumpy.Placeholder \u3001 ListListNumpy.Placeholder \uff0c\u6ce8\u89e3\u4f5c\u4e1a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5bf9\u5e94\u4f5c\u4e1a\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4f20\u9012 numpy \u6570\u636e\u5bf9\u8c61\u3002 \u9664\u4e86 oneflow.typing \u4e0b\u7684\u51e0\u79cd\u7c7b\u578b\u4e4b\u5916\uff0c\u4e0d\u51fa\u73b0\u5728\u53c2\u6570\u4e2d\u5e76\u4e14\u7531 OneFlow \u7684\u7b97\u5b50\u6216\u5c42\u4ea7\u751f\u7684\u53d8\u91cf\uff0c\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 reshape \u3001 hidden \u3001 logits \u3001 loss \u7b49\uff0c\u4e5f\u90fd\u8d77\u5230\u4e86\u6570\u636e\u5360\u4f4d\u7b26\u7684\u4f5c\u7528\u3002 \u4e0d\u7ba1\u662f\u4ee5\u4e0a\u63d0\u53ca\u7684\u54ea\u79cd\u53d8\u91cf\uff0c\u5b83\u4eec\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81ea OneFlow \u7684 BlobDef \u57fa\u7c7b\uff0cOneFlow \u4e2d\u628a\u8fd9\u79cd\u5bf9\u8c61\u7c7b\u578b\u7edf\u79f0\u4e3a Blob \u3002 Blob \u5728\u4f5c\u4e1a\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u5747\u65e0\u771f\u5b9e\u6570\u636e\uff0c\u5747\u53ea\u8d77\u5230\u6570\u636e\u5360\u4f4d\u65b9\u4fbf\u6846\u67b6\u63a8\u7406\u7684\u4f5c\u7528\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c \u00b6 \u4e4b\u6240\u4ee5\u5728\u4e0a\u6587\u4e2d\u5f3a\u8c03\u6570\u636e\u5360\u4f4d\u7b26 Blob \u7684\u6982\u5ff5\uff0c\u662f\u56e0\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e0d\u80fd\u4efb\u610f\u6307\u5b9a\u7684\uff0c\u5fc5\u987b\u662f Blob \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u5b58\u6709 Blob \u5bf9\u8c61\u7684\u5bb9\u5668\u3002 \u5982\u4ee5\u4e0a\u4ee3\u7801\u7684\u4e2d\u6240\u8fd4\u56de\u7684 loss \uff0c\u5b83\u5c31\u662f Blob \u7c7b\u578b\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\u58f0\u660e\uff0c\u6bd4\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 -> tp.Numpy \uff0c\u8868\u793a\u8fd4\u56de1\u4e2a Blob \u3002 \u518d\u6bd4\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u6ce8\u89e3\u58f0\u660e\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a -> Tuple[tp.Numpy, tp.Numpy] \uff0c\u8868\u793a\u8fd4\u56de1\u4e2a tuple \uff0c\u8be5 tuple \u4e2d\u67092\u4e2a Blob \u5bf9\u8c61\u3002 \u5177\u4f53\u7684\u4f7f\u7528\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u8003 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528 \u00b6 OneFlow \u5229\u7528\u51fd\u6570\u4fee\u9970\u7b26\u5c06\u666e\u901a Python \u51fd\u6570\u8f6c\u53d8\u4e3a OneFlow \u7279\u6709\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\u662f\u65e0\u611f\u3001\u900f\u660e\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u50cf\u8c03\u7528\u666e\u901a\u7684 Python \u51fd\u6570\u4e00\u6837\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u3002\u6bcf\u4e00\u6b21\u8c03\u7528\uff0cOneFlow \u90fd\u4f1a\u5728\u6846\u67b6\u5185\u90e8\u5b8c\u6210\u6b63\u5411\u4f20\u64ad\u3001\u53cd\u5411\u4f20\u64ad\u3001\u53c2\u6570\u66f4\u65b0\u7b49\u4e00\u7cfb\u5217\u4e8b\u60c5\u3002 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u83b7\u53d6\u6570\u636e\u4e4b\u540e\uff0c\u4f1a\u5411 train_job \u4f5c\u4e1a\u51fd\u6570\u4f20\u9012\u53c2\u6570\u5e76\u8c03\u7528\uff0c\u6253\u5370 loss \u3002 ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE ) for epoch in range ( 3 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u53ef\u4ee5\u770b\u5230\uff0c\u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 train_job \u76f4\u63a5\u8fd4\u56de\u4e86 numpy \u6570\u636e\u3002 \u4ee5\u4e0a\u5c55\u793a\u7684\u8c03\u7528\u65b9\u5f0f\u662f\u540c\u6b65\u65b9\u5f0f\uff0c OneFlow \u8fd8\u652f\u6301\u5f02\u6b65\u8c03\u7528\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u9605\u4e13\u9898 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528"},{"location":"extended_topics/job_function_define_call.html#_1","text":"\u5728 OneFlow \u4e2d\uff0c\u6211\u4eec\u5c06\u8bad\u7ec3\u3001\u9884\u6d4b\u4efb\u52a1\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u7edf\u79f0\u4e3a\u4f5c\u4e1a\u51fd\u6570(job function)\uff0c\u4f5c\u4e1a\u51fd\u6570\u8054\u7cfb\u7528\u6237\u7684\u4e1a\u52a1\u903b\u8f91\u4e0e OneFlow \u7ba1\u7406\u7684\u8ba1\u7b97\u8d44\u6e90\u3002 \u5728 OneFlow \u4e2d\uff0c\u88ab @oneflow.global_function \u88c5\u9970\u5668\u6240\u4fee\u9970\u7684 python \u51fd\u6570\uff0c\u5c31\u662f OneFlow \u4f5c\u4e1a\u51fd\u6570\u3002 \u6211\u4eec\u4e3b\u8981\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u5b9a\u4e49\u7f51\u7edc\u6a21\u578b\u7684\u7ed3\u6784\u3001\u9009\u62e9\u4f18\u5316\u6307\u6807\uff1b\u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06\u8bad\u7ec3\u6709\u5173\u7684\u8d85\u53c2\u53ca\u73af\u5883\u914d\u7f6e\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9\u4f5c\u4e1a\u51fd\u6570(\u5982:\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\uff1a get_train_config() )\uff0cOneFlow \u4f1a\u6839\u636e\u8bbe\u7f6e\u4e3a\u6211\u4eec\u7ba1\u7406\u5185\u5b58\u3001GPU \u7b49\u786c\u4ef6\u8d44\u6e90\u3002 \u672c\u6587\u4e2d\u6211\u4eec\u5c06\u5177\u4f53\u5b66\u4e60\uff1a \u5982\u4f55\u5b9a\u4e49\u548c\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 \u5982\u4f55\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528"},{"location":"extended_topics/job_function_define_call.html#oneflow","text":"\u4f5c\u4e1a\u51fd\u6570\u5206\u4e3a\u5b9a\u4e49\u548c\u8c03\u7528\u4e24\u4e2a\u9636\u6bb5\u3002 \u8fd9\u4e0e OneFlow \u672c\u8eab\u7684\u8fd0\u884c\u673a\u5236\u6709\u5173\uff0c\u7b80\u5316\u5730\u8bf4\uff0cOneFlow Python \u5c42\u63a5\u53e3\uff0c\u53ea\u662f\u5728\u63cf\u8ff0\u7f51\u7edc\u6a21\u578b\u548c\u8bad\u7ec3\u73af\u5883\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5c06\u4f20\u9012\u7ed9\u5e95\u5c42\u7684 C++ \u4ee3\u7801\uff0c\u7ecf\u8fc7\u7f16\u8bd1\u3001\u4f18\u5316\u7b49\u5de5\u4f5c\u5f97\u5230\u8ba1\u7b97\u56fe\uff0c\u6700\u7ec8\u4ea4\u7ed9 OneFlow \u8fd0\u884c\u65f6(runtime)\uff0c\u7531 OneFlow \u8fd0\u884c\u65f6\u6267\u884c\u3002 \u56e0\u4e3a\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u53ea\u662f\u505a\u63cf\u8ff0\u5de5\u4f5c\uff0c\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\uff0c\u800c\u53ea\u80fd\u901a\u8fc7\u89c4\u5b9a\u7f51\u7edc\u8282\u70b9\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u7b49\u4fe1\u606f\uff0c\u8d77\u5230 \u6570\u636e\u5360\u4f4d\u7b26 \u7684\u4f5c\u7528\uff0c\u65b9\u4fbf OneFlow \u7684\u7f16\u8bd1\u6784\u56fe\u8fc7\u7a0b\u8fdb\u884c\u6a21\u578b\u63a8\u7406\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528\uff0c\u53d1\u751f\u5728 OneFlow runtime \u5df2\u7ecf\u542f\u52a8\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5411\u5176\u4f20\u9012\u771f\u5b9e\u7684\u6570\u636e\uff0c\u5e76\u83b7\u53d6\u8fd4\u56de\u7ed3\u679c\u3002 \u4ee5\u4e0b\u5c06\u5177\u4f53\u4ecb\u7ecd\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u8c03\u7528\u65b9\u6cd5\u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u4e0e OneFlow \u8fd0\u884c\u6d41\u7a0b\u7684\u5173\u7cfb"},{"location":"extended_topics/job_function_define_call.html#_2","text":"\u6211\u4eec\u5c06\u6a21\u578b\u5c01\u88c5\u5728 Python \u4e2d\uff0c\u518d\u4f7f\u7528 oneflow.global_function \u4fee\u9970\u7b26\u8fdb\u884c\u4fee\u9970\u3002\u5c31\u5b8c\u6210\u4e86\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49\u3002 \u4f5c\u4e1a\u51fd\u6570\u4e3b\u8981\u63cf\u8ff0\u4e24\u65b9\u9762\u7684\u4e8b\u60c5\uff1a \u6a21\u578b\u7ed3\u6784 \u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4f18\u5316\u76ee\u6807 \u4ee5\u4e0b\u4ee3\u7801\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a mlp \u6a21\u578b\u3002\u5e76\u4e14\u5c06\u7531 flow.nn.sparse_softmax_cross_entropy_with_logits \u8ba1\u7b97\u5f97\u5230\u4ea4\u53c9\u71b5\u635f\u5931\u7ed3\u679c\u4f5c\u4e3a\u4f18\u5316\u76ee\u6807\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Callback [ tp . Numpy ]: # mlp initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"output\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9a\u4e49"},{"location":"extended_topics/job_function_define_call.html#oneflowglobal_function","text":"oneflow.global_function \u4fee\u9970\u7b26\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f type \u4e0e function_config \u3002 type \u53c2\u6570\u63a5\u6536\u5b57\u7b26\u4e32\uff0c\u53ea\u80fd\u8bbe\u5b9a\u4e3a train \u6216\u8005 predict \uff0c\u5f53\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u8bbe\u5b9a\u4e3a train \uff0c\u5f53\u5b9a\u4e49\u6d4b\u8bd5\u6a21\u578b\u65f6\uff0c\u8bbe\u5b9a\u4e3a predict function_config \u53c2\u6570\u63a5\u6536\u4e00\u4e2a oneflow.function_config() \u6240\u6784\u9020\u7684\u5bf9\u8c61\uff0c\u5728 function_config \u5bf9\u8c61\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u6210\u5458\u65b9\u6cd5\u6216\u5c5e\u6027\uff0c\u8fdb\u884c\u76f8\u5173\u914d\u7f6e\u3002\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a def get_train_config (): config = flow . function_config () config . default_data_type ( flow . float ) return config \u6211\u4eec\u8bbe\u7f6e\u4e86\u9ed8\u8ba4\u6570\u636e\u7c7b\u578b\uff0c\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u5411 global_function \u88c5\u9970\u5668\u4f20\u9012\u8fd9\u4e2a function_config \u5bf9\u8c61\uff1a @flow . global_function ( type = \"train\" , function_config = get_train_config ()) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : \u5305\u542b\u4ee5\u4e0a\u4ee3\u7801\u7684\u5b8c\u6574\u793a\u4f8b\u53ef\u89c1\u6587\u7ae0 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\u7684 mixed_parallel_mlp.py","title":"oneflow.global_function \u7684\u53c2\u6570"},{"location":"extended_topics/job_function_define_call.html#_3","text":"\u6ce8\u610f\uff0c\u4ee5\u4e0a\u7684 images \u3001 logits \u3001 labels \u3001 loss \u7b49\u5bf9\u8c61\uff0c\u5728\u6211\u4eec\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u5e76\u6ca1\u6709\u5b9e\u9645\u7684\u6570\u636e\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u53ea\u662f \u63cf\u8ff0\u6570\u636e\u7684\u5f62\u72b6\u548c\u5c5e\u6027 \uff0c\u8d77\u5230 \u5360\u4f4d\u7b26 \u7684\u4f5c\u7528\u3002 \u5728\u4f5c\u4e1a\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u7684\u6570\u636e\u5360\u4f4d\u7b26\uff0c\u4f7f\u7528 oneflow.typing \u4e0b\u7684 Numpy.Placeholder \u3001 ListNumpy.Placeholder \u3001 ListListNumpy.Placeholder \uff0c\u6ce8\u89e3\u4f5c\u4e1a\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5bf9\u5e94\u4f5c\u4e1a\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u4f20\u9012 numpy \u6570\u636e\u5bf9\u8c61\u3002 \u9664\u4e86 oneflow.typing \u4e0b\u7684\u51e0\u79cd\u7c7b\u578b\u4e4b\u5916\uff0c\u4e0d\u51fa\u73b0\u5728\u53c2\u6570\u4e2d\u5e76\u4e14\u7531 OneFlow \u7684\u7b97\u5b50\u6216\u5c42\u4ea7\u751f\u7684\u53d8\u91cf\uff0c\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 reshape \u3001 hidden \u3001 logits \u3001 loss \u7b49\uff0c\u4e5f\u90fd\u8d77\u5230\u4e86\u6570\u636e\u5360\u4f4d\u7b26\u7684\u4f5c\u7528\u3002 \u4e0d\u7ba1\u662f\u4ee5\u4e0a\u63d0\u53ca\u7684\u54ea\u79cd\u53d8\u91cf\uff0c\u5b83\u4eec\u90fd\u76f4\u63a5\u6216\u95f4\u63a5\u7ee7\u627f\u81ea OneFlow \u7684 BlobDef \u57fa\u7c7b\uff0cOneFlow \u4e2d\u628a\u8fd9\u79cd\u5bf9\u8c61\u7c7b\u578b\u7edf\u79f0\u4e3a Blob \u3002 Blob \u5728\u4f5c\u4e1a\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u5747\u65e0\u771f\u5b9e\u6570\u636e\uff0c\u5747\u53ea\u8d77\u5230\u6570\u636e\u5360\u4f4d\u65b9\u4fbf\u6846\u67b6\u63a8\u7406\u7684\u4f5c\u7528\u3002","title":"\u6570\u636e\u5360\u4f4d\u7b26"},{"location":"extended_topics/job_function_define_call.html#_4","text":"\u4e4b\u6240\u4ee5\u5728\u4e0a\u6587\u4e2d\u5f3a\u8c03\u6570\u636e\u5360\u4f4d\u7b26 Blob \u7684\u6982\u5ff5\uff0c\u662f\u56e0\u4e3a\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e0d\u80fd\u4efb\u610f\u6307\u5b9a\u7684\uff0c\u5fc5\u987b\u662f Blob \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u6216\u8005\u5b58\u6709 Blob \u5bf9\u8c61\u7684\u5bb9\u5668\u3002 \u5982\u4ee5\u4e0a\u4ee3\u7801\u7684\u4e2d\u6240\u8fd4\u56de\u7684 loss \uff0c\u5b83\u5c31\u662f Blob \u7c7b\u578b\u3002 \u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u9700\u8981\u901a\u8fc7\u6ce8\u89e3\u58f0\u660e\uff0c\u6bd4\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 -> tp.Numpy \uff0c\u8868\u793a\u8fd4\u56de1\u4e2a Blob \u3002 \u518d\u6bd4\u5982\uff0c\u53ef\u4ee5\u901a\u8fc7\u6ce8\u89e3\u58f0\u660e\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a -> Tuple[tp.Numpy, tp.Numpy] \uff0c\u8868\u793a\u8fd4\u56de1\u4e2a tuple \uff0c\u8be5 tuple \u4e2d\u67092\u4e2a Blob \u5bf9\u8c61\u3002 \u5177\u4f53\u7684\u4f7f\u7528\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u8003 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c"},{"location":"extended_topics/job_function_define_call.html#_5","text":"OneFlow \u5229\u7528\u51fd\u6570\u4fee\u9970\u7b26\u5c06\u666e\u901a Python \u51fd\u6570\u8f6c\u53d8\u4e3a OneFlow \u7279\u6709\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u8fc7\u7a0b\uff0c\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\u662f\u65e0\u611f\u3001\u900f\u660e\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u50cf\u8c03\u7528\u666e\u901a\u7684 Python \u51fd\u6570\u4e00\u6837\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u3002\u6bcf\u4e00\u6b21\u8c03\u7528\uff0cOneFlow \u90fd\u4f1a\u5728\u6846\u67b6\u5185\u90e8\u5b8c\u6210\u6b63\u5411\u4f20\u64ad\u3001\u53cd\u5411\u4f20\u64ad\u3001\u53c2\u6570\u66f4\u65b0\u7b49\u4e00\u7cfb\u5217\u4e8b\u60c5\u3002 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u83b7\u53d6\u6570\u636e\u4e4b\u540e\uff0c\u4f1a\u5411 train_job \u4f5c\u4e1a\u51fd\u6570\u4f20\u9012\u53c2\u6570\u5e76\u8c03\u7528\uff0c\u6253\u5370 loss \u3002 ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE ) for epoch in range ( 3 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u53ef\u4ee5\u770b\u5230\uff0c\u901a\u8fc7\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570 train_job \u76f4\u63a5\u8fd4\u56de\u4e86 numpy \u6570\u636e\u3002 \u4ee5\u4e0a\u5c55\u793a\u7684\u8c03\u7528\u65b9\u5f0f\u662f\u540c\u6b65\u65b9\u5f0f\uff0c OneFlow \u8fd8\u652f\u6301\u5f02\u6b65\u8c03\u7528\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u9605\u4e13\u9898 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u3002","title":"\u4f5c\u4e1a\u51fd\u6570\u7684\u8c03\u7528"},{"location":"extended_topics/model_mixed_parallel.html","text":"OneFlow \u7684\u5e76\u884c\u7279\u8272 \u00b6 \u5728 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 OneFlow \u63d0\u4f9b\u4e86 mirrored \u4e0e consistent \u4e24\u79cd\u770b\u5f85\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u89c6\u89d2\uff0c\u5e76\u4e14\u63d0\u524d\u77e5\u9053\u4e86 OneFlow \u7684 consistent \u89c6\u89d2\u9887\u5177\u7279\u8272\u3002 \u56e0\u4e3a\u5728 consistent_view \u4e0b\uff0cOneFlow \u63d0\u4f9b\u4e86\u903b\u8f91\u4e0a\u7edf\u4e00\u7684\u89c6\u89d2\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u662f\u6df7\u5408\u5e76\u884c\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u7ee7\u7eed\u6df1\u5165\u4ecb\u7ecd OneFlow \u72ec\u5177\u7279\u8272\u7684 consistent \u89c6\u89d2\uff0c\u5305\u62ec\uff1a OneFlow \u5728 consistent_view \u4e0b\u7eaf\u6570\u636e\u5e76\u884c\u6d41\u7a0b\u793a\u610f OneFlow \u5728 consistent_view \u4e0b\u6df7\u5408\u5e76\u884c\u6d41\u7a0b\u793a\u610f \u6df7\u5408\u5e76\u884c\u7684\u4f18\u52bf\u53ca\u9002\u7528\u573a\u666f OneFlow \u6df7\u5408\u5e76\u884c\u5b9e\u4f8b \u7f51\u7edc\u6a21\u578b\u8bad\u7ec3\u7684\u903b\u8f91\u56fe \u00b6 \u6211\u4eec\u5148\u8bbe\u5b9a\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u5c42\u7f51\u7edc\uff0c\u4f5c\u4e3a\u6211\u4eec\u6211\u4eec\u8ba8\u8bba\u5e76\u884c\u65b9\u5f0f\u7684\u8f7d\u4f53\uff0c\u5176\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5404\u5c42\u4e2d\uff0c\u6709 \u6837\u672c (\u7070\u8272\u77e9\u5f62)\u3001 \u6a21\u578b (\u84dd\u8272\u77e9\u5f62)\uff0c\u4ee5\u53ca\u4f5c\u7528\u5728\u4e24\u8005\u4e4b\u4e0a\u7684 op (\u5706\u5f62)\uff0c\u4e3a\u4e86\u7b80\u5316\u8ba8\u8bba\uff0c\u6211\u4eec\u4e5f\u53ef\u5c06\u6837\u672c\u4e0e\u6a21\u578b\u9650\u5b9a\u4e3a \u77e9\u9635 \uff0c\u4f5c\u7528\u5728\u5b83\u4eec\u4e4b\u4e0a\u7684op\u4e3a \u77e9\u9635\u4e58\u6cd5 \u3002 \u5bf9\u7167\u4e0a\u56fe\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u68b3\u7406\u51fa\u8be5\u7f51\u7edc\u6a21\u578b\u7684\u903b\u8f91\uff1a \u7b2c0\u5c42\u7684\u8f93\u5165\u4e3a Data 0 \u77e9\u9635\u4e0e Model 0 \u77e9\u9635\uff0c\u5b83\u4eec\u8fdb\u884c op (\u77e9\u9635\u4e58\u6cd5)\u8fd0\u7b97\u540e\uff0c\u8f93\u51fa Data 1 \u7b2c1\u5c42\u7684\u8f93\u5165\u4e3a Data 1 \u77e9\u9635\u4e0e Model 1 \u77e9\u9635\uff0c\u5b83\u4eec\u8fdb\u884c op \u8fd0\u7b97\u540e\uff0c\u8f93\u51fa output \u7b2c2\u5c42\u4e3a output \u5c42\uff0c Data 2 \u4f5c\u4e3a\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\uff1b\u5f53\u7136\uff0c\u5728\u66f4\u6df1\u7684\u7f51\u7edc\u4e2d\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u7ee7\u7eed\u53c2\u4e0e\u8bad\u7ec3 consistent \u89c6\u89d2\u4e0b\u652f\u6301\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u4e0e\u6df7\u5408\u5e76\u884c\uff0c\u6211\u4eec\u5c06\u4f9d\u6b21\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5176\u4e2d\u6df7\u5408\u5e76\u884c\u662f\u91cd\u70b9\u3002 Consistent \u89c6\u89d2\u4e0b\u7684\u5e76\u884c\u7279\u8272 \u00b6 \u7eaf\u6570\u636e\u5e76\u884c \u00b6 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0cconsistent \u89c6\u89d2\u4e0b\uff0c\u9ed8\u8ba4\u7684\u5e76\u884c\u65b9\u5f0f\u662f\u6570\u636e\u5e76\u884c\uff1b\u800c\u5982\u679c\u9009\u62e9 mirrored \u89c6\u89d2\uff0c\u5219\u53ea\u80fd\u91c7\u7528\u6570\u636e\u5e76\u884c\uff1b\u82e5\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\u76f4\u63a5\u4f20\u9012 numpy \u6570\u636e(\u800c\u4e0d\u662f\u4f7f\u7528 OneFlow \u7684 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50 )\uff0c\u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a mirrored \u89c6\u89d2\u4e0b\uff0c\u91c7\u7528\u7eaf\u6570\u636e\u5e76\u884c\uff0c\u9700\u8981\u81ea\u5df1\u6839\u636e\u53c2\u4e0e\u8bad\u7ec3\u7684\u5361\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u5207\u5206\u3001\u91cd\u7ec4\uff0c\u4f7f\u7528 list \u4f20\u9012\u548c\u63a5\u6536\u6570\u636e\uff1b \u800c consistent \u89c6\u89d2\u4e0b\u63d0\u4f9b\u4e86\u903b\u8f91\u4e0a\u7684\u7edf\u4e00\u770b\u5f85\uff0c\u6570\u636e\u7684\u5207\u5206\u548c\u91cd\u7ec4\u4ea4\u7ed9\u4e86 OneFlow \u6846\u67b6\u5b8c\u6210\u3002 \u4e0b\u56fe\u662f consistent \u89c6\u89d2\u4e0b\uff0c\u91c7\u7528\u7eaf\u6570\u636e\u5e76\u884c\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u539f\u903b\u8f91\u7f51\u7edc\u6a21\u578b\u7684\u6d41\u7a0b\u793a\u610f\u56fe\uff1a \u5728\u7eaf\u6570\u636e\u5e76\u884c\u4e2d\uff0c\u91c7\u7528\u4e862\u5f20\u663e\u5361\u8fdb\u884c\u5e76\u884c\u8bad\u7ec3\uff0c\u56e0\u4e3a\u91c7\u7528\u4e86 \u7eaf\u6570\u636e\u5e76\u884c \uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u539f\u903b\u8f91\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u5c42\uff0c\u6837\u672c\u6570\u636e\u90fd\u88ab\u5e73\u5747\u5206\u914d\u5230\u4e86\u5404\u4e2a\u5361\u4e0a\uff0c\u6bcf\u5f20\u5361\u4e0a\u90fd\u62e5\u6709 \u5b8c\u6574\u7684\u6a21\u578b \uff0c\u4e0e\u5207\u5206\u7684\u6570\u636e\u8fdb\u884c op \u8fd0\u7b97\uff0c\u6700\u540e\u7ec4\u5408\u5404\u4e2a\u5361\u4e0a\u7684\u6837\u672c\uff0c\u5f97\u5230\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u7eaf\u6a21\u578b\u5e76\u884c \u00b6 \u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u7eaf\u6a21\u578b\u5e76\u884c\uff08\u8bbe\u7f6e\u65b9\u5f0f\u5728\u4e0b\u6587\u5b9e\u4f8b\u4e2d\u4f1a\u4ecb\u7ecd\uff09\uff0c\u5176\u6d41\u7a0b\u793a\u610f\u56fe\u4e3a\uff1a \u5728\u7eaf\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u540c\u6837\u662f2\u5f20\u663e\u5361\u8fdb\u884c\u5e76\u884c\u8bad\u7ec3\uff0c\u539f\u903b\u8f91\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u5c42\u4e2d\uff0c\u90fd\u662f \u90e8\u5206\u6a21\u578b \u4e0e \u5b8c\u6574\u7684\u6570\u636e \u8fdb\u884c op \u8fd0\u7b97\uff0c\u6700\u540e\u7ec4\u5408\u5f97\u5230\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5404\u4e2a\u5361\u4e0a\u7b2c0\u5c42\u7684\u8f93\u51fa\uff0c\u5e76 \u4e0d\u80fd \u76f4\u63a5\u4f5c\u4e3a\u7b2c1\u5c42\u7684\u8f93\u5165\uff1a\u56e0\u4e3a\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u4e3a\u5b8c\u6210 op \u64cd\u4f5c\uff0c\u9700\u8981\u90e8\u5206\u7684\u6a21\u578b\u4e0e \u5b8c\u6574\u7684 \u6570\u636e\uff1b \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cOneFlow \u4e2d\u4f7f\u7528\u4e86 boxing \u673a\u5236\u3002 boxing \u673a\u5236\u4f1a\u7edf\u7b79\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u6570\u636e\uff0c\u5e76\u5408\u7406\u5207\u5206\u3001\u5408\u5e76\u5230\u5bf9\u5e94\u7684\u5361\u4e0a\uff0c\u9664\u4e86\u6a21\u578b\u5e76\u884c\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u91cd\u7ec4\u95ee\u9898\u5916\uff0c\u6570\u636e\u5e76\u884c\u4e2d\u7684\u53cd\u5411\u68af\u5ea6\u540c\u6b65\uff0c\u4e5f\u4f7f\u7528 boxing \u673a\u5236\u89e3\u51b3\u3002 boxing \u7684\u5185\u90e8\u673a\u5236\u867d\u7136\u590d\u6742\uff0c\u4f46\u662f\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\u662f\u900f\u660e\u7684\uff0c\u6211\u4eec\u4ec5\u4ec5\u662f\u9632\u6b62\u8bfb\u8005\u4ea7\u751f\u8ff7\u60d1\u624d\u52a0\u5165\u4e86 boxing \u7684\u56fe\u793a\uff0c\u5bf9\u4e8e\u672c\u6587\u800c\u8a00\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e86\u89e3\uff1aOneFlow \u4f1a\u81ea\u52a8\u534f\u8c03\u597d\u5206\u5e03\u5f0f\u4e2d\u6570\u636e\u7684\u540c\u6b65\u95ee\u9898\u3002 \u9009\u62e9\u6700\u4f18\u7684\u5e76\u884c\u65b9\u5f0f \u00b6 \u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u7684\u4f18\u52a3\u5e76\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u6837\u672c\u89c4\u6a21\u3001\u6a21\u578b\u89c4\u6a21\u53ca\u6a21\u578b\u7ed3\u6784\u51b3\u5b9a\u4e86\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u7684\u7efc\u5408\u8868\u73b0\uff0c\u9700\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u3002 \u6982\u62ec\u800c\u8a00\uff1a \u6570\u636e\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u540c\u6b65\u7684\u4fe1\u606f\u662f\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u7684 \u68af\u5ea6 \uff0c\u56e0\u6b64\u5e94\u8be5\u786e\u4fdd\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u4e4b\u95f4\u7684\u4fe1\u606f\u540c\u6b65\u901f\u5ea6\u8981\u6bd4\u8282\u70b9\u5185\u90e8\u7684\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u6bd4\u5982\u8bf4 \u5377\u79ef\u5c42 \u7684\u53c2\u6570\u8f83\u5c11\uff0c\u4f46\u662f\u8ba1\u7b97\u91cf\u5927\uff0c\u5c31\u6bd4\u8f83\u9002\u5408\u4f7f\u7528\u6570\u636e\u5e76\u884c\uff1b \u6a21\u578b\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5c06\u903b\u8f91\u4e0a\u4f5c\u4e3a\u6574\u4f53\u7684\u6a21\u578b \u5207\u5206\u5230\u5404\u4e2a\u7269\u7406\u5361 \u4e0a\uff0c\u80fd\u591f\u89e3\u51b3\u201c\u6a21\u578b\u592a\u5927\uff0c\u4e00\u5f20\u5361\u88c5\u4e0d\u4e0b\u201d\u7684\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8e\u53c2\u6570\u91cf\u5927\u7684\u795e\u7ecf\u7f51\u7edc\u5c42\uff08\u5982\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6a21\u578b\u5e76\u884c\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u6df7\u5408\u5e76\u884c \uff0c\u5728\u540c\u4e00\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u7ec4\u5408\u4f7f\u7528\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e\u795e\u7ecf\u7f51\u7edc\u4e2d\u9760\u524d\u7684\u53c2\u6570\u8f83\u5c11\u3001\u8ba1\u7b97\u91cf\u5927\u7684\u5c42\uff0c\u91c7\u7528\u6570\u636e\u5e76\u884c\uff1b\u5728\u6700\u7ec8\u7684\u53c2\u6570\u4f17\u591a\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u5219\u91c7\u7528\u6a21\u578b\u5e76\u884c\uff0c\u4ee5\u4e0b\u662f\u9488\u5bf9\u672c\u6587\u6700\u5f00\u59cb\u7684\u7f51\u7edc\u6a21\u578b\u903b\u8f91\u56fe\u7684 \u6df7\u5408\u5e76\u884c \u5b9e\u73b0\u65b9\u6848\u7684\u793a\u610f\u56fe\uff1a \u76ee\u524d\uff0c\u5176\u5b83\u7684\u4e3b\u6d41\u6846\u67b6\u5bf9\u4e8e\u6df7\u5408\u5e76\u884c\u6216\u8005\u4e0d\u652f\u6301\uff0c\u6216\u8005\u9700\u8981\u6df1\u5ea6\u5b9a\u5236\uff0c\u800c OneFlow \u4e2d\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u914d\u7f6e\u6df7\u5408\u5e76\u884c\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u8fd8\u53ef\u4ee5\u7528\u81ea\u7531\u5ea6\u8d85\u9ad8\u7684\u6d41\u6c34\u5e76\u884c\uff0c\u6df1\u5ea6\u4f18\u5316\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002 \u6df7\u5408\u5e76\u884c\u5b9e\u4f8b \u00b6 \u4ee3\u7801 \u00b6 \u4ee5\u4e0b\u811a\u672c\uff0c\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u6211\u4eec\u5bf9 MLP \u6a21\u578b\u91c7\u7528\u4e86\u6df7\u5408\u5e76\u884c\u65b9\u6848\uff1a\u8f93\u5165\u5c42\u4e0e\u9690\u85cf\u5c42\u91c7\u7528\uff08\u9ed8\u8ba4\u7684\uff09\u6570\u636e\u5e76\u884c\uff1b\u8f93\u51fa\u5c42\u91c7\u7528\u6a21\u578b\u5e76\u884c\u5e76\u8fdb\u884c\u5217\u5207\u5206\u3002 \u4ee3\u7801\uff1a hybrid_parallelism_mlp.py \u66f4\u5177\u4f53\u7684\u89e3\u6790\u5728\u540e\u6587\u201c\u4ee3\u7801\u89e3\u8bfb\u201d\u53ef\u89c1\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u811a\u672c\u4fee\u6539\u81ea 3\u5206\u949f\u5feb\u901f\u4e0a\u624b \u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u6bd4\u8f83\u4e24\u4efd\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u4f53\u4f1a\u5230\u5728 OneFlow \u7684 consistent_view \u4e0b\u8fdb\u884c\u5404\u79cd\u5e76\u884c\u65b9\u6848\u7684\u914d\u7f6e\u662f\u591a\u4e48\u7684\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u5355\u673a\u7684\u7a0b\u5e8f\u4e0a\u7a0d\u52a0\u4fee\u6539\u5373\u53ef\u3002 \u4ee5\u4e0a\u7a0b\u5e8f\u7684\u5173\u952e\u90e8\u5206\u6709\uff1a \u901a\u8fc7 oneflow.config.gpu_device_num \u63a5\u53e3\u8bbe\u7f6e\u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee\uff1a flow . config . gpu_device_num ( 2 ) reshape \u53ca hidden \u91c7\u7528\u9ed8\u8ba4\u7684\u6570\u636e\u5e76\u884c\uff0c\u4e0d\u9700\u8981\u4fee\u6539\uff1b\u8f93\u51fa\u5c42\u901a\u8fc7\u8bbe\u7f6e model_distribute \u4e3a flow.distribute.split(axis=0) \u53d8\u4e3a\u6a21\u578b\u5e76\u884c\uff1a def mlp ( data ): initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( data , [ data . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , # dense\u4e3a\u5217\u5b58\u50a8\uff0c\u8fdb\u884csplit(0)\u5207\u5206 model_distribute = flow . distribute . split ( axis = 0 ), name = \"dense2\" , ) \u6709\u8bfb\u8005\u53ef\u80fd\u597d\u5947\u4e3a\u4ec0\u4e48 split(axis=0) \u662f\u5217\u5207\u5206\uff1f\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cOneFlow \u4e2d\u7684 dense \u5185\u90e8\u91c7\u7528\u5217\u5b58\u50a8\uff0c\u56e0\u6b64\u4ee5\u4e0a\u4ee3\u7801\u7684 flow.distribute.split(axis=0) \u786e\u5b9e\u662f\u5728\u505a\u5217\u5207\u5206\u3002 \u6b64\u5916\uff0c flow.layers.dense \u4f7f\u7528 model_distribute \u5f62\u53c2\u8bbe\u7f6e\u5e76\u884c\u65b9\u5f0f\uff0c\u5176\u5185\u90e8\u8c03\u7528\u4e86\u5e95\u5c42\u66f4\u901a\u7528\u7684 get_variable \u63a5\u53e3\u521b\u5efa blob \uff0c get_variable \u63a5\u53e3\u8bbe\u7f6e\u5e76\u884c\u65b9\u5f0f\u7684\u5f62\u53c2\u540d\u4e3a distribute \u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7\u6781\u5c11\u91cf\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5c06\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u6539\u4e3a\u5206\u5e03\u5f0f\u3001\u6df7\u5408\u5e76\u884c\u7684\u7a0b\u5e8f\uff0c\u8fd9\u662f OneFlow \u533a\u522b\u4e8e\u5176\u5b83\u6846\u67b6\u7684\u4e00\u5927\u7279\u8272\u3002 \u6d41\u6c34\u5e76\u884c\u5b9e\u4f8b \u00b6 \u5728\u6a21\u578b\u5e76\u884c\u4e4b\u5916\uff0cOneFlow \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u5ea6\u66f4\u9ad8\u7684\u201c\u6d41\u6c34\u5e76\u884c\u201d\u7684\u5e76\u884c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u4f7f\u7528 scope.placement \u63a5\u53e3\u663e\u5f0f\u6307\u5b9a\u7528\u6765\u8fd0\u884c\u903b\u8f91 op \u7684 \u7269\u7406\u786c\u4ef6 \u3002 \u5728\u6d41\u6c34\u5e76\u884c\u4e2d\uff0c\u6574\u4e2a\u795e\u7ecf\u7f51\u7edc\u6709\u7684\u5c42\u6b21\u5728\u4e00\u7ec4\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u53e6\u5916\u4e00\u4e9b\u5c42\u6b21\u5728\u53e6\u5916\u4e00\u7ec4\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u5b83\u4eec\u4ee5\u63a5\u529b\u7684\u65b9\u5f0f\u534f\u540c\u5de5\u4f5c\uff0c\u5206\u591a\u4e2a\u9636\u6bb5\uff0c\u5728\u8bbe\u5907\u4e4b\u95f4\u6d41\u6c34\u6267\u884c\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\u7684\u201c\u5728 OneFlow \u4e2d\u4f7f\u7528 consistent \u89c6\u89d2\u201d\u4ee3\u7801\u8fdb\u884c\u7b80\u5355\u4fee\u6539\uff0c\u5c55\u793a\u4e86\u6d41\u6c34\u5e76\u884c\u6a21\u5f0f\u3002 \u4ee3\u7801 \u00b6 \u5b8c\u6574\u4ee3\u7801\uff1a hybrid_parallelism_lenet.py \u66f4\u8be6\u7ec6\u7684\u8ba8\u8bba\u53ef\u89c1\u540e\u6587\u7684\u201c\u4ee3\u7801\u89e3\u8bfb\u201d\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u5173\u952e\u7684\u4ee3\u7801\u53ea\u67092\u884c\uff0c\u4e14\u4ed6\u4eec\u7684\u672c\u8d28\u4f5c\u7528\u662f\u7c7b\u4f3c\u7684\uff1a \u901a\u8fc7 oneflow.scope.placement \uff0c\u6307\u5b9a hidden \u5c42\u7684 op \u8ba1\u7b97\u8fd0\u884c\u57280\u53f7 GPU \u4e0a with flow . scope . placement ( \"gpu\" , \"0:0\" ): hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) \u901a\u8fc7 oneflow.scope.placement \uff0c\u6307\u5b9a output \u5c42\u7684op\u8ba1\u7b97\u8fd0\u884c\u5728\u7b2c0\u53f7\u4e3b\u673a\u76841\u53f7 GPU \u4e0a with flow . scope . placement ( \"gpu\" , \"0:1\" ): output = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"outlayer\" ) scope.placement \u7684\u5177\u4f53\u4f7f\u7528\uff0c\u53ef\u53c2\u9605 API \u6587\u6863 \u3002 \u6d41\u6c34\u5e76\u884c\uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u4e3a\u6bcf\u4e2a op \u6307\u5b9a\u7269\u7406\u8bbe\u5907\uff0c\u975e\u5e38\u9002\u5408\u5bf9\u7f51\u7edc\u6a21\u578b\u53ca\u5206\u5e03\u5f0f\u60c5\u51b5\u90fd\u5f88\u719f\u6089\u7684\u7528\u6237\u8fdb\u884c \u6df1\u5ea6\u4f18\u5316 \u3002 \u6b64\u5916\uff0cOneFlow \u63d0\u4f9b\u7684 API oneflow.unpack \u3001 oneflow.pack \u7b49\uff0c\u7ed3\u5408\u4e86 OneFlow \u81ea\u8eab\u4efb\u52a1\u8c03\u5ea6\u7684\u7279\u70b9\uff0c\u4f7f\u5f97\u6d41\u6c34\u5e76\u884c\u66f4\u6613\u7528\u3001\u9ad8\u6548\uff0c\u6211\u4eec\u5c06\u5728\u53e6\u5916\u7684\u6587\u7ae0\u4e2d\u4e13\u95e8\u4ecb\u7ecd\u3002","title":"OneFlow \u7684\u5e76\u884c\u7279\u8272"},{"location":"extended_topics/model_mixed_parallel.html#oneflow","text":"\u5728 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 OneFlow \u63d0\u4f9b\u4e86 mirrored \u4e0e consistent \u4e24\u79cd\u770b\u5f85\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u89c6\u89d2\uff0c\u5e76\u4e14\u63d0\u524d\u77e5\u9053\u4e86 OneFlow \u7684 consistent \u89c6\u89d2\u9887\u5177\u7279\u8272\u3002 \u56e0\u4e3a\u5728 consistent_view \u4e0b\uff0cOneFlow \u63d0\u4f9b\u4e86\u903b\u8f91\u4e0a\u7edf\u4e00\u7684\u89c6\u89d2\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u9009\u62e9\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u8fd8\u662f\u662f\u6df7\u5408\u5e76\u884c\u3002 \u5728\u672c\u6587\u4e2d\uff0c\u7ee7\u7eed\u6df1\u5165\u4ecb\u7ecd OneFlow \u72ec\u5177\u7279\u8272\u7684 consistent \u89c6\u89d2\uff0c\u5305\u62ec\uff1a OneFlow \u5728 consistent_view \u4e0b\u7eaf\u6570\u636e\u5e76\u884c\u6d41\u7a0b\u793a\u610f OneFlow \u5728 consistent_view \u4e0b\u6df7\u5408\u5e76\u884c\u6d41\u7a0b\u793a\u610f \u6df7\u5408\u5e76\u884c\u7684\u4f18\u52bf\u53ca\u9002\u7528\u573a\u666f OneFlow \u6df7\u5408\u5e76\u884c\u5b9e\u4f8b","title":"OneFlow \u7684\u5e76\u884c\u7279\u8272"},{"location":"extended_topics/model_mixed_parallel.html#_1","text":"\u6211\u4eec\u5148\u8bbe\u5b9a\u4e00\u4e2a\u7b80\u5355\u7684\u591a\u5c42\u7f51\u7edc\uff0c\u4f5c\u4e3a\u6211\u4eec\u6211\u4eec\u8ba8\u8bba\u5e76\u884c\u65b9\u5f0f\u7684\u8f7d\u4f53\uff0c\u5176\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5404\u5c42\u4e2d\uff0c\u6709 \u6837\u672c (\u7070\u8272\u77e9\u5f62)\u3001 \u6a21\u578b (\u84dd\u8272\u77e9\u5f62)\uff0c\u4ee5\u53ca\u4f5c\u7528\u5728\u4e24\u8005\u4e4b\u4e0a\u7684 op (\u5706\u5f62)\uff0c\u4e3a\u4e86\u7b80\u5316\u8ba8\u8bba\uff0c\u6211\u4eec\u4e5f\u53ef\u5c06\u6837\u672c\u4e0e\u6a21\u578b\u9650\u5b9a\u4e3a \u77e9\u9635 \uff0c\u4f5c\u7528\u5728\u5b83\u4eec\u4e4b\u4e0a\u7684op\u4e3a \u77e9\u9635\u4e58\u6cd5 \u3002 \u5bf9\u7167\u4e0a\u56fe\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u68b3\u7406\u51fa\u8be5\u7f51\u7edc\u6a21\u578b\u7684\u903b\u8f91\uff1a \u7b2c0\u5c42\u7684\u8f93\u5165\u4e3a Data 0 \u77e9\u9635\u4e0e Model 0 \u77e9\u9635\uff0c\u5b83\u4eec\u8fdb\u884c op (\u77e9\u9635\u4e58\u6cd5)\u8fd0\u7b97\u540e\uff0c\u8f93\u51fa Data 1 \u7b2c1\u5c42\u7684\u8f93\u5165\u4e3a Data 1 \u77e9\u9635\u4e0e Model 1 \u77e9\u9635\uff0c\u5b83\u4eec\u8fdb\u884c op \u8fd0\u7b97\u540e\uff0c\u8f93\u51fa output \u7b2c2\u5c42\u4e3a output \u5c42\uff0c Data 2 \u4f5c\u4e3a\u6574\u4e2a\u7f51\u7edc\u7684\u8f93\u51fa\uff1b\u5f53\u7136\uff0c\u5728\u66f4\u6df1\u7684\u7f51\u7edc\u4e2d\uff0c\u5b83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u7ee7\u7eed\u53c2\u4e0e\u8bad\u7ec3 consistent \u89c6\u89d2\u4e0b\u652f\u6301\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u4e0e\u6df7\u5408\u5e76\u884c\uff0c\u6211\u4eec\u5c06\u4f9d\u6b21\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5176\u4e2d\u6df7\u5408\u5e76\u884c\u662f\u91cd\u70b9\u3002","title":"\u7f51\u7edc\u6a21\u578b\u8bad\u7ec3\u7684\u903b\u8f91\u56fe"},{"location":"extended_topics/model_mixed_parallel.html#consistent","text":"","title":"Consistent \u89c6\u89d2\u4e0b\u7684\u5e76\u884c\u7279\u8272"},{"location":"extended_topics/model_mixed_parallel.html#_2","text":"\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0cconsistent \u89c6\u89d2\u4e0b\uff0c\u9ed8\u8ba4\u7684\u5e76\u884c\u65b9\u5f0f\u662f\u6570\u636e\u5e76\u884c\uff1b\u800c\u5982\u679c\u9009\u62e9 mirrored \u89c6\u89d2\uff0c\u5219\u53ea\u80fd\u91c7\u7528\u6570\u636e\u5e76\u884c\uff1b\u82e5\u5728\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u65f6\u76f4\u63a5\u4f20\u9012 numpy \u6570\u636e(\u800c\u4e0d\u662f\u4f7f\u7528 OneFlow \u7684 DataLoader \u53ca\u76f8\u5173\u7b97\u5b50 )\uff0c\u4e24\u8005\u7684\u533a\u522b\u5728\u4e8e\uff1a mirrored \u89c6\u89d2\u4e0b\uff0c\u91c7\u7528\u7eaf\u6570\u636e\u5e76\u884c\uff0c\u9700\u8981\u81ea\u5df1\u6839\u636e\u53c2\u4e0e\u8bad\u7ec3\u7684\u5361\u6570\u5bf9\u6570\u636e\u8fdb\u884c\u5207\u5206\u3001\u91cd\u7ec4\uff0c\u4f7f\u7528 list \u4f20\u9012\u548c\u63a5\u6536\u6570\u636e\uff1b \u800c consistent \u89c6\u89d2\u4e0b\u63d0\u4f9b\u4e86\u903b\u8f91\u4e0a\u7684\u7edf\u4e00\u770b\u5f85\uff0c\u6570\u636e\u7684\u5207\u5206\u548c\u91cd\u7ec4\u4ea4\u7ed9\u4e86 OneFlow \u6846\u67b6\u5b8c\u6210\u3002 \u4e0b\u56fe\u662f consistent \u89c6\u89d2\u4e0b\uff0c\u91c7\u7528\u7eaf\u6570\u636e\u5e76\u884c\u7684\u65b9\u5f0f\uff0c\u5b9e\u73b0\u539f\u903b\u8f91\u7f51\u7edc\u6a21\u578b\u7684\u6d41\u7a0b\u793a\u610f\u56fe\uff1a \u5728\u7eaf\u6570\u636e\u5e76\u884c\u4e2d\uff0c\u91c7\u7528\u4e862\u5f20\u663e\u5361\u8fdb\u884c\u5e76\u884c\u8bad\u7ec3\uff0c\u56e0\u4e3a\u91c7\u7528\u4e86 \u7eaf\u6570\u636e\u5e76\u884c \uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u539f\u903b\u8f91\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u5c42\uff0c\u6837\u672c\u6570\u636e\u90fd\u88ab\u5e73\u5747\u5206\u914d\u5230\u4e86\u5404\u4e2a\u5361\u4e0a\uff0c\u6bcf\u5f20\u5361\u4e0a\u90fd\u62e5\u6709 \u5b8c\u6574\u7684\u6a21\u578b \uff0c\u4e0e\u5207\u5206\u7684\u6570\u636e\u8fdb\u884c op \u8fd0\u7b97\uff0c\u6700\u540e\u7ec4\u5408\u5404\u4e2a\u5361\u4e0a\u7684\u6837\u672c\uff0c\u5f97\u5230\u5b8c\u6574\u7684\u8f93\u51fa\u3002","title":"\u7eaf\u6570\u636e\u5e76\u884c"},{"location":"extended_topics/model_mixed_parallel.html#_3","text":"\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u7eaf\u6a21\u578b\u5e76\u884c\uff08\u8bbe\u7f6e\u65b9\u5f0f\u5728\u4e0b\u6587\u5b9e\u4f8b\u4e2d\u4f1a\u4ecb\u7ecd\uff09\uff0c\u5176\u6d41\u7a0b\u793a\u610f\u56fe\u4e3a\uff1a \u5728\u7eaf\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u540c\u6837\u662f2\u5f20\u663e\u5361\u8fdb\u884c\u5e76\u884c\u8bad\u7ec3\uff0c\u539f\u903b\u8f91\u6a21\u578b\u4e2d\u7684\u6bcf\u4e00\u5c42\u4e2d\uff0c\u90fd\u662f \u90e8\u5206\u6a21\u578b \u4e0e \u5b8c\u6574\u7684\u6570\u636e \u8fdb\u884c op \u8fd0\u7b97\uff0c\u6700\u540e\u7ec4\u5408\u5f97\u5230\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u5404\u4e2a\u5361\u4e0a\u7b2c0\u5c42\u7684\u8f93\u51fa\uff0c\u5e76 \u4e0d\u80fd \u76f4\u63a5\u4f5c\u4e3a\u7b2c1\u5c42\u7684\u8f93\u5165\uff1a\u56e0\u4e3a\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u4e3a\u5b8c\u6210 op \u64cd\u4f5c\uff0c\u9700\u8981\u90e8\u5206\u7684\u6a21\u578b\u4e0e \u5b8c\u6574\u7684 \u6570\u636e\uff1b \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cOneFlow \u4e2d\u4f7f\u7528\u4e86 boxing \u673a\u5236\u3002 boxing \u673a\u5236\u4f1a\u7edf\u7b79\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u6570\u636e\uff0c\u5e76\u5408\u7406\u5207\u5206\u3001\u5408\u5e76\u5230\u5bf9\u5e94\u7684\u5361\u4e0a\uff0c\u9664\u4e86\u6a21\u578b\u5e76\u884c\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u91cd\u7ec4\u95ee\u9898\u5916\uff0c\u6570\u636e\u5e76\u884c\u4e2d\u7684\u53cd\u5411\u68af\u5ea6\u540c\u6b65\uff0c\u4e5f\u4f7f\u7528 boxing \u673a\u5236\u89e3\u51b3\u3002 boxing \u7684\u5185\u90e8\u673a\u5236\u867d\u7136\u590d\u6742\uff0c\u4f46\u662f\u5bf9\u4e8e\u7528\u6237\u800c\u8a00\u662f\u900f\u660e\u7684\uff0c\u6211\u4eec\u4ec5\u4ec5\u662f\u9632\u6b62\u8bfb\u8005\u4ea7\u751f\u8ff7\u60d1\u624d\u52a0\u5165\u4e86 boxing \u7684\u56fe\u793a\uff0c\u5bf9\u4e8e\u672c\u6587\u800c\u8a00\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e86\u89e3\uff1aOneFlow \u4f1a\u81ea\u52a8\u534f\u8c03\u597d\u5206\u5e03\u5f0f\u4e2d\u6570\u636e\u7684\u540c\u6b65\u95ee\u9898\u3002","title":"\u7eaf\u6a21\u578b\u5e76\u884c"},{"location":"extended_topics/model_mixed_parallel.html#_4","text":"\u6570\u636e\u5e76\u884c\u4e0e\u6a21\u578b\u5e76\u884c\u7684\u4f18\u52a3\u5e76\u4e0d\u662f\u4e00\u6210\u4e0d\u53d8\u7684\uff0c\u6837\u672c\u89c4\u6a21\u3001\u6a21\u578b\u89c4\u6a21\u53ca\u6a21\u578b\u7ed3\u6784\u51b3\u5b9a\u4e86\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u7684\u7efc\u5408\u8868\u73b0\uff0c\u9700\u8981\u5177\u4f53\u60c5\u51b5\u5177\u4f53\u5206\u6790\u3002 \u6982\u62ec\u800c\u8a00\uff1a \u6570\u636e\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u540c\u6b65\u7684\u4fe1\u606f\u662f\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u7684 \u68af\u5ea6 \uff0c\u56e0\u6b64\u5e94\u8be5\u786e\u4fdd\u5404\u4e2a\u8bad\u7ec3\u8282\u70b9\u4e4b\u95f4\u7684\u4fe1\u606f\u540c\u6b65\u901f\u5ea6\u8981\u6bd4\u8282\u70b9\u5185\u90e8\u7684\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u6bd4\u5982\u8bf4 \u5377\u79ef\u5c42 \u7684\u53c2\u6570\u8f83\u5c11\uff0c\u4f46\u662f\u8ba1\u7b97\u91cf\u5927\uff0c\u5c31\u6bd4\u8f83\u9002\u5408\u4f7f\u7528\u6570\u636e\u5e76\u884c\uff1b \u6a21\u578b\u5e76\u884c\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u5c06\u903b\u8f91\u4e0a\u4f5c\u4e3a\u6574\u4f53\u7684\u6a21\u578b \u5207\u5206\u5230\u5404\u4e2a\u7269\u7406\u5361 \u4e0a\uff0c\u80fd\u591f\u89e3\u51b3\u201c\u6a21\u578b\u592a\u5927\uff0c\u4e00\u5f20\u5361\u88c5\u4e0d\u4e0b\u201d\u7684\u95ee\u9898\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8e\u53c2\u6570\u91cf\u5927\u7684\u795e\u7ecf\u7f51\u7edc\u5c42\uff08\u5982\u6700\u540e\u7684\u5168\u8fde\u63a5\u5c42\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u6a21\u578b\u5e76\u884c\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 \u6df7\u5408\u5e76\u884c \uff0c\u5728\u540c\u4e00\u4e2a\u5206\u5e03\u5f0f\u8bad\u7ec3\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u7ec4\u5408\u4f7f\u7528\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e\u795e\u7ecf\u7f51\u7edc\u4e2d\u9760\u524d\u7684\u53c2\u6570\u8f83\u5c11\u3001\u8ba1\u7b97\u91cf\u5927\u7684\u5c42\uff0c\u91c7\u7528\u6570\u636e\u5e76\u884c\uff1b\u5728\u6700\u7ec8\u7684\u53c2\u6570\u4f17\u591a\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u5219\u91c7\u7528\u6a21\u578b\u5e76\u884c\uff0c\u4ee5\u4e0b\u662f\u9488\u5bf9\u672c\u6587\u6700\u5f00\u59cb\u7684\u7f51\u7edc\u6a21\u578b\u903b\u8f91\u56fe\u7684 \u6df7\u5408\u5e76\u884c \u5b9e\u73b0\u65b9\u6848\u7684\u793a\u610f\u56fe\uff1a \u76ee\u524d\uff0c\u5176\u5b83\u7684\u4e3b\u6d41\u6846\u67b6\u5bf9\u4e8e\u6df7\u5408\u5e76\u884c\u6216\u8005\u4e0d\u652f\u6301\uff0c\u6216\u8005\u9700\u8981\u6df1\u5ea6\u5b9a\u5236\uff0c\u800c OneFlow \u4e2d\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u8bbe\u7f6e\uff0c\u914d\u7f6e\u6df7\u5408\u5e76\u884c\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u8fd8\u53ef\u4ee5\u7528\u81ea\u7531\u5ea6\u8d85\u9ad8\u7684\u6d41\u6c34\u5e76\u884c\uff0c\u6df1\u5ea6\u4f18\u5316\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002","title":"\u9009\u62e9\u6700\u4f18\u7684\u5e76\u884c\u65b9\u5f0f"},{"location":"extended_topics/model_mixed_parallel.html#_5","text":"","title":"\u6df7\u5408\u5e76\u884c\u5b9e\u4f8b"},{"location":"extended_topics/model_mixed_parallel.html#_6","text":"\u4ee5\u4e0b\u811a\u672c\uff0c\u5728 consistent \u89c6\u89d2\u4e0b\uff0c\u6211\u4eec\u5bf9 MLP \u6a21\u578b\u91c7\u7528\u4e86\u6df7\u5408\u5e76\u884c\u65b9\u6848\uff1a\u8f93\u5165\u5c42\u4e0e\u9690\u85cf\u5c42\u91c7\u7528\uff08\u9ed8\u8ba4\u7684\uff09\u6570\u636e\u5e76\u884c\uff1b\u8f93\u51fa\u5c42\u91c7\u7528\u6a21\u578b\u5e76\u884c\u5e76\u8fdb\u884c\u5217\u5207\u5206\u3002 \u4ee3\u7801\uff1a hybrid_parallelism_mlp.py \u66f4\u5177\u4f53\u7684\u89e3\u6790\u5728\u540e\u6587\u201c\u4ee3\u7801\u89e3\u8bfb\u201d\u53ef\u89c1\u3002","title":"\u4ee3\u7801"},{"location":"extended_topics/model_mixed_parallel.html#_7","text":"\u4ee5\u4e0a\u811a\u672c\u4fee\u6539\u81ea 3\u5206\u949f\u5feb\u901f\u4e0a\u624b \u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u6bd4\u8f83\u4e24\u4efd\u4ee3\u7801\uff0c\u4e5f\u53ef\u4ee5\u4f53\u4f1a\u5230\u5728 OneFlow \u7684 consistent_view \u4e0b\u8fdb\u884c\u5404\u79cd\u5e76\u884c\u65b9\u6848\u7684\u914d\u7f6e\u662f\u591a\u4e48\u7684\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u5355\u673a\u7684\u7a0b\u5e8f\u4e0a\u7a0d\u52a0\u4fee\u6539\u5373\u53ef\u3002 \u4ee5\u4e0a\u7a0b\u5e8f\u7684\u5173\u952e\u90e8\u5206\u6709\uff1a \u901a\u8fc7 oneflow.config.gpu_device_num \u63a5\u53e3\u8bbe\u7f6e\u53c2\u4e0e\u8bad\u7ec3\u7684GPU\u6570\u76ee\uff1a flow . config . gpu_device_num ( 2 ) reshape \u53ca hidden \u91c7\u7528\u9ed8\u8ba4\u7684\u6570\u636e\u5e76\u884c\uff0c\u4e0d\u9700\u8981\u4fee\u6539\uff1b\u8f93\u51fa\u5c42\u901a\u8fc7\u8bbe\u7f6e model_distribute \u4e3a flow.distribute.split(axis=0) \u53d8\u4e3a\u6a21\u578b\u5e76\u884c\uff1a def mlp ( data ): initializer = flow . truncated_normal ( 0.1 ) reshape = flow . reshape ( data , [ data . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , # dense\u4e3a\u5217\u5b58\u50a8\uff0c\u8fdb\u884csplit(0)\u5207\u5206 model_distribute = flow . distribute . split ( axis = 0 ), name = \"dense2\" , ) \u6709\u8bfb\u8005\u53ef\u80fd\u597d\u5947\u4e3a\u4ec0\u4e48 split(axis=0) \u662f\u5217\u5207\u5206\uff1f\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0cOneFlow \u4e2d\u7684 dense \u5185\u90e8\u91c7\u7528\u5217\u5b58\u50a8\uff0c\u56e0\u6b64\u4ee5\u4e0a\u4ee3\u7801\u7684 flow.distribute.split(axis=0) \u786e\u5b9e\u662f\u5728\u505a\u5217\u5207\u5206\u3002 \u6b64\u5916\uff0c flow.layers.dense \u4f7f\u7528 model_distribute \u5f62\u53c2\u8bbe\u7f6e\u5e76\u884c\u65b9\u5f0f\uff0c\u5176\u5185\u90e8\u8c03\u7528\u4e86\u5e95\u5c42\u66f4\u901a\u7528\u7684 get_variable \u63a5\u53e3\u521b\u5efa blob \uff0c get_variable \u63a5\u53e3\u8bbe\u7f6e\u5e76\u884c\u65b9\u5f0f\u7684\u5f62\u53c2\u540d\u4e3a distribute \u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u901a\u8fc7\u6781\u5c11\u91cf\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5c06\u5355\u673a\u8bad\u7ec3\u7a0b\u5e8f\u6539\u4e3a\u5206\u5e03\u5f0f\u3001\u6df7\u5408\u5e76\u884c\u7684\u7a0b\u5e8f\uff0c\u8fd9\u662f OneFlow \u533a\u522b\u4e8e\u5176\u5b83\u6846\u67b6\u7684\u4e00\u5927\u7279\u8272\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"extended_topics/model_mixed_parallel.html#_8","text":"\u5728\u6a21\u578b\u5e76\u884c\u4e4b\u5916\uff0cOneFlow \u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u5ea6\u66f4\u9ad8\u7684\u201c\u6d41\u6c34\u5e76\u884c\u201d\u7684\u5e76\u884c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u8ba9\u7528\u6237\u4f7f\u7528 scope.placement \u63a5\u53e3\u663e\u5f0f\u6307\u5b9a\u7528\u6765\u8fd0\u884c\u903b\u8f91 op \u7684 \u7269\u7406\u786c\u4ef6 \u3002 \u5728\u6d41\u6c34\u5e76\u884c\u4e2d\uff0c\u6574\u4e2a\u795e\u7ecf\u7f51\u7edc\u6709\u7684\u5c42\u6b21\u5728\u4e00\u7ec4\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u53e6\u5916\u4e00\u4e9b\u5c42\u6b21\u5728\u53e6\u5916\u4e00\u7ec4\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u5b83\u4eec\u4ee5\u63a5\u529b\u7684\u65b9\u5f0f\u534f\u540c\u5de5\u4f5c\uff0c\u5206\u591a\u4e2a\u9636\u6bb5\uff0c\u5728\u8bbe\u5907\u4e4b\u95f4\u6d41\u6c34\u6267\u884c\u3002 \u5728\u4ee5\u4e0b\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5bf9 Consistent \u4e0e Mirrored \u89c6\u89d2 \u4e2d\u7684\u201c\u5728 OneFlow \u4e2d\u4f7f\u7528 consistent \u89c6\u89d2\u201d\u4ee3\u7801\u8fdb\u884c\u7b80\u5355\u4fee\u6539\uff0c\u5c55\u793a\u4e86\u6d41\u6c34\u5e76\u884c\u6a21\u5f0f\u3002","title":"\u6d41\u6c34\u5e76\u884c\u5b9e\u4f8b"},{"location":"extended_topics/model_mixed_parallel.html#_9","text":"\u5b8c\u6574\u4ee3\u7801\uff1a hybrid_parallelism_lenet.py \u66f4\u8be6\u7ec6\u7684\u8ba8\u8bba\u53ef\u89c1\u540e\u6587\u7684\u201c\u4ee3\u7801\u89e3\u8bfb\u201d\u3002","title":"\u4ee3\u7801"},{"location":"extended_topics/model_mixed_parallel.html#_10","text":"\u4ee5\u4e0a\u5173\u952e\u7684\u4ee3\u7801\u53ea\u67092\u884c\uff0c\u4e14\u4ed6\u4eec\u7684\u672c\u8d28\u4f5c\u7528\u662f\u7c7b\u4f3c\u7684\uff1a \u901a\u8fc7 oneflow.scope.placement \uff0c\u6307\u5b9a hidden \u5c42\u7684 op \u8ba1\u7b97\u8fd0\u884c\u57280\u53f7 GPU \u4e0a with flow . scope . placement ( \"gpu\" , \"0:0\" ): hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"hidden\" , ) \u901a\u8fc7 oneflow.scope.placement \uff0c\u6307\u5b9a output \u5c42\u7684op\u8ba1\u7b97\u8fd0\u884c\u5728\u7b2c0\u53f7\u4e3b\u673a\u76841\u53f7 GPU \u4e0a with flow . scope . placement ( \"gpu\" , \"0:1\" ): output = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"outlayer\" ) scope.placement \u7684\u5177\u4f53\u4f7f\u7528\uff0c\u53ef\u53c2\u9605 API \u6587\u6863 \u3002 \u6d41\u6c34\u5e76\u884c\uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u4e3a\u6bcf\u4e2a op \u6307\u5b9a\u7269\u7406\u8bbe\u5907\uff0c\u975e\u5e38\u9002\u5408\u5bf9\u7f51\u7edc\u6a21\u578b\u53ca\u5206\u5e03\u5f0f\u60c5\u51b5\u90fd\u5f88\u719f\u6089\u7684\u7528\u6237\u8fdb\u884c \u6df1\u5ea6\u4f18\u5316 \u3002 \u6b64\u5916\uff0cOneFlow \u63d0\u4f9b\u7684 API oneflow.unpack \u3001 oneflow.pack \u7b49\uff0c\u7ed3\u5408\u4e86 OneFlow \u81ea\u8eab\u4efb\u52a1\u8c03\u5ea6\u7684\u7279\u70b9\uff0c\u4f7f\u5f97\u6d41\u6c34\u5e76\u884c\u66f4\u6613\u7528\u3001\u9ad8\u6548\uff0c\u6211\u4eec\u5c06\u5728\u53e6\u5916\u7684\u6587\u7ae0\u4e2d\u4e13\u95e8\u4ecb\u7ecd\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"extended_topics/ofrecord.html","text":"\u6df1\u5ea6\u5b66\u4e60\u5e94\u7528\u9700\u8981\u590d\u6742\u7684\u591a\u9636\u6bb5\u6570\u636e\u9884\u5904\u7406\u6d41\u6c34\u7ebf\uff0c\u6570\u636e\u52a0\u8f7d\u662f\u6d41\u6c34\u7ebf\u7684\u7b2c\u4e00\u6b65\uff0cOneFlow \u652f\u6301\u591a\u79cd\u683c\u5f0f\u6570\u636e\u7684\u52a0\u8f7d\uff0c\u5176\u4e2d OFRecord \u683c\u5f0f\u662f OneFlow \u539f\u751f\u7684\u6570\u636e\u683c\u5f0f\u3002 OFRecord \u7684\u683c\u5f0f\u5b9a\u4e49\u53c2\u8003\u4e86 TensorFlow \u7684 TFRecord \uff0c\u719f\u6089 TFRecord \u7684\u7528\u6237\uff0c\u53ef\u4ee5\u5f88\u5feb\u4e0a\u624b OneFlow \u7684 OFRecord \u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\uff1a OFRecord \u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b \u5982\u4f55\u5c06\u6570\u636e\u8f6c\u5316\u4e3a OFRecord \u5bf9\u8c61\u5e76\u5e8f\u5217\u5316 OFRecord \u6587\u4ef6\u683c\u5f0f \u638c\u63e1\u5b83\u4eec\u540e\uff0c\u6709\u52a9\u4e8e\u6211\u4eec\u5b66\u4e60 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u3002 OFRecord \u76f8\u5173\u6570\u636e\u7c7b\u578b \u00b6 OneFlow \u5185\u90e8\u91c7\u7528 Protocol Buffers \u63cf\u8ff0 OFRecord \u7684\u5e8f\u5217\u5316\u683c\u5f0f\u3002\u76f8\u5173\u7684 .proto \u6587\u4ef6\u5728 oneflow/core/record/record.proto \u4e2d\uff0c\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a syntax = \"proto2\"; package oneflow; message BytesList { repeated bytes value = 1; } message FloatList { repeated float value = 1 [packed = true]; } message DoubleList { repeated double value = 1 [packed = true]; } message Int32List { repeated int32 value = 1 [packed = true]; } message Int64List { repeated int64 value = 1 [packed = true]; } message Feature { oneof kind { BytesList bytes_list = 1; FloatList float_list = 2; DoubleList double_list = 3; Int32List int32_list = 4; Int64List int64_list = 5; } } message OFRecord { map<string, Feature> feature = 1; } \u6211\u4eec\u5148\u5bf9\u4ee5\u4e0a\u7684\u91cd\u8981\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u89e3\u91ca\uff1a OFRecord: OFRecord \u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u53ef\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u9700\u8981\u5e8f\u5217\u5316\u7684\u6570\u636e\u3002\u5b83\u7531\u4efb\u610f\u591a\u4e2a string->Feature \u7684\u952e\u503c\u5bf9\u7ec4\u6210\uff1b Feature: Feature \u53ef\u5b58\u50a8 BytesList\u3001FloatList\u3001DoubleList\u3001Int32List\u3001Int64List \u5404\u7c7b\u578b\u4e2d\u7684\u4efb\u610f\u4e00\u79cd\uff1b OFRecord\u3001Feature\u3001XXXList \u7b49\u7c7b\u578b\uff0c\u5747\u7531 Protocol Buffers \u751f\u6210\u5bf9\u5e94\u7684\u540c\u540d\u63a5\u53e3\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728 Python \u5c42\u9762\u6784\u9020\u5bf9\u5e94\u5bf9\u8c61\u3002 \u8f6c\u5316\u6570\u636e\u4e3a Feature \u683c\u5f0f \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 ofrecord.xxxList \u53ca ofrecord.Feature \u5c06\u6570\u636e\u8f6c\u4e3a Feature \u683c\u5f0f\uff0c\u4f46\u662f\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\uff0c\u6211\u4eec\u9700\u8981\u5bf9 protocol buffers \u751f\u6210\u7684\u63a5\u53e3\u8fdb\u884c\u7b80\u5355\u5c01\u88c5\uff1a import oneflow.core.record.record_pb2 as ofrecord def int32_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( int32_list = ofrecord . Int32List ( value = value )) def int64_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( int64_list = ofrecord . Int64List ( value = value )) def float_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( float_list = ofrecord . FloatList ( value = value )) def double_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( double_list = ofrecord . DoubleList ( value = value )) def bytes_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] if not six . PY2 : if isinstance ( value [ 0 ], str ): value = [ x . encode () for x in value ] return ofrecord . Feature ( bytes_list = ofrecord . BytesList ( value = value )) \u521b\u5efa OFRecord \u5bf9\u8c61\u5e76\u5e8f\u5217\u5316 \u00b6 \u5728\u4e0b\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u67092\u4e2a feature \u7684 OFRecord \u5bf9\u8c61\uff0c\u5e76\u4e14\u8c03\u7528\u5b83\u7684 SerializeToString \u65b9\u6cd5\u5e8f\u5217\u5316\u3002 obserations = 28 * 28 f = open ( \"./dataset/part-0\" , \"wb\" ) for loop in range ( 0 , 3 ): image = [ random . random () for x in range ( 0 , obserations )] label = [ random . randint ( 0 , 9 )] topack = { \"images\" : float_feature ( image ), \"labels\" : int64_feature ( label ), } ofrecord_features = ofrecord . OFRecord ( feature = topack ) serilizedBytes = ofrecord_features . SerializeToString () \u901a\u8fc7\u4ee5\u4e0a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u5e8f\u5217\u5316\u6570\u636e\u7684\u6b65\u9aa4\uff1a \u5c06\u9700\u8981\u5e8f\u5217\u5316\u7684\u6570\u636e\uff0c\u901a\u8fc7\u8c03\u7528 ofrecord.Feature \u53ca ofrecord.XXXList \u8f6c\u4e3a Feature \u5bf9\u8c61\uff1b \u5c06\u4e0a\u4e00\u6b65\u5f97\u5230\u7684\u5404\u4e2a Feature \u5bf9\u8c61\uff0c\u4ee5 string->Feature \u952e\u503c\u5bf9\u7684\u5f62\u5f0f\uff0c\u5b58\u653e\u5728 Python \u5b57\u5178\u4e2d\uff1b \u8c03\u7528 ofrecord.OFRecord \u521b\u5efa OFRecord \u5bf9\u8c61 \u8c03\u7528 OFRecord \u5bf9\u8c61\u7684 SerializeToString \u65b9\u6cd5\u5f97\u5230\u5e8f\u5217\u5316\u7ed3\u679c \u5e8f\u5217\u5316\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u5b58\u4e3a ofrecord \u683c\u5f0f\u7684\u6587\u4ef6\u3002 OFRecord \u683c\u5f0f\u7684\u6587\u4ef6 \u00b6 \u5c06 OFRecord \u5bf9\u8c61\u5e8f\u5217\u5316\u540e\u6309 OneFlow \u7ea6\u5b9a\u7684\u683c\u5f0f\u5b58\u6587\u4ef6\uff0c\u5c31\u5f97\u5230 OFRecord\u6587\u4ef6 \u3002 1\u4e2a OFRecord \u6587\u4ef6\u4e2d\u53ef\u5b58\u50a8\u591a\u4e2a OFRecord \u5bf9\u8c61\uff0cOFRecord \u6587\u4ef6\u53ef\u7528\u4e8e OneFlow \u6570\u636e\u6d41\u6c34\u7ebf \uff0c\u5177\u4f53\u64cd\u4f5c\u53ef\u89c1 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 OneFlow \u7ea6\u5b9a\uff0c\u5bf9\u4e8e \u6bcf\u4e2a OFRecord \u5bf9\u8c61\uff0c\u7528\u4ee5\u4e0b\u683c\u5f0f\u5b58\u50a8\uff1a uint64 length byte data[length] \u5373\u59348\u4e2a\u5b57\u8282\u5b58\u5165\u6570\u636e\u957f\u5ea6\uff0c\u7136\u540e\u5b58\u5165\u5e8f\u5217\u5316\u6570\u636e\u672c\u8eab\u3002 length = ofrecord_features . ByteSize () f . write ( struct . pack ( \"q\" , length )) f . write ( serilizedBytes ) \u4ee3\u7801 \u00b6 \u4ee5\u4e0b\u5b8c\u6574\u4ee3\u7801\u5c55\u793a\u5982\u4f55\u751f\u6210 OFRecord \u6587\u4ef6\uff0c\u5e76\u8c03\u7528 protobuf \u751f\u6210\u7684 OFRecord \u63a5\u53e3\u624b\u5de5\u8bfb\u53d6 OFRecord \u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0cOneFlow \u63d0\u4f9b\u4e86 flow.data.decode_ofrecord \u7b49\u63a5\u53e3\uff0c\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u63d0\u53d6 OFRecord \u6587\u4ef6\uff08\u6570\u636e\u96c6\uff09\u4e2d\u7684\u5185\u5bb9\u3002\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u89c1 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u3002 \u5c06 OFRecord \u5bf9\u8c61\u5199\u5165\u6587\u4ef6 \u00b6 \u4ee5\u4e0b\u811a\u672c\uff0c\u6a21\u62df\u4e863\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c\u4e3a 28*28 \u7684\u56fe\u7247\uff0c\u5e76\u4e14\u5305\u542b\u5bf9\u5e94\u6807\u7b7e\u3002\u5c06\u4e09\u4e2a\u6837\u672c\u8f6c\u5316\u4e3a OFRecord \u5bf9\u8c61\u540e\uff0c\u6309\u7167 OneFlow \u7ea6\u5b9a\u683c\u5f0f\uff0c\u5b58\u5165\u6587\u4ef6\u3002 \u4ee3\u7801\uff1a ofrecord_to_string.py \u4ece OFRecord \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e \u00b6 \u4ee5\u4e0b\u811a\u672c\uff0c\u8bfb\u53d6\u4e0a\u4f8b\u4e2d\u751f\u6210\u7684 OFRecord \u6587\u4ef6\uff0c\u8c03\u7528 FromString \u65b9\u6cd5\u53cd\u5e8f\u5217\u5316\u5f97\u5230 OFRecord \u5bf9\u8c61\uff0c\u5e76\u6700\u7ec8\u663e\u793a\u6570\u636e\uff1a \u4ee3\u7801\uff1a ofrecord_from_string.py","title":"OFRecord \u6570\u636e\u683c\u5f0f"},{"location":"extended_topics/ofrecord.html#ofrecord","text":"OneFlow \u5185\u90e8\u91c7\u7528 Protocol Buffers \u63cf\u8ff0 OFRecord \u7684\u5e8f\u5217\u5316\u683c\u5f0f\u3002\u76f8\u5173\u7684 .proto \u6587\u4ef6\u5728 oneflow/core/record/record.proto \u4e2d\uff0c\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b\uff1a syntax = \"proto2\"; package oneflow; message BytesList { repeated bytes value = 1; } message FloatList { repeated float value = 1 [packed = true]; } message DoubleList { repeated double value = 1 [packed = true]; } message Int32List { repeated int32 value = 1 [packed = true]; } message Int64List { repeated int64 value = 1 [packed = true]; } message Feature { oneof kind { BytesList bytes_list = 1; FloatList float_list = 2; DoubleList double_list = 3; Int32List int32_list = 4; Int64List int64_list = 5; } } message OFRecord { map<string, Feature> feature = 1; } \u6211\u4eec\u5148\u5bf9\u4ee5\u4e0a\u7684\u91cd\u8981\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u89e3\u91ca\uff1a OFRecord: OFRecord \u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u53ef\u7528\u4e8e\u5b58\u50a8\u6240\u6709\u9700\u8981\u5e8f\u5217\u5316\u7684\u6570\u636e\u3002\u5b83\u7531\u4efb\u610f\u591a\u4e2a string->Feature \u7684\u952e\u503c\u5bf9\u7ec4\u6210\uff1b Feature: Feature \u53ef\u5b58\u50a8 BytesList\u3001FloatList\u3001DoubleList\u3001Int32List\u3001Int64List \u5404\u7c7b\u578b\u4e2d\u7684\u4efb\u610f\u4e00\u79cd\uff1b OFRecord\u3001Feature\u3001XXXList \u7b49\u7c7b\u578b\uff0c\u5747\u7531 Protocol Buffers \u751f\u6210\u5bf9\u5e94\u7684\u540c\u540d\u63a5\u53e3\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5728 Python \u5c42\u9762\u6784\u9020\u5bf9\u5e94\u5bf9\u8c61\u3002","title":"OFRecord \u76f8\u5173\u6570\u636e\u7c7b\u578b"},{"location":"extended_topics/ofrecord.html#feature","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 ofrecord.xxxList \u53ca ofrecord.Feature \u5c06\u6570\u636e\u8f6c\u4e3a Feature \u683c\u5f0f\uff0c\u4f46\u662f\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\uff0c\u6211\u4eec\u9700\u8981\u5bf9 protocol buffers \u751f\u6210\u7684\u63a5\u53e3\u8fdb\u884c\u7b80\u5355\u5c01\u88c5\uff1a import oneflow.core.record.record_pb2 as ofrecord def int32_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( int32_list = ofrecord . Int32List ( value = value )) def int64_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( int64_list = ofrecord . Int64List ( value = value )) def float_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( float_list = ofrecord . FloatList ( value = value )) def double_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] return ofrecord . Feature ( double_list = ofrecord . DoubleList ( value = value )) def bytes_feature ( value ): if not isinstance ( value , ( list , tuple )): value = [ value ] if not six . PY2 : if isinstance ( value [ 0 ], str ): value = [ x . encode () for x in value ] return ofrecord . Feature ( bytes_list = ofrecord . BytesList ( value = value ))","title":"\u8f6c\u5316\u6570\u636e\u4e3a Feature \u683c\u5f0f"},{"location":"extended_topics/ofrecord.html#ofrecord_1","text":"\u5728\u4e0b\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u521b\u5efa\u67092\u4e2a feature \u7684 OFRecord \u5bf9\u8c61\uff0c\u5e76\u4e14\u8c03\u7528\u5b83\u7684 SerializeToString \u65b9\u6cd5\u5e8f\u5217\u5316\u3002 obserations = 28 * 28 f = open ( \"./dataset/part-0\" , \"wb\" ) for loop in range ( 0 , 3 ): image = [ random . random () for x in range ( 0 , obserations )] label = [ random . randint ( 0 , 9 )] topack = { \"images\" : float_feature ( image ), \"labels\" : int64_feature ( label ), } ofrecord_features = ofrecord . OFRecord ( feature = topack ) serilizedBytes = ofrecord_features . SerializeToString () \u901a\u8fc7\u4ee5\u4e0a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u5e8f\u5217\u5316\u6570\u636e\u7684\u6b65\u9aa4\uff1a \u5c06\u9700\u8981\u5e8f\u5217\u5316\u7684\u6570\u636e\uff0c\u901a\u8fc7\u8c03\u7528 ofrecord.Feature \u53ca ofrecord.XXXList \u8f6c\u4e3a Feature \u5bf9\u8c61\uff1b \u5c06\u4e0a\u4e00\u6b65\u5f97\u5230\u7684\u5404\u4e2a Feature \u5bf9\u8c61\uff0c\u4ee5 string->Feature \u952e\u503c\u5bf9\u7684\u5f62\u5f0f\uff0c\u5b58\u653e\u5728 Python \u5b57\u5178\u4e2d\uff1b \u8c03\u7528 ofrecord.OFRecord \u521b\u5efa OFRecord \u5bf9\u8c61 \u8c03\u7528 OFRecord \u5bf9\u8c61\u7684 SerializeToString \u65b9\u6cd5\u5f97\u5230\u5e8f\u5217\u5316\u7ed3\u679c \u5e8f\u5217\u5316\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u5b58\u4e3a ofrecord \u683c\u5f0f\u7684\u6587\u4ef6\u3002","title":"\u521b\u5efa OFRecord \u5bf9\u8c61\u5e76\u5e8f\u5217\u5316"},{"location":"extended_topics/ofrecord.html#ofrecord_2","text":"\u5c06 OFRecord \u5bf9\u8c61\u5e8f\u5217\u5316\u540e\u6309 OneFlow \u7ea6\u5b9a\u7684\u683c\u5f0f\u5b58\u6587\u4ef6\uff0c\u5c31\u5f97\u5230 OFRecord\u6587\u4ef6 \u3002 1\u4e2a OFRecord \u6587\u4ef6\u4e2d\u53ef\u5b58\u50a8\u591a\u4e2a OFRecord \u5bf9\u8c61\uff0cOFRecord \u6587\u4ef6\u53ef\u7528\u4e8e OneFlow \u6570\u636e\u6d41\u6c34\u7ebf \uff0c\u5177\u4f53\u64cd\u4f5c\u53ef\u89c1 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 OneFlow \u7ea6\u5b9a\uff0c\u5bf9\u4e8e \u6bcf\u4e2a OFRecord \u5bf9\u8c61\uff0c\u7528\u4ee5\u4e0b\u683c\u5f0f\u5b58\u50a8\uff1a uint64 length byte data[length] \u5373\u59348\u4e2a\u5b57\u8282\u5b58\u5165\u6570\u636e\u957f\u5ea6\uff0c\u7136\u540e\u5b58\u5165\u5e8f\u5217\u5316\u6570\u636e\u672c\u8eab\u3002 length = ofrecord_features . ByteSize () f . write ( struct . pack ( \"q\" , length )) f . write ( serilizedBytes )","title":"OFRecord \u683c\u5f0f\u7684\u6587\u4ef6"},{"location":"extended_topics/ofrecord.html#_1","text":"\u4ee5\u4e0b\u5b8c\u6574\u4ee3\u7801\u5c55\u793a\u5982\u4f55\u751f\u6210 OFRecord \u6587\u4ef6\uff0c\u5e76\u8c03\u7528 protobuf \u751f\u6210\u7684 OFRecord \u63a5\u53e3\u624b\u5de5\u8bfb\u53d6 OFRecord \u6587\u4ef6\u4e2d\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0cOneFlow \u63d0\u4f9b\u4e86 flow.data.decode_ofrecord \u7b49\u63a5\u53e3\uff0c\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u63d0\u53d6 OFRecord \u6587\u4ef6\uff08\u6570\u636e\u96c6\uff09\u4e2d\u7684\u5185\u5bb9\u3002\u8be6\u7ec6\u5185\u5bb9\u8bf7\u53c2\u89c1 \u52a0\u8f7d\u4e0e\u51c6\u5907 OFRecord \u6570\u636e\u96c6 \u3002","title":"\u4ee3\u7801"},{"location":"extended_topics/ofrecord.html#ofrecord_3","text":"\u4ee5\u4e0b\u811a\u672c\uff0c\u6a21\u62df\u4e863\u4e2a\u6837\u672c\uff0c\u6bcf\u4e2a\u6837\u672c\u4e3a 28*28 \u7684\u56fe\u7247\uff0c\u5e76\u4e14\u5305\u542b\u5bf9\u5e94\u6807\u7b7e\u3002\u5c06\u4e09\u4e2a\u6837\u672c\u8f6c\u5316\u4e3a OFRecord \u5bf9\u8c61\u540e\uff0c\u6309\u7167 OneFlow \u7ea6\u5b9a\u683c\u5f0f\uff0c\u5b58\u5165\u6587\u4ef6\u3002 \u4ee3\u7801\uff1a ofrecord_to_string.py","title":"\u5c06 OFRecord \u5bf9\u8c61\u5199\u5165\u6587\u4ef6"},{"location":"extended_topics/ofrecord.html#ofrecord_4","text":"\u4ee5\u4e0b\u811a\u672c\uff0c\u8bfb\u53d6\u4e0a\u4f8b\u4e2d\u751f\u6210\u7684 OFRecord \u6587\u4ef6\uff0c\u8c03\u7528 FromString \u65b9\u6cd5\u53cd\u5e8f\u5217\u5316\u5f97\u5230 OFRecord \u5bf9\u8c61\uff0c\u5e76\u6700\u7ec8\u663e\u793a\u6570\u636e\uff1a \u4ee3\u7801\uff1a ofrecord_from_string.py","title":"\u4ece OFRecord \u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e"},{"location":"extended_topics/oneflow_convert_tools.html","text":"oneflow_convert_tools \u00b6 OneFlow \u76f8\u5173\u7684\u6a21\u578b\u8f6c\u6362\u5de5\u5177 oneflow_onnx \u00b6 \u7b80\u4ecb \u00b6 oneflow_onnx \u5de5\u5177\u5305\u542b\u4e24\u4e2a\u529f\u80fd\uff0c\u4e00\u4e2a\u662f\u5c06 OneFlow \u5bfc\u51fa ONNX\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u5c06\u5404\u4e2a\u8bad\u7ec3\u6846\u67b6\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\u3002\u672c\u5de5\u7a0b\u5df2\u7ecf\u9002\u914d\u4e86 TensorFlow/Pytorch/PaddlePaddle \u6846\u67b6\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u901a\u8fc7\u5bfc\u51fa ONNX \u8f6c\u6362\u4e3a OneFlow\uff08\u6211\u4eec\u5c06\u8fd9\u4e00\u529f\u80fd\u53eb\u4f5c X2OneFlow\uff09\u3002 OneFlow2ONNX \u6a21\u578b\u652f\u6301\uff0c\u652f\u6301 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u8f6c\u4e3a ONNX\uff0c\u53ef\u8f6c\u6362\u7531 flow.checkpoint.save \u65b9\u6cd5\u4fdd\u5b58\u4e0b\u6765\u7684 OneFlow \u6a21\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 OneFlow2ONNX \u6a21\u578b\u5217\u8868 \u3002 X2OneFlow \u6a21\u578b\u652f\u6301\uff0c\u652f\u6301\u5c06 TensorFlow/Pytorch/PaddlePaddle \u7684\u6a21\u578b\u901a\u8fc7 ONNX \u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u6a21\u578b\u5217\u8868 \u3002 OneFlow2ONNX \u7b97\u5b50\u652f\u6301\uff0c\u76ee\u524d\u7a33\u5b9a\u652f\u6301\u5bfc\u51fa ONNX Opset10\uff0c\u90e8\u5206 OneFlow \u7b97\u5b50\u652f\u6301\u66f4\u4f4e\u7684 ONNX Opset \u8f6c\u6362\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 OneFlow2ONNX \u7b97\u5b50\u5217\u8868 \u3002 X2OneFlow \u7b97\u5b50\u652f\u6301\uff0c\u76ee\u524d\u7a33\u5b9a\u652f\u6301 TensorFlow/Pytorch/PaddlePaddle \u4e2d\u6db5\u76d6\u5927\u90e8\u5206 CV \u573a\u666f\u7684\u7b97\u5b50\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u7b97\u5b50\u5217\u8868 \u3002 \u4ee3\u7801\u751f\u6210\u652f\u6301\uff0c\u652f\u6301\u5c06 TensorFlow/Pytorch/PaddlePaddle \u7684\u6a21\u578b\u901a\u8fc7 ONNX \u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\u5e76\u540c\u65f6\u751f\u6210 OneFlow \u7684\u4ee3\u7801\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u4ee3\u7801\u751f\u6210\u6a21\u578b\u5217\u8868 \u3002 \u76ee\u524d OneFlow2ONNX \u652f\u630180+\u7684 OneFlow OP \u5bfc\u51fa\u4e3a ONNX OP\u3002X2OneFlow \u652f\u630180\u4e2a ONNX OP\uff0c50+\u4e2a TensorFlow OP\uff0c80+\u4e2a Pytorch OP\uff0c50+\u4e2a PaddlePaddle OP\uff0c\u8986\u76d6\u4e86\u5927\u90e8\u5206 CV \u5206\u7c7b\u6a21\u578b\u5e38\u7528\u7684\u64cd\u4f5c\u3002\u6ce8\u610f\u6211\u4eec\u652f\u6301\u7684 OP \u548c\u6a21\u578b\u5747\u4e3a\u52a8\u6001\u56fe API \u4e0b\u7684 OP \u548c\u6a21\u578b\uff0c\u8981\u6c42 PaddlePaddle \u7684\u7248\u672c>=2.0.0\uff0cTensorFlow >=2.0.0\uff0cPytorch \u65e0\u660e\u786e\u7248\u672c\u8981\u6c42\u3002\u76ee\u524d X2OneFlow \u5df2\u7ecf\u6210\u529f\u8f6c\u6362\u4e8650+\u4e2a TensorFlow/Pytorch/PaddlePaddle \u5b98\u65b9\u6a21\u578b\u3002\u6b22\u8fce\u4f53\u9a8c\u6b64\u9879\u76ee\u3002 \u73af\u5883\u4f9d\u8d56 \u00b6 \u7528\u6237\u73af\u5883\u914d\u7f6e \u00b6 python> = 3 .5 onnx> = 1 .8.0 onnx-simplifier> = 0 .3.3 onnxoptimizer> = 0 .2.5 onnxruntime> = 1 .6.0 oneflow ( https://github.com/Oneflow-Inc/oneflow#install-with-pip-package ) \u5982\u679c\u4f60\u60f3\u4f7f\u7528 X2OneFlow\uff08X \u4ee3\u8868 TensorFlow/Pytorch/PaddlePaddle\uff09\u5219\u9700\u8981\u5b89\u88c5\u5bf9\u5e94\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002\u4f9d\u8d56\u5982\u4e0b\uff1a pytorch> = 1 .7.0 paddlepaddle> = 2 .0.0 paddle2onnx> = 0 .6 tensorflow> = 2 .0.0 tf2onnx> = 1 .8.4 \u5b89\u88c5 \u00b6 \u5b89\u88c5\u65b9\u5f0f1 \u00b6 pip install oneflow_onnx \u5b89\u88c5\u65b9\u5f0f2 git clone https://github.com/Oneflow-Inc/oneflow_convert_tools cd oneflow_onnx python3 setup.py install \u4f7f\u7528\u65b9\u6cd5 \u00b6 \u8bf7\u53c2\u8003 \u4f7f\u7528\u793a\u4f8b \u76f8\u5173\u6587\u6863 \u00b6 OneFlow2ONNX\u6a21\u578b\u5217\u8868 X2OneFlow\u6a21\u578b\u5217\u8868 OneFlow2ONNX\u7b97\u5b50\u5217\u8868 X2OneFlow\u7b97\u5b50\u5217\u8868 \u4f7f\u7528\u793a\u4f8b nchw2nhwc_tool \u00b6 \u7b80\u4ecb \u00b6 \u672c\u5de5\u5177\u7684\u529f\u80fd\u662f\u5c06 OneFlow \u8bad\u7ec3\u7684 NCHW \u6392\u5e03\u7684\u6743\u91cd\u8f6c\u6362\u4e3a NHWC \u6392\u5e03\uff0c\u4f7f\u7528\u65b9\u6cd5 \u5728\u8fd9\u91cc save_serving_tool \u00b6 \u7b80\u4ecb \u00b6 \u672c\u5de5\u5177\u7684\u76ee\u7684\u662f\u5c06 OneFlow \u8bad\u7ec3\u7684\u6a21\u578b\u8f6c\u6362\u4e3a Serving \u7aef\u53ef\u7528\u7684\u6a21\u578b\uff0c\u4f7f\u7528\u65b9\u6cd5 \u5728\u8fd9\u91cc","title":"OneFlow \u548c ONNX \u4ea4\u4e92"},{"location":"extended_topics/oneflow_convert_tools.html#oneflow_convert_tools","text":"OneFlow \u76f8\u5173\u7684\u6a21\u578b\u8f6c\u6362\u5de5\u5177","title":"oneflow_convert_tools"},{"location":"extended_topics/oneflow_convert_tools.html#oneflow_onnx","text":"","title":"oneflow_onnx"},{"location":"extended_topics/oneflow_convert_tools.html#_1","text":"oneflow_onnx \u5de5\u5177\u5305\u542b\u4e24\u4e2a\u529f\u80fd\uff0c\u4e00\u4e2a\u662f\u5c06 OneFlow \u5bfc\u51fa ONNX\uff0c\u53e6\u5916\u4e00\u4e2a\u662f\u5c06\u5404\u4e2a\u8bad\u7ec3\u6846\u67b6\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\u3002\u672c\u5de5\u7a0b\u5df2\u7ecf\u9002\u914d\u4e86 TensorFlow/Pytorch/PaddlePaddle \u6846\u67b6\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u901a\u8fc7\u5bfc\u51fa ONNX \u8f6c\u6362\u4e3a OneFlow\uff08\u6211\u4eec\u5c06\u8fd9\u4e00\u529f\u80fd\u53eb\u4f5c X2OneFlow\uff09\u3002 OneFlow2ONNX \u6a21\u578b\u652f\u6301\uff0c\u652f\u6301 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u8f6c\u4e3a ONNX\uff0c\u53ef\u8f6c\u6362\u7531 flow.checkpoint.save \u65b9\u6cd5\u4fdd\u5b58\u4e0b\u6765\u7684 OneFlow \u6a21\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 OneFlow2ONNX \u6a21\u578b\u5217\u8868 \u3002 X2OneFlow \u6a21\u578b\u652f\u6301\uff0c\u652f\u6301\u5c06 TensorFlow/Pytorch/PaddlePaddle \u7684\u6a21\u578b\u901a\u8fc7 ONNX \u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u6a21\u578b\u5217\u8868 \u3002 OneFlow2ONNX \u7b97\u5b50\u652f\u6301\uff0c\u76ee\u524d\u7a33\u5b9a\u652f\u6301\u5bfc\u51fa ONNX Opset10\uff0c\u90e8\u5206 OneFlow \u7b97\u5b50\u652f\u6301\u66f4\u4f4e\u7684 ONNX Opset \u8f6c\u6362\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 OneFlow2ONNX \u7b97\u5b50\u5217\u8868 \u3002 X2OneFlow \u7b97\u5b50\u652f\u6301\uff0c\u76ee\u524d\u7a33\u5b9a\u652f\u6301 TensorFlow/Pytorch/PaddlePaddle \u4e2d\u6db5\u76d6\u5927\u90e8\u5206 CV \u573a\u666f\u7684\u7b97\u5b50\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u7b97\u5b50\u5217\u8868 \u3002 \u4ee3\u7801\u751f\u6210\u652f\u6301\uff0c\u652f\u6301\u5c06 TensorFlow/Pytorch/PaddlePaddle \u7684\u6a21\u578b\u901a\u8fc7 ONNX \u8f6c\u6362\u4e3a OneFlow \u7684\u6a21\u578b\u5e76\u540c\u65f6\u751f\u6210 OneFlow \u7684\u4ee3\u7801\uff0c\u8be6\u60c5\u53ef\u4ee5\u53c2\u8003 X2OneFlow \u4ee3\u7801\u751f\u6210\u6a21\u578b\u5217\u8868 \u3002 \u76ee\u524d OneFlow2ONNX \u652f\u630180+\u7684 OneFlow OP \u5bfc\u51fa\u4e3a ONNX OP\u3002X2OneFlow \u652f\u630180\u4e2a ONNX OP\uff0c50+\u4e2a TensorFlow OP\uff0c80+\u4e2a Pytorch OP\uff0c50+\u4e2a PaddlePaddle OP\uff0c\u8986\u76d6\u4e86\u5927\u90e8\u5206 CV \u5206\u7c7b\u6a21\u578b\u5e38\u7528\u7684\u64cd\u4f5c\u3002\u6ce8\u610f\u6211\u4eec\u652f\u6301\u7684 OP \u548c\u6a21\u578b\u5747\u4e3a\u52a8\u6001\u56fe API \u4e0b\u7684 OP \u548c\u6a21\u578b\uff0c\u8981\u6c42 PaddlePaddle \u7684\u7248\u672c>=2.0.0\uff0cTensorFlow >=2.0.0\uff0cPytorch \u65e0\u660e\u786e\u7248\u672c\u8981\u6c42\u3002\u76ee\u524d X2OneFlow \u5df2\u7ecf\u6210\u529f\u8f6c\u6362\u4e8650+\u4e2a TensorFlow/Pytorch/PaddlePaddle \u5b98\u65b9\u6a21\u578b\u3002\u6b22\u8fce\u4f53\u9a8c\u6b64\u9879\u76ee\u3002","title":"\u7b80\u4ecb"},{"location":"extended_topics/oneflow_convert_tools.html#_2","text":"","title":"\u73af\u5883\u4f9d\u8d56"},{"location":"extended_topics/oneflow_convert_tools.html#_3","text":"python> = 3 .5 onnx> = 1 .8.0 onnx-simplifier> = 0 .3.3 onnxoptimizer> = 0 .2.5 onnxruntime> = 1 .6.0 oneflow ( https://github.com/Oneflow-Inc/oneflow#install-with-pip-package ) \u5982\u679c\u4f60\u60f3\u4f7f\u7528 X2OneFlow\uff08X \u4ee3\u8868 TensorFlow/Pytorch/PaddlePaddle\uff09\u5219\u9700\u8981\u5b89\u88c5\u5bf9\u5e94\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u3002\u4f9d\u8d56\u5982\u4e0b\uff1a pytorch> = 1 .7.0 paddlepaddle> = 2 .0.0 paddle2onnx> = 0 .6 tensorflow> = 2 .0.0 tf2onnx> = 1 .8.4","title":"\u7528\u6237\u73af\u5883\u914d\u7f6e"},{"location":"extended_topics/oneflow_convert_tools.html#_4","text":"","title":"\u5b89\u88c5"},{"location":"extended_topics/oneflow_convert_tools.html#1","text":"pip install oneflow_onnx \u5b89\u88c5\u65b9\u5f0f2 git clone https://github.com/Oneflow-Inc/oneflow_convert_tools cd oneflow_onnx python3 setup.py install","title":"\u5b89\u88c5\u65b9\u5f0f1"},{"location":"extended_topics/oneflow_convert_tools.html#_5","text":"\u8bf7\u53c2\u8003 \u4f7f\u7528\u793a\u4f8b","title":"\u4f7f\u7528\u65b9\u6cd5"},{"location":"extended_topics/oneflow_convert_tools.html#_6","text":"OneFlow2ONNX\u6a21\u578b\u5217\u8868 X2OneFlow\u6a21\u578b\u5217\u8868 OneFlow2ONNX\u7b97\u5b50\u5217\u8868 X2OneFlow\u7b97\u5b50\u5217\u8868 \u4f7f\u7528\u793a\u4f8b","title":"\u76f8\u5173\u6587\u6863"},{"location":"extended_topics/oneflow_convert_tools.html#nchw2nhwc_tool","text":"","title":"nchw2nhwc_tool"},{"location":"extended_topics/oneflow_convert_tools.html#_7","text":"\u672c\u5de5\u5177\u7684\u529f\u80fd\u662f\u5c06 OneFlow \u8bad\u7ec3\u7684 NCHW \u6392\u5e03\u7684\u6743\u91cd\u8f6c\u6362\u4e3a NHWC \u6392\u5e03\uff0c\u4f7f\u7528\u65b9\u6cd5 \u5728\u8fd9\u91cc","title":"\u7b80\u4ecb"},{"location":"extended_topics/oneflow_convert_tools.html#save_serving_tool","text":"","title":"save_serving_tool"},{"location":"extended_topics/oneflow_convert_tools.html#_8","text":"\u672c\u5de5\u5177\u7684\u76ee\u7684\u662f\u5c06 OneFlow \u8bad\u7ec3\u7684\u6a21\u578b\u8f6c\u6362\u4e3a Serving \u7aef\u53ef\u7528\u7684\u6a21\u578b\uff0c\u4f7f\u7528\u65b9\u6cd5 \u5728\u8fd9\u91cc","title":"\u7b80\u4ecb"},{"location":"extended_topics/python_kernel_op.html","text":"\u4f7f\u7528 Python \u6269\u5c55 Op \u00b6 \u6ce8\u610f \uff1a\u672c\u6587\u6d89\u53ca\u7684 Python Kernel \u4ec5\u5728 gcc 4.8.5 \u7f16\u8bd1\u73af\u5883\u4e0b\u5145\u5206\u6d4b\u8bd5\uff0c\u8fdb\u4e00\u6b65\u7684\u5b8c\u5584\u8ba1\u5212\u89c1 Issue 3951 \u3002 \u80cc\u666f\u4ecb\u7ecd \u00b6 OneFlow \u5c06\u5404\u79cd\u5bf9\u4e8e\u6570\u636e\u7684\u5904\u7406\u90fd\u62bd\u8c61\u6210\u4e86\u7b97\u5b50\uff08operator\uff09\uff0c\u7b80\u79f0 op\u3002 op \u662f\u4f5c\u7528\u5728\u8f93\u5165 tensor \u4e0a\u7684\u64cd\u4f5c\uff0c\u5e76\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u5199\u5230\u8f93\u51fa tensor \u4e0a\u3002OneFlow \u5185\u90e8\u5df2\u7ecf\u63d0\u4f9b\u4e86\u6bd4\u8f83\u5b8c\u5907\u7684 op \u7b97\u5b50\uff0c\u53ef\u4ee5\u5728 ops \u76ee\u5f55 \u4e0b\u627e\u5230\u3002 \u5f53 OneFlow \u5df2\u6709\u7684 Python \u7b97\u5b50\u53ca\u5176\u7ec4\u5408\u65e0\u6cd5\u6ee1\u8db3\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u7684\u9700\u6c42\uff0c\u6216\u8005 Python \u5c42\u6b21\u7684\u7b97\u5b50\u65e0\u6cd5\u6ee1\u8db3\u6027\u80fd\u9700\u6c42\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u81ea\u5b9a\u4e49 op\u3002OneFlow \u63d0\u4f9b\u4e86\u4e24\u7c7b\u5f00\u53d1\u81ea\u5b9a\u4e49 Op \u7684\u9014\u5f84\uff0c\u4e00\u7c7b\u662f\u4ee5 Python \u4e3a\u4e3b\u7684 Python Kernel \u5f00\u53d1\uff0c\u53e6\u5916\u4e00\u7c7b\u662f \u4f7f\u7528 C++ \u6269\u5c55 Op \u4e00\u6587\u4ecb\u7ecd\u7684 C++ Kernel \u5f00\u53d1\u3002 Python Kernel \u56e0\u4e3a\u4e3b\u8981\u91c7\u7528 Python \u8fdb\u884c\u6269\u5c55\uff0c\u5f00\u53d1\u6d41\u7a0b\u8f83\u7b80\u5355\uff0c\u9002\u7528\u4e8e\u5feb\u901f\u9884\u7814\u3001\u7b97\u6cd5\u9a8c\u8bc1\u7b49\u573a\u666f\u3002 C++ Kernel \u6548\u7387\u9ad8\uff0c\u9002\u7528\u4e8e\u5f00\u53d1\u5df2\u7ecf\u9a8c\u8bc1\u7a33\u5065\u6027\u5e76\u8ffd\u6c42\u6027\u80fd\u7684\u7b97\u5b50\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\u4ecb\u7ecd\u7b97\u5b50\u5f00\u53d1\u7684\u80cc\u666f\u77e5\u8bc6\u548c\u57fa\u672c\u6982\u5ff5\uff0c\u5e76\u5c55\u793a\u5982\u4f55\u5f00\u53d1 Python Kernel \u3002 \u57fa\u672c\u6982\u5ff5 \u00b6 \u5728\u8fdb\u884c OneFlow \u7b97\u5b50\u5f00\u53d1\u524d\uff0c\u9700\u8981\u4e86\u89e3 op_type_name \u3001 Op \u4ee5\u53ca Kernel \u8fd9\u51e0\u4e2a\u6982\u5ff5\uff1a op_type_name\uff1aop_type_name \u662f op \u7c7b\u522b\u7684\u5168\u5c40\u552f\u4e00 ID\uff0c OneFlow \u901a\u8fc7 op_type_name \u67e5\u8be2\u5e76\u786e\u8ba4 op \u7684\u79cd\u7c7b\uff0c\u8fdb\u800c\u5b9e\u4f8b\u5316 op\uff0c\u7528\u4e8e\u6784\u5efa\u8ba1\u7b97\u56fe\u3002op \u7684\u79cd\u7c7b\u4e0e op \u7684\u5173\u7cfb\uff0c\u7c7b\u4f3c\u4e8e\u7c7b\u4e0e\u5bf9\u8c61\u7684\u5173\u7cfb\u3002 op\uff1a\u903b\u8f91\u4e0a\u7684\u7b97\u5b50\uff0c\u5305\u542b\u6784\u56fe\u63a8\u7406\u65f6\u7684\u8f93\u5165\u8f93\u51fa\u5f62\u72b6\u7b49\u4fe1\u606f\uff0c\u4e0d\u5305\u542b\u5177\u4f53\u7684\u5904\u7406\u6570\u636e\u7684\u903b\u8f91\u3002 kernel\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 op\uff0c\u5728\u8fd0\u884c\u65f6\uff0c\u5904\u7406\u7684\u903b\u8f91\u4f1a\u56e0\u4e3a\u7269\u7406\u8bbe\u5907\u4ee5\u53ca\u6570\u636e\u7c7b\u578b\u7684\u4e0d\u540c\u3002\u8fd0\u884c\u65f6\u7684\u5177\u4f53\u5904\u7406\u903b\u8f91\uff0c\u7531 kernel \u5b8c\u6210\u3002\u7b80\u5355\u800c\u8a00\uff0cop \u4e0e kernel \u662f\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Python \u5b8c\u6210\u5177\u4f53\u8fd0\u7b97\uff0c\u8fd9\u6837\u7684Kernel \u79f0\u4e3a Python Kernel \uff0c\u4e5f\u53ef\u4ee5 \u4f7f\u7528 C++ \u5f00\u53d1 Kernel \u3002 OneFlow \u7684\u5185\u6838\u7531 C++ \u5b9e\u73b0\uff0c\u4f46\u662f\u7528\u6237\u63a5\u53e3\u4f7f\u7528 Python\uff0c\u56e0\u6b64\u9700\u8981\u6309\u7167\u7ea6\u5b9a\u7f16\u5199 Python Wrapper \uff0c\u4f7f\u5f97 Python Op \u63a5\u53e3\u80fd\u4e0e C++ \u5185\u6838\u4ea4\u4e92\u3002 \u5f00\u53d1\u6b65\u9aa4 \u00b6 \u4f7f\u7528 Python \u6269\u5c55 Op\uff0c\u5e94\u8be5\u51c6\u5907\u4e00\u4e2a\u4ee5 op_type_name \u547d\u540d\u7684\u76ee\u5f55\uff0c\u5728\u8be5\u76ee\u5f55\u4e0b\uff0c\u6309\u7167\u7ea6\u5b9a\u653e\u7f6e\u5fc5\u9700\u7684\u6587\u4ef6\uff0c\u4ee5 oneflow/python/test/custom_ops/user_sigmoid \u4e3a\u4f8b\uff1a user_sigmoid \u251c\u2500\u2500 user_sigmoid_cpp_def.cpp \u251c\u2500\u2500 user_sigmoid_py_api.py \u2514\u2500\u2500 user_sigmoid_py_kernel.py \u5176\u4e2d\uff1a op_type_name_cpp_def.cpp (\u4ee5\u4e0a\u7684 user_sigmoid_cpp_def.cpp ) \u6587\u4ef6\u4e2d\u653e\u7f6e Op \u5b9a\u4e49\u4fe1\u606f op_type_name_py_api.py (\u4ee5\u4e0a\u7684 user_sigmoid_py_api.py )\u6587\u4ef6\u4e2d\u653e\u7f6e Python Wrapper \uff0c\u901a\u8fc7 oneflow.user_op_builder \u5c06\u5b9e\u73b0\u7684 Python Kernel \u5bfc\u51fa\u7ed9\u7528\u6237\u4f7f\u7528 op_type_name_py_kernel.py (\u4ee5\u4e0a\u7684 user_sigmoid_py_kernel.py )\u6587\u4ef6\u4e2d\u653e\u7f6e Python \u5b9e\u73b0\u7684\u81ea\u5b9a\u4e49\u7b97\u5b50\u7684\u524d\u5411\u8ba1\u7b97\u903b\u8f91\u548c\u540e\u5411\u8ba1\u7b97\u903b\u8f91 \u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528 Python \u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 user_relu Op\uff0c\u5b83\u5305\u62ec\uff1a \u5982\u4f55\u7f16\u5199 op_type_name_cpp_def.cpp \u6587\u4ef6\uff0c\u5b9a\u4e49 Op \u4fe1\u606f \u5982\u4f55\u7f16\u5199 op_type_name_py_api.py \u6587\u4ef6\uff0c\u5c01\u88c5 Op \u7684 Python \u63a5\u53e3 \u5982\u4f55\u7f16\u5199 op_type_name_py_kernel.py \u6587\u4ef6\uff0c\u4f7f\u7528 Python \u5b9e\u73b0 Op \u7684\u8ba1\u7b97 Kernel \u5728 OneFlow \u4e2d\u5982\u4f55\u4f7f\u7528 Python Kernel \u7c7b\u578b\u7684\u81ea\u5b9a\u4e49 Op Op \u7684\u5b9e\u73b0\u4e0e\u6ce8\u518c \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5728 user_relu_cpp_def.cpp \u4e2d\u5b9a\u4e49 op \u5e76\u5b8c\u6210\u6ce8\u518c\uff1a #include \"oneflow/core/framework/framework.h\" namespace oneflow { namespace { REGISTER_USER_OP ( \"user_relu_forward\" ) . Attr < std :: string > ( \"device_sub_tag\" , \"py\" ) . Input ( \"in\" ) . Output ( \"out\" ) . SetTensorDescInferFn ( []( user_op :: InferContext * ctx ) -> Maybe < void > { * ctx -> Shape4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Shape4ArgNameAndIndex ( \"in\" , 0 ); * ctx -> Dtype4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Dtype4ArgNameAndIndex ( \"in\" , 0 ); return Maybe < void >:: Ok (); }); } // namespace } // namespace oneflow \u5206\u6790\u4ee5\u4e0a\u4ee3\u7801\uff1a oneflow/core/framework/framework.h \u4e2d\u5305\u542b\u4e86\u6211\u4eec\u521b\u5efa\u4e00\u4e2a op \u6240\u9700\u8981\u7684\u6240\u6709\u63a5\u53e3 .Attr<std::string>(\"device_sub_tag\", \"py\") \u662f\u5fc5\u9700\u7684\uff0c\u5b83\u544a\u77e5 OneFlow \u5728\u4f7f\u7528\u8be5 Op \u65f6\u9ed8\u8ba4\u8c03\u7528Python Kernel \u4e0e\u81ea\u5b9a\u4e49 op \u6709\u5173\u7684\u63a5\u53e3\u96c6\u4e2d\u5728 oneflow::user_op \u4e2d\uff0c\u4f7f\u7528\u540d\u79f0\u7a7a\u95f4 oneflow \u53ef\u4ee5\u7b80\u5316\u7c7b\u578b\u540d\u79f0 \u5b8f REGISTER_USER_OP \u7528\u4e8e\u6ce8\u518c op\uff0c\u5176\u63a5\u53d7\u7684\u53c2\u6570 user_relu_forward \u662f op_type_name \u3002 \u4f7f\u7528 REGISTER_USER_OP \u6ce8\u518c\u540e\uff0c\u5176\u5b9e\u4f1a\u8fd4\u56de\u4e00\u4e2a OpRegistry \u7c7b\uff08\u4f4d\u4e8e user_op_registry.h )\uff0c\u901a\u8fc7\u8c03\u7528\u8be5\u7c7b\u65b9\u6cd5\uff0c\u5b8c\u6210\u5bf9\u81ea\u5b9a\u4e49 op \u7684\u8bbe\u7f6e\uff1a Input(\"in\") \u8868\u793a\u5176\u6709\u4e00\u4e2a\u540d\u4e3a \"in\" \u7684\u8f93\u5165 Output(\"out\") \u8868\u793a\u5176\u6709\u4e00\u4e2a\u540d\u4e3a \"out\" \u7684\u8f93\u51fa SetTensorDescInferFn \u7528\u4e8e\u8bbe\u7f6e\u5f62\u72b6\u53ca\u6570\u636e\u7c7b\u578b\u63a8\u5bfc\u51fd\u6570\uff0c\u63cf\u8ff0\u8be5\u7b97\u5b50\u7684\u8f93\u51fa\u7684\u5f62\u72b6\u53ca\u7c7b\u578b\u4e0e\u8f93\u5165\u7684\u5173\u7cfb\u3002\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u8f93\u51fa\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u4e0e\u8f93\u5165\u7684\u4e00\u81f4 op_type_name_cpp_def.cpp \u6587\u4ef6\u662f\u5b9e\u73b0 Python Kernel \u8fc7\u7a0b\u4e2d\u552f\u4e00\u4f1a\u4f7f\u7528\u5230\u7684 C++ \u6587\u4ef6\uff0c\u5b83\u7528\u4e8e\u8bbe\u7f6e Op \u7684\u4fe1\u606f\uff0c\u5728\u73b0\u9636\u6bb5\uff0c\u8fd8\u65e0\u6cd5\u5c06\u4f7f\u7528 C++ \u914d\u7f6e Op \u7684\u6b65\u9aa4\u7701\u7565\uff08\u56e0\u4e3a\u8bbe\u7f6e\u5206\u5e03\u5f0f\u7b49\u9ad8\u7ea7\u4fe1\u606f\u65f6\u5fc5\u9700\uff09\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u6587\u4ef6\u5e76\u4e0d\u6d89\u53ca\u5177\u4f53\u7684\u8fd0\u7b97\uff0c\u4ec5\u4ec5\u662f\u7528\u4e8e\u63cf\u8ff0 Op\uff0c\u5373\u4f7f\u4e0d\u719f\u6089 C++\uff0c\u6839\u636e\u6211\u4eec\u7684\u793a\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u638c\u63e1\u3002 \u5c01\u88c5 Op \u7684 Python \u63a5\u53e3 \u00b6 \u4e3a\u4e86\u7528\u6237\u53ef\u4ee5\u5728 Python \u5c42\u4f7f\u7528\u521a\u521a\u8bbe\u7f6e\u5e76\u6ce8\u518c\u7684 user_relu Op\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a user_relu_py_api.py \u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a import oneflow as flow def user_relu_forward ( x ): op = ( flow . user_op_builder ( \"myrelu\" ) . Op ( \"user_relu_forward\" ) . Input ( \"in\" , [ x ]) . Output ( \"out\" ) . Build () ) return op . InferAndTryRun () . SoleOutputBlob () flow.user_op_builder(\"op_myrelu\") \u5176\u5b9e\u4f1a\u8fd4\u56de\u4e00\u4e2a\u540d\u4e3a op_myrelu \u7684 UserOpConfBuilder \u5bf9\u8c61\u3002 \u8be5\u5bf9\u8c61\u5305\u542b Op \u3001 Input \u7b49\u65b9\u6cd5\uff0c\u7528\u4e8e\u5c01\u88c5\u81ea\u5b9a\u4e49 op\uff0c\u5177\u4f53\u89e3\u91ca\u5982\u4e0b\uff1a Op(\"user_relu_forward\") \uff1a\u53c2\u6570\u5fc5\u987b\u4e3a\u4e4b\u524d\u5728 C++ \u6ce8\u518c\u65f6\u7684 op_type_name \uff0cOneFlow \u901a\u8fc7\u5b83\u627e\u5230\u5df2\u7ecf\u6ce8\u518c\u7684 op \u7c7b\u578b\uff0c\u5e76\u5b9e\u4f8b\u5316 op \u5bf9\u8c61\u3002 Input(\"in\", [input_blob]) \uff1a\u5bf9\u5e94\u4e86 C++ \u4e2d op \u6ce8\u518c\u65f6\u7684 Input \uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5b57\u7b26\u4e32\u5fc5\u987b\u4e0e C++ \u6ce8\u518c op \u65f6\u7684 Input \u8bbe\u7f6e\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u8f93\u5165\u7684\u5f20\u91cf\uff0c\u662f\u4e00\u4e2a list \uff0c\u56e0\u4e3a\u4e00\u4e2a op \u5141\u8bb8\u6709\u591a\u4e2a\u8f93\u5165\u3002 Output(\"out\") \uff1a\u5bf9\u5e94\u4e86 C++ \u4e2d op \u6ce8\u518c\u65f6\u7684 Output \u3002 Build \uff1a\u4ee5\u4e0a\u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u8c03\u7528 Build \u53ef\u4ee5\u5f97\u5230\u81ea\u5b9a\u4e49 op \u7684 Python wrapper \u4ee5\u4e0b\u4ee3\u7801\uff0c\u5c06\u83b7\u53d6\u81ea\u5b9a\u4e49 op \u7684\u8f93\u51fa\uff1a return op . InferAndTryRun () . SoleOutputBlob () \u5176\u4e2d\u7684 InferAndTryRun \u5b8c\u6210\u63a8\u5bfc\uff0c\u8fd4\u56de UserOp \uff0c\u5982\u679c\u8fd4\u56de\u7ed3\u679c\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\uff0c\u5219\u4f7f\u7528 SoleOutputBlob \u5373\u53ef\u83b7\u53d6\u8be5\u552f\u4e00\u8f93\u51fa\uff0c\u5426\u5219\uff0c\u53ef\u4ee5\u4f7f\u7528 RemoteBlobList \u83b7\u53d6\u5305\u542b\u591a\u4e2a\u8f93\u51fa\u7684\u5217\u8868\u3002 \u4f7f\u7528 Python \u5b9e\u73b0 Kernel \u00b6 \u5982\u672c\u6587\u5f00\u59cb\u6240\u63cf\u8ff0\uff0cOp \u53ea\u662f\u903b\u8f91\u4e0a\u7684\u6982\u5ff5\uff0c\u771f\u6b63\u7684\u8ba1\u7b97\u9700\u8981 Kernel \u5b8c\u6210\uff0c\u5728 OneFlow \u4e2d\u53ef\u4ee5\u65e2\u53ef\u4ee5\u4f7f\u7528 C++ \u4e5f\u53ef\u4ee5\u4f7f\u7528 Python \u5b9e\u73b0 Kernel\uff0c\u672c\u6587\u53ea\u4ecb\u7ecd\u6700\u6613\u4e0a\u624b\u7684 Python Kernel \u7684\u5b9e\u73b0\u65b9\u6cd5\u3002\u4f7f\u7528 C++ \u5b9e\u73b0 Kernel \u53ef\u4ee5\u53c2\u8003 \u4f7f\u7528 C++ \u5f00\u53d1 Kernel \u3002 \u4e3a\u4e86\u4e3a\u6211\u4eec\u4e0a\u6587\u8bbe\u7f6e\u7684 user_relu Op \u63d0\u4f9b Python Kernel\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a user_relu_py_kernel.py \u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a import numpy as np def forward ( args ): ( x ,) = args y = ( x > 0 ) * x return y \u4ee5\u4e0a\u7684 forward \u65b9\u6cd5\u662f\u5fc5\u9700\u5b9e\u73b0\u7684\uff0c\u5b83\u7684\u5b9e\u73b0\u5bf9\u5e94\u4e86\u6211\u4eec Op \u7684 Python Kernel\u3002\u5173\u4e8e\u5b83\u7684\u7ea6\u5b9a\u6709\uff1a \u65b9\u6cd5\u540d\u5fc5\u9700\u4e3a forward \u53c2\u6570\u53ea\u6709\u4e00\u4e2a\uff0c\u7c7b\u578b\u4e3a tuple \uff0c tuple \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u548c\u987a\u5e8f\uff0c\u4e0e Op \u6ce8\u518c\u65f6\u7684 Input \u5bf9\u5e94\u3002\u5982\u6211\u4eec\u4e4b\u524d\u4e3a user_relu \u6ce8\u518c\u4e86 Input(\"in\") \uff0c\u90a3\u4e48\u4ee5\u4e0a\u4ee3\u7801\u4e2d (x, ) = args \u4e2d\u7684 x \u5c31\u53d6\u5230 in \u7684\u503c \u8f93\u51fa\u4e0e Op \u6ce8\u518c\u65f6\u7684 Output \u5bf9\u5e94 \u53c2\u6570\u4e0e\u8fd4\u56de\u503c\u5747\u4e3a numpy \u5bf9\u8c61\uff0c\u5373\u4e0d\u80fd\uff08\u4e0d\u4f1a\uff09\u662f\u5b57\u7b26\u4e32\u3001\u6574\u578b\u6570\u5b57\u7b49\u5176\u5b83\u7c7b\u578b \u4f7f\u7528\u81ea\u5b9a\u4e49 Op \u00b6 \u5b8c\u6210\u4ee5\u4e0a\u5de5\u4f5c\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u540d\u4e3a user_relu \u7684\u76ee\u5f55\uff0c\u5305\u542b\u4e09\u4e2a\u6587\u4ef6\uff0c\u5b83\u4eec\u7684\u7ed3\u6784\u5982\u4e0b\uff1a user_relu/ \u251c\u2500\u2500 user_relu_cpp_def.cpp \u251c\u2500\u2500 user_relu_py_api.py \u2514\u2500\u2500 user_relu_py_kernel.py \u6211\u4eec\u53ef\u4ee5\u5728 user_relu \u6587\u4ef6\u5939\u6240\u5728\u7684\u8def\u5f84\uff0c\u521b\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff0c\u8c03\u7528\u521a\u521a\u5b9e\u73b0\u7684\u81ea\u5b9a\u4e49 Op\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a import oneflow as flow import numpy as np import os import oneflow.typing as tp # \u6839\u636e\u6307\u5b9a\u7684\u8def\u5f84\u4e0e op_type_name \u521b\u5efa module \u5bf9\u8c61 module_path = os . path . dirname ( os . path . abspath ( __file__ )) user_relu_op = flow . experimental . custom_op_module ( \"user_relu\" , module_path ) # \u4f7f Op, Python API, Python Kernel \u751f\u6548 user_relu_op . py_api () . cpp_def () . py_kernel () . build_load () @flow . global_function () def MyJob ( x : tp . Numpy . Placeholder (( 5 ,), dtype = flow . float32 )) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): return user_relu_op . api . user_relu_forward ( x ) if __name__ == \"__main__\" : input = np . array ([ - 2 , - 1 , 0 , 1 , 2 ], dtype = np . float32 ) output = MyJob ( input ) print ( input ) print ( output ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u5148\u901a\u8fc7 flow.experimental.custom_op_module \u521b\u5efa module \u5bf9\u8c61\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a op_type_name \uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a user_relu \u6587\u4ef6\u5939\u6240\u5728\u7684\u8def\u5f84\u3002\u8fd4\u56de\u7684 module \u5bf9\u8c61\uff0c\u4ee3\u8868\u4e86\u6211\u4eec\u81ea\u5b9a\u4e49\u7684 Op\u3002 \u63a5\u7740\uff0c\u901a\u8fc7 user_sigmoid_op.py_api().cpp_def().py_kernel().build_load() \u53ef\u4ee5\u4f7f\u81ea\u5b9a\u4e49 Op \u751f\u6548\uff0c\u751f\u6548\u540e\u7684 Op \u7684 Python \u63a5\u53e3\uff0c\u5c31\u662f\u5b9a\u4e49\u5728 user_relu_py_api.py \u6587\u4ef6\u4e2d\u7684\u65b9\u6cd5\u540d( user_relu_forward )\uff0c\u5b83\u88ab\u653e\u7f6e\u5728 moudle \u5bf9\u8c61\u7684 api \u540d\u79f0\u7a7a\u95f4\u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8c03\u7528: user_sigmoid_op . api . user_relu_forward ( x ) \u4e14\u56e0\u4e3a Python Kernel \u53ea\u80fd\u8fd0\u884c\u5728 CPU \u8bbe\u5907\u4e0a\uff0c\u56e0\u6b64\u9700\u8981\u6307\u5b9a\u8ba1\u7b97\u8bbe\u5907\u4e3a CPU\uff1a with flow . scope . placement ( \"cpu\" , \"0:0\" ): \u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97 \u00b6 \u6211\u4eec\u901a\u8fc7\u4e0a\u8ff0\u5de5\u4f5c\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86 user_relu \u7b97\u5b50\u7684\u6b63\u5411\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u7528\u4e8e type=\"predict\" \u7684\u4f5c\u4e1a\u51fd\u6570\u3002\u4f46\u662f\uff0c\u5982\u679c\u60f3\u652f\u6301 type=\"train\" \u7c7b\u578b\u7684\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u8fd8\u9700\u8981\u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97\u3002 \u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97\u7684\u4ee3\u7801\uff0c\u9700\u8981\u5199\u5728 op_type_name_cpp_def.cpp \u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u5b8f REGISTER_USER_OP_GRAD \u8fdb\u884c\u6ce8\u518c\u3002 \u4ece\u6570\u5b66\u89d2\u5ea6\u4e0a\u770b\uff0c\u6ce8\u518c\u8fc7\u7a0b\u5c31\u662f\u6211\u4eec\u4e3a\u81ea\u5b9a\u4e49\u7684 op\uff0c\u6307\u5b9a\u540e\u5411\u6c42\u68af\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002\u4ece\u7f16\u7a0b\u89d2\u5ea6\u770b\uff0c\u5c31\u662f\u4e3a\u81ea\u5b9a\u4e49 op \u8bbe\u7f6e\u4e00\u4e2a\u540e\u5411\u751f\u6210\u51fd\u6570\uff0c\u5728\u8be5\u51fd\u6570\u4e2d\uff0c\u7f16\u5199\u4ee3\u7801\uff0c\u6307\u5b9a\u8fd9\u4e2a op \u7684\u8f93\u5165\u68af\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002 \u4ee5\u4e0b\uff0c\u6211\u4eec\u5c06\u4e13\u95e8\u5b9e\u73b0\u4e00\u4e2a Op\uff0c\u540d\u4e3a user_relu_backward \u3002\u6211\u4eec\u5c06\u5728\u4e3a user_relu \u6ce8\u518c\u540e\u5411\u68af\u5ea6\u65f6\uff0c\u7528\u5230\u8fd9\u4e2a\u201c\u4e13\u95e8\u5b9a\u5236\u201d\u7684 Op\u3002 \u5b9e\u73b0 user_relu_backward Op \u00b6 \u5b9e\u73b0 user_relu_backward Op \u7684\u8fc7\u7a0b\u4e0e\u5b9e\u73b0 user_relu \u7684\u524d\u5411\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u9996\u5148\uff0c\u5728 user_relu_cpp_def.cpp \u4e2d\u8bbe\u7f6e\u5e76\u6ce8\u518c\u8be5 Op\uff1a REGISTER_USER_OP ( \"user_relu_backward\" ) . Input ( \"y\" ) . Input ( \"dy\" ) . Output ( \"dx\" ) . Attr < std :: string > ( \"device_sub_tag\" , \"py\" ) . SetTensorDescInferFn ([]( user_op :: InferContext * ctx ) -> Maybe < void > { const Shape * dy_shape = ctx -> Shape4ArgNameAndIndex ( \"dy\" , 0 ); Shape * dx_shape = ctx -> Shape4ArgNameAndIndex ( \"dx\" , 0 ); * dx_shape = * dy_shape ; return Maybe < void >:: Ok (); }); \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u540c\u524d\u5411\u7c7b\u4f3c\uff0c\u4ee5\u4e0a\u4ee3\u7801\u4e2d .Attr<std::string>(\"device_sub_tag\", \"py\") \u5fc5\u4e0d\u53ef\u5c11\uff0c\u5b83\u544a\u77e5 OneFlow \u5728\u4f7f\u7528\u8be5 Op \u65f6\uff0c\u9ed8\u8ba4\u8c03\u7528 Python Kernel\u3002 \u540c\u7406\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u7528\u6237\u76f4\u63a5\u8c03\u7528\u8fd9\u4e2a user_relu_backward Op\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u5728 user_relu_py_api.py \u4e3a user_relu_backward \u5c01\u88c5 Python \u63a5\u53e3\u3002\u53ef\u4ee5\u76f4\u63a5\u5b9e\u73b0\u5b83\u7684 Python Kernel\u3002 \u5728 user_relu_py_kernel.py \u4e2d\uff0c\u5b9e\u73b0 backward \u65b9\u6cd5\uff1a def backward ( args ): ( y , dy ) = args dx = ( y > 0 ) * dy return dx \u5b83\u7684\u53c2\u6570\u662f\u4e00\u4e2a tuple \uff0c\u6570\u76ee\u548c\u987a\u5e8f\u5bf9\u5e94\u4e86 Op \u6ce8\u518c\u65f6\u7684 Input \uff0c\u8f93\u51fa\u5bf9\u5e94\u4e86 Op \u6ce8\u518c\u65f6\u7684 Output\u3002 \u4e3a Op \u6ce8\u518c\u53cd\u5411\u68af\u5ea6 \u00b6 \u6211\u4eec\u9700\u8981\u5728 user_relu_cpp_def.cpp \u4e2d\uff0c\u901a\u8fc7\u5b8f REGISTER_USER_OP_GRAD \u4e3a\u6211\u4eec\u7684\u6b63\u5411 Op ( user_relu_forward ) \u6ce8\u518c\u53cd\u5411\u3002 \u5176\u4ee3\u7801\u5982\u4e0b\uff1a REGISTER_USER_OP_GRAD ( \"user_relu_forward\" ) . SetBackwardOpConfGenFn ([]( user_op :: BackwardOpConfContext * ctx ) { const auto grad_op_name = ctx -> FwOp (). op_name () + \"_grad\" ; const auto & grad_op_func = [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"user_relu_backward\" ) . InputBind ( \"y\" , ctx -> FwOp (). output ( \"y\" , 0 )) . InputBind ( \"dy\" , ctx -> FwOp (). output_grad ( \"y\" , 0 )) . Output ( \"dx\" ) . Build (); }; ctx -> DefineOp ( grad_op_name , grad_op_func ); const auto & dx_get_func = [ & ctx , & grad_op_name ]() -> const std :: string & { return ctx -> GetOp ( grad_op_name ). output ( \"dx\" , 0 ); }; ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"x\" , 0 ), dx_get_func ); }); \u6211\u4eec\u5bf9\u4ee5\u4e0a\u4ee3\u7801\u8fdb\u884c\u89e3\u91ca\uff0c\u901a\u8fc7 REGISTER_USER_OP_GRAD(\"user_relu_forward\") \u6ce8\u518c\u4e3a\u524d\u5411 Op \u6ce8\u518c\u540e\u5411\u6c42\u68af\u5ea6\u89c4\u5219\uff0c\u8be5\u5b8f\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u5c31\u662f \u524d\u5411\u7684 op_type_name \u3002 \u7136\u540e\u901a\u8fc7 SetBackwardOpConfGenFn \u8bbe\u7f6e\u540e\u5411\u6c42\u68af\u5ea6\u89c4\u5219\uff0c\u540c Op \u7c7b\u4f3c\uff0c\u5728 op_type_name_cpp_def.cpp \u4e2d\u6ce8\u518c\u540e\u5411\uff0c\u5176\u5b9e\u4e0d\u6d89\u53ca\u771f\u6b63\u7684\u8fd0\u7b97\uff0c\u800c\u662f\u8bbe\u7f6e\u540e\u5411\u8ba1\u7b97\u4e0e\u524d\u5411\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u544a\u8bc9 OneFlow \u6846\u67b6\uff1a \u7528\u4ec0\u4e48 Op \u6c42\u540e\u5411\u68af\u5ea6 \u8be5 Op \u7684\u8f93\u5165\u6765\u81ea\u54ea\u91cc\uff0c\u548c\u524d\u5411 Op \u4ec0\u4e48\u5173\u7cfb \u56e0\u6b64\uff0c\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684\uff1a const auto & grad_op_func = [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"user_relu_backward\" ) . InputBind ( \"y\" , ctx -> FwOp (). output ( \"y\" , 0 )) . InputBind ( \"dy\" , ctx -> FwOp (). output_grad ( \"y\" , 0 )) . Output ( \"dx\" ) . Build (); }; \u5b9a\u4e49\u4e86 Op \u6c42\u68af\u5ea6\u7684\u65b9\u6cd5\uff1a\u4f7f\u7528 user_relu_backward \u7b97\u5b50\uff0c\u5e76\u4e14\u5c06\u524d\u5411\u7684\u8f93\u51fa y \u4f5c\u4e3a user_relu_backward \u7684\u8f93\u5165 y \uff1b\u5c06\u524d\u5411\u7684\u8f93\u51fa y \u7684\u68af\u5ea6\uff0c\u4f5c\u4e3a user_relu_backward \u7684\u8f93\u5165 dy \uff1b\u6700\u540e\u8f93\u51fa dx \u3002 \u5b9a\u5b8c\u6c42\u68af\u5ea6\u7684\u65b9\u6cd5\u540e\uff0c\u9700\u8981\u8c03\u7528 ctx -> DefineOp ( grad_op_name , grad_op_func ); \u4f7f\u4e4b\u751f\u6548\u3002 \u4e4b\u540e\u7684\u4ee3\u7801\uff1a const auto & dx_get_func = [ & ctx , & grad_op_name ]() -> const std :: string & { return ctx -> GetOp ( grad_op_name ). output ( \"dx\" , 0 ); }; ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"x\" , 0 ), dx_get_func ); \u662f\u5c06\u524d\u5411\u7684\u8f93\u5165 x \u548c\u521a\u521a\u8bbe\u7f6e\u7684\u6c42\u68af\u5ea6\u7684\u65b9\u6cd5\u7684\u8f93\u51fa( dx ) \u7ed1\u5b9a\u5230\u4e00\u8d77\uff0c\u8fd9\u6837\uff0c\u4f7f\u7528 OneFlow \u8bad\u7ec3\u65f6\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u6c42\u5bfc\u3002 \u5176\u5b83 \u00b6 \u672c\u6587\u6d89\u53ca\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u67e5\u770b Op \u6ce8\u518c\u7684\u66f4\u591a\u9ad8\u7ea7\u8bbe\u7f6e\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u6ce8\u518c\u53cd\u5411\u68af\u5ea6\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5df2\u6709\u7684 Op\uff0c\u800c\u65e0\u9700\u4e13\u95e8\u5b9a\u5236\u53cd\u5411 Op\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc","title":"\u4f7f\u7528 Python \u6269\u5c55 Op"},{"location":"extended_topics/python_kernel_op.html#python-op","text":"\u6ce8\u610f \uff1a\u672c\u6587\u6d89\u53ca\u7684 Python Kernel \u4ec5\u5728 gcc 4.8.5 \u7f16\u8bd1\u73af\u5883\u4e0b\u5145\u5206\u6d4b\u8bd5\uff0c\u8fdb\u4e00\u6b65\u7684\u5b8c\u5584\u8ba1\u5212\u89c1 Issue 3951 \u3002","title":"\u4f7f\u7528 Python \u6269\u5c55 Op"},{"location":"extended_topics/python_kernel_op.html#_1","text":"OneFlow \u5c06\u5404\u79cd\u5bf9\u4e8e\u6570\u636e\u7684\u5904\u7406\u90fd\u62bd\u8c61\u6210\u4e86\u7b97\u5b50\uff08operator\uff09\uff0c\u7b80\u79f0 op\u3002 op \u662f\u4f5c\u7528\u5728\u8f93\u5165 tensor \u4e0a\u7684\u64cd\u4f5c\uff0c\u5e76\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u5199\u5230\u8f93\u51fa tensor \u4e0a\u3002OneFlow \u5185\u90e8\u5df2\u7ecf\u63d0\u4f9b\u4e86\u6bd4\u8f83\u5b8c\u5907\u7684 op \u7b97\u5b50\uff0c\u53ef\u4ee5\u5728 ops \u76ee\u5f55 \u4e0b\u627e\u5230\u3002 \u5f53 OneFlow \u5df2\u6709\u7684 Python \u7b97\u5b50\u53ca\u5176\u7ec4\u5408\u65e0\u6cd5\u6ee1\u8db3\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u7684\u9700\u6c42\uff0c\u6216\u8005 Python \u5c42\u6b21\u7684\u7b97\u5b50\u65e0\u6cd5\u6ee1\u8db3\u6027\u80fd\u9700\u6c42\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u53d1\u81ea\u5b9a\u4e49 op\u3002OneFlow \u63d0\u4f9b\u4e86\u4e24\u7c7b\u5f00\u53d1\u81ea\u5b9a\u4e49 Op \u7684\u9014\u5f84\uff0c\u4e00\u7c7b\u662f\u4ee5 Python \u4e3a\u4e3b\u7684 Python Kernel \u5f00\u53d1\uff0c\u53e6\u5916\u4e00\u7c7b\u662f \u4f7f\u7528 C++ \u6269\u5c55 Op \u4e00\u6587\u4ecb\u7ecd\u7684 C++ Kernel \u5f00\u53d1\u3002 Python Kernel \u56e0\u4e3a\u4e3b\u8981\u91c7\u7528 Python \u8fdb\u884c\u6269\u5c55\uff0c\u5f00\u53d1\u6d41\u7a0b\u8f83\u7b80\u5355\uff0c\u9002\u7528\u4e8e\u5feb\u901f\u9884\u7814\u3001\u7b97\u6cd5\u9a8c\u8bc1\u7b49\u573a\u666f\u3002 C++ Kernel \u6548\u7387\u9ad8\uff0c\u9002\u7528\u4e8e\u5f00\u53d1\u5df2\u7ecf\u9a8c\u8bc1\u7a33\u5065\u6027\u5e76\u8ffd\u6c42\u6027\u80fd\u7684\u7b97\u5b50\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd\u4ecb\u7ecd\u7b97\u5b50\u5f00\u53d1\u7684\u80cc\u666f\u77e5\u8bc6\u548c\u57fa\u672c\u6982\u5ff5\uff0c\u5e76\u5c55\u793a\u5982\u4f55\u5f00\u53d1 Python Kernel \u3002","title":"\u80cc\u666f\u4ecb\u7ecd"},{"location":"extended_topics/python_kernel_op.html#_2","text":"\u5728\u8fdb\u884c OneFlow \u7b97\u5b50\u5f00\u53d1\u524d\uff0c\u9700\u8981\u4e86\u89e3 op_type_name \u3001 Op \u4ee5\u53ca Kernel \u8fd9\u51e0\u4e2a\u6982\u5ff5\uff1a op_type_name\uff1aop_type_name \u662f op \u7c7b\u522b\u7684\u5168\u5c40\u552f\u4e00 ID\uff0c OneFlow \u901a\u8fc7 op_type_name \u67e5\u8be2\u5e76\u786e\u8ba4 op \u7684\u79cd\u7c7b\uff0c\u8fdb\u800c\u5b9e\u4f8b\u5316 op\uff0c\u7528\u4e8e\u6784\u5efa\u8ba1\u7b97\u56fe\u3002op \u7684\u79cd\u7c7b\u4e0e op \u7684\u5173\u7cfb\uff0c\u7c7b\u4f3c\u4e8e\u7c7b\u4e0e\u5bf9\u8c61\u7684\u5173\u7cfb\u3002 op\uff1a\u903b\u8f91\u4e0a\u7684\u7b97\u5b50\uff0c\u5305\u542b\u6784\u56fe\u63a8\u7406\u65f6\u7684\u8f93\u5165\u8f93\u51fa\u5f62\u72b6\u7b49\u4fe1\u606f\uff0c\u4e0d\u5305\u542b\u5177\u4f53\u7684\u5904\u7406\u6570\u636e\u7684\u903b\u8f91\u3002 kernel\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684 op\uff0c\u5728\u8fd0\u884c\u65f6\uff0c\u5904\u7406\u7684\u903b\u8f91\u4f1a\u56e0\u4e3a\u7269\u7406\u8bbe\u5907\u4ee5\u53ca\u6570\u636e\u7c7b\u578b\u7684\u4e0d\u540c\u3002\u8fd0\u884c\u65f6\u7684\u5177\u4f53\u5904\u7406\u903b\u8f91\uff0c\u7531 kernel \u5b8c\u6210\u3002\u7b80\u5355\u800c\u8a00\uff0cop \u4e0e kernel \u662f\u4e00\u5bf9\u591a\u7684\u5173\u7cfb\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Python \u5b8c\u6210\u5177\u4f53\u8fd0\u7b97\uff0c\u8fd9\u6837\u7684Kernel \u79f0\u4e3a Python Kernel \uff0c\u4e5f\u53ef\u4ee5 \u4f7f\u7528 C++ \u5f00\u53d1 Kernel \u3002 OneFlow \u7684\u5185\u6838\u7531 C++ \u5b9e\u73b0\uff0c\u4f46\u662f\u7528\u6237\u63a5\u53e3\u4f7f\u7528 Python\uff0c\u56e0\u6b64\u9700\u8981\u6309\u7167\u7ea6\u5b9a\u7f16\u5199 Python Wrapper \uff0c\u4f7f\u5f97 Python Op \u63a5\u53e3\u80fd\u4e0e C++ \u5185\u6838\u4ea4\u4e92\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"extended_topics/python_kernel_op.html#_3","text":"\u4f7f\u7528 Python \u6269\u5c55 Op\uff0c\u5e94\u8be5\u51c6\u5907\u4e00\u4e2a\u4ee5 op_type_name \u547d\u540d\u7684\u76ee\u5f55\uff0c\u5728\u8be5\u76ee\u5f55\u4e0b\uff0c\u6309\u7167\u7ea6\u5b9a\u653e\u7f6e\u5fc5\u9700\u7684\u6587\u4ef6\uff0c\u4ee5 oneflow/python/test/custom_ops/user_sigmoid \u4e3a\u4f8b\uff1a user_sigmoid \u251c\u2500\u2500 user_sigmoid_cpp_def.cpp \u251c\u2500\u2500 user_sigmoid_py_api.py \u2514\u2500\u2500 user_sigmoid_py_kernel.py \u5176\u4e2d\uff1a op_type_name_cpp_def.cpp (\u4ee5\u4e0a\u7684 user_sigmoid_cpp_def.cpp ) \u6587\u4ef6\u4e2d\u653e\u7f6e Op \u5b9a\u4e49\u4fe1\u606f op_type_name_py_api.py (\u4ee5\u4e0a\u7684 user_sigmoid_py_api.py )\u6587\u4ef6\u4e2d\u653e\u7f6e Python Wrapper \uff0c\u901a\u8fc7 oneflow.user_op_builder \u5c06\u5b9e\u73b0\u7684 Python Kernel \u5bfc\u51fa\u7ed9\u7528\u6237\u4f7f\u7528 op_type_name_py_kernel.py (\u4ee5\u4e0a\u7684 user_sigmoid_py_kernel.py )\u6587\u4ef6\u4e2d\u653e\u7f6e Python \u5b9e\u73b0\u7684\u81ea\u5b9a\u4e49\u7b97\u5b50\u7684\u524d\u5411\u8ba1\u7b97\u903b\u8f91\u548c\u540e\u5411\u8ba1\u7b97\u903b\u8f91 \u4e0b\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528 Python \u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684 user_relu Op\uff0c\u5b83\u5305\u62ec\uff1a \u5982\u4f55\u7f16\u5199 op_type_name_cpp_def.cpp \u6587\u4ef6\uff0c\u5b9a\u4e49 Op \u4fe1\u606f \u5982\u4f55\u7f16\u5199 op_type_name_py_api.py \u6587\u4ef6\uff0c\u5c01\u88c5 Op \u7684 Python \u63a5\u53e3 \u5982\u4f55\u7f16\u5199 op_type_name_py_kernel.py \u6587\u4ef6\uff0c\u4f7f\u7528 Python \u5b9e\u73b0 Op \u7684\u8ba1\u7b97 Kernel \u5728 OneFlow \u4e2d\u5982\u4f55\u4f7f\u7528 Python Kernel \u7c7b\u578b\u7684\u81ea\u5b9a\u4e49 Op","title":"\u5f00\u53d1\u6b65\u9aa4"},{"location":"extended_topics/python_kernel_op.html#op","text":"\u9996\u5148\uff0c\u6211\u4eec\u5728 user_relu_cpp_def.cpp \u4e2d\u5b9a\u4e49 op \u5e76\u5b8c\u6210\u6ce8\u518c\uff1a #include \"oneflow/core/framework/framework.h\" namespace oneflow { namespace { REGISTER_USER_OP ( \"user_relu_forward\" ) . Attr < std :: string > ( \"device_sub_tag\" , \"py\" ) . Input ( \"in\" ) . Output ( \"out\" ) . SetTensorDescInferFn ( []( user_op :: InferContext * ctx ) -> Maybe < void > { * ctx -> Shape4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Shape4ArgNameAndIndex ( \"in\" , 0 ); * ctx -> Dtype4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Dtype4ArgNameAndIndex ( \"in\" , 0 ); return Maybe < void >:: Ok (); }); } // namespace } // namespace oneflow \u5206\u6790\u4ee5\u4e0a\u4ee3\u7801\uff1a oneflow/core/framework/framework.h \u4e2d\u5305\u542b\u4e86\u6211\u4eec\u521b\u5efa\u4e00\u4e2a op \u6240\u9700\u8981\u7684\u6240\u6709\u63a5\u53e3 .Attr<std::string>(\"device_sub_tag\", \"py\") \u662f\u5fc5\u9700\u7684\uff0c\u5b83\u544a\u77e5 OneFlow \u5728\u4f7f\u7528\u8be5 Op \u65f6\u9ed8\u8ba4\u8c03\u7528Python Kernel \u4e0e\u81ea\u5b9a\u4e49 op \u6709\u5173\u7684\u63a5\u53e3\u96c6\u4e2d\u5728 oneflow::user_op \u4e2d\uff0c\u4f7f\u7528\u540d\u79f0\u7a7a\u95f4 oneflow \u53ef\u4ee5\u7b80\u5316\u7c7b\u578b\u540d\u79f0 \u5b8f REGISTER_USER_OP \u7528\u4e8e\u6ce8\u518c op\uff0c\u5176\u63a5\u53d7\u7684\u53c2\u6570 user_relu_forward \u662f op_type_name \u3002 \u4f7f\u7528 REGISTER_USER_OP \u6ce8\u518c\u540e\uff0c\u5176\u5b9e\u4f1a\u8fd4\u56de\u4e00\u4e2a OpRegistry \u7c7b\uff08\u4f4d\u4e8e user_op_registry.h )\uff0c\u901a\u8fc7\u8c03\u7528\u8be5\u7c7b\u65b9\u6cd5\uff0c\u5b8c\u6210\u5bf9\u81ea\u5b9a\u4e49 op \u7684\u8bbe\u7f6e\uff1a Input(\"in\") \u8868\u793a\u5176\u6709\u4e00\u4e2a\u540d\u4e3a \"in\" \u7684\u8f93\u5165 Output(\"out\") \u8868\u793a\u5176\u6709\u4e00\u4e2a\u540d\u4e3a \"out\" \u7684\u8f93\u51fa SetTensorDescInferFn \u7528\u4e8e\u8bbe\u7f6e\u5f62\u72b6\u53ca\u6570\u636e\u7c7b\u578b\u63a8\u5bfc\u51fd\u6570\uff0c\u63cf\u8ff0\u8be5\u7b97\u5b50\u7684\u8f93\u51fa\u7684\u5f62\u72b6\u53ca\u7c7b\u578b\u4e0e\u8f93\u5165\u7684\u5173\u7cfb\u3002\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u8f93\u51fa\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u4e0e\u8f93\u5165\u7684\u4e00\u81f4 op_type_name_cpp_def.cpp \u6587\u4ef6\u662f\u5b9e\u73b0 Python Kernel \u8fc7\u7a0b\u4e2d\u552f\u4e00\u4f1a\u4f7f\u7528\u5230\u7684 C++ \u6587\u4ef6\uff0c\u5b83\u7528\u4e8e\u8bbe\u7f6e Op \u7684\u4fe1\u606f\uff0c\u5728\u73b0\u9636\u6bb5\uff0c\u8fd8\u65e0\u6cd5\u5c06\u4f7f\u7528 C++ \u914d\u7f6e Op \u7684\u6b65\u9aa4\u7701\u7565\uff08\u56e0\u4e3a\u8bbe\u7f6e\u5206\u5e03\u5f0f\u7b49\u9ad8\u7ea7\u4fe1\u606f\u65f6\u5fc5\u9700\uff09\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u770b\u5230\uff0c\u8be5\u6587\u4ef6\u5e76\u4e0d\u6d89\u53ca\u5177\u4f53\u7684\u8fd0\u7b97\uff0c\u4ec5\u4ec5\u662f\u7528\u4e8e\u63cf\u8ff0 Op\uff0c\u5373\u4f7f\u4e0d\u719f\u6089 C++\uff0c\u6839\u636e\u6211\u4eec\u7684\u793a\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u638c\u63e1\u3002","title":"Op \u7684\u5b9e\u73b0\u4e0e\u6ce8\u518c"},{"location":"extended_topics/python_kernel_op.html#op-python","text":"\u4e3a\u4e86\u7528\u6237\u53ef\u4ee5\u5728 Python \u5c42\u4f7f\u7528\u521a\u521a\u8bbe\u7f6e\u5e76\u6ce8\u518c\u7684 user_relu Op\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a user_relu_py_api.py \u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a import oneflow as flow def user_relu_forward ( x ): op = ( flow . user_op_builder ( \"myrelu\" ) . Op ( \"user_relu_forward\" ) . Input ( \"in\" , [ x ]) . Output ( \"out\" ) . Build () ) return op . InferAndTryRun () . SoleOutputBlob () flow.user_op_builder(\"op_myrelu\") \u5176\u5b9e\u4f1a\u8fd4\u56de\u4e00\u4e2a\u540d\u4e3a op_myrelu \u7684 UserOpConfBuilder \u5bf9\u8c61\u3002 \u8be5\u5bf9\u8c61\u5305\u542b Op \u3001 Input \u7b49\u65b9\u6cd5\uff0c\u7528\u4e8e\u5c01\u88c5\u81ea\u5b9a\u4e49 op\uff0c\u5177\u4f53\u89e3\u91ca\u5982\u4e0b\uff1a Op(\"user_relu_forward\") \uff1a\u53c2\u6570\u5fc5\u987b\u4e3a\u4e4b\u524d\u5728 C++ \u6ce8\u518c\u65f6\u7684 op_type_name \uff0cOneFlow \u901a\u8fc7\u5b83\u627e\u5230\u5df2\u7ecf\u6ce8\u518c\u7684 op \u7c7b\u578b\uff0c\u5e76\u5b9e\u4f8b\u5316 op \u5bf9\u8c61\u3002 Input(\"in\", [input_blob]) \uff1a\u5bf9\u5e94\u4e86 C++ \u4e2d op \u6ce8\u518c\u65f6\u7684 Input \uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u5b57\u7b26\u4e32\u5fc5\u987b\u4e0e C++ \u6ce8\u518c op \u65f6\u7684 Input \u8bbe\u7f6e\u7684\u5b57\u7b26\u4e32\u4e00\u81f4\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u8f93\u5165\u7684\u5f20\u91cf\uff0c\u662f\u4e00\u4e2a list \uff0c\u56e0\u4e3a\u4e00\u4e2a op \u5141\u8bb8\u6709\u591a\u4e2a\u8f93\u5165\u3002 Output(\"out\") \uff1a\u5bf9\u5e94\u4e86 C++ \u4e2d op \u6ce8\u518c\u65f6\u7684 Output \u3002 Build \uff1a\u4ee5\u4e0a\u8bbe\u7f6e\u5b8c\u6210\u540e\uff0c\u8c03\u7528 Build \u53ef\u4ee5\u5f97\u5230\u81ea\u5b9a\u4e49 op \u7684 Python wrapper \u4ee5\u4e0b\u4ee3\u7801\uff0c\u5c06\u83b7\u53d6\u81ea\u5b9a\u4e49 op \u7684\u8f93\u51fa\uff1a return op . InferAndTryRun () . SoleOutputBlob () \u5176\u4e2d\u7684 InferAndTryRun \u5b8c\u6210\u63a8\u5bfc\uff0c\u8fd4\u56de UserOp \uff0c\u5982\u679c\u8fd4\u56de\u7ed3\u679c\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\uff0c\u5219\u4f7f\u7528 SoleOutputBlob \u5373\u53ef\u83b7\u53d6\u8be5\u552f\u4e00\u8f93\u51fa\uff0c\u5426\u5219\uff0c\u53ef\u4ee5\u4f7f\u7528 RemoteBlobList \u83b7\u53d6\u5305\u542b\u591a\u4e2a\u8f93\u51fa\u7684\u5217\u8868\u3002","title":"\u5c01\u88c5 Op \u7684 Python \u63a5\u53e3"},{"location":"extended_topics/python_kernel_op.html#python-kernel","text":"\u5982\u672c\u6587\u5f00\u59cb\u6240\u63cf\u8ff0\uff0cOp \u53ea\u662f\u903b\u8f91\u4e0a\u7684\u6982\u5ff5\uff0c\u771f\u6b63\u7684\u8ba1\u7b97\u9700\u8981 Kernel \u5b8c\u6210\uff0c\u5728 OneFlow \u4e2d\u53ef\u4ee5\u65e2\u53ef\u4ee5\u4f7f\u7528 C++ \u4e5f\u53ef\u4ee5\u4f7f\u7528 Python \u5b9e\u73b0 Kernel\uff0c\u672c\u6587\u53ea\u4ecb\u7ecd\u6700\u6613\u4e0a\u624b\u7684 Python Kernel \u7684\u5b9e\u73b0\u65b9\u6cd5\u3002\u4f7f\u7528 C++ \u5b9e\u73b0 Kernel \u53ef\u4ee5\u53c2\u8003 \u4f7f\u7528 C++ \u5f00\u53d1 Kernel \u3002 \u4e3a\u4e86\u4e3a\u6211\u4eec\u4e0a\u6587\u8bbe\u7f6e\u7684 user_relu Op \u63d0\u4f9b Python Kernel\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a user_relu_py_kernel.py \u6587\u4ef6\uff0c\u5176\u5185\u5bb9\u5982\u4e0b\uff1a import numpy as np def forward ( args ): ( x ,) = args y = ( x > 0 ) * x return y \u4ee5\u4e0a\u7684 forward \u65b9\u6cd5\u662f\u5fc5\u9700\u5b9e\u73b0\u7684\uff0c\u5b83\u7684\u5b9e\u73b0\u5bf9\u5e94\u4e86\u6211\u4eec Op \u7684 Python Kernel\u3002\u5173\u4e8e\u5b83\u7684\u7ea6\u5b9a\u6709\uff1a \u65b9\u6cd5\u540d\u5fc5\u9700\u4e3a forward \u53c2\u6570\u53ea\u6709\u4e00\u4e2a\uff0c\u7c7b\u578b\u4e3a tuple \uff0c tuple \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u548c\u987a\u5e8f\uff0c\u4e0e Op \u6ce8\u518c\u65f6\u7684 Input \u5bf9\u5e94\u3002\u5982\u6211\u4eec\u4e4b\u524d\u4e3a user_relu \u6ce8\u518c\u4e86 Input(\"in\") \uff0c\u90a3\u4e48\u4ee5\u4e0a\u4ee3\u7801\u4e2d (x, ) = args \u4e2d\u7684 x \u5c31\u53d6\u5230 in \u7684\u503c \u8f93\u51fa\u4e0e Op \u6ce8\u518c\u65f6\u7684 Output \u5bf9\u5e94 \u53c2\u6570\u4e0e\u8fd4\u56de\u503c\u5747\u4e3a numpy \u5bf9\u8c61\uff0c\u5373\u4e0d\u80fd\uff08\u4e0d\u4f1a\uff09\u662f\u5b57\u7b26\u4e32\u3001\u6574\u578b\u6570\u5b57\u7b49\u5176\u5b83\u7c7b\u578b","title":"\u4f7f\u7528 Python \u5b9e\u73b0 Kernel"},{"location":"extended_topics/python_kernel_op.html#op_1","text":"\u5b8c\u6210\u4ee5\u4e0a\u5de5\u4f5c\u540e\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u540d\u4e3a user_relu \u7684\u76ee\u5f55\uff0c\u5305\u542b\u4e09\u4e2a\u6587\u4ef6\uff0c\u5b83\u4eec\u7684\u7ed3\u6784\u5982\u4e0b\uff1a user_relu/ \u251c\u2500\u2500 user_relu_cpp_def.cpp \u251c\u2500\u2500 user_relu_py_api.py \u2514\u2500\u2500 user_relu_py_kernel.py \u6211\u4eec\u53ef\u4ee5\u5728 user_relu \u6587\u4ef6\u5939\u6240\u5728\u7684\u8def\u5f84\uff0c\u521b\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u6587\u4ef6\uff0c\u8c03\u7528\u521a\u521a\u5b9e\u73b0\u7684\u81ea\u5b9a\u4e49 Op\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a import oneflow as flow import numpy as np import os import oneflow.typing as tp # \u6839\u636e\u6307\u5b9a\u7684\u8def\u5f84\u4e0e op_type_name \u521b\u5efa module \u5bf9\u8c61 module_path = os . path . dirname ( os . path . abspath ( __file__ )) user_relu_op = flow . experimental . custom_op_module ( \"user_relu\" , module_path ) # \u4f7f Op, Python API, Python Kernel \u751f\u6548 user_relu_op . py_api () . cpp_def () . py_kernel () . build_load () @flow . global_function () def MyJob ( x : tp . Numpy . Placeholder (( 5 ,), dtype = flow . float32 )) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): return user_relu_op . api . user_relu_forward ( x ) if __name__ == \"__main__\" : input = np . array ([ - 2 , - 1 , 0 , 1 , 2 ], dtype = np . float32 ) output = MyJob ( input ) print ( input ) print ( output ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u5148\u901a\u8fc7 flow.experimental.custom_op_module \u521b\u5efa module \u5bf9\u8c61\uff0c\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a op_type_name \uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a user_relu \u6587\u4ef6\u5939\u6240\u5728\u7684\u8def\u5f84\u3002\u8fd4\u56de\u7684 module \u5bf9\u8c61\uff0c\u4ee3\u8868\u4e86\u6211\u4eec\u81ea\u5b9a\u4e49\u7684 Op\u3002 \u63a5\u7740\uff0c\u901a\u8fc7 user_sigmoid_op.py_api().cpp_def().py_kernel().build_load() \u53ef\u4ee5\u4f7f\u81ea\u5b9a\u4e49 Op \u751f\u6548\uff0c\u751f\u6548\u540e\u7684 Op \u7684 Python \u63a5\u53e3\uff0c\u5c31\u662f\u5b9a\u4e49\u5728 user_relu_py_api.py \u6587\u4ef6\u4e2d\u7684\u65b9\u6cd5\u540d( user_relu_forward )\uff0c\u5b83\u88ab\u653e\u7f6e\u5728 moudle \u5bf9\u8c61\u7684 api \u540d\u79f0\u7a7a\u95f4\u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8c03\u7528: user_sigmoid_op . api . user_relu_forward ( x ) \u4e14\u56e0\u4e3a Python Kernel \u53ea\u80fd\u8fd0\u884c\u5728 CPU \u8bbe\u5907\u4e0a\uff0c\u56e0\u6b64\u9700\u8981\u6307\u5b9a\u8ba1\u7b97\u8bbe\u5907\u4e3a CPU\uff1a with flow . scope . placement ( \"cpu\" , \"0:0\" ):","title":"\u4f7f\u7528\u81ea\u5b9a\u4e49 Op"},{"location":"extended_topics/python_kernel_op.html#op_2","text":"\u6211\u4eec\u901a\u8fc7\u4e0a\u8ff0\u5de5\u4f5c\uff0c\u5df2\u7ecf\u5b8c\u6210\u4e86 user_relu \u7b97\u5b50\u7684\u6b63\u5411\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u7528\u4e8e type=\"predict\" \u7684\u4f5c\u4e1a\u51fd\u6570\u3002\u4f46\u662f\uff0c\u5982\u679c\u60f3\u652f\u6301 type=\"train\" \u7c7b\u578b\u7684\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u8fd8\u9700\u8981\u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97\u3002 \u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97\u7684\u4ee3\u7801\uff0c\u9700\u8981\u5199\u5728 op_type_name_cpp_def.cpp \u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7\u5b8f REGISTER_USER_OP_GRAD \u8fdb\u884c\u6ce8\u518c\u3002 \u4ece\u6570\u5b66\u89d2\u5ea6\u4e0a\u770b\uff0c\u6ce8\u518c\u8fc7\u7a0b\u5c31\u662f\u6211\u4eec\u4e3a\u81ea\u5b9a\u4e49\u7684 op\uff0c\u6307\u5b9a\u540e\u5411\u6c42\u68af\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002\u4ece\u7f16\u7a0b\u89d2\u5ea6\u770b\uff0c\u5c31\u662f\u4e3a\u81ea\u5b9a\u4e49 op \u8bbe\u7f6e\u4e00\u4e2a\u540e\u5411\u751f\u6210\u51fd\u6570\uff0c\u5728\u8be5\u51fd\u6570\u4e2d\uff0c\u7f16\u5199\u4ee3\u7801\uff0c\u6307\u5b9a\u8fd9\u4e2a op \u7684\u8f93\u5165\u68af\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002 \u4ee5\u4e0b\uff0c\u6211\u4eec\u5c06\u4e13\u95e8\u5b9e\u73b0\u4e00\u4e2a Op\uff0c\u540d\u4e3a user_relu_backward \u3002\u6211\u4eec\u5c06\u5728\u4e3a user_relu \u6ce8\u518c\u540e\u5411\u68af\u5ea6\u65f6\uff0c\u7528\u5230\u8fd9\u4e2a\u201c\u4e13\u95e8\u5b9a\u5236\u201d\u7684 Op\u3002","title":"\u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97"},{"location":"extended_topics/python_kernel_op.html#user_relu_backward-op","text":"\u5b9e\u73b0 user_relu_backward Op \u7684\u8fc7\u7a0b\u4e0e\u5b9e\u73b0 user_relu \u7684\u524d\u5411\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u9996\u5148\uff0c\u5728 user_relu_cpp_def.cpp \u4e2d\u8bbe\u7f6e\u5e76\u6ce8\u518c\u8be5 Op\uff1a REGISTER_USER_OP ( \"user_relu_backward\" ) . Input ( \"y\" ) . Input ( \"dy\" ) . Output ( \"dx\" ) . Attr < std :: string > ( \"device_sub_tag\" , \"py\" ) . SetTensorDescInferFn ([]( user_op :: InferContext * ctx ) -> Maybe < void > { const Shape * dy_shape = ctx -> Shape4ArgNameAndIndex ( \"dy\" , 0 ); Shape * dx_shape = ctx -> Shape4ArgNameAndIndex ( \"dx\" , 0 ); * dx_shape = * dy_shape ; return Maybe < void >:: Ok (); }); \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u540c\u524d\u5411\u7c7b\u4f3c\uff0c\u4ee5\u4e0a\u4ee3\u7801\u4e2d .Attr<std::string>(\"device_sub_tag\", \"py\") \u5fc5\u4e0d\u53ef\u5c11\uff0c\u5b83\u544a\u77e5 OneFlow \u5728\u4f7f\u7528\u8be5 Op \u65f6\uff0c\u9ed8\u8ba4\u8c03\u7528 Python Kernel\u3002 \u540c\u7406\uff0c\u56e0\u4e3a\u4e0d\u9700\u8981\u7528\u6237\u76f4\u63a5\u8c03\u7528\u8fd9\u4e2a user_relu_backward Op\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u5728 user_relu_py_api.py \u4e3a user_relu_backward \u5c01\u88c5 Python \u63a5\u53e3\u3002\u53ef\u4ee5\u76f4\u63a5\u5b9e\u73b0\u5b83\u7684 Python Kernel\u3002 \u5728 user_relu_py_kernel.py \u4e2d\uff0c\u5b9e\u73b0 backward \u65b9\u6cd5\uff1a def backward ( args ): ( y , dy ) = args dx = ( y > 0 ) * dy return dx \u5b83\u7684\u53c2\u6570\u662f\u4e00\u4e2a tuple \uff0c\u6570\u76ee\u548c\u987a\u5e8f\u5bf9\u5e94\u4e86 Op \u6ce8\u518c\u65f6\u7684 Input \uff0c\u8f93\u51fa\u5bf9\u5e94\u4e86 Op \u6ce8\u518c\u65f6\u7684 Output\u3002","title":"\u5b9e\u73b0 user_relu_backward Op"},{"location":"extended_topics/python_kernel_op.html#op_3","text":"\u6211\u4eec\u9700\u8981\u5728 user_relu_cpp_def.cpp \u4e2d\uff0c\u901a\u8fc7\u5b8f REGISTER_USER_OP_GRAD \u4e3a\u6211\u4eec\u7684\u6b63\u5411 Op ( user_relu_forward ) \u6ce8\u518c\u53cd\u5411\u3002 \u5176\u4ee3\u7801\u5982\u4e0b\uff1a REGISTER_USER_OP_GRAD ( \"user_relu_forward\" ) . SetBackwardOpConfGenFn ([]( user_op :: BackwardOpConfContext * ctx ) { const auto grad_op_name = ctx -> FwOp (). op_name () + \"_grad\" ; const auto & grad_op_func = [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"user_relu_backward\" ) . InputBind ( \"y\" , ctx -> FwOp (). output ( \"y\" , 0 )) . InputBind ( \"dy\" , ctx -> FwOp (). output_grad ( \"y\" , 0 )) . Output ( \"dx\" ) . Build (); }; ctx -> DefineOp ( grad_op_name , grad_op_func ); const auto & dx_get_func = [ & ctx , & grad_op_name ]() -> const std :: string & { return ctx -> GetOp ( grad_op_name ). output ( \"dx\" , 0 ); }; ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"x\" , 0 ), dx_get_func ); }); \u6211\u4eec\u5bf9\u4ee5\u4e0a\u4ee3\u7801\u8fdb\u884c\u89e3\u91ca\uff0c\u901a\u8fc7 REGISTER_USER_OP_GRAD(\"user_relu_forward\") \u6ce8\u518c\u4e3a\u524d\u5411 Op \u6ce8\u518c\u540e\u5411\u6c42\u68af\u5ea6\u89c4\u5219\uff0c\u8be5\u5b8f\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u5c31\u662f \u524d\u5411\u7684 op_type_name \u3002 \u7136\u540e\u901a\u8fc7 SetBackwardOpConfGenFn \u8bbe\u7f6e\u540e\u5411\u6c42\u68af\u5ea6\u89c4\u5219\uff0c\u540c Op \u7c7b\u4f3c\uff0c\u5728 op_type_name_cpp_def.cpp \u4e2d\u6ce8\u518c\u540e\u5411\uff0c\u5176\u5b9e\u4e0d\u6d89\u53ca\u771f\u6b63\u7684\u8fd0\u7b97\uff0c\u800c\u662f\u8bbe\u7f6e\u540e\u5411\u8ba1\u7b97\u4e0e\u524d\u5411\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u544a\u8bc9 OneFlow \u6846\u67b6\uff1a \u7528\u4ec0\u4e48 Op \u6c42\u540e\u5411\u68af\u5ea6 \u8be5 Op \u7684\u8f93\u5165\u6765\u81ea\u54ea\u91cc\uff0c\u548c\u524d\u5411 Op \u4ec0\u4e48\u5173\u7cfb \u56e0\u6b64\uff0c\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684\uff1a const auto & grad_op_func = [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"user_relu_backward\" ) . InputBind ( \"y\" , ctx -> FwOp (). output ( \"y\" , 0 )) . InputBind ( \"dy\" , ctx -> FwOp (). output_grad ( \"y\" , 0 )) . Output ( \"dx\" ) . Build (); }; \u5b9a\u4e49\u4e86 Op \u6c42\u68af\u5ea6\u7684\u65b9\u6cd5\uff1a\u4f7f\u7528 user_relu_backward \u7b97\u5b50\uff0c\u5e76\u4e14\u5c06\u524d\u5411\u7684\u8f93\u51fa y \u4f5c\u4e3a user_relu_backward \u7684\u8f93\u5165 y \uff1b\u5c06\u524d\u5411\u7684\u8f93\u51fa y \u7684\u68af\u5ea6\uff0c\u4f5c\u4e3a user_relu_backward \u7684\u8f93\u5165 dy \uff1b\u6700\u540e\u8f93\u51fa dx \u3002 \u5b9a\u5b8c\u6c42\u68af\u5ea6\u7684\u65b9\u6cd5\u540e\uff0c\u9700\u8981\u8c03\u7528 ctx -> DefineOp ( grad_op_name , grad_op_func ); \u4f7f\u4e4b\u751f\u6548\u3002 \u4e4b\u540e\u7684\u4ee3\u7801\uff1a const auto & dx_get_func = [ & ctx , & grad_op_name ]() -> const std :: string & { return ctx -> GetOp ( grad_op_name ). output ( \"dx\" , 0 ); }; ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"x\" , 0 ), dx_get_func ); \u662f\u5c06\u524d\u5411\u7684\u8f93\u5165 x \u548c\u521a\u521a\u8bbe\u7f6e\u7684\u6c42\u68af\u5ea6\u7684\u65b9\u6cd5\u7684\u8f93\u51fa( dx ) \u7ed1\u5b9a\u5230\u4e00\u8d77\uff0c\u8fd9\u6837\uff0c\u4f7f\u7528 OneFlow \u8bad\u7ec3\u65f6\uff0c\u5c31\u53ef\u4ee5\u81ea\u52a8\u6c42\u5bfc\u3002","title":"\u4e3a Op \u6ce8\u518c\u53cd\u5411\u68af\u5ea6"},{"location":"extended_topics/python_kernel_op.html#_4","text":"\u672c\u6587\u6d89\u53ca\u7684\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u67e5\u770b Op \u6ce8\u518c\u7684\u66f4\u591a\u9ad8\u7ea7\u8bbe\u7f6e\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u6ce8\u518c\u53cd\u5411\u68af\u5ea6\u65f6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5df2\u6709\u7684 Op\uff0c\u800c\u65e0\u9700\u4e13\u95e8\u5b9a\u5236\u53cd\u5411 Op\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc","title":"\u5176\u5b83"},{"location":"extended_topics/user_op.html","text":"\u4f7f\u7528 C++ \u6269\u5c55 Op \u00b6 \u672c\u6587\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 C++ \u6269\u5c55 Op\uff0c\u4e0e\u7528 Python \u6269\u5c55 Op \u76f8\u6bd4\uff0c\u4f7f\u7528 C++ \u6269\u5c55 Op\uff0c\u66f4\u52a0\u7075\u6d3b\u3001\u53ef\u914d\u7f6e\u7684\u9009\u9879\u66f4\u591a\uff0c\u4e14\u652f\u6301\u4f7f\u7528 GPU \u4f5c\u4e3a\u8ba1\u7b97\u8bbe\u5907\u3002\u4e00\u822c\u53ef\u4f7f\u7528 Python \u6269\u5c55 Op \u7528\u4e8e\u5feb\u901f\u9884\u7814\uff0c\u4f7f\u7528 C++ \u6269\u5c55 Op \u8ffd\u6c42\u9ad8\u6027\u80fd\u3002 \u5728\u9605\u8bfb\u672c\u6587\u524d\uff0c\u5047\u5b9a\u7528\u4e8e\u5df2\u7ecf\u9605\u8bfb \u4f7f\u7528 Python \u6269\u5c55 Op \u4e00\u6587\uff0c\u5e76\u77e5\u6653\u4ee5\u4e0b\u77e5\u8bc6\u70b9\uff1a OneFlow \u4e2d\uff0c\u903b\u8f91\u4e0a\u7684\u8fd0\u7b97\u5355\u5143 Op \u7684\u6982\u5ff5 OneFlow \u4e2d\uff0c\u5b9e\u9645\u8d1f\u8d23\u8fd0\u7b97\u7684 Kernel \u7684\u6982\u5ff5 Op \u79cd\u7c7b\u7684\u6807\u8bc6\u7b26 op_type_name \u7684\u6982\u5ff5 OneFlow \u4e2d\u7684 Op \u7cfb\u7edf \u00b6 OneFlow \u63d0\u4f9b\u4e86\u4e00\u5957\u673a\u5236\uff0c\u6211\u4eec\u5728\u8fd9\u5957\u673a\u5236\u4e0b\u7f16\u5199\u81ea\u5b9a\u4e49 op \u5e76\u5c06\u5176\u6ce8\u518c\u5230 OneFlow \u4e2d\uff0c\u5c31\u53ef\u4ee5\u5728 Python \u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49 op\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86 OneFlow \u4e2d\u81ea\u5b9a\u4e49 op \u7684\u6ce8\u518c\u673a\u5236\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u5728 OneFlow \u6846\u67b6\u4e2d\uff0c\u4e0e\u81ea\u5b9a\u4e49 op \u6ce8\u518c\u6709\u5173\u7684 Registry \u6709\u4e09\u79cd\uff1a OpGradRegistry \uff1a\u7ba1\u7406\u68af\u5ea6\u6ce8\u518c\uff0c\u7528\u4e8e\u53cd\u5411\u56fe\u4e2d\u81ea\u52a8\u6c42\u68af\u5ea6 OpRegistry \uff1a\u7ba1\u7406 op \u6ce8\u518c\uff0c\u7528\u4e8e\u751f\u6210\u524d\u5411\u56fe\u53ca\u6784\u5efa Task Graph OpKernelRegistry \uff1a\u7ba1\u7406 kernel \u6ce8\u518c\uff0c\u7528\u4e8e\u8fd0\u884c\u65f6\u6267\u884c\u7528\u6237\u7f16\u5199\u7684 kernel \u903b\u8f91 \u5728\u5177\u4f53\u7684\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5176\u5b9e\u662f\u7528 C++ \u7f16\u5199\u81ea\u5b9a\u4e49 op\uff0c\u5e76\u751f\u6210\u52a8\u6001\u94fe\u63a5\u5e93(so)\u6587\u4ef6\u3002\u5728 Python \u4e2d\u52a0\u8f7d\u5bf9\u5e94\u7684 so \u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5 so \u6587\u4ef6\u4e2d\u7684\u81ea\u5b9a\u4e49 op\u3002\u5728 \u4f7f\u7528 Python \u6269\u5c55 Op \u65f6\uff0c\u5e95\u5c42\u4e5f\u662f\u4f7f\u7528\u4e86\u8fd9\u5957\u673a\u5236\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e9b\u7ec6\u8282\u88ab\u5c01\u88c5\u5728\u4e86\u76f8\u5173 API \u4e2d\uff0c\u5bf9\u5f00\u53d1\u8005\u900f\u660e\u3002 \u5728 user_op_conf.proto \u4e2d\u53ef\u4ee5\u67e5\u770b user op \u7684\u6570\u636e\u7ed3\u6784\uff1a syntax = \"proto2\"; package oneflow; import \"oneflow/core/framework/user_op_attr.proto\"; message UserOpConf { message ListString { repeated string s = 1; } required string op_type_name = 1; map<string, ListString> input = 2; map<string, ListString> output = 3; map<string, UserOpAttrVal> attr = 4; } \u5176\u4e2d\u7684 op_type_name \u662f\u4ee3\u8868 op \u7c7b\u522b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u662f\u6307\u660e op \u7c7b\u522b\u7684\u5168\u5c40\u552f\u4e00 ID\u3002 \u4f7f\u7528 C++ \u6269\u5c55 op \u7684\u6b65\u9aa4 \u00b6 \u5b9e\u73b0 op \u5e76\u6ce8\u518c\uff1aop \u7684\u5b9e\u73b0\u4e3b\u8981\u7528\u4e8e\u524d\u5411\u56fe\u6784\u56fe\uff0c\u5305\u62ec\u6307\u5b9a op \u7684\u540d\u79f0\u3001\u8f93\u5165\u3001\u8f93\u51fa\u3001\u914d\u7f6e\u5c5e\u6027\u4ee5\u53ca\u4e00\u4e9b\u5fc5\u8981\u7684\u7528\u4e8e\u63a8\u5bfc tensor \u7684\u5f62\u72b6\u4e0e\u6570\u636e\u7c7b\u578b\u7684\u51fd\u6570 \u5b9e\u73b0 op \u5bf9\u5e94\u7684 kernel \u5e76\u6ce8\u518c\uff1akernel \u8d1f\u8d23\u8fd0\u884c\u65f6\u7684\u5177\u4f53\u8fd0\u7b97\u8fc7\u7a0b\uff0c\u4e00\u4e2a op \u53ef\u80fd\u4f1a\u5bf9\u5e94\u591a\u4e2a kernel \uff08\u53ef\u9009\uff09\u5b9e\u73b0 op \u5bf9\u5e94\u7684 grad \u5e76\u6ce8\u518c\uff1a\u5982\u679c\u81ea\u5b9a\u4e49 op \u9700\u8981\u652f\u6301\u540e\u5411\u5c55\u5f00\uff0c\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u540e\u5411\u51fd\u6570\u5e76\u6ce8\u518c \u7f16\u8bd1\u94fe\u63a5\u5f97\u5230 so \u6587\u4ef6 \u5728 Python \u4e2d\u52a0\u8f7d so \u6587\u4ef6\uff0c\u5e76\u4e14\u4f7f\u7528 oneflow.user_op_builder \u5c01\u88c5 C++ \u7f16\u5199\u7684\u81ea\u5b9a\u4e49 op \u6d4b\u8bd5 \u793a\u4f8b \u00b6 \u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 CPU \u53ca GPU \u8fd0\u7b97\u7684 \"myrelu\" \u81ea\u5b9a\u4e49 op\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u89c1 code/extended_topics/create_user_op \u3002 op \u7684\u5b9e\u73b0\u4e0e\u6ce8\u518c \u00b6 \u6211\u4eec\u5728 myrelu_op.cpp \u4e2d\u5b9a\u4e49\u4e86 op \u5e76\u5b8c\u6210\u4e86\u6ce8\u518c\uff1a #include \"oneflow/core/framework/framework.h\" namespace oneflow { namespace { REGISTER_USER_OP ( \"myrelu\" ) . Input ( \"in\" ) . Output ( \"out\" ) . SetTensorDescInferFn ( []( user_op :: InferContext * ctx ) -> Maybe < void > { * ctx -> Shape4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Shape4ArgNameAndIndex ( \"in\" , 0 ); * ctx -> Dtype4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Dtype4ArgNameAndIndex ( \"in\" , 0 ); return Maybe < void >:: Ok (); }); } // namespace } // namespace oneflow \u5176\u6240\u4f5c\u5de5\u4f5c\u4e0e \u4f7f\u7528 Python \u6269\u5c55 Op \u5b8c\u5168\u7c7b\u4f3c\u3002\u5373\u5229\u7528 REGISTER_USER_OP \u6ce8\u518c\u4e86\u4e00\u4e2a\u540d\u4e3a myrelu \u7684 Op\uff0c\u8bbe\u7f6e\u4e86\u8f93\u5165\u3001\u8f93\u51fa\uff0c\u5e76\u6839\u636e\u8f93\u5165\u63a8\u5bfc\u4e86\u8f93\u51fa\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u3002 CPU kernel \u7684\u5b9e\u73b0\u4e0e\u6ce8\u518c \u00b6 \u6211\u4eec\u5728 myrelu_cpu_kernel.cpp \u4e2d\u5b9e\u73b0\u4e86 CPU \u7248\u672c\u7684 kernel \u5e76\u6ce8\u518c\uff1a #include \"oneflow/core/framework/framework.h\" namespace oneflow { namespace { template < typename T > void MyRelu ( DeviceCtx * ctx , const int64_t n , const T * x , T * y ) { T zero = ( T )( 0 ); for ( int64_t i = 0 ; i != n ; ++ i ) { y [ i ] = std :: max ( x [ i ], zero ); } } template < DeviceType device_type , typename T > class ReluKernel final : public user_op :: OpKernel { public : ReluKernel () = default ; ~ ReluKernel () = default ; private : void Compute ( user_op :: KernelComputeContext * ctx ) const override { const user_op :: Tensor * in_tensor = ctx -> Tensor4ArgNameAndIndex ( \"in\" , 0 ); user_op :: Tensor * out_tensor = ctx -> Tensor4ArgNameAndIndex ( \"out\" , 0 ); MyRelu < T > ( ctx -> device_ctx (), in_tensor -> shape (). elem_cnt (), in_tensor -> dptr < T > (), out_tensor -> mut_dptr < T > ()); } bool AlwaysComputeWhenAllOutputsEmpty () const override { return false ; } }; #define REGISTER_RELU_KERNEL(device, dtype) \\ REGISTER_USER_KERNEL(\"myrelu\") \\ .SetCreateFn<ReluKernel<device, dtype>>() \\ .SetIsMatchedHob( \\ (user_op::HobDeviceTag() == device) & \\ (user_op::HobDataType(\"out\", 0) \\ == GetDataType<dtype>::value)); REGISTER_RELU_KERNEL ( DeviceType :: kCPU , float ) REGISTER_RELU_KERNEL ( DeviceType :: kCPU , double ) } // namespace } // namespace oneflow \u5728 OneFlow \u4e2d\u5b9e\u73b0 kernel\uff0c \u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u7ee7\u627f\u81ea oneflow::user_op::OpKernel \u7684\u7c7b\uff0c\u5e76\u91cd\u5199\u5176\u4e2d\u7684\u865a\u51fd\u6570\u3002 \u5728\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u91cd\u5199\u4e86 Compute \u4e0e AlwaysComputeWhenAllOutputsEmpty \u4e24\u4e2a\u865a\u51fd\u6570\uff0c\u4ed6\u4eec\u5206\u522b\u7684\u610f\u4e49\u662f\uff1a Compute \u5fc5\u987b\u91cd\u5199\uff0c\u5728\u5176\u4e2d\u5b9e\u73b0\u5177\u4f53\u7684\u8fd0\u7b97\u903b\u8f91 AlwaysComputeWhenAllOutputsEmpty \u5fc5\u987b\u91cd\u5199\uff0c\u5bf9\u4e8e\u7edd\u5927\u591a\u6570 op \u800c\u8a00\u76f4\u63a5\u8fd4\u56de false \u5373\u53ef\u3002\u5bf9\u4e8e\u6781\u5c11\u6570\u5185\u90e8\u9700\u8981\u7ef4\u62a4\u72b6\u6001\uff0c\u5373\u4f7f\u8f93\u51fa\u4e3a\u7a7a\u4e5f\u9700\u8981\u8c03\u7528 kernel \u8fdb\u884c\u8ba1\u7b97\u7684 op \u800c\u8a00\uff0c\u5e94\u8be5\u8fd4\u56de true \u5b9e\u73b0 kernel \u7c7b\u540e\uff0c\u9700\u8981\u8c03\u7528 REGISTER_USER_KERNEL \u6ce8\u518c\u3002 REGISTER_USER_KERNEL(\"myrelu\") \u6240\u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5c31\u662f op_type_name \uff0c \u4f9d\u636e op_type_name \u5b8c\u6210\u6ce8\u518c\u548c\u8fd0\u884c\u65f6\u7684\u67e5\u8be2\u5de5\u4f5c\uff0c\u5728 Python \u5c42\u5c01\u88c5 op \u65f6\u4e5f\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a op_type_name \u3002 REGISTER_USER_KERNEL(\"myrelu\") \u4f1a\u8fd4\u56de\u4e00\u4e2a OpKernelRegistry \u5bf9\u8c61\uff0c\u9700\u8981\u8c03\u7528\u5b83\u7684\u5404\u4e2a\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u6ce8\u518c\u4fe1\u606f\u3002\u4e0a\u6587\u4ee3\u7801\u4e2d\u6d89\u53ca\u5230 SetCreateFn<T>() \uff1a\u8be5\u6a21\u677f\u65b9\u6cd5\u7684\u6a21\u677f\u53c2\u6570 T \uff0c\u5c31\u662f\u6211\u4eec\u5b9e\u73b0\u7684 kernel \u7c7b\uff0cOneFlow \u5c06\u4f7f\u7528\u5b83\u521b\u5efa kernel \u5bf9\u8c61\u3002 SetIsMatchedHob \uff1a\u56e0\u4e3a\u4e00\u4e2a op \u53ef\u80fd\u6709\u591a\u4e2a kernel\uff0c\u8981\u60f3\u6839\u636e\u7269\u7406\u8bbe\u5907\u53ca\u6570\u636e\u683c\u5f0f\u7684\u4e0d\u540c\u800c\u9009\u62e9\u4e0d\u540c\u7684 kernel \u8fdb\u884c\u8ba1\u7b97\uff0c\u5c31\u9700\u8981\u8c03\u7528 SetIsMatchedHob \u8fdb\u884c\u8bbe\u7f6e\u3002\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u4e3a true \u65f6\uff0cOneFlow \u5c06\u8c03\u7528\u8be5 kernel \u5b8c\u6210\u8ba1\u7b97\u3002 GPU kernel \u7684\u5b9e\u73b0\u4e0e\u6ce8\u518c \u00b6 \u6211\u4eec\u5728 myrelu_gpu_kernel.cu \u4e2d\u5b9e\u73b0\u4e86 GPU \u7248\u672c\u7684 kernel \u5e76\u6ce8\u518c\uff1a #include \"oneflow/core/framework/framework.h\" #include <cub/cub.cuh> namespace oneflow { namespace { template < typename T > __global__ void ReluForwardGpu ( const int n , const T * x , T * y ) { CUDA_1D_KERNEL_LOOP ( i , n ) { y [ i ] = x [ i ] > 0 ? x [ i ] : 0 ; } } class ReluGpuFloatKernel final : public user_op :: OpKernel { public : ReluGpuFloatKernel () = default ; ~ ReluGpuFloatKernel () = default ; private : void Compute ( user_op :: KernelComputeContext * ctx ) const override { const user_op :: Tensor * in_tensor = ctx -> Tensor4ArgNameAndIndex ( \"in\" , 0 ); user_op :: Tensor * out_tensor = ctx -> Tensor4ArgNameAndIndex ( \"out\" , 0 ); int32_t n = in_tensor -> shape (). elem_cnt (); const float * in_ptr = in_tensor -> dptr < float > (); float * out_ptr = out_tensor -> mut_dptr < float > (); ReluForwardGpu < float > <<< 32 , 1024 , 0 , ctx -> device_ctx () -> cuda_stream () >>> ( n , in_ptr , out_ptr ); } bool AlwaysComputeWhenAllOutputsEmpty () const override { return false ; } }; #define REGISTER_RELU_KERNEL(device, dtype) \\ REGISTER_USER_KERNEL(\"myrelu\") \\ .SetCreateFn<ReluGpuFloatKernel>() \\ .SetIsMatchedHob( \\ (user_op::HobDeviceTag() == device) & \\ (user_op::HobDataType(\"out\", 0) \\ == GetDataType<dtype>::value)); REGISTER_RELU_KERNEL ( DeviceType :: kGPU , float ) REGISTER_RELU_KERNEL ( DeviceType :: kGPU , double ) } // namespace } // namespace oneflow \u53ef\u4ee5\u770b\u5230\uff0c \u5b9e\u73b0\u5e76\u6ce8\u518c GPU kernel \u7684\u8fc7\u7a0b\u4e0e CPU kernel \u51e0\u4e4e\u4e00\u81f4\u3002\u533a\u522b\u4e3b\u8981\u5728\u4e8e\uff1a \u56e0\u4e3a\u4f7f\u7528\u4e86 CUDA \u7f16\u7a0b\uff0c\u6240\u4ee5\u5305\u542b\u4e86 CUDA \u5bf9\u5e94\u7684\u5934\u6587\u4ef6 Compute \u5185\u90e8\u4f7f\u7528\u4e86 GPU \u7684\u65b9\u6cd5 SetIsMatchedHob \u4e2d\u6240\u5339\u914d\u7684\u8bbe\u5907\u4e3a GPU \u6b64\u5916\uff0c\u6211\u4eec\u9a6c\u4e0a\u4f1a\u5728\u4e0b\u6587\u770b\u5230\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86 CUDA\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 nvcc \u7f16\u8bd1\u5668\uff08\u800c\u4e0d\u662f g++\uff09\u6765\u7f16\u8bd1 GPU kernel\u3002 \u7f16\u8bd1\u94fe\u63a5\u9009\u9879\u8bf4\u660e \u00b6 \u5728 oneflow.sysconfig \u4e0b\u5305\u542b\u4e86 get_compile_flags \u3001 get_include \u3001 get_lib \u3001 get_link_flags \u65b9\u6cd5\u5206\u522b\u5bf9\u5e94\u81ea\u5b9a\u4e49 op \u65f6\u7684\uff1a \u7f16\u8bd1\u9009\u9879 \u5934\u6587\u4ef6\u8def\u5f84 \u94fe\u63a5\u5e93\u8def\u5f84 \u94fe\u63a5\u9009\u9879 \u6bd4\u5982\uff1a >>> import oneflow >>> oneflow.sysconfig.get_compile_flags() ['-I/home/yaochi/oneflow/build/python_scripts/oneflow/include', '-DHALF_ENABLE_CPP11_USER_LITERALS=0', '-DWITH_CUDA', '-D_GLIBCXX_USE_CXX11_ABI=0'] \u4e5f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u76f4\u63a5\u83b7\u53d6\u7f16\u8bd1\u3001\u94fe\u63a5\u9009\u9879\uff1a python -c \"import oneflow; print(' '.join(oneflow.sysconfig.get_compile_flags()))\" python -c \"import oneflow; print(' '.join(oneflow.sysconfig.get_link_flags()))\" \u5bf9\u4e8e GPU kernel\uff0c\u94fe\u63a5\u65f6\u8fd8\u9700\u8981\u6307\u5b9a cudart \u5e93\u3002 \u7f16\u8bd1\u3001\u94fe\u63a5\u5f97\u5230\u52a8\u6001\u5e93 \u00b6 \u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b Makefile \u8fdb\u884c\u6784\u5efa\uff1a CFLAGS = $( shell python -c \"import oneflow; print(' '.join(oneflow.sysconfig.get_compile_flags()))\" ) LFLAGS = $( shell python -c \"import oneflow; print(' '.join(oneflow.sysconfig.get_link_flags()))\" ) CUDAPATH = /usr/local/cuda-10.1/lib64 all: final_relu.so myrelu_op.o: myrelu_op.cpp g++ -std = c++11 -c myrelu_op.cpp \\ -o myrelu_op.o \\ -fPIC \\ ${ CFLAGS } \\ ${ LFLAGS } \\ -O2 myrelu_cpu_kernel.o: myrelu_cpu_kernel.cpp g++ -std = c++11 -c myrelu_cpu_kernel.cpp \\ -o myrelu_cpu_kernel.o \\ $( CFLAGS ) -fPIC myrelu_gpu_kernel.o: myrelu_gpu_kernel.cu nvcc -std = c++11 -c myrelu_gpu_kernel.cu \\ -o myrelu_gpu_kernel.o \\ $( CFLAGS ) -x cu -Xcompiler -fPIC final_relu.so: myrelu_op.o myrelu_cpu_kernel.o myrelu_gpu_kernel.o g++ -std = c++11 myrelu_op.o \\ myrelu_cpu_kernel.o \\ myrelu_gpu_kernel.o \\ -shared -o final_relu.so \\ $( CFLAGS ) \\ -fPIC \\ -L $( CUDAPATH ) \\ -lcudart \\ $( LFLAGS ) clean: rm -rf *.so *.o \u6211\u4eec\u4f7f\u7528 g++ \u7f16\u8bd1 myrelu_op.cpp \u3001 myrelu_cpu_kernel.cpp \uff0c\u4f7f\u7528 nvcc \u7f16\u8bd1 myrelu_gpu_kernel.cpp \uff0c\u5f97\u5230\u76ee\u6807\u6587\u4ef6\uff08\".o\" \u6587\u4ef6\uff09\uff0c\u6700\u540e\u628a\u5f97\u5230\u7684\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u4e3a final_relu.so \u3002 \u6211\u4eec\u5c06\u5728 Python \u4e2d\u52a0\u8f7d final_relu.so \u5e76\u4f7f\u7528\u5c01\u88c5\u3001\u4f7f\u7528\u81ea\u5b9a\u4e49 op\u3002 \u5728 Python \u4f7f\u7528\u81ea\u5b9a\u4e49 op \u00b6 \u5728 Python \u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49 op \u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u57fa\u672c\u6b65\u9aa4\uff1a \u4f7f\u7528 oneflow.config.load_library \u52a0\u8f7d so \u6587\u4ef6 \u4f7f\u7528 oneflow.user_op_builder \u751f\u6210\u81ea\u5b9a\u4e49 op \u7684 Python wrapper \u8c03\u7528\u4ee5\u4e0a\u7684 Python wrapper \u5f97\u5230\u7ed3\u679c \u4ee5\u4e0b\u4ee3\u7801\u5728 Python \u5c42\u6b21\u5c01\u88c5\u4e86 myrelu \u5e76\u8c03\u7528\uff1a import oneflow as flow import numpy as np import oneflow.typing as tp # \u52a0\u8f7d\u6a21\u5757 flow . config . load_library ( \"final_relu.so\" ) # \u9ed8\u8ba4\u914d\u7f6e flow . config . gpu_device_num ( 1 ) # python op wrapper function def myrelu ( input_blob ): op = ( flow . user_op_builder ( \"op_myrelu\" ) . Op ( \"myrelu\" ) . Input ( \"in\" , [ input_blob ]) . Output ( \"out\" ) . Build () ) return op . InferAndTryRun () . SoleOutputBlob () # \u7f51\u7edc\u4ee3\u7801 @flow . global_function () def MyJob ( x : tp . Numpy . Placeholder (( 5 ,), dtype = flow . float32 )) -> tp . Numpy : return myrelu ( x ) if __name__ == \"__main__\" : input = np . array ([ - 2 , - 1 , 0 , 1 , 2 ], dtype = np . float32 ) output = MyJob ( input ) print ( input ) print ( output ) \u9884\u671f\u7ed3\u679c\u4e3a\uff1a [-2. -1. 0. 1. 2.] [0. 0. 0. 1. 2.] \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684\uff1a flow.config.load_library(\"final_relu.so\") \u4e3a\u52a0\u8f7d so \u6587\u4ef6\u3002 myrelu \u5185\u90e8\u6784\u5efa python wrapper \u4e0e\u300a\u4f7f\u7528 Python \u6269\u5c55 Op \u300b\u4e2d\u7684 \u5c01\u88c5 Op \u7684 Python \u63a5\u53e3 \u4ee3\u7801\u529f\u80fd\u5b8c\u5168\u4e00\u6837\uff0c\u5728\u6b64\u4e0d\u518d\u91cd\u590d\u89e3\u91ca\u3002 \u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210 myrelu op \u7684\u6784\u5efa\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684 op\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u6784\u5efa\u66f4\u590d\u6742\u7684 op\uff0c\u5c31\u9700\u8981\u5728\u6ce8\u518c\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e00\u4e9b\u989d\u5916\u7684\u9ad8\u7ea7\u7279\u6027\u3002 \u6211\u4eec\u5c06\u4ece op \u6ce8\u518c\u3001 kernel \u6ce8\u518c\u3001gradient \u6ce8\u518c\u53ca Python \u5c42\u7684\u5c01\u88c5\u51e0\u4e2a\u65b9\u9762\u4ecb\u7ecd\u3002 OpRegistry \u8be6\u7ec6\u4ecb\u7ecd \u00b6 Attr \u65b9\u6cd5 \u00b6 \u6709\u4e9b op \u9664\u4e86\u8f93\u5165\u8f93\u51fa\u5916\uff0c\u8fd8\u9700\u8981\u6709\u914d\u7f6e\u5c5e\u6027\uff0c\u6bd4\u5982 reshape \u9700\u8981\u914d\u7f6e\u5f62\u72b6\uff0c conv \u7c7b\u7b97\u5728\u9700\u8981\u914d\u7f6e\u5bf9\u9f50\u65b9\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u6ce8\u518c\u65f6\u4f7f\u7528 Attr \u65b9\u6cd5\uff0c\u4e3a op \u8bbe\u7f6e\u5c5e\u6027\uff0c\u5176\u539f\u578b\u4e3a\uff1a OpRegistry & Attr < cpp_type > ( const std :: string & name ); \u6211\u4eec\u53ea\u9700\u6307\u5b9a\u5c5e\u6027\u7684\u540d\u5b57\u548c\u7c7b\u578b\u5373\u53ef\u3002 \u6bd4\u5982\uff1a REGISTER_USER_OP ( \"reshape\" ) . Input ( \"in\" ) . Output ( \"out\" ) . Attr < shape > ( \"shape\" ) REGISTER_USER_OP ( \"conv2d\" ) . Input ( \"in\" ) . Input ( \"weight\" ) . Output ( \"out\" ) . Attr < std :: vector < int32_t >> ( \"padding_before\" ) OneFlow \u76ee\u524d\u652f\u6301\u4e86\u5982\u4e0b\u51e0\u79cd C++ \u6570\u636e\u7c7b\u578b\uff1a UserOpAttrType \u5bf9\u5e94\u7684C++\u6570\u636e\u7c7b\u578b kAtInt32 int32_t kAtInt64 int64_t kAtBool bool kAtFloat float kAtDouble double kAtShape oneflow::Shape kAtListInt32 std::vector kAtListInt64 std::vector kAtListFloat std::vector< float > kAtString std::string \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u591a\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\uff0c\u4e3a\u5c5e\u6027\u914d\u7f6e\u9ed8\u8ba4\u503c\uff0c\u9ed8\u8ba4\u503c\u7684\u7c7b\u578b\u5373\u8868\u683c\u4e2d\u5bf9\u5e94\u7684C++\u6570\u636e\u7c7b\u578b\uff0c\u5982\uff1a . Attr < bool > ( \"is_transpose\" , false ) . Attr < int32_t > ( \"size\" , 10 ) . Attr < std :: vector < int32_t >> ( \"vector_of_size\" , std :: vector < int32_t > { 10 , 11 , 12 }) SetCheckAttrFn \u65b9\u6cd5 \u00b6 \u5bf9\u4e8e\u67d0\u4e9b\u5c5e\u6027\u6765\u8bf4\uff0c\u9700\u8981\u66f4\u7cbe\u786e\u5730\u9650\u5236\u53d6\u503c\u8303\u56f4\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6ce8\u518c op \u65f6\u4f7f\u7528 SetCheckAttrFn \u65b9\u6cd5\u6765\u6307\u5b9a\u53d6\u503c\u8303\u56f4\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e conv op\u6765\u8bf4\uff0c\u5176\u6709\u4e00\u4e2a\u914d\u7f6e\u9009\u9879 data_format \uff0c\u5176\u7c7b\u578b\u662f string \u5b57\u7b26\u4e32\uff0c\u4f46\u53d6\u503c\u53ea\u80fd\u662f channels_first \u6216 channels_last \uff0c\u9664\u6b64\u4e4b\u5916\u90fd\u4e0d\u5408\u6cd5\uff1a . Attr < std :: string > ( \"data_format\" , \"NCHW\" ) . SetCheckAttrFn ( []( const user_op :: UserOpDefWrapper & def , const user_op :: UserOpConfWrapper & conf ) -> Maybe < void > { std :: string data_format = conf . attr < std :: string > ( \"data_format\" ); if ( data_format == \"channels_first\" || data_format == \"channels_last\" ) { return Maybe < void >:: Ok (); } return oneflow :: Error :: CheckFailed () << \"data_format value: \" << data_format << \" for Conv op is illegal.\" ; }) \u8bbe\u7f6e\u4e00\u4e2a\u7528\u4e8e\u68c0\u67e5\u7684\u51fd\u6570\uff0c\u5f53\u5c5e\u6027\u503c\u7b26\u5408\u8981\u6c42\u65f6\uff0c\u8fd4\u56de Maybe<void>::Ok() \uff1b\u5426\u5219\u8fd4\u56de oneflow::Error::CheckFailed() \u3002 \u591a\u8f93\u5165/\u8f93\u51fa \u00b6 \u5bf9\u4e8e\u6709\u4e9b op \u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u8f93\u5165\u6216\u8005\u8f93\u51fa\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u5728\u6ce8\u518c op \u65f6\u6307\u5b9a\u5176\u5bf9\u5e94\u7684\u8f93\u5165\u8f93\u51fa\u7684\u4e2a\u6570\u3002 \u4ee5 Input \u4e3a\u4f8b\uff1a // input \u5fc5\u987b\u5bf9\u5e94\u67091\u4e2a blob . Input ( \"input\" ) // input \u5fc5\u987b\u5bf9\u5e94\u67095\u4e2a blob . Input ( \"input\" , 5 ) // input \u5fc5\u987b\u5bf9\u5e94\u81f3\u5c115\u4e2a blob . InputWithMinimum ( \"input\" , 5 ) // input \u53ef\u80fd\u6ca1\u6709\u5bf9\u5e94\u7684 blob\uff0c\u82e5\u6709\u5219\u987b\u5bf9\u5e941\u4e2a . OptionalInput ( \"input\" ) // input \u53ef\u80fd\u6ca1\u6709\u5bf9\u5e94\u7684 blob\uff0c\u82e5\u6709\u5219\u987b\u5bf9\u5e945\u4e2a . OptionalInput ( \"input\" , 5 ) // input \u53ef\u80fd\u6ca1\u6709\u5bf9\u5e94\u7684 blob\uff0c\u82e5\u6709\u5219\u987b\u5bf9\u5e94\u81f3\u5c115\u4e2a . OptionalInputWithMininum ( \"input\" , 5 ) \u8f93\u51fa\u8bbe\u7f6e Output \u4e0e Input \u7c7b\u4f3c\u3002 SetGetSbpFn \u65b9\u6cd5 \u00b6 SetGetSbpFn \u7528\u4e8e\u8bbe\u7f6e\u8be5 op \u7684 SBP \u3002 \u4ee5 \"add_n\" op \u4e3a\u4f8b\uff1a REGISTER_USER_OP ( \"add_n\" ) . InputWithMinimum ( \"in\" , 2 ) . Output ( \"out\" ) . SetGetSbpFn ([]( user_op :: SbpContext * ctx ) { int64_t num_axes = ctx -> LogicalTensorDesc4InputArgNameAndIndex ( \"in\" , 0 ). shape (). NumAxes (); for ( int64_t i = 0 ; i < num_axes ; ++ i ) { ctx -> NewBuilder (). Split ( ctx -> inputs (), i ). Split ( user_op :: OpArg ( \"out\" , 0 ), i ). Build (); } ctx -> NewBuilder (). PartialSum ( ctx -> inputs ()). PartialSum ( user_op :: OpArg ( \"out\" , 0 )). Build (); return Maybe < void >:: Ok (); }); OpKernelRegistry \u8be6\u7ec6\u4ecb\u7ecd \u00b6 SetInferTmpSizeFn \u65b9\u6cd5 \u00b6 \u67d0\u4e9b op \u7684 kernel \u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0c\u5728 Compute \u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684 buffer \u7528\u4e8e\u5b58\u50a8\u4e34\u65f6\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u6ce8\u518c kernel \u65f6\u901a\u8fc7 SetInferTmpSizeFn \u65b9\u6cd5\u6307\u5b9a buffer \u5927\u5c0f\uff0c\u5728 Compute \u51fd\u6570\u4e2d\u83b7\u53d6\u8be5 buffer \u5e76\u4f7f\u7528\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6ce8\u518c kernel \u65f6\uff0c\u901a\u8fc7 SetInferTmpSizeFn \u6307\u5b9a buffer \u5927\u5c0f\u4e3a 1024 \u5b57\u8282\uff1a REGISTER_USER_KERNEL ( \"XOp\" ) . SetInferTmpSizeFn ( []( const oneflow :: user_op :: InferContext * ) { return 1024 ; }); \u4e00\u65e6\u901a\u8fc7 SetInferTmpSizeFn \u8bbe\u7f6e\u4e86 buffer \u5927\u5c0f\uff0c\u5728 Compute \u4e2d\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 KernelComputeContext::Tensor4ArgNameAndIndex \u65b9\u6cd5\uff0c\u83b7\u53d6\u8be5\u7f13\u51b2\u533a\uff0c\u8be5\u7f13\u51b2\u533a\u5c01\u88c5\u4e3a oneflow::user_op::Tensor \uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 dptr \u6216 mut_dptr \u65b9\u6cd5\u8f6c\u4e3a\u5176\u5b83\u7c7b\u578b\u7684\u6307\u9488\u3002 class XKernel final : public oneflow :: user_op :: OpKernel { void Compute ( oneflow :: user_op :: KernelComputeContext * ctx ) override { oneflow :: user_op :: Tensor * tmp = ctx -> Tensor4ArgNameAndIndex ( \"tmp_buffer\" , 0 ); //\u8f6c\u6362\u540e\u5f97\u5230 1024 \u5b57\u8282\u7684 char* \u7f13\u51b2\u533a char * pBuff = tmp -> mut_dptr < char > (); ... } }; OpGradRegistry \u8be6\u7ec6\u4ecb\u7ecd \u00b6 \u5728 \u4f7f\u7528 Python \u6269\u5c55 Op \u4e00\u6587\u4e2d\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97\u3002\u5176\u6838\u5fc3\u662f\u901a\u8fc7\u5b8f REGISTER_USER_OP_GRAD \u8fdb\u884c\u6ce8\u518c\u3002 \u5b9e\u9645\u4e0a\uff0c REGISTER_USER_OP_GRAD \u5176\u5b9e\u662f\u5728\u5b9a\u4e49\u7528\u4e8e\u6c42\u5bfc\u7684\u53cd\u5411\u5b50\u56fe\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u4e13\u95e8\u50cf \u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97 \u90a3\u6837\uff0c\u4e13\u95e8\u53bb\u5b9e\u73b0\u4e00\u4e2a\u540e\u5411 Op \u6765\u6c42\u68af\u5ea6\uff0c\u5728\u5927\u90e8\u5206\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528 OneFlow \u5df2\u6709\u7684 Op\uff0c\u63cf\u8ff0\u53cd\u5411\u5b50\u56fe\u3002\u672c\u8282\u4f5c\u4e3a \u4f7f\u7528 Python \u6269\u5c55 Op \u7684\u8865\u5145\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u540e\u5411\u6ce8\u518c\u5e76\u7528\u73b0\u6709 Op \u8868\u793a\u53cd\u5411\u5b50\u56fe\u7684\u65b9\u6cd5\u3002 Oneflow \u5728\u540e\u5411\u8ba1\u7b97\u56fe\u5c55\u5f00\u8fc7\u7a0b\u4e2d\u4f1a\u81ea\u52a8\u6c42\u5bfc\uff0cOneFlow \u6846\u67b6\u91c7\u7528 Automatic Differentiation \u65b9\u6cd5\u6c42\u5bfc\uff0c\u5373\u5229\u7528\u94fe\u5f0f\u6cd5\u5219\u81ea\u52a8\u6c42\u51fa\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u68af\u5ea6\u3002 \u4e3a\u4e86\u5bf9\u81ea\u5b9a\u4e49\u7684 op \u8fdb\u884c\u81ea\u52a8\u6c42\u5bfc\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u5b8f REGISTER_USER_OP_GRAD \u8fdb\u884c\u6ce8\u518c\u3002\u4ece\u6570\u5b66\u89d2\u5ea6\u4e0a\u770b\uff0c\u6ce8\u518c\u8fc7\u7a0b\u5c31\u662f\u6211\u4eec\u4e3a\u81ea\u5b9a\u4e49\u7684 op\uff0c\u6307\u5b9a\u540e\u5411\u6c42\u5bfc\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002\u4ece\u7f16\u7a0b\u89d2\u5ea6\u770b\uff0c\u5c31\u662f\u4e3a\u81ea\u5b9a\u4e49 op \u8bbe\u7f6e\u4e00\u4e2a\u540e\u5411\u751f\u6210\u51fd\u6570\uff0c\u5728\u8be5\u51fd\u6570\u4e2d\uff0c\u7f16\u5199\u4ee3\u7801\uff0c\u6307\u5b9a\u8fd9\u4e2a op \u7684\u8f93\u5165\u68af\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002 \u4e3a\u8ba1\u7b97\u81ea\u5b9a\u4e49 op \u7684\u68af\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u81ea\u5b9a\u4e49 op \u7684\u8f93\u5165\u3001\u8f93\u51fa\u4ee5\u53ca\u8f93\u51fa\u7684\u68af\u5ea6\uff0c\u6784\u9020\u51fa\u8f93\u5165\u7684\u68af\u5ea6\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 OneFlow \u4e2d\u5df2\u6709\u7684\u7b97\u5b50\u53ca\u5176\u7ec4\u5408\u5f62\u5f0f\uff0c\u8868\u793a\u51fa\u8f93\u5165\u7684\u68af\u5ea6\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002 \u7f16\u5199\u4ee3\u7801\uff0c\u8868\u793a\u8f93\u5165\u7684\u68af\u5ea6\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u901a\u5e38\u5305\u542b\u4e0b\u9762\u51e0\u6b65\uff1a \u4f7f\u7528 ctx->DefineOp() \u548c BackwardOpBuilder \u6765\u8868\u793a\u8ba1\u7b97\u8f93\u5165\u7684\u68af\u5ea6\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u8f93\u5165\u7684\u68af\u5ea6\u8ba1\u7b97\u53ef\u80fd\u662f\u591a\u79cd\u8fd0\u7b97\u7684\u7ec4\u5408\uff0c\u56e0\u6b64 DefineOp \u53ca BackwardOpBuilder \u53ef\u80fd\u88ab\u591a\u6b21\u4f7f\u7528\uff1b \u7ecf\u8fc7\u4e0a\u4e00\u6b65\u5b9a\u4e49\u4e86\u8ba1\u7b97\u8fc7\u7a0b\u540e\uff0c\u6700\u7ec8\u5728\u67d0\u4e2a\u7b97\u5b50\u7684\u8f93\u51fa\u4e2d\uff0c\u8bb0\u5f55\u4e86\u9700\u8981\u7684\u68af\u5ea6\u3002\u6211\u4eec\u9700\u8981\u8c03\u7528 ctx->FwOp().InputGradBind() \u65b9\u6cd5\uff0c\u5c06\u4e0a\u4e00\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u548c\u81ea\u5b9a\u4e49 op \u7684\u8f93\u5165\u68af\u5ea6\u7ed1\u5b9a\u3002 \u4ee5\u4e0b\u793a\u4f8b\uff08\u5305\u542b\u6d4b\u8bd5\u5728\u5185\u7684\u5b8c\u6574\u4ee3\u7801\u89c1 \u4ed3\u5e93\u7684 myop_grad \u76ee\u5f55 \uff09\uff0c\u6211\u4eec\u5c06\u9488\u5bf9\u4e00\u4e2a\u540d\u4e3a myop \u7684\u81ea\u5b9a\u4e49 op \u6765\u6ce8\u518c\u5176\u540e\u5411\u751f\u6210\u51fd\u6570\u3002\u8fd9\u4e2a op \u4ec5\u7528\u4e8e\u672c\u6587\u5c55\u793a\u6ce8\u518c\u8fc7\u7a0b\uff0c\u4e0d\u8003\u8651\u5b9e\u9645\u7528\u9014\uff0c myop \u7684\u8ba1\u7b97\u529f\u80fd\u8bbe\u5b9a\u4e3a\u8ba1\u7b97 3*x*x \u3002 \u90a3\u4e48\uff0c\u5bb9\u6613\u5f97\u5230\u5176\u524d\u5411\u4f20\u64ad\u548c\u540e\u5411\u4f20\u64ad\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5373\u53cd\u5411\u8fc7\u7a0b\u4e2d\uff0c x \u7684\u68af\u5ea6\u8ba1\u7b97\u516c\u5f0f\u4e3a 6*x*dy \uff1a myop \u7684\u524d\u5411 op \u5b9a\u4e49\u5982\u4e0b\uff1a REGISTER_USER_OP ( \"myop\" ). Input ( \"in\" ). Output ( \"out\" ). SetTensorDescInferFn ( []( user_op :: InferContext * ctx ) -> Maybe < void > { * ctx -> Shape4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Shape4ArgNameAndIndex ( \"in\" , 0 ); * ctx -> Dtype4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Dtype4ArgNameAndIndex ( \"in\" , 0 ); return Maybe < void >:: Ok (); }); \u5373 myop \u5305\u542b\u552f\u4e00\u7684\u8f93\u5165 in \u548c\u552f\u4e00\u7684\u8f93\u51fa out \u3002 myop \u7684\u53cd\u5411\u68af\u5ea6\u6ce8\u518c\u4ee3\u7801\u5982\u4e0b\uff1a REGISTER_USER_OP_GRAD ( \"myop\" ). SetBackwardOpConfGenFn ( []( user_op :: BackwardOpConfContext * ctx ) { const auto op1_name = ctx -> FwOp (). op_name () + \"_grad1\" ; // \u7b97\u5b50 op1_name \u7528\u4e8e\u8ba1\u7b97 myop.in*(myop.out\u7684\u68af\u5ea6) ctx -> DefineOp ( op1_name , [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"multiply\" ) . InputBind ( \"x\" , ctx -> FwOp (). input ( \"in\" , 0 )) //multiply.x <- myop.in . InputBind ( \"y\" , ctx -> FwOp (). output_grad ( \"out\" , 0 )) //multiply.y <- myop.out\u7684\u68af\u5ea6 . Output ( \"out\" ) . Build (); }); const auto op2_name = ctx -> FwOp (). op_name () + \"_grad2\" ; // \u7b97\u5b50 op2_name \u7528\u4e8e\u8ba1\u7b97 6*op1_name ctx -> DefineOp ( op2_name , [ & ctx , & op1_name ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"scalar_mul\" ) . InputBind ( \"in\" , ctx -> GetOp ( op1_name ). output ( \"out\" , 0 )) . Attr ( \"has_float_operand\" , true ) . Attr ( \"has_int_operand\" , false ) . Attr ( \"float_operand\" , static_cast < double > ( 6 )) . Attr ( \"int_operand\" , static_cast < int64_t > ( 6 )) . Output ( \"out\" ) . Build (); }); // (myop.in\u7684\u68af\u5ea6) <- op1_name.out ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"in\" , 0 ), [ & ctx , & op2_name ]() -> const std :: string & { return ctx -> GetOp ( op2_name ) . output ( \"out\" , 0 ); }); }); \u5b8f REGISTER_USER_OP_GRAD(\"myop\") \u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u53c2\u6570\u662f op_type_name \uff0c\u9700\u8981\u4e0e REGISTER_USER_OP \u6ce8\u518c\u65f6\u7684\u4e00\u81f4\u3002 REGISTER_USER_OP_GRAD(\"myop\") \u4f1a\u8fd4\u56de\u4e00\u4e2a oneflow::user_op::OpGradRegistry \u5bf9\u8c61\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528\u5b83\u7684\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u81ea\u5b9a\u4e49 op \u7684\u540e\u5411\u751f\u6210\u51fd\u6570\u3002 \u4ee5\u4e0a\u68af\u5ea6\u6ce8\u518c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6700\u7ec8\u8981\u6c42\u7684 myop \u7684\u8f93\u5165\u7684\u68af\u5ea6\u7684\u8868\u8fbe\u5f0f\u4e3a 6*x*dy \uff0c\u53ef\u4ee5\u4ece\u4ee3\u7801\u4e2d\u770b\u5230\u8fd9\u4e2a\u6c42\u89e3\u8fc7\u7a0b\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u4e86 op1_name \uff0c\u5229\u7528\u5df2\u6709\u7684\u7b97\u5b50 multiply \u6c42\u89e3 x*dy \uff1a // \u7b97\u5b50 op1_name \u7528\u4e8e\u8ba1\u7b97 myop.in*(myop.out\u7684\u68af\u5ea6) ctx -> DefineOp ( op1_name , [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"multiply\" ) . InputBind ( \"x\" , ctx -> FwOp (). input ( \"in\" , 0 )) //multiply.x <- myop.in . InputBind ( \"y\" , ctx -> FwOp (). output_grad ( \"out\" , 0 )) //multiply.y <- myop.out\u7684\u68af\u5ea6 . Output ( \"out\" ) . Build (); }); \u7136\u540e\uff0c\u5b9a\u4e49\u4e86 op2_name \uff0c\u5229\u7528\u5df2\u6709\u7684\u7b97\u5b50 op2_name \u6c42\u89e3 6*op1_name \uff0c\u5373 6*x*dy \u3002 // \u7b97\u5b50 op2_name \u7528\u4e8e\u8ba1\u7b97 6*op1_name ctx -> DefineOp ( op2_name , [ & ctx , & op1_name ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"scalar_mul\" ) . InputBind ( \"in\" , ctx -> GetOp ( op1_name ). output ( \"out\" , 0 )) . Attr ( \"has_float_operand\" , true ) . Attr ( \"has_int_operand\" , false ) . Attr ( \"float_operand\" , static_cast < double > ( 6 )) . Attr ( \"int_operand\" , static_cast < int64_t > ( 6 )) . Output ( \"out\" ) . Build (); }); \u6700\u540e\uff0c\u5c06 op2_name \u7684\u8f93\u51fa\u7ed3\u679c\uff08\u5373 6*x*dy \uff09\u7ed1\u5b9a\u5230 myop \u7684\u8f93\u5165\u7684\u68af\u5ea6\u4e0a\uff0c\u5b8c\u6210\u6ce8\u518c\u3002 // (myop.in\u7684\u68af\u5ea6) <- op1_name.out ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"in\" , 0 ), [ & ctx , & op2_name ]() -> const std :: string & { return ctx -> GetOp ( op2_name ) . output ( \"out\" , 0 ); }); \u4ee5\u4e0a\u662f\u5b8c\u6574\u7684\u6ce8\u518c\u68af\u5ea6\u7684\u6d41\u7a0b\uff0c\u4ee5\u4e0b\u5206\u522b\u4ecb\u7ecd\u76f8\u5173\u7684\u7c7b\u53ca\u65b9\u6cd5\u3002 SetBackwardOpConfGenFn \u65b9\u6cd5 \u00b6 \u6211\u4eec\u4f7f\u7528 OpGradRegistry::SetBackwardOpConfGenFn(fn) \u8bbe\u7f6e\u540e\u5411\u751f\u6210\u51fd\u6570 fn \uff0c\u540e\u5411\u751f\u6210\u51fd\u6570 fn \u7684\u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a void fn ( BackwardOpConfContext * ctx ); BackwardOpConfContext* ctx \u5e26\u6709\u751f\u6210 op \u6240\u9700\u8981\u7684\u4fe1\u606f\u3002 BackwardOpConfContext \u8be6\u7ec6\u4ecb\u7ecd \u00b6 BackwardOpConfContext \u7c7b\u4e2d\u7684\u5e38\u7528\u65b9\u6cd5\u53ca\u5176\u4f5c\u7528\u5982\u4e0b\uff1a UserOpWrapper& FwOp(); \uff1a\u83b7\u53d6\u524d\u5411 op GetOp(op_name) : \u6839\u636e op_name \u521b\u5efa\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684 op \uff0c GetOp \u91c7\u7528\u5ef6\u8fdf\u521b\u5efa\u673a\u5236(lazy init)\uff0c\u53ea\u6709 GetOp \u88ab\u8c03\u7528\u65f6\uff0c\u5bf9\u5e94\u7684 op \u624d\u4f1a\u88ab\u771f\u6b63\u521b\u5efa void DefineOp(op_name, fn) \uff1a\u5b9a\u4e49\u540d\u4e3a op_name \u7684 Op \u7684\u521b\u5efa\u51fd\u6570 fn \u3002\u5f53\u8c03\u7528 ctx->GetOp(op_name) \u65f6\uff0c \u5728 OneFlow \u6846\u67b6\u4e2d\u4f1a\u89e6\u53d1 fn \u8fdb\u884c Op \u521b\u5efa\uff0c\u5982\u679c Op \u5df2\u7ecf\u88ab\u521b\u5efa\u8fc7\uff0c\u90a3\u4e48\u8fd9\u91cc\u76f4\u63a5\u83b7\u53d6\u521b\u5efa\u7684\u7ed3\u679c\u3002 fn \u51fd\u6570\u63a5\u6536\u4e00\u4e2a BackwardOpBuilder \u53c2\u6570\uff0c\u7528\u4e8e\u6784\u5efa\u53cd\u5411 op\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u4ecb\u7ecd BackwardOpBuilder \u3002 BackwardOpBuilder \u8be6\u7ec6\u4ecb\u7ecd \u00b6 BackwardOpBuilder \u7528\u4e8e\u6784\u5efa\u4e00\u4e2a\u53cd\u5411 op\u3002\u4ee5\u4e0a\u6587\u4e2d\u7684\u4ee3\u7801\u7247\u6bb5\u4e3a\u4f8b ctx -> DefineOp ( op1_name , [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"multiply\" ) . InputBind ( \"x\" , ctx -> FwOp (). input ( \"in\" , 0 )) //multiply.x <- myop.in . InputBind ( \"y\" , ctx -> FwOp (). output_grad ( \"out\" , 0 )) //multiply.y <- myop.out\u7684\u68af\u5ea6 . Output ( \"out\" ) . Build (); }); \u6211\u4eec\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6700\u7ec8\u8c03\u7528 Build \u6784\u5efa\u4e86\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97 x*dy \u7684\u53cd\u5411 op\u3002 \u5404\u4e2a\u63a5\u53e3\u7684\u4f5c\u7528\u5982\u4e0b\uff1a OpTypeName(\"multiply\") \u6307\u5b9a\u4e00\u4e2a op \u7684 op_type_name \uff0c\u4f7f\u7528\u8fd9\u4e2a op \u6765\u5e2e\u52a9\u6211\u4eec\u8fdb\u884c\u53cd\u5411\u68af\u5ea6\u7684\u8ba1\u7b97 InputBind(arg_name, blob) \u5c06 multiply \u7684\u8f93\u5165 arg_name \u4e0e \u6307\u5b9a\u7684 blob \u8fdb\u884c\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u8c03\u7528\u591a\u6b21\uff0c\u5982\u679c\u8be5 arg_name \u5bf9\u5e94\u591a\u4e2a\u8f93\u5165blob\uff0c\u5219\u8c03\u7528 Input \u7684\u987a\u5e8f\u5c31\u662f\u5176\u5bf9\u5e94\u7684 index \u987a\u5e8f Output(arg_name, num) \u6307\u5b9a\u4e00\u4e2a arg_name \u5b9e\u9645\u5bf9\u5e94\u7684\u8f93\u51fa blob \u7684\u6570\u91cf\uff0c\u5982\u679c\u4e0d\u586b num \uff0c\u5219 num \u9ed8\u8ba4\u4e3a1 Attr(attr_name, val) op \u8bbe\u7f6e\u5c5e\u6027\u503c\uff0c\u4e0e\u6ce8\u518c op \u65f6\u7684\u7528\u6cd5\u4e00\u6837 Build() \u5b8c\u6210\u5404\u79cd\u8bbe\u7f6e\u540e\uff0c\u901a\u8fc7\u8c03\u7528 Build \u5b8c\u6210\u53cd\u5411 op \u7684\u6784\u5efa UserOpWrapper \u8be6\u7ec6\u4ecb\u7ecd \u00b6 \u8c03\u7528 ctx->FwOp() \u4f1a\u8fd4\u56de\u4ee3\u8868\u524d\u5411\u81ea\u5b9a\u4e49 op\uff0c\u5373 myop \u7684 UserOpWrapper \u5bf9\u8c61\uff0c\u901a\u8fc7\u8c03\u7528 UserOpWrapper \u7684\u65b9\u6cd5\uff0c\u5b8c\u6210\u68af\u5ea6\u7ed1\u5b9a\u3002 ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"in\" , 0 ), [ & ctx , & op2_name ]() -> const std :: string & { return ctx -> GetOp ( op2_name ) . output ( \"out\" , 0 ); }); UserOpWrapper \u7684\u5e38\u89c1\u65b9\u6cd5\u6709\uff1a InputGradBind(input, grad_fn) \uff1a\u7ed1\u5b9a\u524d\u5411 op \u7684\u8f93\u5165\u4e0e\u83b7\u53d6\u68af\u5ea6\u7684\u51fd\u6570 grad_fn \u3002 OneFlow \u4f1a\u81ea\u52a8\u5224\u65ad input \u662f\u5426\u9700\u8981\u751f\u6210\u540e\u5411\u7684\u68af\u5ea6\uff0c\u5982\u679c\u9700\u8981\u5219\u89e6\u53d1 grad_fn \u5e76\u8fdb\u884c\u7ed1\u5b9a\uff1b input(arg_name, index) \uff1a\u5f97\u5230\u8f93\u5165 arg_name \u5bf9\u5e94\u7684 blob output(arg_name,index) \uff1a\u5f97\u5230\u8f93\u51fa arg_name \u5bf9\u5e94\u7684 blob output_grad(output_arg_name, index) \uff1a \u8fd4\u56de\u524d\u5411 op \u7684\u8f93\u51fa output_arg_name \u5bf9\u5e94\u7684\u540e\u5411\u68af\u5ea6\u7684 blob attr(attr_name) \uff1a\u83b7\u53d6\u5c5e\u6027 attr_name \u5bf9\u5e94\u7684\u503c arg_tensor_desc(arg_name, index) \uff1a\u8fd4\u56de\u524d\u5411 op \u7684\u8f93\u5165/\u8f93\u51fa\u5bf9\u5e94\u7684 tensor \u4fe1\u606f\uff0c\u5305\u542b shape \u3001 dtype \u7b49 \u4e3a\u8ba1\u7b97\u68af\u5ea6\u5b9a\u5236 op \u00b6 \u6211\u4eec\u524d\u6587\u63d0\u5230\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u5df2\u6709 op \u7684\u7ec4\u5408\uff0c\u8868\u793a\u8ba1\u7b97\u68af\u5ea6\u7684\u8fc7\u7a0b\u3002\u4f46\u662f\uff0c\u5f53\u67d0\u4e9b\u7279\u6b8a\u7684\u524d\u5411 op\uff0c\u96be\u4ee5\u4f7f\u7528\u5df2\u6709 op \u63cf\u8ff0\u5176\u68af\u5ea6\u6c42\u89e3\u8fc7\u7a0b\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u8ba1\u7b97\u68af\u5ea6\u4e13\u95e8\u8bbe\u8ba1\u548c\u521b\u5efa\u7b97\u5b50\u3002\u8fd9\u65b9\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u53c2\u8003 \u4f7f\u7528 Python \u6269\u5c55 Op \u53ca relu_op.cpp \uff0c\u524d\u8005\u4f7f\u7528 Python \u5b9a\u5236\u53cd\u5411\u6c42\u5bfc Op\uff0c\u540e\u8005\u4f7f\u7528 C++ \u5b9a\u5236\u53cd\u5411\u6c42\u5bfc Op\u3002 UserOpConfBuilder \u8be6\u7ec6\u4ecb\u7ecd \u00b6 \u5728 OneFlow \u7684 Python \u524d\u7aef\u4e2d\uff0c\u63d0\u4f9b\u4e86 UserOpConfBuilder \u6784\u5efa\u81ea\u5b9a\u4e49 op \u7684 wrapper\uff0c\u5728\u4e0a\u6587 \u5728 Python \u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49 op \u4e2d\u5df2\u7ecf\u4f7f\u7528\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u603b\u7ed3\u4e0b Python \u5c42\u7684 UserOpConfBuilder \u7684\u5404\u65b9\u6cd5\u63a5\u53e3\u4e0e C++ \u5c42\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u6bd4\u5982\u6211\u4eec\u5c01\u88c5\u4e86\u4e00\u4e2a cast wrapper: def cast ( x , dtype , name ): return ( flow . user_op_builder ( name ) . Op ( \"cast\" ) . Input ( \"in\" , [ x ]) . Output ( \"out\" ) . Attr ( \"dtype\" , dtype ) . Build () . InferAndTryRun () . RemoteBlobList ()[ 0 ] ) ) Op(op_type_name) \uff1a\u63a5\u53d7\u7684\u53c2\u6570\u4e3a C++ \u4e2d\u6ce8\u518c\u65f6\u7684 op_type_name Input(input_name, input_blob_list) \uff1a\u8f93\u5165\uff0c input_name \u5e94\u4e0e C++ \u4e2d\u6ce8\u518c op \u65f6 Input \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e00\u81f4 Output(output_name, num=1) \uff1a\u8f93\u51fa\uff0c output_name \u53ca num \u5e94\u4e0e C++ \u4e2d\u6ce8\u518c op \u65f6\u7684 Output \u4e00\u81f4 Attr(attr_name, attr_value) \uff1a\u8bbe\u7f6e\u5c5e\u6027\uff0c attr_name \u5bf9\u5e94\u4e86 C++ \u6ce8\u518c\u65f6\u4f7f\u7528 OpRegistry::Attr \u58f0\u660e\u7684\u5c5e\u6027\uff0c\u4e14 attr_value \u7c7b\u578b\u5e94\u5f53\u4e0e\u58f0\u660e\u65f6\u7684\u5c5e\u6027\u7c7b\u578b\u4e00\u81f4 Build() \uff1a\u6784\u5efa\u5f97\u5230 Python \u5c42\u7684 user op \u901a\u8fc7\u8c03\u7528 user op \u4e2d\u7684 InferAndTryRun \u53ef\u4ee5\u5b8c\u6210\u63a8\u5bfc\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u7528 RemoteBlobList \u6216\u8005 SoleOutputBlob \u65b9\u6cd5\uff0c\u53ef\u4ee5\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c\u3002 RemoteBlobList \uff1a\u83b7\u53d6\u6240\u6709\u8f93\u51fa\uff0c\u9002\u7528\u4e8e\u6709\u591a\u4e2a\u8f93\u51fa\u7684 op\uff0c\u6240\u6709\u7684 op \u653e\u7f6e\u5728\u4e00\u4e2a list \u4e2d SoleOutputBlob \uff1a\u83b7\u53d6\u552f\u4e00\u7684\u8f93\u51fa\uff0c\u9002\u7528\u4e8e\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u7684 op","title":"\u4f7f\u7528 C++ \u6269\u5c55 Op"},{"location":"extended_topics/user_op.html#c-op","text":"\u672c\u6587\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 C++ \u6269\u5c55 Op\uff0c\u4e0e\u7528 Python \u6269\u5c55 Op \u76f8\u6bd4\uff0c\u4f7f\u7528 C++ \u6269\u5c55 Op\uff0c\u66f4\u52a0\u7075\u6d3b\u3001\u53ef\u914d\u7f6e\u7684\u9009\u9879\u66f4\u591a\uff0c\u4e14\u652f\u6301\u4f7f\u7528 GPU \u4f5c\u4e3a\u8ba1\u7b97\u8bbe\u5907\u3002\u4e00\u822c\u53ef\u4f7f\u7528 Python \u6269\u5c55 Op \u7528\u4e8e\u5feb\u901f\u9884\u7814\uff0c\u4f7f\u7528 C++ \u6269\u5c55 Op \u8ffd\u6c42\u9ad8\u6027\u80fd\u3002 \u5728\u9605\u8bfb\u672c\u6587\u524d\uff0c\u5047\u5b9a\u7528\u4e8e\u5df2\u7ecf\u9605\u8bfb \u4f7f\u7528 Python \u6269\u5c55 Op \u4e00\u6587\uff0c\u5e76\u77e5\u6653\u4ee5\u4e0b\u77e5\u8bc6\u70b9\uff1a OneFlow \u4e2d\uff0c\u903b\u8f91\u4e0a\u7684\u8fd0\u7b97\u5355\u5143 Op \u7684\u6982\u5ff5 OneFlow \u4e2d\uff0c\u5b9e\u9645\u8d1f\u8d23\u8fd0\u7b97\u7684 Kernel \u7684\u6982\u5ff5 Op \u79cd\u7c7b\u7684\u6807\u8bc6\u7b26 op_type_name \u7684\u6982\u5ff5","title":"\u4f7f\u7528 C++ \u6269\u5c55 Op"},{"location":"extended_topics/user_op.html#oneflow-op","text":"OneFlow \u63d0\u4f9b\u4e86\u4e00\u5957\u673a\u5236\uff0c\u6211\u4eec\u5728\u8fd9\u5957\u673a\u5236\u4e0b\u7f16\u5199\u81ea\u5b9a\u4e49 op \u5e76\u5c06\u5176\u6ce8\u518c\u5230 OneFlow \u4e2d\uff0c\u5c31\u53ef\u4ee5\u5728 Python \u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49 op\u3002 \u4e0b\u56fe\u5c55\u793a\u4e86 OneFlow \u4e2d\u81ea\u5b9a\u4e49 op \u7684\u6ce8\u518c\u673a\u5236\uff1a \u53ef\u4ee5\u770b\u5230\uff0c\u5728 OneFlow \u6846\u67b6\u4e2d\uff0c\u4e0e\u81ea\u5b9a\u4e49 op \u6ce8\u518c\u6709\u5173\u7684 Registry \u6709\u4e09\u79cd\uff1a OpGradRegistry \uff1a\u7ba1\u7406\u68af\u5ea6\u6ce8\u518c\uff0c\u7528\u4e8e\u53cd\u5411\u56fe\u4e2d\u81ea\u52a8\u6c42\u68af\u5ea6 OpRegistry \uff1a\u7ba1\u7406 op \u6ce8\u518c\uff0c\u7528\u4e8e\u751f\u6210\u524d\u5411\u56fe\u53ca\u6784\u5efa Task Graph OpKernelRegistry \uff1a\u7ba1\u7406 kernel \u6ce8\u518c\uff0c\u7528\u4e8e\u8fd0\u884c\u65f6\u6267\u884c\u7528\u6237\u7f16\u5199\u7684 kernel \u903b\u8f91 \u5728\u5177\u4f53\u7684\u7f16\u7a0b\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5176\u5b9e\u662f\u7528 C++ \u7f16\u5199\u81ea\u5b9a\u4e49 op\uff0c\u5e76\u751f\u6210\u52a8\u6001\u94fe\u63a5\u5e93(so)\u6587\u4ef6\u3002\u5728 Python \u4e2d\u52a0\u8f7d\u5bf9\u5e94\u7684 so \u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8be5 so \u6587\u4ef6\u4e2d\u7684\u81ea\u5b9a\u4e49 op\u3002\u5728 \u4f7f\u7528 Python \u6269\u5c55 Op \u65f6\uff0c\u5e95\u5c42\u4e5f\u662f\u4f7f\u7528\u4e86\u8fd9\u5957\u673a\u5236\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e9b\u7ec6\u8282\u88ab\u5c01\u88c5\u5728\u4e86\u76f8\u5173 API \u4e2d\uff0c\u5bf9\u5f00\u53d1\u8005\u900f\u660e\u3002 \u5728 user_op_conf.proto \u4e2d\u53ef\u4ee5\u67e5\u770b user op \u7684\u6570\u636e\u7ed3\u6784\uff1a syntax = \"proto2\"; package oneflow; import \"oneflow/core/framework/user_op_attr.proto\"; message UserOpConf { message ListString { repeated string s = 1; } required string op_type_name = 1; map<string, ListString> input = 2; map<string, ListString> output = 3; map<string, UserOpAttrVal> attr = 4; } \u5176\u4e2d\u7684 op_type_name \u662f\u4ee3\u8868 op \u7c7b\u522b\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u662f\u6307\u660e op \u7c7b\u522b\u7684\u5168\u5c40\u552f\u4e00 ID\u3002","title":"OneFlow \u4e2d\u7684 Op \u7cfb\u7edf"},{"location":"extended_topics/user_op.html#c-op_1","text":"\u5b9e\u73b0 op \u5e76\u6ce8\u518c\uff1aop \u7684\u5b9e\u73b0\u4e3b\u8981\u7528\u4e8e\u524d\u5411\u56fe\u6784\u56fe\uff0c\u5305\u62ec\u6307\u5b9a op \u7684\u540d\u79f0\u3001\u8f93\u5165\u3001\u8f93\u51fa\u3001\u914d\u7f6e\u5c5e\u6027\u4ee5\u53ca\u4e00\u4e9b\u5fc5\u8981\u7684\u7528\u4e8e\u63a8\u5bfc tensor \u7684\u5f62\u72b6\u4e0e\u6570\u636e\u7c7b\u578b\u7684\u51fd\u6570 \u5b9e\u73b0 op \u5bf9\u5e94\u7684 kernel \u5e76\u6ce8\u518c\uff1akernel \u8d1f\u8d23\u8fd0\u884c\u65f6\u7684\u5177\u4f53\u8fd0\u7b97\u8fc7\u7a0b\uff0c\u4e00\u4e2a op \u53ef\u80fd\u4f1a\u5bf9\u5e94\u591a\u4e2a kernel \uff08\u53ef\u9009\uff09\u5b9e\u73b0 op \u5bf9\u5e94\u7684 grad \u5e76\u6ce8\u518c\uff1a\u5982\u679c\u81ea\u5b9a\u4e49 op \u9700\u8981\u652f\u6301\u540e\u5411\u5c55\u5f00\uff0c\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u540e\u5411\u51fd\u6570\u5e76\u6ce8\u518c \u7f16\u8bd1\u94fe\u63a5\u5f97\u5230 so \u6587\u4ef6 \u5728 Python \u4e2d\u52a0\u8f7d so \u6587\u4ef6\uff0c\u5e76\u4e14\u4f7f\u7528 oneflow.user_op_builder \u5c01\u88c5 C++ \u7f16\u5199\u7684\u81ea\u5b9a\u4e49 op \u6d4b\u8bd5","title":"\u4f7f\u7528 C++ \u6269\u5c55 op \u7684\u6b65\u9aa4"},{"location":"extended_topics/user_op.html#_1","text":"\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 CPU \u53ca GPU \u8fd0\u7b97\u7684 \"myrelu\" \u81ea\u5b9a\u4e49 op\u3002 \u5b8c\u6574\u7684\u4ee3\u7801\u89c1 code/extended_topics/create_user_op \u3002","title":"\u793a\u4f8b"},{"location":"extended_topics/user_op.html#op","text":"\u6211\u4eec\u5728 myrelu_op.cpp \u4e2d\u5b9a\u4e49\u4e86 op \u5e76\u5b8c\u6210\u4e86\u6ce8\u518c\uff1a #include \"oneflow/core/framework/framework.h\" namespace oneflow { namespace { REGISTER_USER_OP ( \"myrelu\" ) . Input ( \"in\" ) . Output ( \"out\" ) . SetTensorDescInferFn ( []( user_op :: InferContext * ctx ) -> Maybe < void > { * ctx -> Shape4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Shape4ArgNameAndIndex ( \"in\" , 0 ); * ctx -> Dtype4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Dtype4ArgNameAndIndex ( \"in\" , 0 ); return Maybe < void >:: Ok (); }); } // namespace } // namespace oneflow \u5176\u6240\u4f5c\u5de5\u4f5c\u4e0e \u4f7f\u7528 Python \u6269\u5c55 Op \u5b8c\u5168\u7c7b\u4f3c\u3002\u5373\u5229\u7528 REGISTER_USER_OP \u6ce8\u518c\u4e86\u4e00\u4e2a\u540d\u4e3a myrelu \u7684 Op\uff0c\u8bbe\u7f6e\u4e86\u8f93\u5165\u3001\u8f93\u51fa\uff0c\u5e76\u6839\u636e\u8f93\u5165\u63a8\u5bfc\u4e86\u8f93\u51fa\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u3002","title":"op \u7684\u5b9e\u73b0\u4e0e\u6ce8\u518c"},{"location":"extended_topics/user_op.html#cpu-kernel","text":"\u6211\u4eec\u5728 myrelu_cpu_kernel.cpp \u4e2d\u5b9e\u73b0\u4e86 CPU \u7248\u672c\u7684 kernel \u5e76\u6ce8\u518c\uff1a #include \"oneflow/core/framework/framework.h\" namespace oneflow { namespace { template < typename T > void MyRelu ( DeviceCtx * ctx , const int64_t n , const T * x , T * y ) { T zero = ( T )( 0 ); for ( int64_t i = 0 ; i != n ; ++ i ) { y [ i ] = std :: max ( x [ i ], zero ); } } template < DeviceType device_type , typename T > class ReluKernel final : public user_op :: OpKernel { public : ReluKernel () = default ; ~ ReluKernel () = default ; private : void Compute ( user_op :: KernelComputeContext * ctx ) const override { const user_op :: Tensor * in_tensor = ctx -> Tensor4ArgNameAndIndex ( \"in\" , 0 ); user_op :: Tensor * out_tensor = ctx -> Tensor4ArgNameAndIndex ( \"out\" , 0 ); MyRelu < T > ( ctx -> device_ctx (), in_tensor -> shape (). elem_cnt (), in_tensor -> dptr < T > (), out_tensor -> mut_dptr < T > ()); } bool AlwaysComputeWhenAllOutputsEmpty () const override { return false ; } }; #define REGISTER_RELU_KERNEL(device, dtype) \\ REGISTER_USER_KERNEL(\"myrelu\") \\ .SetCreateFn<ReluKernel<device, dtype>>() \\ .SetIsMatchedHob( \\ (user_op::HobDeviceTag() == device) & \\ (user_op::HobDataType(\"out\", 0) \\ == GetDataType<dtype>::value)); REGISTER_RELU_KERNEL ( DeviceType :: kCPU , float ) REGISTER_RELU_KERNEL ( DeviceType :: kCPU , double ) } // namespace } // namespace oneflow \u5728 OneFlow \u4e2d\u5b9e\u73b0 kernel\uff0c \u5fc5\u987b\u5b9a\u4e49\u4e00\u4e2a\u7ee7\u627f\u81ea oneflow::user_op::OpKernel \u7684\u7c7b\uff0c\u5e76\u91cd\u5199\u5176\u4e2d\u7684\u865a\u51fd\u6570\u3002 \u5728\u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u91cd\u5199\u4e86 Compute \u4e0e AlwaysComputeWhenAllOutputsEmpty \u4e24\u4e2a\u865a\u51fd\u6570\uff0c\u4ed6\u4eec\u5206\u522b\u7684\u610f\u4e49\u662f\uff1a Compute \u5fc5\u987b\u91cd\u5199\uff0c\u5728\u5176\u4e2d\u5b9e\u73b0\u5177\u4f53\u7684\u8fd0\u7b97\u903b\u8f91 AlwaysComputeWhenAllOutputsEmpty \u5fc5\u987b\u91cd\u5199\uff0c\u5bf9\u4e8e\u7edd\u5927\u591a\u6570 op \u800c\u8a00\u76f4\u63a5\u8fd4\u56de false \u5373\u53ef\u3002\u5bf9\u4e8e\u6781\u5c11\u6570\u5185\u90e8\u9700\u8981\u7ef4\u62a4\u72b6\u6001\uff0c\u5373\u4f7f\u8f93\u51fa\u4e3a\u7a7a\u4e5f\u9700\u8981\u8c03\u7528 kernel \u8fdb\u884c\u8ba1\u7b97\u7684 op \u800c\u8a00\uff0c\u5e94\u8be5\u8fd4\u56de true \u5b9e\u73b0 kernel \u7c7b\u540e\uff0c\u9700\u8981\u8c03\u7528 REGISTER_USER_KERNEL \u6ce8\u518c\u3002 REGISTER_USER_KERNEL(\"myrelu\") \u6240\u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u53c2\u6570\uff0c\u5c31\u662f op_type_name \uff0c \u4f9d\u636e op_type_name \u5b8c\u6210\u6ce8\u518c\u548c\u8fd0\u884c\u65f6\u7684\u67e5\u8be2\u5de5\u4f5c\uff0c\u5728 Python \u5c42\u5c01\u88c5 op \u65f6\u4e5f\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a op_type_name \u3002 REGISTER_USER_KERNEL(\"myrelu\") \u4f1a\u8fd4\u56de\u4e00\u4e2a OpKernelRegistry \u5bf9\u8c61\uff0c\u9700\u8981\u8c03\u7528\u5b83\u7684\u5404\u4e2a\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u6ce8\u518c\u4fe1\u606f\u3002\u4e0a\u6587\u4ee3\u7801\u4e2d\u6d89\u53ca\u5230 SetCreateFn<T>() \uff1a\u8be5\u6a21\u677f\u65b9\u6cd5\u7684\u6a21\u677f\u53c2\u6570 T \uff0c\u5c31\u662f\u6211\u4eec\u5b9e\u73b0\u7684 kernel \u7c7b\uff0cOneFlow \u5c06\u4f7f\u7528\u5b83\u521b\u5efa kernel \u5bf9\u8c61\u3002 SetIsMatchedHob \uff1a\u56e0\u4e3a\u4e00\u4e2a op \u53ef\u80fd\u6709\u591a\u4e2a kernel\uff0c\u8981\u60f3\u6839\u636e\u7269\u7406\u8bbe\u5907\u53ca\u6570\u636e\u683c\u5f0f\u7684\u4e0d\u540c\u800c\u9009\u62e9\u4e0d\u540c\u7684 kernel \u8fdb\u884c\u8ba1\u7b97\uff0c\u5c31\u9700\u8981\u8c03\u7528 SetIsMatchedHob \u8fdb\u884c\u8bbe\u7f6e\u3002\u8be5\u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u4e3a true \u65f6\uff0cOneFlow \u5c06\u8c03\u7528\u8be5 kernel \u5b8c\u6210\u8ba1\u7b97\u3002","title":"CPU kernel \u7684\u5b9e\u73b0\u4e0e\u6ce8\u518c"},{"location":"extended_topics/user_op.html#gpu-kernel","text":"\u6211\u4eec\u5728 myrelu_gpu_kernel.cu \u4e2d\u5b9e\u73b0\u4e86 GPU \u7248\u672c\u7684 kernel \u5e76\u6ce8\u518c\uff1a #include \"oneflow/core/framework/framework.h\" #include <cub/cub.cuh> namespace oneflow { namespace { template < typename T > __global__ void ReluForwardGpu ( const int n , const T * x , T * y ) { CUDA_1D_KERNEL_LOOP ( i , n ) { y [ i ] = x [ i ] > 0 ? x [ i ] : 0 ; } } class ReluGpuFloatKernel final : public user_op :: OpKernel { public : ReluGpuFloatKernel () = default ; ~ ReluGpuFloatKernel () = default ; private : void Compute ( user_op :: KernelComputeContext * ctx ) const override { const user_op :: Tensor * in_tensor = ctx -> Tensor4ArgNameAndIndex ( \"in\" , 0 ); user_op :: Tensor * out_tensor = ctx -> Tensor4ArgNameAndIndex ( \"out\" , 0 ); int32_t n = in_tensor -> shape (). elem_cnt (); const float * in_ptr = in_tensor -> dptr < float > (); float * out_ptr = out_tensor -> mut_dptr < float > (); ReluForwardGpu < float > <<< 32 , 1024 , 0 , ctx -> device_ctx () -> cuda_stream () >>> ( n , in_ptr , out_ptr ); } bool AlwaysComputeWhenAllOutputsEmpty () const override { return false ; } }; #define REGISTER_RELU_KERNEL(device, dtype) \\ REGISTER_USER_KERNEL(\"myrelu\") \\ .SetCreateFn<ReluGpuFloatKernel>() \\ .SetIsMatchedHob( \\ (user_op::HobDeviceTag() == device) & \\ (user_op::HobDataType(\"out\", 0) \\ == GetDataType<dtype>::value)); REGISTER_RELU_KERNEL ( DeviceType :: kGPU , float ) REGISTER_RELU_KERNEL ( DeviceType :: kGPU , double ) } // namespace } // namespace oneflow \u53ef\u4ee5\u770b\u5230\uff0c \u5b9e\u73b0\u5e76\u6ce8\u518c GPU kernel \u7684\u8fc7\u7a0b\u4e0e CPU kernel \u51e0\u4e4e\u4e00\u81f4\u3002\u533a\u522b\u4e3b\u8981\u5728\u4e8e\uff1a \u56e0\u4e3a\u4f7f\u7528\u4e86 CUDA \u7f16\u7a0b\uff0c\u6240\u4ee5\u5305\u542b\u4e86 CUDA \u5bf9\u5e94\u7684\u5934\u6587\u4ef6 Compute \u5185\u90e8\u4f7f\u7528\u4e86 GPU \u7684\u65b9\u6cd5 SetIsMatchedHob \u4e2d\u6240\u5339\u914d\u7684\u8bbe\u5907\u4e3a GPU \u6b64\u5916\uff0c\u6211\u4eec\u9a6c\u4e0a\u4f1a\u5728\u4e0b\u6587\u770b\u5230\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86 CUDA\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 nvcc \u7f16\u8bd1\u5668\uff08\u800c\u4e0d\u662f g++\uff09\u6765\u7f16\u8bd1 GPU kernel\u3002","title":"GPU kernel \u7684\u5b9e\u73b0\u4e0e\u6ce8\u518c"},{"location":"extended_topics/user_op.html#_2","text":"\u5728 oneflow.sysconfig \u4e0b\u5305\u542b\u4e86 get_compile_flags \u3001 get_include \u3001 get_lib \u3001 get_link_flags \u65b9\u6cd5\u5206\u522b\u5bf9\u5e94\u81ea\u5b9a\u4e49 op \u65f6\u7684\uff1a \u7f16\u8bd1\u9009\u9879 \u5934\u6587\u4ef6\u8def\u5f84 \u94fe\u63a5\u5e93\u8def\u5f84 \u94fe\u63a5\u9009\u9879 \u6bd4\u5982\uff1a >>> import oneflow >>> oneflow.sysconfig.get_compile_flags() ['-I/home/yaochi/oneflow/build/python_scripts/oneflow/include', '-DHALF_ENABLE_CPP11_USER_LITERALS=0', '-DWITH_CUDA', '-D_GLIBCXX_USE_CXX11_ABI=0'] \u4e5f\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u76f4\u63a5\u83b7\u53d6\u7f16\u8bd1\u3001\u94fe\u63a5\u9009\u9879\uff1a python -c \"import oneflow; print(' '.join(oneflow.sysconfig.get_compile_flags()))\" python -c \"import oneflow; print(' '.join(oneflow.sysconfig.get_link_flags()))\" \u5bf9\u4e8e GPU kernel\uff0c\u94fe\u63a5\u65f6\u8fd8\u9700\u8981\u6307\u5b9a cudart \u5e93\u3002","title":"\u7f16\u8bd1\u94fe\u63a5\u9009\u9879\u8bf4\u660e"},{"location":"extended_topics/user_op.html#_3","text":"\u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u793a\u4f8b\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b Makefile \u8fdb\u884c\u6784\u5efa\uff1a CFLAGS = $( shell python -c \"import oneflow; print(' '.join(oneflow.sysconfig.get_compile_flags()))\" ) LFLAGS = $( shell python -c \"import oneflow; print(' '.join(oneflow.sysconfig.get_link_flags()))\" ) CUDAPATH = /usr/local/cuda-10.1/lib64 all: final_relu.so myrelu_op.o: myrelu_op.cpp g++ -std = c++11 -c myrelu_op.cpp \\ -o myrelu_op.o \\ -fPIC \\ ${ CFLAGS } \\ ${ LFLAGS } \\ -O2 myrelu_cpu_kernel.o: myrelu_cpu_kernel.cpp g++ -std = c++11 -c myrelu_cpu_kernel.cpp \\ -o myrelu_cpu_kernel.o \\ $( CFLAGS ) -fPIC myrelu_gpu_kernel.o: myrelu_gpu_kernel.cu nvcc -std = c++11 -c myrelu_gpu_kernel.cu \\ -o myrelu_gpu_kernel.o \\ $( CFLAGS ) -x cu -Xcompiler -fPIC final_relu.so: myrelu_op.o myrelu_cpu_kernel.o myrelu_gpu_kernel.o g++ -std = c++11 myrelu_op.o \\ myrelu_cpu_kernel.o \\ myrelu_gpu_kernel.o \\ -shared -o final_relu.so \\ $( CFLAGS ) \\ -fPIC \\ -L $( CUDAPATH ) \\ -lcudart \\ $( LFLAGS ) clean: rm -rf *.so *.o \u6211\u4eec\u4f7f\u7528 g++ \u7f16\u8bd1 myrelu_op.cpp \u3001 myrelu_cpu_kernel.cpp \uff0c\u4f7f\u7528 nvcc \u7f16\u8bd1 myrelu_gpu_kernel.cpp \uff0c\u5f97\u5230\u76ee\u6807\u6587\u4ef6\uff08\".o\" \u6587\u4ef6\uff09\uff0c\u6700\u540e\u628a\u5f97\u5230\u7684\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u4e3a final_relu.so \u3002 \u6211\u4eec\u5c06\u5728 Python \u4e2d\u52a0\u8f7d final_relu.so \u5e76\u4f7f\u7528\u5c01\u88c5\u3001\u4f7f\u7528\u81ea\u5b9a\u4e49 op\u3002","title":"\u7f16\u8bd1\u3001\u94fe\u63a5\u5f97\u5230\u52a8\u6001\u5e93"},{"location":"extended_topics/user_op.html#python-op","text":"\u5728 Python \u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49 op \u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u57fa\u672c\u6b65\u9aa4\uff1a \u4f7f\u7528 oneflow.config.load_library \u52a0\u8f7d so \u6587\u4ef6 \u4f7f\u7528 oneflow.user_op_builder \u751f\u6210\u81ea\u5b9a\u4e49 op \u7684 Python wrapper \u8c03\u7528\u4ee5\u4e0a\u7684 Python wrapper \u5f97\u5230\u7ed3\u679c \u4ee5\u4e0b\u4ee3\u7801\u5728 Python \u5c42\u6b21\u5c01\u88c5\u4e86 myrelu \u5e76\u8c03\u7528\uff1a import oneflow as flow import numpy as np import oneflow.typing as tp # \u52a0\u8f7d\u6a21\u5757 flow . config . load_library ( \"final_relu.so\" ) # \u9ed8\u8ba4\u914d\u7f6e flow . config . gpu_device_num ( 1 ) # python op wrapper function def myrelu ( input_blob ): op = ( flow . user_op_builder ( \"op_myrelu\" ) . Op ( \"myrelu\" ) . Input ( \"in\" , [ input_blob ]) . Output ( \"out\" ) . Build () ) return op . InferAndTryRun () . SoleOutputBlob () # \u7f51\u7edc\u4ee3\u7801 @flow . global_function () def MyJob ( x : tp . Numpy . Placeholder (( 5 ,), dtype = flow . float32 )) -> tp . Numpy : return myrelu ( x ) if __name__ == \"__main__\" : input = np . array ([ - 2 , - 1 , 0 , 1 , 2 ], dtype = np . float32 ) output = MyJob ( input ) print ( input ) print ( output ) \u9884\u671f\u7ed3\u679c\u4e3a\uff1a [-2. -1. 0. 1. 2.] [0. 0. 0. 1. 2.] \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684\uff1a flow.config.load_library(\"final_relu.so\") \u4e3a\u52a0\u8f7d so \u6587\u4ef6\u3002 myrelu \u5185\u90e8\u6784\u5efa python wrapper \u4e0e\u300a\u4f7f\u7528 Python \u6269\u5c55 Op \u300b\u4e2d\u7684 \u5c01\u88c5 Op \u7684 Python \u63a5\u53e3 \u4ee3\u7801\u529f\u80fd\u5b8c\u5168\u4e00\u6837\uff0c\u5728\u6b64\u4e0d\u518d\u91cd\u590d\u89e3\u91ca\u3002 \u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5b8c\u6210 myrelu op \u7684\u6784\u5efa\uff0c\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684 op\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u6784\u5efa\u66f4\u590d\u6742\u7684 op\uff0c\u5c31\u9700\u8981\u5728\u6ce8\u518c\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e00\u4e9b\u989d\u5916\u7684\u9ad8\u7ea7\u7279\u6027\u3002 \u6211\u4eec\u5c06\u4ece op \u6ce8\u518c\u3001 kernel \u6ce8\u518c\u3001gradient \u6ce8\u518c\u53ca Python \u5c42\u7684\u5c01\u88c5\u51e0\u4e2a\u65b9\u9762\u4ecb\u7ecd\u3002","title":"\u5728 Python \u4f7f\u7528\u81ea\u5b9a\u4e49 op"},{"location":"extended_topics/user_op.html#opregistry","text":"","title":"OpRegistry \u8be6\u7ec6\u4ecb\u7ecd"},{"location":"extended_topics/user_op.html#attr","text":"\u6709\u4e9b op \u9664\u4e86\u8f93\u5165\u8f93\u51fa\u5916\uff0c\u8fd8\u9700\u8981\u6709\u914d\u7f6e\u5c5e\u6027\uff0c\u6bd4\u5982 reshape \u9700\u8981\u914d\u7f6e\u5f62\u72b6\uff0c conv \u7c7b\u7b97\u5728\u9700\u8981\u914d\u7f6e\u5bf9\u9f50\u65b9\u5f0f\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u6ce8\u518c\u65f6\u4f7f\u7528 Attr \u65b9\u6cd5\uff0c\u4e3a op \u8bbe\u7f6e\u5c5e\u6027\uff0c\u5176\u539f\u578b\u4e3a\uff1a OpRegistry & Attr < cpp_type > ( const std :: string & name ); \u6211\u4eec\u53ea\u9700\u6307\u5b9a\u5c5e\u6027\u7684\u540d\u5b57\u548c\u7c7b\u578b\u5373\u53ef\u3002 \u6bd4\u5982\uff1a REGISTER_USER_OP ( \"reshape\" ) . Input ( \"in\" ) . Output ( \"out\" ) . Attr < shape > ( \"shape\" ) REGISTER_USER_OP ( \"conv2d\" ) . Input ( \"in\" ) . Input ( \"weight\" ) . Output ( \"out\" ) . Attr < std :: vector < int32_t >> ( \"padding_before\" ) OneFlow \u76ee\u524d\u652f\u6301\u4e86\u5982\u4e0b\u51e0\u79cd C++ \u6570\u636e\u7c7b\u578b\uff1a UserOpAttrType \u5bf9\u5e94\u7684C++\u6570\u636e\u7c7b\u578b kAtInt32 int32_t kAtInt64 int64_t kAtBool bool kAtFloat float kAtDouble double kAtShape oneflow::Shape kAtListInt32 std::vector kAtListInt64 std::vector kAtListFloat std::vector< float > kAtString std::string \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u591a\u4f20\u9012\u4e00\u4e2a\u53c2\u6570\uff0c\u4e3a\u5c5e\u6027\u914d\u7f6e\u9ed8\u8ba4\u503c\uff0c\u9ed8\u8ba4\u503c\u7684\u7c7b\u578b\u5373\u8868\u683c\u4e2d\u5bf9\u5e94\u7684C++\u6570\u636e\u7c7b\u578b\uff0c\u5982\uff1a . Attr < bool > ( \"is_transpose\" , false ) . Attr < int32_t > ( \"size\" , 10 ) . Attr < std :: vector < int32_t >> ( \"vector_of_size\" , std :: vector < int32_t > { 10 , 11 , 12 })","title":"Attr \u65b9\u6cd5"},{"location":"extended_topics/user_op.html#setcheckattrfn","text":"\u5bf9\u4e8e\u67d0\u4e9b\u5c5e\u6027\u6765\u8bf4\uff0c\u9700\u8981\u66f4\u7cbe\u786e\u5730\u9650\u5236\u53d6\u503c\u8303\u56f4\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6ce8\u518c op \u65f6\u4f7f\u7528 SetCheckAttrFn \u65b9\u6cd5\u6765\u6307\u5b9a\u53d6\u503c\u8303\u56f4\u3002 \u4f8b\u5982\uff0c\u5bf9\u4e8e conv op\u6765\u8bf4\uff0c\u5176\u6709\u4e00\u4e2a\u914d\u7f6e\u9009\u9879 data_format \uff0c\u5176\u7c7b\u578b\u662f string \u5b57\u7b26\u4e32\uff0c\u4f46\u53d6\u503c\u53ea\u80fd\u662f channels_first \u6216 channels_last \uff0c\u9664\u6b64\u4e4b\u5916\u90fd\u4e0d\u5408\u6cd5\uff1a . Attr < std :: string > ( \"data_format\" , \"NCHW\" ) . SetCheckAttrFn ( []( const user_op :: UserOpDefWrapper & def , const user_op :: UserOpConfWrapper & conf ) -> Maybe < void > { std :: string data_format = conf . attr < std :: string > ( \"data_format\" ); if ( data_format == \"channels_first\" || data_format == \"channels_last\" ) { return Maybe < void >:: Ok (); } return oneflow :: Error :: CheckFailed () << \"data_format value: \" << data_format << \" for Conv op is illegal.\" ; }) \u8bbe\u7f6e\u4e00\u4e2a\u7528\u4e8e\u68c0\u67e5\u7684\u51fd\u6570\uff0c\u5f53\u5c5e\u6027\u503c\u7b26\u5408\u8981\u6c42\u65f6\uff0c\u8fd4\u56de Maybe<void>::Ok() \uff1b\u5426\u5219\u8fd4\u56de oneflow::Error::CheckFailed() \u3002","title":"SetCheckAttrFn \u65b9\u6cd5"},{"location":"extended_topics/user_op.html#_4","text":"\u5bf9\u4e8e\u6709\u4e9b op \u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u8f93\u5165\u6216\u8005\u8f93\u51fa\uff0c\u8fd9\u65f6\u6211\u4eec\u5c31\u9700\u8981\u5728\u6ce8\u518c op \u65f6\u6307\u5b9a\u5176\u5bf9\u5e94\u7684\u8f93\u5165\u8f93\u51fa\u7684\u4e2a\u6570\u3002 \u4ee5 Input \u4e3a\u4f8b\uff1a // input \u5fc5\u987b\u5bf9\u5e94\u67091\u4e2a blob . Input ( \"input\" ) // input \u5fc5\u987b\u5bf9\u5e94\u67095\u4e2a blob . Input ( \"input\" , 5 ) // input \u5fc5\u987b\u5bf9\u5e94\u81f3\u5c115\u4e2a blob . InputWithMinimum ( \"input\" , 5 ) // input \u53ef\u80fd\u6ca1\u6709\u5bf9\u5e94\u7684 blob\uff0c\u82e5\u6709\u5219\u987b\u5bf9\u5e941\u4e2a . OptionalInput ( \"input\" ) // input \u53ef\u80fd\u6ca1\u6709\u5bf9\u5e94\u7684 blob\uff0c\u82e5\u6709\u5219\u987b\u5bf9\u5e945\u4e2a . OptionalInput ( \"input\" , 5 ) // input \u53ef\u80fd\u6ca1\u6709\u5bf9\u5e94\u7684 blob\uff0c\u82e5\u6709\u5219\u987b\u5bf9\u5e94\u81f3\u5c115\u4e2a . OptionalInputWithMininum ( \"input\" , 5 ) \u8f93\u51fa\u8bbe\u7f6e Output \u4e0e Input \u7c7b\u4f3c\u3002","title":"\u591a\u8f93\u5165/\u8f93\u51fa"},{"location":"extended_topics/user_op.html#setgetsbpfn","text":"SetGetSbpFn \u7528\u4e8e\u8bbe\u7f6e\u8be5 op \u7684 SBP \u3002 \u4ee5 \"add_n\" op \u4e3a\u4f8b\uff1a REGISTER_USER_OP ( \"add_n\" ) . InputWithMinimum ( \"in\" , 2 ) . Output ( \"out\" ) . SetGetSbpFn ([]( user_op :: SbpContext * ctx ) { int64_t num_axes = ctx -> LogicalTensorDesc4InputArgNameAndIndex ( \"in\" , 0 ). shape (). NumAxes (); for ( int64_t i = 0 ; i < num_axes ; ++ i ) { ctx -> NewBuilder (). Split ( ctx -> inputs (), i ). Split ( user_op :: OpArg ( \"out\" , 0 ), i ). Build (); } ctx -> NewBuilder (). PartialSum ( ctx -> inputs ()). PartialSum ( user_op :: OpArg ( \"out\" , 0 )). Build (); return Maybe < void >:: Ok (); });","title":"SetGetSbpFn \u65b9\u6cd5"},{"location":"extended_topics/user_op.html#opkernelregistry","text":"","title":"OpKernelRegistry \u8be6\u7ec6\u4ecb\u7ecd"},{"location":"extended_topics/user_op.html#setinfertmpsizefn","text":"\u67d0\u4e9b op \u7684 kernel \u5b9e\u73b0\u8fc7\u7a0b\u4e2d\uff0c\u5728 Compute \u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684 buffer \u7528\u4e8e\u5b58\u50a8\u4e34\u65f6\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u5728\u6ce8\u518c kernel \u65f6\u901a\u8fc7 SetInferTmpSizeFn \u65b9\u6cd5\u6307\u5b9a buffer \u5927\u5c0f\uff0c\u5728 Compute \u51fd\u6570\u4e2d\u83b7\u53d6\u8be5 buffer \u5e76\u4f7f\u7528\u3002 \u4ee5\u4e0b\u4ee3\u7801\u6ce8\u518c kernel \u65f6\uff0c\u901a\u8fc7 SetInferTmpSizeFn \u6307\u5b9a buffer \u5927\u5c0f\u4e3a 1024 \u5b57\u8282\uff1a REGISTER_USER_KERNEL ( \"XOp\" ) . SetInferTmpSizeFn ( []( const oneflow :: user_op :: InferContext * ) { return 1024 ; }); \u4e00\u65e6\u901a\u8fc7 SetInferTmpSizeFn \u8bbe\u7f6e\u4e86 buffer \u5927\u5c0f\uff0c\u5728 Compute \u4e2d\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 KernelComputeContext::Tensor4ArgNameAndIndex \u65b9\u6cd5\uff0c\u83b7\u53d6\u8be5\u7f13\u51b2\u533a\uff0c\u8be5\u7f13\u51b2\u533a\u5c01\u88c5\u4e3a oneflow::user_op::Tensor \uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 dptr \u6216 mut_dptr \u65b9\u6cd5\u8f6c\u4e3a\u5176\u5b83\u7c7b\u578b\u7684\u6307\u9488\u3002 class XKernel final : public oneflow :: user_op :: OpKernel { void Compute ( oneflow :: user_op :: KernelComputeContext * ctx ) override { oneflow :: user_op :: Tensor * tmp = ctx -> Tensor4ArgNameAndIndex ( \"tmp_buffer\" , 0 ); //\u8f6c\u6362\u540e\u5f97\u5230 1024 \u5b57\u8282\u7684 char* \u7f13\u51b2\u533a char * pBuff = tmp -> mut_dptr < char > (); ... } };","title":"SetInferTmpSizeFn \u65b9\u6cd5"},{"location":"extended_topics/user_op.html#opgradregistry","text":"\u5728 \u4f7f\u7528 Python \u6269\u5c55 Op \u4e00\u6587\u4e2d\uff0c\u4ecb\u7ecd\u4e86\u5982\u4f55\u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97\u3002\u5176\u6838\u5fc3\u662f\u901a\u8fc7\u5b8f REGISTER_USER_OP_GRAD \u8fdb\u884c\u6ce8\u518c\u3002 \u5b9e\u9645\u4e0a\uff0c REGISTER_USER_OP_GRAD \u5176\u5b9e\u662f\u5728\u5b9a\u4e49\u7528\u4e8e\u6c42\u5bfc\u7684\u53cd\u5411\u5b50\u56fe\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u4e00\u5b9a\u9700\u8981\u4e13\u95e8\u50cf \u4e3a\u81ea\u5b9a\u4e49 Op \u63d0\u4f9b\u53cd\u5411\u8ba1\u7b97 \u90a3\u6837\uff0c\u4e13\u95e8\u53bb\u5b9e\u73b0\u4e00\u4e2a\u540e\u5411 Op \u6765\u6c42\u68af\u5ea6\uff0c\u5728\u5927\u90e8\u5206\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528 OneFlow \u5df2\u6709\u7684 Op\uff0c\u63cf\u8ff0\u53cd\u5411\u5b50\u56fe\u3002\u672c\u8282\u4f5c\u4e3a \u4f7f\u7528 Python \u6269\u5c55 Op \u7684\u8865\u5145\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u540e\u5411\u6ce8\u518c\u5e76\u7528\u73b0\u6709 Op \u8868\u793a\u53cd\u5411\u5b50\u56fe\u7684\u65b9\u6cd5\u3002 Oneflow \u5728\u540e\u5411\u8ba1\u7b97\u56fe\u5c55\u5f00\u8fc7\u7a0b\u4e2d\u4f1a\u81ea\u52a8\u6c42\u5bfc\uff0cOneFlow \u6846\u67b6\u91c7\u7528 Automatic Differentiation \u65b9\u6cd5\u6c42\u5bfc\uff0c\u5373\u5229\u7528\u94fe\u5f0f\u6cd5\u5219\u81ea\u52a8\u6c42\u51fa\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u68af\u5ea6\u3002 \u4e3a\u4e86\u5bf9\u81ea\u5b9a\u4e49\u7684 op \u8fdb\u884c\u81ea\u52a8\u6c42\u5bfc\uff0c\u6211\u4eec\u9700\u8981\u901a\u8fc7\u5b8f REGISTER_USER_OP_GRAD \u8fdb\u884c\u6ce8\u518c\u3002\u4ece\u6570\u5b66\u89d2\u5ea6\u4e0a\u770b\uff0c\u6ce8\u518c\u8fc7\u7a0b\u5c31\u662f\u6211\u4eec\u4e3a\u81ea\u5b9a\u4e49\u7684 op\uff0c\u6307\u5b9a\u540e\u5411\u6c42\u5bfc\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002\u4ece\u7f16\u7a0b\u89d2\u5ea6\u770b\uff0c\u5c31\u662f\u4e3a\u81ea\u5b9a\u4e49 op \u8bbe\u7f6e\u4e00\u4e2a\u540e\u5411\u751f\u6210\u51fd\u6570\uff0c\u5728\u8be5\u51fd\u6570\u4e2d\uff0c\u7f16\u5199\u4ee3\u7801\uff0c\u6307\u5b9a\u8fd9\u4e2a op \u7684\u8f93\u5165\u68af\u5ea6\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002 \u4e3a\u8ba1\u7b97\u81ea\u5b9a\u4e49 op \u7684\u68af\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u81ea\u5b9a\u4e49 op \u7684\u8f93\u5165\u3001\u8f93\u51fa\u4ee5\u53ca\u8f93\u51fa\u7684\u68af\u5ea6\uff0c\u6784\u9020\u51fa\u8f93\u5165\u7684\u68af\u5ea6\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 OneFlow \u4e2d\u5df2\u6709\u7684\u7b97\u5b50\u53ca\u5176\u7ec4\u5408\u5f62\u5f0f\uff0c\u8868\u793a\u51fa\u8f93\u5165\u7684\u68af\u5ea6\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002 \u7f16\u5199\u4ee3\u7801\uff0c\u8868\u793a\u8f93\u5165\u7684\u68af\u5ea6\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u901a\u5e38\u5305\u542b\u4e0b\u9762\u51e0\u6b65\uff1a \u4f7f\u7528 ctx->DefineOp() \u548c BackwardOpBuilder \u6765\u8868\u793a\u8ba1\u7b97\u8f93\u5165\u7684\u68af\u5ea6\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u8f93\u5165\u7684\u68af\u5ea6\u8ba1\u7b97\u53ef\u80fd\u662f\u591a\u79cd\u8fd0\u7b97\u7684\u7ec4\u5408\uff0c\u56e0\u6b64 DefineOp \u53ca BackwardOpBuilder \u53ef\u80fd\u88ab\u591a\u6b21\u4f7f\u7528\uff1b \u7ecf\u8fc7\u4e0a\u4e00\u6b65\u5b9a\u4e49\u4e86\u8ba1\u7b97\u8fc7\u7a0b\u540e\uff0c\u6700\u7ec8\u5728\u67d0\u4e2a\u7b97\u5b50\u7684\u8f93\u51fa\u4e2d\uff0c\u8bb0\u5f55\u4e86\u9700\u8981\u7684\u68af\u5ea6\u3002\u6211\u4eec\u9700\u8981\u8c03\u7528 ctx->FwOp().InputGradBind() \u65b9\u6cd5\uff0c\u5c06\u4e0a\u4e00\u6b65\u7684\u8ba1\u7b97\u7ed3\u679c\u548c\u81ea\u5b9a\u4e49 op \u7684\u8f93\u5165\u68af\u5ea6\u7ed1\u5b9a\u3002 \u4ee5\u4e0b\u793a\u4f8b\uff08\u5305\u542b\u6d4b\u8bd5\u5728\u5185\u7684\u5b8c\u6574\u4ee3\u7801\u89c1 \u4ed3\u5e93\u7684 myop_grad \u76ee\u5f55 \uff09\uff0c\u6211\u4eec\u5c06\u9488\u5bf9\u4e00\u4e2a\u540d\u4e3a myop \u7684\u81ea\u5b9a\u4e49 op \u6765\u6ce8\u518c\u5176\u540e\u5411\u751f\u6210\u51fd\u6570\u3002\u8fd9\u4e2a op \u4ec5\u7528\u4e8e\u672c\u6587\u5c55\u793a\u6ce8\u518c\u8fc7\u7a0b\uff0c\u4e0d\u8003\u8651\u5b9e\u9645\u7528\u9014\uff0c myop \u7684\u8ba1\u7b97\u529f\u80fd\u8bbe\u5b9a\u4e3a\u8ba1\u7b97 3*x*x \u3002 \u90a3\u4e48\uff0c\u5bb9\u6613\u5f97\u5230\u5176\u524d\u5411\u4f20\u64ad\u548c\u540e\u5411\u4f20\u64ad\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5373\u53cd\u5411\u8fc7\u7a0b\u4e2d\uff0c x \u7684\u68af\u5ea6\u8ba1\u7b97\u516c\u5f0f\u4e3a 6*x*dy \uff1a myop \u7684\u524d\u5411 op \u5b9a\u4e49\u5982\u4e0b\uff1a REGISTER_USER_OP ( \"myop\" ). Input ( \"in\" ). Output ( \"out\" ). SetTensorDescInferFn ( []( user_op :: InferContext * ctx ) -> Maybe < void > { * ctx -> Shape4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Shape4ArgNameAndIndex ( \"in\" , 0 ); * ctx -> Dtype4ArgNameAndIndex ( \"out\" , 0 ) = * ctx -> Dtype4ArgNameAndIndex ( \"in\" , 0 ); return Maybe < void >:: Ok (); }); \u5373 myop \u5305\u542b\u552f\u4e00\u7684\u8f93\u5165 in \u548c\u552f\u4e00\u7684\u8f93\u51fa out \u3002 myop \u7684\u53cd\u5411\u68af\u5ea6\u6ce8\u518c\u4ee3\u7801\u5982\u4e0b\uff1a REGISTER_USER_OP_GRAD ( \"myop\" ). SetBackwardOpConfGenFn ( []( user_op :: BackwardOpConfContext * ctx ) { const auto op1_name = ctx -> FwOp (). op_name () + \"_grad1\" ; // \u7b97\u5b50 op1_name \u7528\u4e8e\u8ba1\u7b97 myop.in*(myop.out\u7684\u68af\u5ea6) ctx -> DefineOp ( op1_name , [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"multiply\" ) . InputBind ( \"x\" , ctx -> FwOp (). input ( \"in\" , 0 )) //multiply.x <- myop.in . InputBind ( \"y\" , ctx -> FwOp (). output_grad ( \"out\" , 0 )) //multiply.y <- myop.out\u7684\u68af\u5ea6 . Output ( \"out\" ) . Build (); }); const auto op2_name = ctx -> FwOp (). op_name () + \"_grad2\" ; // \u7b97\u5b50 op2_name \u7528\u4e8e\u8ba1\u7b97 6*op1_name ctx -> DefineOp ( op2_name , [ & ctx , & op1_name ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"scalar_mul\" ) . InputBind ( \"in\" , ctx -> GetOp ( op1_name ). output ( \"out\" , 0 )) . Attr ( \"has_float_operand\" , true ) . Attr ( \"has_int_operand\" , false ) . Attr ( \"float_operand\" , static_cast < double > ( 6 )) . Attr ( \"int_operand\" , static_cast < int64_t > ( 6 )) . Output ( \"out\" ) . Build (); }); // (myop.in\u7684\u68af\u5ea6) <- op1_name.out ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"in\" , 0 ), [ & ctx , & op2_name ]() -> const std :: string & { return ctx -> GetOp ( op2_name ) . output ( \"out\" , 0 ); }); }); \u5b8f REGISTER_USER_OP_GRAD(\"myop\") \u63a5\u53d7\u7684\u5b57\u7b26\u4e32\u53c2\u6570\u662f op_type_name \uff0c\u9700\u8981\u4e0e REGISTER_USER_OP \u6ce8\u518c\u65f6\u7684\u4e00\u81f4\u3002 REGISTER_USER_OP_GRAD(\"myop\") \u4f1a\u8fd4\u56de\u4e00\u4e2a oneflow::user_op::OpGradRegistry \u5bf9\u8c61\uff0c\u6211\u4eec\u901a\u8fc7\u8c03\u7528\u5b83\u7684\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u81ea\u5b9a\u4e49 op \u7684\u540e\u5411\u751f\u6210\u51fd\u6570\u3002 \u4ee5\u4e0a\u68af\u5ea6\u6ce8\u518c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6700\u7ec8\u8981\u6c42\u7684 myop \u7684\u8f93\u5165\u7684\u68af\u5ea6\u7684\u8868\u8fbe\u5f0f\u4e3a 6*x*dy \uff0c\u53ef\u4ee5\u4ece\u4ee3\u7801\u4e2d\u770b\u5230\u8fd9\u4e2a\u6c42\u89e3\u8fc7\u7a0b\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u4e86 op1_name \uff0c\u5229\u7528\u5df2\u6709\u7684\u7b97\u5b50 multiply \u6c42\u89e3 x*dy \uff1a // \u7b97\u5b50 op1_name \u7528\u4e8e\u8ba1\u7b97 myop.in*(myop.out\u7684\u68af\u5ea6) ctx -> DefineOp ( op1_name , [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"multiply\" ) . InputBind ( \"x\" , ctx -> FwOp (). input ( \"in\" , 0 )) //multiply.x <- myop.in . InputBind ( \"y\" , ctx -> FwOp (). output_grad ( \"out\" , 0 )) //multiply.y <- myop.out\u7684\u68af\u5ea6 . Output ( \"out\" ) . Build (); }); \u7136\u540e\uff0c\u5b9a\u4e49\u4e86 op2_name \uff0c\u5229\u7528\u5df2\u6709\u7684\u7b97\u5b50 op2_name \u6c42\u89e3 6*op1_name \uff0c\u5373 6*x*dy \u3002 // \u7b97\u5b50 op2_name \u7528\u4e8e\u8ba1\u7b97 6*op1_name ctx -> DefineOp ( op2_name , [ & ctx , & op1_name ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"scalar_mul\" ) . InputBind ( \"in\" , ctx -> GetOp ( op1_name ). output ( \"out\" , 0 )) . Attr ( \"has_float_operand\" , true ) . Attr ( \"has_int_operand\" , false ) . Attr ( \"float_operand\" , static_cast < double > ( 6 )) . Attr ( \"int_operand\" , static_cast < int64_t > ( 6 )) . Output ( \"out\" ) . Build (); }); \u6700\u540e\uff0c\u5c06 op2_name \u7684\u8f93\u51fa\u7ed3\u679c\uff08\u5373 6*x*dy \uff09\u7ed1\u5b9a\u5230 myop \u7684\u8f93\u5165\u7684\u68af\u5ea6\u4e0a\uff0c\u5b8c\u6210\u6ce8\u518c\u3002 // (myop.in\u7684\u68af\u5ea6) <- op1_name.out ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"in\" , 0 ), [ & ctx , & op2_name ]() -> const std :: string & { return ctx -> GetOp ( op2_name ) . output ( \"out\" , 0 ); }); \u4ee5\u4e0a\u662f\u5b8c\u6574\u7684\u6ce8\u518c\u68af\u5ea6\u7684\u6d41\u7a0b\uff0c\u4ee5\u4e0b\u5206\u522b\u4ecb\u7ecd\u76f8\u5173\u7684\u7c7b\u53ca\u65b9\u6cd5\u3002","title":"OpGradRegistry \u8be6\u7ec6\u4ecb\u7ecd"},{"location":"extended_topics/user_op.html#setbackwardopconfgenfn","text":"\u6211\u4eec\u4f7f\u7528 OpGradRegistry::SetBackwardOpConfGenFn(fn) \u8bbe\u7f6e\u540e\u5411\u751f\u6210\u51fd\u6570 fn \uff0c\u540e\u5411\u751f\u6210\u51fd\u6570 fn \u7684\u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a void fn ( BackwardOpConfContext * ctx ); BackwardOpConfContext* ctx \u5e26\u6709\u751f\u6210 op \u6240\u9700\u8981\u7684\u4fe1\u606f\u3002","title":"SetBackwardOpConfGenFn \u65b9\u6cd5"},{"location":"extended_topics/user_op.html#backwardopconfcontext","text":"BackwardOpConfContext \u7c7b\u4e2d\u7684\u5e38\u7528\u65b9\u6cd5\u53ca\u5176\u4f5c\u7528\u5982\u4e0b\uff1a UserOpWrapper& FwOp(); \uff1a\u83b7\u53d6\u524d\u5411 op GetOp(op_name) : \u6839\u636e op_name \u521b\u5efa\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684 op \uff0c GetOp \u91c7\u7528\u5ef6\u8fdf\u521b\u5efa\u673a\u5236(lazy init)\uff0c\u53ea\u6709 GetOp \u88ab\u8c03\u7528\u65f6\uff0c\u5bf9\u5e94\u7684 op \u624d\u4f1a\u88ab\u771f\u6b63\u521b\u5efa void DefineOp(op_name, fn) \uff1a\u5b9a\u4e49\u540d\u4e3a op_name \u7684 Op \u7684\u521b\u5efa\u51fd\u6570 fn \u3002\u5f53\u8c03\u7528 ctx->GetOp(op_name) \u65f6\uff0c \u5728 OneFlow \u6846\u67b6\u4e2d\u4f1a\u89e6\u53d1 fn \u8fdb\u884c Op \u521b\u5efa\uff0c\u5982\u679c Op \u5df2\u7ecf\u88ab\u521b\u5efa\u8fc7\uff0c\u90a3\u4e48\u8fd9\u91cc\u76f4\u63a5\u83b7\u53d6\u521b\u5efa\u7684\u7ed3\u679c\u3002 fn \u51fd\u6570\u63a5\u6536\u4e00\u4e2a BackwardOpBuilder \u53c2\u6570\uff0c\u7528\u4e8e\u6784\u5efa\u53cd\u5411 op\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u4ecb\u7ecd BackwardOpBuilder \u3002","title":"BackwardOpConfContext \u8be6\u7ec6\u4ecb\u7ecd"},{"location":"extended_topics/user_op.html#backwardopbuilder","text":"BackwardOpBuilder \u7528\u4e8e\u6784\u5efa\u4e00\u4e2a\u53cd\u5411 op\u3002\u4ee5\u4e0a\u6587\u4e2d\u7684\u4ee3\u7801\u7247\u6bb5\u4e3a\u4f8b ctx -> DefineOp ( op1_name , [ & ctx ]( user_op :: BackwardOpBuilder & builder ) { return builder . OpTypeName ( \"multiply\" ) . InputBind ( \"x\" , ctx -> FwOp (). input ( \"in\" , 0 )) //multiply.x <- myop.in . InputBind ( \"y\" , ctx -> FwOp (). output_grad ( \"out\" , 0 )) //multiply.y <- myop.out\u7684\u68af\u5ea6 . Output ( \"out\" ) . Build (); }); \u6211\u4eec\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6700\u7ec8\u8c03\u7528 Build \u6784\u5efa\u4e86\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97 x*dy \u7684\u53cd\u5411 op\u3002 \u5404\u4e2a\u63a5\u53e3\u7684\u4f5c\u7528\u5982\u4e0b\uff1a OpTypeName(\"multiply\") \u6307\u5b9a\u4e00\u4e2a op \u7684 op_type_name \uff0c\u4f7f\u7528\u8fd9\u4e2a op \u6765\u5e2e\u52a9\u6211\u4eec\u8fdb\u884c\u53cd\u5411\u68af\u5ea6\u7684\u8ba1\u7b97 InputBind(arg_name, blob) \u5c06 multiply \u7684\u8f93\u5165 arg_name \u4e0e \u6307\u5b9a\u7684 blob \u8fdb\u884c\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u8c03\u7528\u591a\u6b21\uff0c\u5982\u679c\u8be5 arg_name \u5bf9\u5e94\u591a\u4e2a\u8f93\u5165blob\uff0c\u5219\u8c03\u7528 Input \u7684\u987a\u5e8f\u5c31\u662f\u5176\u5bf9\u5e94\u7684 index \u987a\u5e8f Output(arg_name, num) \u6307\u5b9a\u4e00\u4e2a arg_name \u5b9e\u9645\u5bf9\u5e94\u7684\u8f93\u51fa blob \u7684\u6570\u91cf\uff0c\u5982\u679c\u4e0d\u586b num \uff0c\u5219 num \u9ed8\u8ba4\u4e3a1 Attr(attr_name, val) op \u8bbe\u7f6e\u5c5e\u6027\u503c\uff0c\u4e0e\u6ce8\u518c op \u65f6\u7684\u7528\u6cd5\u4e00\u6837 Build() \u5b8c\u6210\u5404\u79cd\u8bbe\u7f6e\u540e\uff0c\u901a\u8fc7\u8c03\u7528 Build \u5b8c\u6210\u53cd\u5411 op \u7684\u6784\u5efa","title":"BackwardOpBuilder \u8be6\u7ec6\u4ecb\u7ecd"},{"location":"extended_topics/user_op.html#useropwrapper","text":"\u8c03\u7528 ctx->FwOp() \u4f1a\u8fd4\u56de\u4ee3\u8868\u524d\u5411\u81ea\u5b9a\u4e49 op\uff0c\u5373 myop \u7684 UserOpWrapper \u5bf9\u8c61\uff0c\u901a\u8fc7\u8c03\u7528 UserOpWrapper \u7684\u65b9\u6cd5\uff0c\u5b8c\u6210\u68af\u5ea6\u7ed1\u5b9a\u3002 ctx -> FwOp (). InputGradBind ( user_op :: OpArg ( \"in\" , 0 ), [ & ctx , & op2_name ]() -> const std :: string & { return ctx -> GetOp ( op2_name ) . output ( \"out\" , 0 ); }); UserOpWrapper \u7684\u5e38\u89c1\u65b9\u6cd5\u6709\uff1a InputGradBind(input, grad_fn) \uff1a\u7ed1\u5b9a\u524d\u5411 op \u7684\u8f93\u5165\u4e0e\u83b7\u53d6\u68af\u5ea6\u7684\u51fd\u6570 grad_fn \u3002 OneFlow \u4f1a\u81ea\u52a8\u5224\u65ad input \u662f\u5426\u9700\u8981\u751f\u6210\u540e\u5411\u7684\u68af\u5ea6\uff0c\u5982\u679c\u9700\u8981\u5219\u89e6\u53d1 grad_fn \u5e76\u8fdb\u884c\u7ed1\u5b9a\uff1b input(arg_name, index) \uff1a\u5f97\u5230\u8f93\u5165 arg_name \u5bf9\u5e94\u7684 blob output(arg_name,index) \uff1a\u5f97\u5230\u8f93\u51fa arg_name \u5bf9\u5e94\u7684 blob output_grad(output_arg_name, index) \uff1a \u8fd4\u56de\u524d\u5411 op \u7684\u8f93\u51fa output_arg_name \u5bf9\u5e94\u7684\u540e\u5411\u68af\u5ea6\u7684 blob attr(attr_name) \uff1a\u83b7\u53d6\u5c5e\u6027 attr_name \u5bf9\u5e94\u7684\u503c arg_tensor_desc(arg_name, index) \uff1a\u8fd4\u56de\u524d\u5411 op \u7684\u8f93\u5165/\u8f93\u51fa\u5bf9\u5e94\u7684 tensor \u4fe1\u606f\uff0c\u5305\u542b shape \u3001 dtype \u7b49","title":"UserOpWrapper \u8be6\u7ec6\u4ecb\u7ecd"},{"location":"extended_topics/user_op.html#op_1","text":"\u6211\u4eec\u524d\u6587\u63d0\u5230\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7\u5df2\u6709 op \u7684\u7ec4\u5408\uff0c\u8868\u793a\u8ba1\u7b97\u68af\u5ea6\u7684\u8fc7\u7a0b\u3002\u4f46\u662f\uff0c\u5f53\u67d0\u4e9b\u7279\u6b8a\u7684\u524d\u5411 op\uff0c\u96be\u4ee5\u4f7f\u7528\u5df2\u6709 op \u63cf\u8ff0\u5176\u68af\u5ea6\u6c42\u89e3\u8fc7\u7a0b\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u8ba1\u7b97\u68af\u5ea6\u4e13\u95e8\u8bbe\u8ba1\u548c\u521b\u5efa\u7b97\u5b50\u3002\u8fd9\u65b9\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u53c2\u8003 \u4f7f\u7528 Python \u6269\u5c55 Op \u53ca relu_op.cpp \uff0c\u524d\u8005\u4f7f\u7528 Python \u5b9a\u5236\u53cd\u5411\u6c42\u5bfc Op\uff0c\u540e\u8005\u4f7f\u7528 C++ \u5b9a\u5236\u53cd\u5411\u6c42\u5bfc Op\u3002","title":"\u4e3a\u8ba1\u7b97\u68af\u5ea6\u5b9a\u5236 op"},{"location":"extended_topics/user_op.html#useropconfbuilder","text":"\u5728 OneFlow \u7684 Python \u524d\u7aef\u4e2d\uff0c\u63d0\u4f9b\u4e86 UserOpConfBuilder \u6784\u5efa\u81ea\u5b9a\u4e49 op \u7684 wrapper\uff0c\u5728\u4e0a\u6587 \u5728 Python \u4e2d\u4f7f\u7528\u81ea\u5b9a\u4e49 op \u4e2d\u5df2\u7ecf\u4f7f\u7528\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u603b\u7ed3\u4e0b Python \u5c42\u7684 UserOpConfBuilder \u7684\u5404\u65b9\u6cd5\u63a5\u53e3\u4e0e C++ \u5c42\u7684\u5bf9\u5e94\u5173\u7cfb\u3002 \u6bd4\u5982\u6211\u4eec\u5c01\u88c5\u4e86\u4e00\u4e2a cast wrapper: def cast ( x , dtype , name ): return ( flow . user_op_builder ( name ) . Op ( \"cast\" ) . Input ( \"in\" , [ x ]) . Output ( \"out\" ) . Attr ( \"dtype\" , dtype ) . Build () . InferAndTryRun () . RemoteBlobList ()[ 0 ] ) ) Op(op_type_name) \uff1a\u63a5\u53d7\u7684\u53c2\u6570\u4e3a C++ \u4e2d\u6ce8\u518c\u65f6\u7684 op_type_name Input(input_name, input_blob_list) \uff1a\u8f93\u5165\uff0c input_name \u5e94\u4e0e C++ \u4e2d\u6ce8\u518c op \u65f6 Input \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e00\u81f4 Output(output_name, num=1) \uff1a\u8f93\u51fa\uff0c output_name \u53ca num \u5e94\u4e0e C++ \u4e2d\u6ce8\u518c op \u65f6\u7684 Output \u4e00\u81f4 Attr(attr_name, attr_value) \uff1a\u8bbe\u7f6e\u5c5e\u6027\uff0c attr_name \u5bf9\u5e94\u4e86 C++ \u6ce8\u518c\u65f6\u4f7f\u7528 OpRegistry::Attr \u58f0\u660e\u7684\u5c5e\u6027\uff0c\u4e14 attr_value \u7c7b\u578b\u5e94\u5f53\u4e0e\u58f0\u660e\u65f6\u7684\u5c5e\u6027\u7c7b\u578b\u4e00\u81f4 Build() \uff1a\u6784\u5efa\u5f97\u5230 Python \u5c42\u7684 user op \u901a\u8fc7\u8c03\u7528 user op \u4e2d\u7684 InferAndTryRun \u53ef\u4ee5\u5b8c\u6210\u63a8\u5bfc\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u7528 RemoteBlobList \u6216\u8005 SoleOutputBlob \u65b9\u6cd5\uff0c\u53ef\u4ee5\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c\u3002 RemoteBlobList \uff1a\u83b7\u53d6\u6240\u6709\u8f93\u51fa\uff0c\u9002\u7528\u4e8e\u6709\u591a\u4e2a\u8f93\u51fa\u7684 op\uff0c\u6240\u6709\u7684 op \u653e\u7f6e\u5728\u4e00\u4e2a list \u4e2d SoleOutputBlob \uff1a\u83b7\u53d6\u552f\u4e00\u7684\u8f93\u51fa\uff0c\u9002\u7528\u4e8e\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u7684 op","title":"UserOpConfBuilder \u8be6\u7ec6\u4ecb\u7ecd"},{"location":"extended_topics/watch_watch_diff.html","text":"\u83b7\u53d6\u8fd0\u884c\u65f6\u6570\u636e \u00b6 OneFlow \u63d0\u4f9b\u4e86 oneflow.watch \u4e0e oneflow.watch_diff \u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u4ee5\u65b9\u4fbf\u5728\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u5f20\u91cf\u6570\u636e\u6216\u68af\u5ea6\u3002 \u4f7f\u7528\u6d41\u7a0b \u00b6 \u60f3\u8981\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\u7684\u6570\u636e\u6216\u8005\u68af\u5ea6\uff0c\u5176\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b\uff1a \u7f16\u5199\u56de\u8c03\u51fd\u6570\uff0c\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u9700\u8981\u7528\u6ce8\u89e3\u65b9\u5f0f\u8868\u660e\u76d1\u63a7\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56de\u8c03\u51fd\u6570\u5185\u90e8\u903b\u8f91\u7531\u7528\u6237\u81ea\u5df1\u5b9e\u73b0 \u5728\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7 oneflow.watch \u6216 oneflow.watch_diff \u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u524d\u8005\u83b7\u53d6\u5f20\u91cf\u6570\u636e\u672c\u8eab\uff0c\u540e\u8005\u83b7\u53d6\u5bf9\u5e94\u7684\u68af\u5ea6 \u5728\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\uff0cOneFlow \u6846\u67b6\u4f1a\u5728\u9002\u5f53\u7684\u65f6\u673a\uff0c\u8c03\u7528\u4e4b\u524d\u6ce8\u518c\u7684\u56de\u8c03\uff0c\u5c06\u76d1\u63a7\u7684\u6570\u636e\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u6267\u884c\u56de\u8c03\u51fd\u6570\u4e2d\u7684\u903b\u8f91 \u4ee5 oneflow.watch \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u4f2a\u4ee3\u7801\u5c55\u793a\u4e86\u4f7f\u7528\u8fc7\u7a0b\uff1a def my_watch ( x : T ): #\u5904\u7406x @global_function () def foo () -> T : #\u5b9a\u4e49\u7f51\u7edc\u7b49 ... oneflow . watch ( x , my_watch ) #... \u4ee5\u4e0a\u7684 T \u5373 oneflow.typing \u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 oneflow.typing.Numpy \uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u6b64\u6587 \u3002 \u4ee5\u4e0b\u6211\u4eec\u5c06\u7528\u5b9e\u9645\u4f8b\u5b50\u5c55\u793a watch \u4e0e watch_diff \u7684\u4f7f\u7528\u65b9\u6cd5 watch \u4f7f\u7528\u4f8b\u5b50 \u00b6 \u4e0b\u9762\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528 OneFlow \u7684 oneflow.watch \u529f\u80fd\u83b7\u53d6\u7f51\u7edc\u4e2d\u95f4\u5c42\u7684\u6570\u636e\u3002 \u4ee3\u7801 \u00b6 \u4ee3\u7801\uff1a test_watch.py \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1a python3 test_watch.py \u80fd\u591f\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a in: [ 0.15727027 0.45887455 0.10939325 0.66666406 -0.62354755] out: [0.15727027 0.45887455 0.10939325 0.66666406 0. ] \u4ee3\u7801\u89e3\u8bfb \u00b6 \u5728\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5173\u6ce8\u7684\u662f ReluJob \u91cc\u9762\u7684 y \uff0c\u6240\u4ee5\u8c03\u7528 flow.watch(y, watch_handler) \u53bb\u76d1\u63a7 y \u3002 oneflow.watch \u9700\u8981\u4e24\u4e2a\u53c2\u6570: \u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u6211\u4eec\u5173\u6ce8\u7684\u5bf9\u8c61 y \uff1b \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0cOneFlow \u5728\u8c03\u7528\u8bbe\u5907\u8d44\u6e90\u6267\u884c ReluJob \u7684\u65f6\u5019\u4f1a\u5c06 y \u7684\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u3002\u800c\u6211\u4eec\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570 watch_handler \u7684\u903b\u8f91\u51fd\u6570\uff0c\u662f\u5c06\u5f97\u5230\u7684\u53c2\u6570\u6253\u5370\u51fa\u6765\u3002 \u7528\u6237\u901a\u8fc7\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570\uff0c\u5728\u56de\u8c03\u51fd\u6570\u4e2d\u6309\u7167\u81ea\u5df1\u7684\u9700\u6c42\u5904\u7406 OneFlow \u8fd0\u884c\u65f6\u4ece\u8bbe\u5907\u4e2d\u62ff\u5230\u7684\u6570\u636e\u3002 watch_diff \u4f7f\u7528\u4f8b\u5b50 \u00b6 \u4e0b\u9762\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528 OneFlow \u7684 oneflow.watch_diff \u529f\u80fd\u83b7\u53d6\u7f51\u7edc\u4e2d\u95f4\u5c42\u7684\u68af\u5ea6\u3002 \u4ee3\u7801 \u00b6 \u4ee3\u7801\uff1a test_watch_diff.py \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1a python3 test_watch_diff.py \u80fd\u591f\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a [ ... [ 1.39966095e-03 3.49164731e-03 3.31605263e-02 4.50417027e-03 7.73609674e-04 4.89911772e-02 2.47627571e-02 7.65468649e-05 -1.18361652e-01 1.20161276e-03]] (100, 10) float32 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0a\u901a\u8fc7 oneflow.watch_diff \u83b7\u53d6\u68af\u5ea6\u7684\u4f8b\u5b50\uff0c\u5176\u6d41\u7a0b\u4e0e \u901a\u8fc7 oneflow.watch \u83b7\u53d6\u5f20\u91cf\u6570\u636e\u7684\u4f8b\u5b50\u662f\u7c7b\u4f3c\u7684\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u4e86\u56de\u8c03\u51fd\u6570\uff1a def watch_diff_handler ( blob : tp . Numpy ): print ( \"watch_diff_handler:\" , blob , blob . shape , blob . dtype ) \u7136\u540e\uff0c\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u4f7f\u7528 oneflow.watch_diff \u6ce8\u518c\u4ee5\u4e0a\u7684\u56de\u8c03\u51fd\u6570\uff1a flow . watch_diff ( logits , watch_diff_handler ) \u5728 OneFlow \u8fd0\u884c\u65f6\uff0c OneFlow \u6846\u67b6\u5c31\u4f1a\u8c03\u7528 watch_diff_handler \uff0c\u5e76\u4e14\u5c06\u4ee5\u4e0a\u7684 logits \u5bf9\u5e94\u7684\u68af\u5ea6\u4f20\u9012\u7ed9 watch_diff_handler \u3002","title":"\u83b7\u53d6\u8fd0\u884c\u65f6\u6570\u636e"},{"location":"extended_topics/watch_watch_diff.html#_1","text":"OneFlow \u63d0\u4f9b\u4e86 oneflow.watch \u4e0e oneflow.watch_diff \u63a5\u53e3\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u4ee5\u65b9\u4fbf\u5728\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u5f20\u91cf\u6570\u636e\u6216\u68af\u5ea6\u3002","title":"\u83b7\u53d6\u8fd0\u884c\u65f6\u6570\u636e"},{"location":"extended_topics/watch_watch_diff.html#_2","text":"\u60f3\u8981\u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\u7684\u6570\u636e\u6216\u8005\u68af\u5ea6\uff0c\u5176\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b\uff1a \u7f16\u5199\u56de\u8c03\u51fd\u6570\uff0c\u56de\u8c03\u51fd\u6570\u7684\u53c2\u6570\u9700\u8981\u7528\u6ce8\u89e3\u65b9\u5f0f\u8868\u660e\u76d1\u63a7\u7684\u6570\u636e\u7c7b\u578b\uff0c\u56de\u8c03\u51fd\u6570\u5185\u90e8\u903b\u8f91\u7531\u7528\u6237\u81ea\u5df1\u5b9e\u73b0 \u5728\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\uff0c\u901a\u8fc7 oneflow.watch \u6216 oneflow.watch_diff \u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0c\u524d\u8005\u83b7\u53d6\u5f20\u91cf\u6570\u636e\u672c\u8eab\uff0c\u540e\u8005\u83b7\u53d6\u5bf9\u5e94\u7684\u68af\u5ea6 \u5728\u4f5c\u4e1a\u51fd\u6570\u8fd0\u884c\u65f6\uff0cOneFlow \u6846\u67b6\u4f1a\u5728\u9002\u5f53\u7684\u65f6\u673a\uff0c\u8c03\u7528\u4e4b\u524d\u6ce8\u518c\u7684\u56de\u8c03\uff0c\u5c06\u76d1\u63a7\u7684\u6570\u636e\u4f20\u9012\u7ed9\u56de\u8c03\u51fd\u6570\uff0c\u5e76\u6267\u884c\u56de\u8c03\u51fd\u6570\u4e2d\u7684\u903b\u8f91 \u4ee5 oneflow.watch \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u4f2a\u4ee3\u7801\u5c55\u793a\u4e86\u4f7f\u7528\u8fc7\u7a0b\uff1a def my_watch ( x : T ): #\u5904\u7406x @global_function () def foo () -> T : #\u5b9a\u4e49\u7f51\u7edc\u7b49 ... oneflow . watch ( x , my_watch ) #... \u4ee5\u4e0a\u7684 T \u5373 oneflow.typing \u4e2d\u7684\u6570\u636e\u7c7b\u578b\uff0c\u5982 oneflow.typing.Numpy \uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 \u6b64\u6587 \u3002 \u4ee5\u4e0b\u6211\u4eec\u5c06\u7528\u5b9e\u9645\u4f8b\u5b50\u5c55\u793a watch \u4e0e watch_diff \u7684\u4f7f\u7528\u65b9\u6cd5","title":"\u4f7f\u7528\u6d41\u7a0b"},{"location":"extended_topics/watch_watch_diff.html#watch","text":"\u4e0b\u9762\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528 OneFlow \u7684 oneflow.watch \u529f\u80fd\u83b7\u53d6\u7f51\u7edc\u4e2d\u95f4\u5c42\u7684\u6570\u636e\u3002","title":"watch \u4f7f\u7528\u4f8b\u5b50"},{"location":"extended_topics/watch_watch_diff.html#_3","text":"\u4ee3\u7801\uff1a test_watch.py \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1a python3 test_watch.py \u80fd\u591f\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a in: [ 0.15727027 0.45887455 0.10939325 0.66666406 -0.62354755] out: [0.15727027 0.45887455 0.10939325 0.66666406 0. ]","title":"\u4ee3\u7801"},{"location":"extended_topics/watch_watch_diff.html#_4","text":"\u5728\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5173\u6ce8\u7684\u662f ReluJob \u91cc\u9762\u7684 y \uff0c\u6240\u4ee5\u8c03\u7528 flow.watch(y, watch_handler) \u53bb\u76d1\u63a7 y \u3002 oneflow.watch \u9700\u8981\u4e24\u4e2a\u53c2\u6570: \u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u6211\u4eec\u5173\u6ce8\u7684\u5bf9\u8c61 y \uff1b \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0cOneFlow \u5728\u8c03\u7528\u8bbe\u5907\u8d44\u6e90\u6267\u884c ReluJob \u7684\u65f6\u5019\u4f1a\u5c06 y \u7684\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u56de\u8c03\u51fd\u6570\u3002\u800c\u6211\u4eec\u5b9a\u4e49\u7684\u56de\u8c03\u51fd\u6570 watch_handler \u7684\u903b\u8f91\u51fd\u6570\uff0c\u662f\u5c06\u5f97\u5230\u7684\u53c2\u6570\u6253\u5370\u51fa\u6765\u3002 \u7528\u6237\u901a\u8fc7\u81ea\u5b9a\u4e49\u56de\u8c03\u51fd\u6570\uff0c\u5728\u56de\u8c03\u51fd\u6570\u4e2d\u6309\u7167\u81ea\u5df1\u7684\u9700\u6c42\u5904\u7406 OneFlow \u8fd0\u884c\u65f6\u4ece\u8bbe\u5907\u4e2d\u62ff\u5230\u7684\u6570\u636e\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"extended_topics/watch_watch_diff.html#watch_diff","text":"\u4e0b\u9762\u662f\u4e00\u6bb5\u5b8c\u6574\u7684\u4f8b\u5b50\uff0c\u7528\u4e8e\u5c55\u793a\u5982\u4f55\u4f7f\u7528 OneFlow \u7684 oneflow.watch_diff \u529f\u80fd\u83b7\u53d6\u7f51\u7edc\u4e2d\u95f4\u5c42\u7684\u68af\u5ea6\u3002","title":"watch_diff \u4f7f\u7528\u4f8b\u5b50"},{"location":"extended_topics/watch_watch_diff.html#_5","text":"\u4ee3\u7801\uff1a test_watch_diff.py \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff1a python3 test_watch_diff.py \u80fd\u591f\u5f97\u5230\u7c7b\u4f3c\u4e0b\u9762\u7684\u8f93\u51fa\uff1a [ ... [ 1.39966095e-03 3.49164731e-03 3.31605263e-02 4.50417027e-03 7.73609674e-04 4.89911772e-02 2.47627571e-02 7.65468649e-05 -1.18361652e-01 1.20161276e-03]] (100, 10) float32","title":"\u4ee3\u7801"},{"location":"extended_topics/watch_watch_diff.html#_6","text":"\u4ee5\u4e0a\u901a\u8fc7 oneflow.watch_diff \u83b7\u53d6\u68af\u5ea6\u7684\u4f8b\u5b50\uff0c\u5176\u6d41\u7a0b\u4e0e \u901a\u8fc7 oneflow.watch \u83b7\u53d6\u5f20\u91cf\u6570\u636e\u7684\u4f8b\u5b50\u662f\u7c7b\u4f3c\u7684\u3002 \u9996\u5148\uff0c\u5b9a\u4e49\u4e86\u56de\u8c03\u51fd\u6570\uff1a def watch_diff_handler ( blob : tp . Numpy ): print ( \"watch_diff_handler:\" , blob , blob . shape , blob . dtype ) \u7136\u540e\uff0c\u5728\u4f5c\u4e1a\u51fd\u6570\u4e2d\u4f7f\u7528 oneflow.watch_diff \u6ce8\u518c\u4ee5\u4e0a\u7684\u56de\u8c03\u51fd\u6570\uff1a flow . watch_diff ( logits , watch_diff_handler ) \u5728 OneFlow \u8fd0\u884c\u65f6\uff0c OneFlow \u6846\u67b6\u5c31\u4f1a\u8c03\u7528 watch_diff_handler \uff0c\u5e76\u4e14\u5c06\u4ee5\u4e0a\u7684 logits \u5bf9\u5e94\u7684\u68af\u5ea6\u4f20\u9012\u7ed9 watch_diff_handler \u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"quick_start/install.html","text":"\u5b89\u88c5 OneFlow \u7a33\u5b9a\u53d1\u5e03\u7248 \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 OneFlow \u6700\u65b0\u7684\u652f\u6301CUDA\u7684\u7a33\u5b9a\u7248\u672c\uff1a python3 -m pip install -f https://release.oneflow.info oneflow==0.4.0+cu102 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 OneFlow \u6700\u65b0 master \u5206\u652f\uff08\u4e0d\u5efa\u8bae\u751f\u4ea7\u73af\u5883\u4e0b\u4f7f\u7528\uff09\uff1a python3 -m pip install oneflow -f https://staging.oneflow.info/branch/master/cu102 \u5982\u679c\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5b89\u88c5\u5931\u8d25\uff0c\u8bf7\u6dfb\u52a0 --user \u53c2\u6570 \u5982\u679c\u63d0\u793a \u627e\u4e0d\u5230 \u5bf9\u5e94\u7248\u672c\uff0c\u8bf7\u5c1d\u8bd5\u5347\u7ea7 pip \uff1a python3 -m pip install --upgrade pip #--user \u56fd\u5185\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u56fd\u5185\u955c\u50cf\u52a0\u901f python3 -m pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple \u8be6\u7ec6\u8bf4\u660e\u53ef\u89c1 pypi \u955c\u50cf\u4f7f\u7528\u5e2e\u52a9 \u3002 \u7cfb\u7edf\u8981\u6c42\uff1a Python >= 3.6 CUDA \u9a71\u52a8\u8981\u6c42\u8be6\u60c5\u89c1 OneFlow \u6e90\u7801\u4ed3\u5e93 README \u4ece\u6e90\u7801\u7f16\u8bd1\u5b89\u88c5 OneFlow \u00b6 \u5982\u679c\u4f60\u5e0c\u671b\u901a\u8fc7\u7f16\u8bd1\u6e90\u7801\u5b89\u88c5 OneFlow\uff0c\u53ef\u4ee5\u53c2\u8003 OneFlow \u6e90\u7801\u4ed3\u5e93\u7684 README \uff0c\u5728\u7f16\u8bd1 OneFlow \u6e90\u7801\u4e4b\u524d\uff0c\u5f3a\u70c8\u63a8\u8350\u5148\u9605\u8bfb Troubleshooting \u3002 \u5b89\u88c5 OneFlow with legacy CUDA \u00b6 \u652f\u6301\u5176\u5b83\u8f83\u65e9\u7248\u672c CUDA \u7684 OneFlow \u7684\u5b89\u88c5\u65b9\u6cd5\u5982\u4e0b\uff1a Stable: python3 -m pip install --find-links https://release.oneflow.info oneflow==0.4.0+[PLATFORM] Nightly: python3 -m pip install oneflow -f https://staging.oneflow.info/branch/master/[PLATFORM] \u5176\u4e2d [PLATFORM] \u53ef\u4ee5\u662f: Platform CUDA Driver Version Supported GPUs cu112 >= 450.80.02 GTX 10xx, RTX 20xx, A100, RTX 30xx cu111 >= 450.80.02 GTX 10xx, RTX 20xx, A100, RTX 30xx cu110, cu110_xla >= 450.36.06 GTX 10xx, RTX 20xx, A100 cu102, cu102_xla >= 440.33 GTX 10xx, RTX 20xx cu101, cu101_xla >= 418.39 GTX 10xx, RTX 20xx cu100, cu100_xla >= 410.48 GTX 10xx, RTX 20xx cpu N/A N/A \u4ea4\u6d41QQ\u7fa4 \u00b6 \u5b89\u88c5\u6216\u4f7f\u7528\u8fc7\u7a0b\u9047\u5230\u95ee\u9898\uff0c\u6b22\u8fce\u5165\u7fa4\u4e0e\u4f17\u591a OneFlow \u7231\u597d\u8005\u5171\u540c\u8ba8\u8bba\u4ea4\u6d41\uff1a \u52a0QQ\u7fa4 331883 \u6216\u626b\u63cf\u4e8c\u7ef4\u7801","title":"\u5b89\u88c5"},{"location":"quick_start/install.html#oneflow","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 OneFlow \u6700\u65b0\u7684\u652f\u6301CUDA\u7684\u7a33\u5b9a\u7248\u672c\uff1a python3 -m pip install -f https://release.oneflow.info oneflow==0.4.0+cu102 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5 OneFlow \u6700\u65b0 master \u5206\u652f\uff08\u4e0d\u5efa\u8bae\u751f\u4ea7\u73af\u5883\u4e0b\u4f7f\u7528\uff09\uff1a python3 -m pip install oneflow -f https://staging.oneflow.info/branch/master/cu102 \u5982\u679c\u56e0\u4e3a\u6743\u9650\u95ee\u9898\u5b89\u88c5\u5931\u8d25\uff0c\u8bf7\u6dfb\u52a0 --user \u53c2\u6570 \u5982\u679c\u63d0\u793a \u627e\u4e0d\u5230 \u5bf9\u5e94\u7248\u672c\uff0c\u8bf7\u5c1d\u8bd5\u5347\u7ea7 pip \uff1a python3 -m pip install --upgrade pip #--user \u56fd\u5185\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u56fd\u5185\u955c\u50cf\u52a0\u901f python3 -m pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple \u8be6\u7ec6\u8bf4\u660e\u53ef\u89c1 pypi \u955c\u50cf\u4f7f\u7528\u5e2e\u52a9 \u3002 \u7cfb\u7edf\u8981\u6c42\uff1a Python >= 3.6 CUDA \u9a71\u52a8\u8981\u6c42\u8be6\u60c5\u89c1 OneFlow \u6e90\u7801\u4ed3\u5e93 README","title":"\u5b89\u88c5 OneFlow \u7a33\u5b9a\u53d1\u5e03\u7248"},{"location":"quick_start/install.html#oneflow_1","text":"\u5982\u679c\u4f60\u5e0c\u671b\u901a\u8fc7\u7f16\u8bd1\u6e90\u7801\u5b89\u88c5 OneFlow\uff0c\u53ef\u4ee5\u53c2\u8003 OneFlow \u6e90\u7801\u4ed3\u5e93\u7684 README \uff0c\u5728\u7f16\u8bd1 OneFlow \u6e90\u7801\u4e4b\u524d\uff0c\u5f3a\u70c8\u63a8\u8350\u5148\u9605\u8bfb Troubleshooting \u3002","title":"\u4ece\u6e90\u7801\u7f16\u8bd1\u5b89\u88c5 OneFlow"},{"location":"quick_start/install.html#oneflow-with-legacy-cuda","text":"\u652f\u6301\u5176\u5b83\u8f83\u65e9\u7248\u672c CUDA \u7684 OneFlow \u7684\u5b89\u88c5\u65b9\u6cd5\u5982\u4e0b\uff1a Stable: python3 -m pip install --find-links https://release.oneflow.info oneflow==0.4.0+[PLATFORM] Nightly: python3 -m pip install oneflow -f https://staging.oneflow.info/branch/master/[PLATFORM] \u5176\u4e2d [PLATFORM] \u53ef\u4ee5\u662f: Platform CUDA Driver Version Supported GPUs cu112 >= 450.80.02 GTX 10xx, RTX 20xx, A100, RTX 30xx cu111 >= 450.80.02 GTX 10xx, RTX 20xx, A100, RTX 30xx cu110, cu110_xla >= 450.36.06 GTX 10xx, RTX 20xx, A100 cu102, cu102_xla >= 440.33 GTX 10xx, RTX 20xx cu101, cu101_xla >= 418.39 GTX 10xx, RTX 20xx cu100, cu100_xla >= 410.48 GTX 10xx, RTX 20xx cpu N/A N/A","title":"\u5b89\u88c5 OneFlow with legacy CUDA"},{"location":"quick_start/install.html#qq","text":"\u5b89\u88c5\u6216\u4f7f\u7528\u8fc7\u7a0b\u9047\u5230\u95ee\u9898\uff0c\u6b22\u8fce\u5165\u7fa4\u4e0e\u4f17\u591a OneFlow \u7231\u597d\u8005\u5171\u540c\u8ba8\u8bba\u4ea4\u6d41\uff1a \u52a0QQ\u7fa4 331883 \u6216\u626b\u63cf\u4e8c\u7ef4\u7801","title":"\u4ea4\u6d41QQ\u7fa4"},{"location":"quick_start/lenet_mnist.html","text":"\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\uff1a \u4f7f\u7528 OneFlow \u63a5\u53e3\u914d\u7f6e\u8f6f\u786c\u4ef6\u73af\u5883 \u4f7f\u7528 OneFlow \u7684\u63a5\u53e3\u5b9a\u4e49\u6a21\u578b \u4f7f\u7528 train \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\u505a\u6a21\u578b\u8bad\u7ec3 \u6a21\u578b\u7684\u4fdd\u5b58\u548c\u52a0\u8f7d \u4f7f\u7528 predict \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\u505a\u6a21\u578b\u6821\u9a8c \u4f7f\u7528 predict \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\u505a\u56fe\u50cf\u8bc6\u522b \u672c\u6587\u901a\u8fc7\u4f7f\u7528 LeNet \u6a21\u578b\uff0c\u8bad\u7ec3 MNIST \u6570\u636e\u96c6\u5411\u5927\u5bb6\u4ecb\u7ecd\u4f7f\u7528 OneFlow \u7684\u5404\u4e2a\u6838\u5fc3\u73af\u8282\uff0c\u6587\u672b\u9644\u6709\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801\u7684\u94fe\u63a5\u3002 \u5728\u5b66\u4e60\u4e4b\u524d\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u5404\u811a\u672c\u529f\u80fd\uff08 \u811a\u672c\u8fd0\u884c\u4f9d\u8d56 \u9ed8\u8ba4\u9009\u62e9\u673a\u5668\u4e0a\u76840\u53f7GPU\uff0c\u5982\u679c\u4f60\u5b89\u88c5\u7684\u662fCPU\u7248\u672cOneFlow\uff0c\u5219\u811a\u672c\u4f1a\u81ea\u52a8\u8c03\u7528CPU\u6765\u505a\u8bad\u7ec3\u3002 \uff09\u3002 \u9996\u5148\uff0c\u540c\u6b65\u672c\u6587\u6863\u4ed3\u5e93\u5e76\u5207\u6362\u5230\u5bf9\u5e94\u8def\u5f84\uff1a git clone https://github.com/Oneflow-Inc/oneflow-documentation.git cd oneflow-documentation/cn/docs/code/quick_start/ \u6a21\u578b\u8bad\u7ec3 python lenet_train.py \u4ee5\u4e0a\u547d\u4ee4\u5c06\u5bf9 MNIST \u6570\u636e\u96c6\u8fdb\u884c\u8bad\u7ec3\uff0c\u5e76\u4fdd\u5b58\u6a21\u578b\u3002 \u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz 5.9947124 1.0865117 0.5317516 0.20937675 0.26428983 0.21764673 0.23443426 ... \u4ee5\u4e0b\u7684\u4e24\u4e2a\u811a\u672c lenet_eval.py \u4e0e lenet_test.py \u90fd\u4f9d\u8d56\u4ee5\u4e0a\u8bad\u7ec3\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u9700\u8981\u5148\u8fd0\u884c\u4ee5\u4e0a\u811a\u672c\u3002\u6216\u8005\u4f60\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d\u6211\u4eec\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u5219\u53ef\u4ee5\u7565\u8fc7\u4ee5\u4e0a\u6b65\u9aa4\uff0c\u4e0b\u8f7d\u65b9\u6cd5\u5982\u4e0b\uff1a #\u5728\u4ed3\u5e93docs/code/quick_start/\u76ee\u5f55\u4e0b wget https://oneflow-public.oss-cn-beijing.aliyuncs.com/online_document/docs/quick_start/lenet_models_1.zip unzip lenet_models_1.zip \u6a21\u578b\u6821\u9a8c python lenet_eval.py \u4ee5\u4e0a\u547d\u4ee4\uff0c\u4f7f\u7528 MNIST \u6d4b\u8bd5\u96c6\u5bf9\u521a\u521a\u751f\u6210\u7684\u6a21\u578b\u8fdb\u884c\u6821\u9a8c\uff0c\u5e76\u7ed9\u51fa\u51c6\u786e\u7387\u3002 \u8f93\u51fa\uff1a File mnist.npz already exist, path: ./mnist.npz accuracy: 99.4% \u56fe\u50cf\u8bc6\u522b python lenet_test.py ./9.png # \u8f93\u51fa\uff1aprediction: 9 \u4ee5\u4e0a\u547d\u4ee4\u5c06\u4f7f\u7528\u4e4b\u524d\u8bad\u7ec3\u7684\u6a21\u578b\u5bf9\u6211\u4eec\u51c6\u5907\u597d\u7684 9.png \u56fe\u7247\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u9884\u6d4b\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u6211\u4eec \u63d0\u53d6\u597d\u7684 mnist \u56fe\u7247 \uff0c\u81ea\u884c\u5bf9\u66f4\u591a\u56fe\u7247\u6587\u4ef6\u7684\u9884\u6d4b\u6548\u679c\u8fdb\u884c\u9a8c\u8bc1\u3002 MNIST \u6570\u636e\u96c6\u4ecb\u7ecd \u00b6 MNIST \u662f\u4e00\u4e2a\u624b\u5199\u6570\u5b57\u7684\u6570\u636e\u96c6\u3002\u5305\u62ec\u4e86\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6\uff1b\u8bad\u7ec3\u96c6\u5305\u542b\u4e8660000\u5f20\u56fe\u7247\u4ee5\u53ca\u56fe\u7247\u5bf9\u5e94\u7684\u6807\u7b7e\uff0c\u6d4b\u8bd5\u96c6\u5305\u542b\u4e8610000\u5f20\u56fe\u7247\u4ee5\u53ca\u56fe\u7247\u6d4b\u8bd5\u7684\u6807\u7b7e\u3002Yann LeCun \u7b49\u5df2\u7ecf\u5c06\u56fe\u7247\u8fdb\u884c\u4e86\u5927\u5c0f\u5f52\u4e00\u5316\u53ca\u5c45\u4e2d\u5904\u7406\uff0c\u5e76\u4e14\u6253\u5305\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f9b\u4e0b\u8f7d( http://yann.lecun.com/exdb/mnist/ )\u3002\u672c\u6587\u6d89\u53ca\u7684\u811a\u672c\u4f1a\u81ea\u52a8\u4e0b\u8f7d MNIST \u6570\u636e\u96c6\u3002 \u5b9a\u4e49\u8bad\u7ec3\u6a21\u578b \u00b6 \u5728 oneflow.nn \u53ca oneflow.layers \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684\u7528\u4e8e\u6784\u5efa\u6a21\u578b\u7684\u7b97\u5b50\u3002 def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u642d\u5efa\u4e86\u4e00\u4e2a LeNet \u7f51\u7edc\u6a21\u578b\u3002 \u5b9e\u73b0\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570 \u00b6 OneFlow \u4e2d\u63d0\u4f9b\u4e86 oneflow.global_function \u88c5\u9970\u5668\uff0c\u901a\u8fc7\u5b83\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a Python \u51fd\u6570\u8f6c\u53d8\u4e3a\u4f5c\u4e1a\u51fd\u6570\uff08job function\uff09\u3002 global_function \u88c5\u9970\u5668 \u00b6 oneflow.global_function \u88c5\u9970\u5668\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a type \u4e0e function_config \u3002 type \u7528\u4e8e\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u7c7b\u578b\uff0c type=\"train\" \u610f\u5473\u7740\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u8bad\u7ec3\uff0c type=\"predict\" \u610f\u5473\u7740\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u9884\u6d4b\u3002 function_config \u53c2\u6570\u662f\u4e00\u4e2a oneflow.function_config \u5bf9\u8c61\uff0c\u53ef\u7528\u5b83\u914d\u7f6e\u4f5c\u4e1a\u51fd\u6570\u7684\u7ec6\u8282\u3002 \u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u56e0\u4e3a\u6ca1\u6709\u8bbe\u7f6e function_config \uff0c\u6240\u4ee5\u4f5c\u4e1a\u51fd\u6570\u7684\u5176\u5b83\u914d\u7f6e\u4e3a\u9ed8\u8ba4\u914d\u7f6e\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 )) -> tp . Numpy : #\u4f5c\u4e1a\u51fd\u6570\u5b9e\u73b0 ... \u5176\u4e2d\u7684 tp.Numpy.Placeholder \u662f\u6570\u636e\u5360\u4f4d\u7b26\uff0c -> tp.Numpy \u6307\u5b9a\u8fd9\u4e2a\u4f5c\u4e1a\u51fd\u6570\u5728\u8c03\u7528\u65f6\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a numpy \u5bf9\u8c61\u3002 \u6307\u5b9a\u4f18\u5316\u76ee\u6807 \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 oneflow.optimizer \u4e0b\u7684\u63a5\u53e3\u6307\u5b9a\u4f18\u5316\u5668\u53ca\u5176\u4f18\u5316\u76ee\u6807\u3002\u8fd9\u6837\uff0cOneFlow \u5728\u6bcf\u6b21\u8fed\u4ee3\u8bad\u7ec3\u4f5c\u4e1a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u4ee5\u6307\u5b9a\u7684\u65b9\u5f0f\u4f18\u5316\u76ee\u6807\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7 flow.nn.sparse_softmax_cross_entropy_with_logits \u6c42\u5f97 loss \uff0c\u5e76\u4e14\u5c06 loss \u4f5c\u4e3a\u4f18\u5316\u76ee\u6807\u3002 lr_scheduler \u8bbe\u5b9a\u4e86\u5b66\u4e60\u7387\u8ba1\u5212\uff0c[0.1]\u8868\u660e\u521d\u59cb\u5b66\u4e60\u7387\u4e3a0.1\uff1b flow.optimizer.SGD \u5219\u6307\u5b9a\u4e86\u4f18\u5316\u5668\u4e3a SGD\uff1bloss \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 minimize \u8868\u660e\u4f18\u5316\u5668\u5c06\u4ee5\u6700\u5c0f\u5316 loss \u4e3a\u76ee\u6807\u3002 \u66f4\u591a optimizer \u53ca\u5176\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u89c1 oneflow.optimizer \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5e76\u4ea4\u4e92 \u00b6 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5c31\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\u3002 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u7531\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\u6307\u5b9a\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u51b3\u5b9a\uff0c\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u3002 \u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u7684\u4f8b\u5b50 \u00b6 \u5728 lenet_train.py \u4e2d\u5b9a\u4e49\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u8be5\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a tp.Numpy \uff0c\u5219\u5f53\u8c03\u7528\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a numpy \u5bf9\u8c61\uff1a for epoch in range ( 20 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u6211\u4eec\u8c03\u7528\u4e86 train_job \u5e76\u6bcf\u5faa\u73af20\u6b21\u6253\u53701\u6b21 loss.mean() \u3002 \u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u7684\u4f8b\u5b50 \u00b6 \u5728\u6a21\u578b\u6821\u9a8c\u7684\u4ee3\u7801 lenet_eval.py \u4e2d\u5b9a\u4e49\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = False ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u8be5\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a Tuple[tp.Numpy, tp.Numpy] \uff0c\u5219\u5f53\u8c03\u7528\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a tuple \u5143\u7ec4\uff0c\u91cc\u9762\u67092\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a numpy \u5bf9\u8c61\uff1a for i , ( images , labels ) in enumerate ( zip ( test_images , test_labels )): labels , logits = eval_job ( images , labels ) acc ( labels , logits ) \u6211\u4eec\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e86 labels \u4e0e logits \uff0c\u5e76\u7528\u5b83\u4eec\u8bc4\u4f30\u6a21\u578b\u51c6\u786e\u7387\u3002 \u540c\u6b65\u4e0e\u5f02\u6b65\u8c03\u7528 \u00b6 \u672c\u6587\u6240\u6709\u4ee3\u7801\u90fd\u662f\u540c\u6b65\u65b9\u5f0f\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a OneFlow \u8fd8\u652f\u6301\u5f02\u6b65\u65b9\u5f0f\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5177\u4f53\u53ef\u53c2\u8003 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u4e00\u6587\u3002 \u6a21\u578b\u7684\u521d\u59cb\u5316\u3001\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u00b6 \u6a21\u578b\u7684\u521d\u59cb\u5316\u4e0e\u4fdd\u5b58 \u00b6 \u901a\u8fc7 flow.checkpoint.save \u65b9\u6cd5\u4fdd\u5b58\u6a21\u578b\u3002\u5982\u4e0b\u4f8b\uff1a if __name__ == '__main__' : #\u52a0\u8f7d\u6570\u636e\u53ca\u8bad\u7ec3 ... flow . checkpoint . save ( \"./lenet_models_1\" ) \u4fdd\u5b58\u6210\u529f\u540e\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u540d\u4e3a lenet_models_1 \u7684 \u76ee\u5f55 \uff0c\u8be5\u76ee\u5f55\u4e2d\u5305\u542b\u4e86\u4e0e\u6a21\u578b\u53c2\u6570\u5bf9\u5e94\u7684\u5b50\u76ee\u5f55\u53ca\u6587\u4ef6\u3002 \u6a21\u578b\u7684\u52a0\u8f7d \u00b6 \u5728\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 flow.checkpoint.get \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u53c2\u6570\u503c\u5230\u5185\u5b58\uff0c\u518d\u901a\u8fc7 flow.load_variables \u5c06\u53c2\u6570\u503c\u66f4\u65b0\u5230\u6a21\u578b\u4e0a\u3002\u5982\u4e0b\u4f8b\uff1a if __name__ == '__main__' : flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) #\u6821\u9a8c\u8fc7\u7a0b ... \u6a21\u578b\u7684\u6821\u9a8c \u00b6 \u7528\u4e8e\u6821\u9a8c\u7684 predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u4e0e train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570 \u51e0\u4e4e\u6ca1\u6709\u533a\u522b \uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u6821\u9a8c\u8fc7\u7a0b\u4e2d\u7684\u6a21\u578b\u53c2\u6570\u6765\u81ea\u4e8e\u5df2\u7ecf\u4fdd\u5b58\u597d\u7684\u6a21\u578b\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff08\u6240\u4ee5\u4e5f\u4e0d\u7528\u6307\u5b9a optimizer \uff09\u3002 \u7528\u4e8e\u6821\u9a8c\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u7f16\u5199 \u00b6 @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = False ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u4ee5\u4e0a\u662f\u7528\u4e8e\u6821\u9a8c\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u58f0\u660e\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\u662f Tuple[tp.Numpy, tp.Numpy] \uff0c \u56e0\u6b64\u8fd4\u56de\u4e00\u4e2a tuple \uff0c tuple \u4e2d\u67092\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f1\u4e2a numpy \u5bf9\u8c61\u3002\u6211\u4eec\u5c06\u8c03\u7528 predict \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\uff0c\u5e76\u6839\u636e\u8fd4\u56de\u7ed3\u679c\u8ba1\u7b97\u51c6\u786e\u7387\u3002 \u8fed\u4ee3\u6821\u9a8c \u00b6 \u4ee5\u4e0b acc \u51fd\u6570\u4e2d\u7edf\u8ba1\u6837\u672c\u7684\u603b\u6570\u76ee\uff0c\u4ee5\u53ca\u6821\u9a8c\u6b63\u786e\u7684\u603b\u6570\u76ee\uff0c\u6211\u4eec\u5c06\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5f97\u5230 labels \u4e0e logits \uff1a g_total = 0 g_correct = 0 def acc ( labels , logits ): global g_total global g_correct predictions = np . argmax ( logits , 1 ) right_count = np . sum ( predictions == labels ) g_total += labels . shape [ 0 ] g_correct += right_count \u8c03\u7528\u6821\u9a8c\u4f5c\u4e1a\u51fd\u6570\uff1a if __name__ == \"__main__\" : flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for epoch in range ( 1 ): for i , ( images , labels ) in enumerate ( zip ( test_images , test_labels )): labels , logits = eval_job ( images , labels ) acc ( labels , logits ) print ( \"accuracy: {0:.1f} %\" . format ( g_correct * 100 / g_total )) \u4ee5\u4e0a\uff0c\u5faa\u73af\u8c03\u7528\u6821\u9a8c\u51fd\u6570\uff0c\u6700\u7ec8\u8f93\u51fa\u5728 MNIST \u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u3002 \u9884\u6d4b\u56fe\u7247 \u00b6 \u5c06\u4ee5\u4e0a\u6821\u9a8c\u4ee3\u7801\u4fee\u6539\uff0c\u4f7f\u5f97\u6821\u9a8c\u6570\u636e\u6765\u81ea\u4e8e\u539f\u59cb\u7684\u56fe\u7247\u800c\u4e0d\u662f\u73b0\u6210\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u7247\u5185\u5bb9\u9884\u6d4b\u3002 def load_image ( file ): im = Image . open ( file ) . convert ( \"L\" ) im = im . resize (( 28 , 28 ), Image . ANTIALIAS ) im = np . array ( im ) . reshape ( 1 , 1 , 28 , 28 ) . astype ( np . float32 ) im = ( im - 128.0 ) / 255.0 im . reshape (( - 1 , 1 , 1 , im . shape [ 1 ], im . shape [ 2 ])) return im def main (): if len ( sys . argv ) != 2 : usage () return flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) image = load_image ( sys . argv [ 1 ]) logits = test_job ( image ) prediction = np . argmax ( logits , 1 ) print ( \"prediction: {} \" . format ( prediction [ 0 ])) if __name__ == \"__main__\" : main () \u5b8c\u6574\u4ee3\u7801 \u00b6 \u8bad\u7ec3\u6a21\u578b \u00b6 \u4ee3\u7801\uff1a lenet_train.py \u6821\u9a8c\u6a21\u578b \u00b6 \u4ee3\u7801\uff1a lenet_eval.py \u9884\u8bad\u7ec3\u6a21\u578b\uff1a lenet_models_1.zip \u6570\u5b57\u9884\u6d4b \u00b6 \u4ee3\u7801\uff1a lenet_test.py \u9884\u8bad\u7ec3\u6a21\u578b\uff1a lenet_models_1.zip MNIST \u6570\u636e\u96c6\u56fe\u7247\uff1a mnist_raw_images.zip","title":"\u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57"},{"location":"quick_start/lenet_mnist.html#mnist","text":"MNIST \u662f\u4e00\u4e2a\u624b\u5199\u6570\u5b57\u7684\u6570\u636e\u96c6\u3002\u5305\u62ec\u4e86\u8bad\u7ec3\u96c6\u4e0e\u6d4b\u8bd5\u96c6\uff1b\u8bad\u7ec3\u96c6\u5305\u542b\u4e8660000\u5f20\u56fe\u7247\u4ee5\u53ca\u56fe\u7247\u5bf9\u5e94\u7684\u6807\u7b7e\uff0c\u6d4b\u8bd5\u96c6\u5305\u542b\u4e8610000\u5f20\u56fe\u7247\u4ee5\u53ca\u56fe\u7247\u6d4b\u8bd5\u7684\u6807\u7b7e\u3002Yann LeCun \u7b49\u5df2\u7ecf\u5c06\u56fe\u7247\u8fdb\u884c\u4e86\u5927\u5c0f\u5f52\u4e00\u5316\u53ca\u5c45\u4e2d\u5904\u7406\uff0c\u5e76\u4e14\u6253\u5305\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f9b\u4e0b\u8f7d( http://yann.lecun.com/exdb/mnist/ )\u3002\u672c\u6587\u6d89\u53ca\u7684\u811a\u672c\u4f1a\u81ea\u52a8\u4e0b\u8f7d MNIST \u6570\u636e\u96c6\u3002","title":"MNIST \u6570\u636e\u96c6\u4ecb\u7ecd"},{"location":"quick_start/lenet_mnist.html#_1","text":"\u5728 oneflow.nn \u53ca oneflow.layers \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684\u7528\u4e8e\u6784\u5efa\u6a21\u578b\u7684\u7b97\u5b50\u3002 def lenet ( data , train = False ): initializer = flow . truncated_normal ( 0.1 ) conv1 = flow . layers . conv2d ( data , 32 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv1\" , kernel_initializer = initializer , ) pool1 = flow . nn . max_pool2d ( conv1 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool1\" , data_format = \"NCHW\" ) conv2 = flow . layers . conv2d ( pool1 , 64 , 5 , padding = \"SAME\" , activation = flow . nn . relu , name = \"conv2\" , kernel_initializer = initializer , ) pool2 = flow . nn . max_pool2d ( conv2 , ksize = 2 , strides = 2 , padding = \"SAME\" , name = \"pool2\" , data_format = \"NCHW\" ) reshape = flow . reshape ( pool2 , [ pool2 . shape [ 0 ], - 1 ]) hidden = flow . layers . dense ( reshape , 512 , activation = flow . nn . relu , kernel_initializer = initializer , name = \"dense1\" , ) if train : hidden = flow . nn . dropout ( hidden , rate = 0.5 , name = \"dropout\" ) return flow . layers . dense ( hidden , 10 , kernel_initializer = initializer , name = \"dense2\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u642d\u5efa\u4e86\u4e00\u4e2a LeNet \u7f51\u7edc\u6a21\u578b\u3002","title":"\u5b9a\u4e49\u8bad\u7ec3\u6a21\u578b"},{"location":"quick_start/lenet_mnist.html#_2","text":"OneFlow \u4e2d\u63d0\u4f9b\u4e86 oneflow.global_function \u88c5\u9970\u5668\uff0c\u901a\u8fc7\u5b83\uff0c\u53ef\u4ee5\u5c06\u4e00\u4e2a Python \u51fd\u6570\u8f6c\u53d8\u4e3a\u4f5c\u4e1a\u51fd\u6570\uff08job function\uff09\u3002","title":"\u5b9e\u73b0\u8bad\u7ec3\u4f5c\u4e1a\u51fd\u6570"},{"location":"quick_start/lenet_mnist.html#global_function","text":"oneflow.global_function \u88c5\u9970\u5668\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a type \u4e0e function_config \u3002 type \u7528\u4e8e\u6307\u5b9a\u4f5c\u4e1a\u51fd\u6570\u7684\u7c7b\u578b\uff0c type=\"train\" \u610f\u5473\u7740\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u8bad\u7ec3\uff0c type=\"predict\" \u610f\u5473\u7740\u4f5c\u4e1a\u51fd\u6570\u7528\u4e8e\u9884\u6d4b\u3002 function_config \u53c2\u6570\u662f\u4e00\u4e2a oneflow.function_config \u5bf9\u8c61\uff0c\u53ef\u7528\u5b83\u914d\u7f6e\u4f5c\u4e1a\u51fd\u6570\u7684\u7ec6\u8282\u3002 \u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\u5c55\u793a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\uff0c\u56e0\u4e3a\u6ca1\u6709\u8bbe\u7f6e function_config \uff0c\u6240\u4ee5\u4f5c\u4e1a\u51fd\u6570\u7684\u5176\u5b83\u914d\u7f6e\u4e3a\u9ed8\u8ba4\u914d\u7f6e\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 )) -> tp . Numpy : #\u4f5c\u4e1a\u51fd\u6570\u5b9e\u73b0 ... \u5176\u4e2d\u7684 tp.Numpy.Placeholder \u662f\u6570\u636e\u5360\u4f4d\u7b26\uff0c -> tp.Numpy \u6307\u5b9a\u8fd9\u4e2a\u4f5c\u4e1a\u51fd\u6570\u5728\u8c03\u7528\u65f6\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a numpy \u5bf9\u8c61\u3002","title":"global_function \u88c5\u9970\u5668"},{"location":"quick_start/lenet_mnist.html#_3","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 oneflow.optimizer \u4e0b\u7684\u63a5\u53e3\u6307\u5b9a\u4f18\u5316\u5668\u53ca\u5176\u4f18\u5316\u76ee\u6807\u3002\u8fd9\u6837\uff0cOneFlow \u5728\u6bcf\u6b21\u8fed\u4ee3\u8bad\u7ec3\u4f5c\u4e1a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u4ee5\u6307\u5b9a\u7684\u65b9\u5f0f\u4f18\u5316\u76ee\u6807\u3002 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u4ee5\u4e0a\uff0c\u6211\u4eec\u901a\u8fc7 flow.nn.sparse_softmax_cross_entropy_with_logits \u6c42\u5f97 loss \uff0c\u5e76\u4e14\u5c06 loss \u4f5c\u4e3a\u4f18\u5316\u76ee\u6807\u3002 lr_scheduler \u8bbe\u5b9a\u4e86\u5b66\u4e60\u7387\u8ba1\u5212\uff0c[0.1]\u8868\u660e\u521d\u59cb\u5b66\u4e60\u7387\u4e3a0.1\uff1b flow.optimizer.SGD \u5219\u6307\u5b9a\u4e86\u4f18\u5316\u5668\u4e3a SGD\uff1bloss \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 minimize \u8868\u660e\u4f18\u5316\u5668\u5c06\u4ee5\u6700\u5c0f\u5316 loss \u4e3a\u76ee\u6807\u3002 \u66f4\u591a optimizer \u53ca\u5176\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u89c1 oneflow.optimizer","title":"\u6307\u5b9a\u4f18\u5316\u76ee\u6807"},{"location":"quick_start/lenet_mnist.html#_4","text":"\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5c31\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\u3002 \u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u7ed3\u679c\uff0c\u7531\u5b9a\u4e49\u4f5c\u4e1a\u51fd\u6570\u65f6\u6307\u5b9a\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u51b3\u5b9a\uff0c\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\uff0c\u4e5f\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u3002","title":"\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u5e76\u4ea4\u4e92"},{"location":"quick_start/lenet_mnist.html#_5","text":"\u5728 lenet_train.py \u4e2d\u5b9a\u4e49\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = True ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.1 ]) flow . optimizer . SGD ( lr_scheduler , momentum = 0 ) . minimize ( loss ) return loss \u8be5\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a tp.Numpy \uff0c\u5219\u5f53\u8c03\u7528\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a numpy \u5bf9\u8c61\uff1a for epoch in range ( 20 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( loss . mean ()) \u6211\u4eec\u8c03\u7528\u4e86 train_job \u5e76\u6bcf\u5faa\u73af20\u6b21\u6253\u53701\u6b21 loss.mean() \u3002","title":"\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u7684\u4f8b\u5b50"},{"location":"quick_start/lenet_mnist.html#_6","text":"\u5728\u6a21\u578b\u6821\u9a8c\u7684\u4ee3\u7801 lenet_eval.py \u4e2d\u5b9a\u4e49\u7684\u4f5c\u4e1a\u51fd\u6570\uff1a @flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = False ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u8be5\u4f5c\u4e1a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a Tuple[tp.Numpy, tp.Numpy] \uff0c\u5219\u5f53\u8c03\u7528\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a tuple \u5143\u7ec4\uff0c\u91cc\u9762\u67092\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a numpy \u5bf9\u8c61\uff1a for i , ( images , labels ) in enumerate ( zip ( test_images , test_labels )): labels , logits = eval_job ( images , labels ) acc ( labels , logits ) \u6211\u4eec\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\u8fd4\u56de\u4e86 labels \u4e0e logits \uff0c\u5e76\u7528\u5b83\u4eec\u8bc4\u4f30\u6a21\u578b\u51c6\u786e\u7387\u3002","title":"\u8fd4\u56de\u591a\u4e2a\u7ed3\u679c\u7684\u4f8b\u5b50"},{"location":"quick_start/lenet_mnist.html#_7","text":"\u672c\u6587\u6240\u6709\u4ee3\u7801\u90fd\u662f\u540c\u6b65\u65b9\u5f0f\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a OneFlow \u8fd8\u652f\u6301\u5f02\u6b65\u65b9\u5f0f\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5177\u4f53\u53ef\u53c2\u8003 \u83b7\u53d6\u4f5c\u4e1a\u51fd\u6570\u7684\u7ed3\u679c \u4e00\u6587\u3002","title":"\u540c\u6b65\u4e0e\u5f02\u6b65\u8c03\u7528"},{"location":"quick_start/lenet_mnist.html#_8","text":"","title":"\u6a21\u578b\u7684\u521d\u59cb\u5316\u3001\u4fdd\u5b58\u4e0e\u52a0\u8f7d"},{"location":"quick_start/lenet_mnist.html#_9","text":"\u901a\u8fc7 flow.checkpoint.save \u65b9\u6cd5\u4fdd\u5b58\u6a21\u578b\u3002\u5982\u4e0b\u4f8b\uff1a if __name__ == '__main__' : #\u52a0\u8f7d\u6570\u636e\u53ca\u8bad\u7ec3 ... flow . checkpoint . save ( \"./lenet_models_1\" ) \u4fdd\u5b58\u6210\u529f\u540e\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u540d\u4e3a lenet_models_1 \u7684 \u76ee\u5f55 \uff0c\u8be5\u76ee\u5f55\u4e2d\u5305\u542b\u4e86\u4e0e\u6a21\u578b\u53c2\u6570\u5bf9\u5e94\u7684\u5b50\u76ee\u5f55\u53ca\u6587\u4ef6\u3002","title":"\u6a21\u578b\u7684\u521d\u59cb\u5316\u4e0e\u4fdd\u5b58"},{"location":"quick_start/lenet_mnist.html#_10","text":"\u5728\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 flow.checkpoint.get \u4ece\u6587\u4ef6\u4e2d\u52a0\u8f7d\u53c2\u6570\u503c\u5230\u5185\u5b58\uff0c\u518d\u901a\u8fc7 flow.load_variables \u5c06\u53c2\u6570\u503c\u66f4\u65b0\u5230\u6a21\u578b\u4e0a\u3002\u5982\u4e0b\u4f8b\uff1a if __name__ == '__main__' : flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) #\u6821\u9a8c\u8fc7\u7a0b ...","title":"\u6a21\u578b\u7684\u52a0\u8f7d"},{"location":"quick_start/lenet_mnist.html#_11","text":"\u7528\u4e8e\u6821\u9a8c\u7684 predict \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570\u4e0e train \u7c7b\u578b\u7684\u4f5c\u4e1a\u51fd\u6570 \u51e0\u4e4e\u6ca1\u6709\u533a\u522b \uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u6821\u9a8c\u8fc7\u7a0b\u4e2d\u7684\u6a21\u578b\u53c2\u6570\u6765\u81ea\u4e8e\u5df2\u7ecf\u4fdd\u5b58\u597d\u7684\u6a21\u578b\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u521d\u59cb\u5316\uff0c\u4e0d\u9700\u8981\u66f4\u65b0\u6a21\u578b\u53c2\u6570\uff08\u6240\u4ee5\u4e5f\u4e0d\u7528\u6307\u5b9a optimizer \uff09\u3002","title":"\u6a21\u578b\u7684\u6821\u9a8c"},{"location":"quick_start/lenet_mnist.html#_12","text":"@flow . global_function ( type = \"predict\" ) def eval_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> Tuple [ tp . Numpy , tp . Numpy ]: with flow . scope . placement ( \"gpu\" , \"0:0\" ): logits = lenet ( images , train = False ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits , name = \"softmax_loss\" ) return ( labels , logits ) \u4ee5\u4e0a\u662f\u7528\u4e8e\u6821\u9a8c\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u58f0\u660e\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\u662f Tuple[tp.Numpy, tp.Numpy] \uff0c \u56e0\u6b64\u8fd4\u56de\u4e00\u4e2a tuple \uff0c tuple \u4e2d\u67092\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f1\u4e2a numpy \u5bf9\u8c61\u3002\u6211\u4eec\u5c06\u8c03\u7528 predict \u7c7b\u578b\u4f5c\u4e1a\u51fd\u6570\uff0c\u5e76\u6839\u636e\u8fd4\u56de\u7ed3\u679c\u8ba1\u7b97\u51c6\u786e\u7387\u3002","title":"\u7528\u4e8e\u6821\u9a8c\u7684\u4f5c\u4e1a\u51fd\u6570\u7684\u7f16\u5199"},{"location":"quick_start/lenet_mnist.html#_13","text":"\u4ee5\u4e0b acc \u51fd\u6570\u4e2d\u7edf\u8ba1\u6837\u672c\u7684\u603b\u6570\u76ee\uff0c\u4ee5\u53ca\u6821\u9a8c\u6b63\u786e\u7684\u603b\u6570\u76ee\uff0c\u6211\u4eec\u5c06\u8c03\u7528\u4f5c\u4e1a\u51fd\u6570\uff0c\u5f97\u5230 labels \u4e0e logits \uff1a g_total = 0 g_correct = 0 def acc ( labels , logits ): global g_total global g_correct predictions = np . argmax ( logits , 1 ) right_count = np . sum ( predictions == labels ) g_total += labels . shape [ 0 ] g_correct += right_count \u8c03\u7528\u6821\u9a8c\u4f5c\u4e1a\u51fd\u6570\uff1a if __name__ == \"__main__\" : flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for epoch in range ( 1 ): for i , ( images , labels ) in enumerate ( zip ( test_images , test_labels )): labels , logits = eval_job ( images , labels ) acc ( labels , logits ) print ( \"accuracy: {0:.1f} %\" . format ( g_correct * 100 / g_total )) \u4ee5\u4e0a\uff0c\u5faa\u73af\u8c03\u7528\u6821\u9a8c\u51fd\u6570\uff0c\u6700\u7ec8\u8f93\u51fa\u5728 MNIST \u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u3002","title":"\u8fed\u4ee3\u6821\u9a8c"},{"location":"quick_start/lenet_mnist.html#_14","text":"\u5c06\u4ee5\u4e0a\u6821\u9a8c\u4ee3\u7801\u4fee\u6539\uff0c\u4f7f\u5f97\u6821\u9a8c\u6570\u636e\u6765\u81ea\u4e8e\u539f\u59cb\u7684\u56fe\u7247\u800c\u4e0d\u662f\u73b0\u6210\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u7247\u5185\u5bb9\u9884\u6d4b\u3002 def load_image ( file ): im = Image . open ( file ) . convert ( \"L\" ) im = im . resize (( 28 , 28 ), Image . ANTIALIAS ) im = np . array ( im ) . reshape ( 1 , 1 , 28 , 28 ) . astype ( np . float32 ) im = ( im - 128.0 ) / 255.0 im . reshape (( - 1 , 1 , 1 , im . shape [ 1 ], im . shape [ 2 ])) return im def main (): if len ( sys . argv ) != 2 : usage () return flow . load_variables ( flow . checkpoint . get ( \"./lenet_models_1\" )) image = load_image ( sys . argv [ 1 ]) logits = test_job ( image ) prediction = np . argmax ( logits , 1 ) print ( \"prediction: {} \" . format ( prediction [ 0 ])) if __name__ == \"__main__\" : main ()","title":"\u9884\u6d4b\u56fe\u7247"},{"location":"quick_start/lenet_mnist.html#_15","text":"","title":"\u5b8c\u6574\u4ee3\u7801"},{"location":"quick_start/lenet_mnist.html#_16","text":"\u4ee3\u7801\uff1a lenet_train.py","title":"\u8bad\u7ec3\u6a21\u578b"},{"location":"quick_start/lenet_mnist.html#_17","text":"\u4ee3\u7801\uff1a lenet_eval.py \u9884\u8bad\u7ec3\u6a21\u578b\uff1a lenet_models_1.zip","title":"\u6821\u9a8c\u6a21\u578b"},{"location":"quick_start/lenet_mnist.html#_18","text":"\u4ee3\u7801\uff1a lenet_test.py \u9884\u8bad\u7ec3\u6a21\u578b\uff1a lenet_models_1.zip MNIST \u6570\u636e\u96c6\u56fe\u7247\uff1a mnist_raw_images.zip","title":"\u6570\u5b57\u9884\u6d4b"},{"location":"quick_start/quickstart_in_3_min.html","text":"\u8fd9\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u5982\u4f55\u5feb\u901f\u4e0a\u624b OneFlow \uff0c\u6211\u4eec\u53ef\u4ee5\u57283\u5206\u949f\u5185\u5b8c\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u8fc7\u7a0b\u3002 \u8fd0\u884c\u4f8b\u5b50 \u00b6 \u5982\u679c\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86 OneFlow \uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d \u6587\u6863\u4ed3\u5e93 \u4e2d\u7684 mlp_mnist.py \u811a\u672c\uff0c\u5e76\u8fd0\u884c\u3002 wget https://docs.oneflow.org/code/quick_start/mlp_mnist.py #\u4e0b\u8f7d\u811a\u672c python3 mlp_mnist.py #\u8fd0\u884c\u811a\u672c \u6211\u4eec\u5c06\u5f97\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u8f93\u51fa\uff1a Epoch [1/20], Loss: 2.3155 Epoch [1/20], Loss: 0.7955 Epoch [1/20], Loss: 0.4653 Epoch [1/20], Loss: 0.2064 Epoch [1/20], Loss: 0.2683 Epoch [1/20], Loss: 0.3167 ... \u8f93\u51fa\u7684\u662f\u4e00\u4e32\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u4ee3\u8868\u4e86\u8bad\u7ec3\u7684\u635f\u5931\u503c\uff0c\u8bad\u7ec3\u7684\u76ee\u6807\u662f\u635f\u5931\u503c\u8d8a\u5c0f\u8d8a\u597d\u3002\u5230\u6b64\u6211\u4eec\u5df2\u7ecf\u7528 OneFlow \u5b8c\u6210\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u3002 \u4ee3\u7801\u89e3\u8bfb \u00b6 \u4ee5\u4e0b\u662f\u5b8c\u6574\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u5bf9\u5176\u5173\u952e\u90e8\u5206\u8fdb\u884c\u89e3\u8bfb\u3002 # mlp_mnist.py import oneflow as flow import oneflow.typing as tp import numpy as np BATCH_SIZE = 100 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) initializer1 = flow . random_uniform_initializer ( - 1 / 28.0 , 1 / 28.0 ) hidden = flow . layers . dense ( reshape , 500 , activation = flow . nn . relu , kernel_initializer = initializer1 , bias_initializer = initializer1 , name = \"dense1\" , ) initializer2 = flow . random_uniform_initializer ( - np . sqrt ( 1 / 500.0 ), np . sqrt ( 1 / 500.0 )) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer2 , bias_initializer = initializer2 , name = \"dense2\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.001 ]) flow . optimizer . Adam ( lr_scheduler ) . minimize ( loss ) return loss if __name__ == \"__main__\" : ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for epoch in range ( 20 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( 'Epoch [ {} / {} ], Loss: {:.4f} ' . format ( epoch + 1 , 20 , loss . mean ())) \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u3002 OneFlow \u76f8\u5bf9\u5176\u4ed6\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8f83\u7279\u6b8a\u7684\u5730\u65b9\u662f\u8fd9\u91cc\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : train_job \u662f\u4e00\u4e2a\u88ab @flow.global_function \u4fee\u9970\u7684\u51fd\u6570\uff0c\u901a\u5e38\u79f0\u4e3a \u4f5c\u4e1a\u51fd\u6570 (job function)\u3002\u53ea\u6709\u4f5c\u4e1a\u51fd\u6570\u624d\u80fd\u591f\u88ab OneFlow \u8bc6\u522b\uff0c\u8fdb\u884c\u8bad\u7ec3\u6216\u8005\u9884\u6d4b\u3002\u901a\u8fc7 type \u6765\u6307\u5b9a job \u7684\u7c7b\u578b\uff1a type=\"train\" \u4e3a\u8bad\u7ec3\u4f5c\u4e1a\uff1b type=\"predict\" \u4e3a\u9884\u6d4b\u4f5c\u4e1a\u3002 \u5728 OneFlow \u4e2d\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u6216\u8005\u9884\u6d4b\u9700\u8981\u4e24\u90e8\u5206\u4fe1\u606f\uff1a \u4e00\u90e8\u5206\u662f\u8fd9\u4e2a\u795e\u7ecf\u7f51\u7edc\u672c\u8eab\u7684\u7ed3\u6784\u548c\u76f8\u5173\u53c2\u6570\uff0c\u8fd9\u4e9b\u5728\u4e0a\u6587\u63d0\u5230\u7684\u4f5c\u4e1a\u51fd\u6570\u91cc\u5b9a\u4e49\uff1b \u53e6\u5916\u4e00\u90e8\u5206\u662f\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u914d\u7f6e\u53bb\u8bad\u7ec3\u8fd9\u4e2a\u7f51\u7edc\uff0c\u6bd4\u5982 learning rate \u3001\u6a21\u578b\u4f18\u5316\u66f4\u65b0\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5728 job function \u91cc\u914d\u7f6e\u5982\u4e0b\uff1a lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.001 ]) flow . optimizer . Adam ( lr_scheduler ) . minimize ( loss ) \u672c\u6587\u4f8b\u5b50\u4e2d\u5305\u542b\u4e86\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u7684\u6240\u6709\u5143\u7d20\uff0c\u9664\u4e86\u4e0a\u9762\u8bf4\u7684\u4f5c\u4e1a\u51fd\u6570\u53ca\u5176\u914d\u7f6e\u4e4b\u5916\uff0c\u8fd8\u6709\uff1a flow.data.load_mnist(BATCH_SIZE,BATCH_SIZE) : \u51c6\u5907\u5e76\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e\uff1b train_job(images, labels) : \u8fd4\u56de\u6bcf\u4e00\u6b21\u8bad\u7ec3\u7684\u635f\u5931\u503c\uff1b print(..., loss.mean()) : \u6bcf\u8bad\u7ec320\u6b21\uff0c\u6253\u5370\u4e00\u6b21\u635f\u5931\u503c\u3002 \u4ee5\u4e0a\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u4e2d\uff0c\u6211\u4eec\u5bf9\u4f7f\u7528 OneFlow \u7684\u6d41\u7a0b\u8fdb\u884c\u4e86\u66f4\u52a0\u5168\u9762\u548c\u5177\u4f53\u7684\u4ecb\u7ecd\u3002 \u5728 OneFlow \u57fa\u7840\u4e13\u9898 \u4e2d\u5bf9\u4e8e\u8bad\u7ec3\u4e2d\u5404\u7c7b\u95ee\u9898\u8fdb\u884c\u4e86\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u6211\u4eec\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u7f51\u7edc\u7684 \u6837\u4f8b\u4ee3\u7801 \u53ca\u6570\u636e\u4f9b\u53c2\u8003\u3002 FAQ \u00b6 \u8fd0\u884c\u672c\u6587\u811a\u672c\u65f6\uff0c\u4e3a\u4ec0\u4e48\u4e00\u76f4\u5361\u7740\u4e0d\u52a8\uff1f \u53ef\u80fd\u662f\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u9519\u8bef\u7684\u4ee3\u7406\u3002\u53ef\u4ee5\u5148\u901a\u8fc7\u8fd0\u884c\u547d\u4ee4\u53d6\u6d88\u4ee3\u7406 unset http_proxy unset https_proxy unset HTTP_PROXY unset HTTPS_PROXY \u7136\u540e\u518d\u8fdb\u884c\u5c1d\u8bd5 \u6211\u7535\u8111\u65e0\u6cd5\u8054\u7f51\uff0c\u8fd0\u884c\u811a\u672c\u65f6\u4e00\u76f4\u5361\u7740\u4e0d\u52a8 \u672c\u6587\u811a\u672c\u4f1a\u81ea\u52a8\u4ece\u7f51\u7edc\u4e0b\u8f7d\u9700\u8981\u7684\u6570\u636e\u6587\u4ef6\uff0c\u5982\u679c\u7535\u8111\u65e0\u6cd5\u8054\u7f51\uff0c\u5219\u9700\u8981\u70b9\u51fb \u8fd9\u91cc \u624b\u5de5\u4e0b\u8f7d\uff0c\u5e76\u5c06\u5b83\u653e\u7f6e\u5728\u811a\u672c mlp_mnist.py \u76f8\u540c\u8def\u5f84\u4e0b\uff0c\u7136\u540e\u518d\u8fdb\u884c\u5c1d\u8bd5","title":"3\u5206\u949f\u5feb\u901f\u4e0a\u624b"},{"location":"quick_start/quickstart_in_3_min.html#_1","text":"\u5982\u679c\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86 OneFlow \uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u4e0b\u8f7d \u6587\u6863\u4ed3\u5e93 \u4e2d\u7684 mlp_mnist.py \u811a\u672c\uff0c\u5e76\u8fd0\u884c\u3002 wget https://docs.oneflow.org/code/quick_start/mlp_mnist.py #\u4e0b\u8f7d\u811a\u672c python3 mlp_mnist.py #\u8fd0\u884c\u811a\u672c \u6211\u4eec\u5c06\u5f97\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u8f93\u51fa\uff1a Epoch [1/20], Loss: 2.3155 Epoch [1/20], Loss: 0.7955 Epoch [1/20], Loss: 0.4653 Epoch [1/20], Loss: 0.2064 Epoch [1/20], Loss: 0.2683 Epoch [1/20], Loss: 0.3167 ... \u8f93\u51fa\u7684\u662f\u4e00\u4e32\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57\u4ee3\u8868\u4e86\u8bad\u7ec3\u7684\u635f\u5931\u503c\uff0c\u8bad\u7ec3\u7684\u76ee\u6807\u662f\u635f\u5931\u503c\u8d8a\u5c0f\u8d8a\u597d\u3002\u5230\u6b64\u6211\u4eec\u5df2\u7ecf\u7528 OneFlow \u5b8c\u6210\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u3002","title":"\u8fd0\u884c\u4f8b\u5b50"},{"location":"quick_start/quickstart_in_3_min.html#_2","text":"\u4ee5\u4e0b\u662f\u5b8c\u6574\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u5bf9\u5176\u5173\u952e\u90e8\u5206\u8fdb\u884c\u89e3\u8bfb\u3002 # mlp_mnist.py import oneflow as flow import oneflow.typing as tp import numpy as np BATCH_SIZE = 100 @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : with flow . scope . placement ( \"cpu\" , \"0:0\" ): reshape = flow . reshape ( images , [ images . shape [ 0 ], - 1 ]) initializer1 = flow . random_uniform_initializer ( - 1 / 28.0 , 1 / 28.0 ) hidden = flow . layers . dense ( reshape , 500 , activation = flow . nn . relu , kernel_initializer = initializer1 , bias_initializer = initializer1 , name = \"dense1\" , ) initializer2 = flow . random_uniform_initializer ( - np . sqrt ( 1 / 500.0 ), np . sqrt ( 1 / 500.0 )) logits = flow . layers . dense ( hidden , 10 , kernel_initializer = initializer2 , bias_initializer = initializer2 , name = \"dense2\" ) loss = flow . nn . sparse_softmax_cross_entropy_with_logits ( labels , logits ) lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.001 ]) flow . optimizer . Adam ( lr_scheduler ) . minimize ( loss ) return loss if __name__ == \"__main__\" : ( train_images , train_labels ), ( test_images , test_labels ) = flow . data . load_mnist ( BATCH_SIZE , BATCH_SIZE ) for epoch in range ( 20 ): for i , ( images , labels ) in enumerate ( zip ( train_images , train_labels )): loss = train_job ( images , labels ) if i % 20 == 0 : print ( 'Epoch [ {} / {} ], Loss: {:.4f} ' . format ( epoch + 1 , 20 , loss . mean ())) \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u7b80\u5355\u4ecb\u7ecd\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u3002 OneFlow \u76f8\u5bf9\u5176\u4ed6\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8f83\u7279\u6b8a\u7684\u5730\u65b9\u662f\u8fd9\u91cc\uff1a @flow . global_function ( type = \"train\" ) def train_job ( images : tp . Numpy . Placeholder (( BATCH_SIZE , 1 , 28 , 28 ), dtype = flow . float ), labels : tp . Numpy . Placeholder (( BATCH_SIZE ,), dtype = flow . int32 ), ) -> tp . Numpy : train_job \u662f\u4e00\u4e2a\u88ab @flow.global_function \u4fee\u9970\u7684\u51fd\u6570\uff0c\u901a\u5e38\u79f0\u4e3a \u4f5c\u4e1a\u51fd\u6570 (job function)\u3002\u53ea\u6709\u4f5c\u4e1a\u51fd\u6570\u624d\u80fd\u591f\u88ab OneFlow \u8bc6\u522b\uff0c\u8fdb\u884c\u8bad\u7ec3\u6216\u8005\u9884\u6d4b\u3002\u901a\u8fc7 type \u6765\u6307\u5b9a job \u7684\u7c7b\u578b\uff1a type=\"train\" \u4e3a\u8bad\u7ec3\u4f5c\u4e1a\uff1b type=\"predict\" \u4e3a\u9884\u6d4b\u4f5c\u4e1a\u3002 \u5728 OneFlow \u4e2d\uff0c\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u6216\u8005\u9884\u6d4b\u9700\u8981\u4e24\u90e8\u5206\u4fe1\u606f\uff1a \u4e00\u90e8\u5206\u662f\u8fd9\u4e2a\u795e\u7ecf\u7f51\u7edc\u672c\u8eab\u7684\u7ed3\u6784\u548c\u76f8\u5173\u53c2\u6570\uff0c\u8fd9\u4e9b\u5728\u4e0a\u6587\u63d0\u5230\u7684\u4f5c\u4e1a\u51fd\u6570\u91cc\u5b9a\u4e49\uff1b \u53e6\u5916\u4e00\u90e8\u5206\u662f\u4f7f\u7528\u4ec0\u4e48\u6837\u7684\u914d\u7f6e\u53bb\u8bad\u7ec3\u8fd9\u4e2a\u7f51\u7edc\uff0c\u6bd4\u5982 learning rate \u3001\u6a21\u578b\u4f18\u5316\u66f4\u65b0\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5728 job function \u91cc\u914d\u7f6e\u5982\u4e0b\uff1a lr_scheduler = flow . optimizer . PiecewiseConstantScheduler ([], [ 0.001 ]) flow . optimizer . Adam ( lr_scheduler ) . minimize ( loss ) \u672c\u6587\u4f8b\u5b50\u4e2d\u5305\u542b\u4e86\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u7684\u6240\u6709\u5143\u7d20\uff0c\u9664\u4e86\u4e0a\u9762\u8bf4\u7684\u4f5c\u4e1a\u51fd\u6570\u53ca\u5176\u914d\u7f6e\u4e4b\u5916\uff0c\u8fd8\u6709\uff1a flow.data.load_mnist(BATCH_SIZE,BATCH_SIZE) : \u51c6\u5907\u5e76\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e\uff1b train_job(images, labels) : \u8fd4\u56de\u6bcf\u4e00\u6b21\u8bad\u7ec3\u7684\u635f\u5931\u503c\uff1b print(..., loss.mean()) : \u6bcf\u8bad\u7ec320\u6b21\uff0c\u6253\u5370\u4e00\u6b21\u635f\u5931\u503c\u3002 \u4ee5\u4e0a\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5728 \u8bc6\u522b MNIST \u624b\u5199\u4f53\u6570\u5b57 \u4e2d\uff0c\u6211\u4eec\u5bf9\u4f7f\u7528 OneFlow \u7684\u6d41\u7a0b\u8fdb\u884c\u4e86\u66f4\u52a0\u5168\u9762\u548c\u5177\u4f53\u7684\u4ecb\u7ecd\u3002 \u5728 OneFlow \u57fa\u7840\u4e13\u9898 \u4e2d\u5bf9\u4e8e\u8bad\u7ec3\u4e2d\u5404\u7c7b\u95ee\u9898\u8fdb\u884c\u4e86\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u6211\u4eec\u540c\u65f6\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u7f51\u7edc\u7684 \u6837\u4f8b\u4ee3\u7801 \u53ca\u6570\u636e\u4f9b\u53c2\u8003\u3002","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"quick_start/quickstart_in_3_min.html#faq","text":"\u8fd0\u884c\u672c\u6587\u811a\u672c\u65f6\uff0c\u4e3a\u4ec0\u4e48\u4e00\u76f4\u5361\u7740\u4e0d\u52a8\uff1f \u53ef\u80fd\u662f\u73af\u5883\u53d8\u91cf\u4e2d\u8bbe\u7f6e\u4e86\u9519\u8bef\u7684\u4ee3\u7406\u3002\u53ef\u4ee5\u5148\u901a\u8fc7\u8fd0\u884c\u547d\u4ee4\u53d6\u6d88\u4ee3\u7406 unset http_proxy unset https_proxy unset HTTP_PROXY unset HTTPS_PROXY \u7136\u540e\u518d\u8fdb\u884c\u5c1d\u8bd5 \u6211\u7535\u8111\u65e0\u6cd5\u8054\u7f51\uff0c\u8fd0\u884c\u811a\u672c\u65f6\u4e00\u76f4\u5361\u7740\u4e0d\u52a8 \u672c\u6587\u811a\u672c\u4f1a\u81ea\u52a8\u4ece\u7f51\u7edc\u4e0b\u8f7d\u9700\u8981\u7684\u6570\u636e\u6587\u4ef6\uff0c\u5982\u679c\u7535\u8111\u65e0\u6cd5\u8054\u7f51\uff0c\u5219\u9700\u8981\u70b9\u51fb \u8fd9\u91cc \u624b\u5de5\u4e0b\u8f7d\uff0c\u5e76\u5c06\u5b83\u653e\u7f6e\u5728\u811a\u672c mlp_mnist.py \u76f8\u540c\u8def\u5f84\u4e0b\uff0c\u7136\u540e\u518d\u8fdb\u884c\u5c1d\u8bd5","title":"FAQ"}]}