{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"","title":"\u9996\u9875"},{"location":"basics/01_quickstart.html","text":"\u5feb\u901f\u4e0a\u624b \u00b6 \u672c\u6587\u5c06\u4ee5\u8bad\u7ec3 FashionMNIST \u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u7b80\u5355\u5730\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 OneFlow \u5b8c\u6210\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u3002\u901a\u8fc7\u6587\u7ae0\u4e2d\u7684\u94fe\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5230\u5404\u4e2a\u5b50\u4efb\u52a1\u7684\u4e13\u9898\u4ecb\u7ecd\u3002 \u8be6\u7ec6\u7684\u4ecb\u7ecd\u8bf7\u9605\u8bfb\u672c\u6587\u3002\u8ba9\u6211\u4eec\u5148\u4ece\u5bfc\u5165\u5fc5\u8981\u7684\u5e93\u5f00\u59cb\uff1a import oneflow as flow import oneflow.nn as nn from flowvision import transforms from flowvision import datasets FlowVision \u662f\u4e0e OneFlow \u914d\u5957\u7684\u3001\u4e13\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u4efb\u52a1\u7684\u5de5\u5177\u5e93\uff0c\u5305\u542b\u8bf8\u591a\u6a21\u578b\u3001\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3001\u6570\u636e\u53d8\u6362\u64cd\u4f5c\u3001\u6570\u636e\u96c6\u7b49\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5bfc\u5165\u5e76\u4f7f\u7528 FlowVision \u63d0\u4f9b\u7684\u6570\u636e\u53d8\u6362\u6a21\u5757 transforms \u548c\u6570\u636e\u96c6\u6a21\u5757 datasets \u3002 \u8bbe\u7f6e batch size \u4ee5\u53ca\u8fd0\u884c\u8bbe\u5907\uff1a BATCH_SIZE = 64 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) \u52a0\u8f7d\u6570\u636e \u00b6 OneFlow \u53ef\u4ee5\u4f7f\u7528 Dataset \u4e0e DataLoader \u52a0\u8f7d\u6570\u636e\u3002 flowvision.datasets \u6a21\u5757\u4e2d\u5305\u542b\u4e86\u4e0d\u5c11\u771f\u5b9e\u7684\u6570\u636e\u96c6(\u5982 MNIST\u3001CIFAR10\u3001FashionMNIST)\u3002 \u6211\u4eec\u901a\u8fc7 flowvision.datasets.FashionMNIST \u83b7\u53d6 FashionMNIST \u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\u3002 training_data = datasets . FashionMNIST ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) test_data = datasets . FashionMNIST ( root = \"data\" , train = False , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) \u8f93\u51fa\uff1a Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz 26422272/? [00:15<00:00, 2940814.54it/s] Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw ... \u6570\u636e\u96c6\u4e0b\u8f7d\u5e76\u89e3\u538b\u5230 ./data \u76ee\u5f55\u4e0b\u3002 \u5229\u7528 oneflow.utils.data.DataLoader \u53ef\u4ee5\u5c06 dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u540e\u7eed\u8bad\u7ec3\u3002 train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) test_dataloader = flow . utils . data . DataLoader ( test_data , BATCH_SIZE , shuffle = False ) for x , y in train_dataloader : print ( \"x.shape:\" , x . shape ) print ( \"y.shape:\" , y . shape ) break \u8f93\u51fa\uff1a x.shape: flow.Size([64, 1, 28, 28]) y.shape: flow.Size([64]) Dataset \u4e0e Dataloader \u642d\u5efa\u7f51\u7edc \u00b6 \u60f3\u8981\u642d\u5efa\u7f51\u7edc\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u7ee7\u627f\u81ea nn.Module \u7684\u7c7b\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u5b83\u7684 __init__ \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\uff0c\u5728\u5b83\u7684 forward \u65b9\u6cd5\u4e2d\u6307\u5b9a\u524d\u5411\u4f20\u64ad\u7684\u8ba1\u7b97\u903b\u8f91\u3002 class NeuralNetwork ( nn . Module ): def __init__ ( self ): super ( NeuralNetwork , self ) . __init__ () self . flatten = nn . Flatten () self . linear_relu_stack = nn . Sequential ( nn . Linear ( 28 * 28 , 512 ), nn . ReLU (), nn . Linear ( 512 , 512 ), nn . ReLU (), nn . Linear ( 512 , 10 ), ) def forward ( self , x ): x = self . flatten ( x ) logits = self . linear_relu_stack ( x ) return logits model = NeuralNetwork () . to ( DEVICE ) print ( model ) \u8f93\u51fa\uff1a NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) ) ) \u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u8bad\u7ec3\u6a21\u578b \u00b6 \u4e3a\u4e86\u8bad\u7ec3\u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u635f\u5931\u51fd\u6570 loss_fn \u548c\u4f18\u5316\u5668 optimizer \uff0c\u635f\u5931\u51fd\u6570\u7528\u4e8e\u8bc4\u4ef7\u795e\u7ecf\u7f51\u7edc\u9884\u6d4b\u7684\u7ed3\u679c\u4e0e label \u7684\u5dee\u8ddd\uff1b optimizer \u8c03\u6574\u7f51\u7edc\u7684\u53c2\u6570\uff0c\u4f7f\u5f97\u7f51\u7edc\u9884\u6d4b\u7684\u7ed3\u679c\u8d8a\u6765\u8d8a\u63a5\u8fd1 label\uff08\u6807\u51c6\u7b54\u6848\uff09\uff0c\u8fd9\u91cc\u9009\u7528 oneflow.optim.SGD \u3002\u8fd9\u4e00\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u53cd\u5411\u4f20\u64ad\u3002 loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) \u5b9a\u4e49\u4e00\u4e2a train \u51fd\u6570\u8fdb\u884c\u8bad\u7ec3\uff0c\u5b8c\u6210\u524d\u5411\u4f20\u64ad\u3001\u8ba1\u7b97 loss\u3001\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u7b49\u5de5\u4f5c\u3002 def train ( iter , model , loss_fn , optimizer ): size = len ( iter . dataset ) for batch , ( x , y ) in enumerate ( iter ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 100 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u540c\u65f6\uff0c\u5b9a\u4e49\u4e00\u4e2a test \u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u9a8c\u6a21\u578b\u7684\u7cbe\u5ea6\uff1a def test ( iter , model , loss_fn ): size = len ( iter . dataset ) num_batches = len ( iter ) model . eval () test_loss , correct = 0 , 0 with flow . no_grad (): for x , y in iter : x = x . to ( DEVICE ) y = y . to ( DEVICE ) pred = model ( x ) test_loss += loss_fn ( pred , y ) bool_value = ( pred . argmax ( 1 ) . to ( dtype = flow . int64 ) == y ) correct += float ( bool_value . sum () . numpy ()) test_loss /= num_batches print ( \"test_loss\" , test_loss , \"num_batches \" , num_batches ) correct /= size print ( f \"Test Error: \\n Accuracy: { ( 100 * correct ) : >0.1f } , Avg loss: { test_loss : >8f } \" ) \u7136\u540e\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\uff0c\u5b9a\u4e495\u8f6e epoch\uff0c\u6bcf\u8bad\u7ec3\u5b8c\u4e00\u4e2a epoch \u90fd\u4f7f\u7528 test \u6765\u8bc4\u4f30\u4e00\u4e0b\u7f51\u7edc\u7684\u7cbe\u5ea6\uff1a epochs = 5 for t in range ( epochs ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) train ( train_dataloader , model , loss_fn , optimizer ) test ( test_dataloader , model , loss_fn ) print ( \"Done!\" ) \u8f93\u51fa\uff1a Epoch 1 ------------------------------- loss: 2.152148 [ 0/60000] loss: 2.140148 [ 6400/60000] loss: 2.147773 [12800/60000] loss: 2.088032 [19200/60000] loss: 2.074728 [25600/60000] loss: 2.034325 [32000/60000] loss: 1.994112 [38400/60000] loss: 1.984397 [44800/60000] loss: 1.918280 [51200/60000] loss: 1.884574 [57600/60000] test_loss tensor(1.9015, device='cuda:0', dtype=oneflow.float32) num_batches 157 Test Error: Accuracy: 56.3, Avg loss: 1.901461 Epoch 2 ------------------------------- loss: 1.914766 [ 0/60000] loss: 1.817333 [ 6400/60000] loss: 1.835239 [12800/60000] ... \u81ea\u52a8\u6c42\u68af\u5ea6 \u53cd\u5411\u4f20\u64ad\u4e0e optimizer \u4fdd\u5b58\u4e0e\u52a0\u8f7d\u6a21\u578b \u00b6 \u8c03\u7528 oneflow.save \u53ef\u4ee5\u4fdd\u5b58\u6a21\u578b\u3002\u4fdd\u5b58\u7684\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7 oneflow.load \u52a0\u8f7d\uff0c\u7528\u4e8e\u9884\u6d4b\u7b49\u5de5\u4f5c\u3002 flow . save ( model . state_dict (), \"./model\" ) \u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58 \u4ea4\u6d41 QQ \u7fa4 \u00b6 \u5b89\u88c5\u6216\u4f7f\u7528\u8fc7\u7a0b\u9047\u5230\u95ee\u9898\uff0c\u6b22\u8fce\u5165\u7fa4\u4e0e\u4f17\u591a OneFlow \u7231\u597d\u8005\u5171\u540c\u8ba8\u8bba\u4ea4\u6d41\uff1a \u52a0 QQ \u7fa4 331883 \u6216\u626b\u63cf\u4e8c\u7ef4\u7801\uff1a","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"basics/01_quickstart.html#_1","text":"\u672c\u6587\u5c06\u4ee5\u8bad\u7ec3 FashionMNIST \u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u7b80\u5355\u5730\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 OneFlow \u5b8c\u6210\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u5e38\u89c1\u4efb\u52a1\u3002\u901a\u8fc7\u6587\u7ae0\u4e2d\u7684\u94fe\u63a5\u53ef\u4ee5\u8df3\u8f6c\u5230\u5404\u4e2a\u5b50\u4efb\u52a1\u7684\u4e13\u9898\u4ecb\u7ecd\u3002 \u8be6\u7ec6\u7684\u4ecb\u7ecd\u8bf7\u9605\u8bfb\u672c\u6587\u3002\u8ba9\u6211\u4eec\u5148\u4ece\u5bfc\u5165\u5fc5\u8981\u7684\u5e93\u5f00\u59cb\uff1a import oneflow as flow import oneflow.nn as nn from flowvision import transforms from flowvision import datasets FlowVision \u662f\u4e0e OneFlow \u914d\u5957\u7684\u3001\u4e13\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u4efb\u52a1\u7684\u5de5\u5177\u5e93\uff0c\u5305\u542b\u8bf8\u591a\u6a21\u578b\u3001\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3001\u6570\u636e\u53d8\u6362\u64cd\u4f5c\u3001\u6570\u636e\u96c6\u7b49\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5bfc\u5165\u5e76\u4f7f\u7528 FlowVision \u63d0\u4f9b\u7684\u6570\u636e\u53d8\u6362\u6a21\u5757 transforms \u548c\u6570\u636e\u96c6\u6a21\u5757 datasets \u3002 \u8bbe\u7f6e batch size \u4ee5\u53ca\u8fd0\u884c\u8bbe\u5907\uff1a BATCH_SIZE = 64 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE ))","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"basics/01_quickstart.html#_2","text":"OneFlow \u53ef\u4ee5\u4f7f\u7528 Dataset \u4e0e DataLoader \u52a0\u8f7d\u6570\u636e\u3002 flowvision.datasets \u6a21\u5757\u4e2d\u5305\u542b\u4e86\u4e0d\u5c11\u771f\u5b9e\u7684\u6570\u636e\u96c6(\u5982 MNIST\u3001CIFAR10\u3001FashionMNIST)\u3002 \u6211\u4eec\u901a\u8fc7 flowvision.datasets.FashionMNIST \u83b7\u53d6 FashionMNIST \u7684\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u6570\u636e\u3002 training_data = datasets . FashionMNIST ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) test_data = datasets . FashionMNIST ( root = \"data\" , train = False , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) \u8f93\u51fa\uff1a Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz 26422272/? [00:15<00:00, 2940814.54it/s] Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw ... \u6570\u636e\u96c6\u4e0b\u8f7d\u5e76\u89e3\u538b\u5230 ./data \u76ee\u5f55\u4e0b\u3002 \u5229\u7528 oneflow.utils.data.DataLoader \u53ef\u4ee5\u5c06 dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u540e\u7eed\u8bad\u7ec3\u3002 train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) test_dataloader = flow . utils . data . DataLoader ( test_data , BATCH_SIZE , shuffle = False ) for x , y in train_dataloader : print ( \"x.shape:\" , x . shape ) print ( \"y.shape:\" , y . shape ) break \u8f93\u51fa\uff1a x.shape: flow.Size([64, 1, 28, 28]) y.shape: flow.Size([64]) Dataset \u4e0e Dataloader","title":"\u52a0\u8f7d\u6570\u636e"},{"location":"basics/01_quickstart.html#_3","text":"\u60f3\u8981\u642d\u5efa\u7f51\u7edc\uff0c\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u7ee7\u627f\u81ea nn.Module \u7684\u7c7b\u5c31\u53ef\u4ee5\u4e86\u3002\u5728\u5b83\u7684 __init__ \u65b9\u6cd5\u4e2d\u5b9a\u4e49\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784\uff0c\u5728\u5b83\u7684 forward \u65b9\u6cd5\u4e2d\u6307\u5b9a\u524d\u5411\u4f20\u64ad\u7684\u8ba1\u7b97\u903b\u8f91\u3002 class NeuralNetwork ( nn . Module ): def __init__ ( self ): super ( NeuralNetwork , self ) . __init__ () self . flatten = nn . Flatten () self . linear_relu_stack = nn . Sequential ( nn . Linear ( 28 * 28 , 512 ), nn . ReLU (), nn . Linear ( 512 , 512 ), nn . ReLU (), nn . Linear ( 512 , 10 ), ) def forward ( self , x ): x = self . flatten ( x ) logits = self . linear_relu_stack ( x ) return logits model = NeuralNetwork () . to ( DEVICE ) print ( model ) \u8f93\u51fa\uff1a NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) ) ) \u642d\u5efa\u795e\u7ecf\u7f51\u7edc","title":"\u642d\u5efa\u7f51\u7edc"},{"location":"basics/01_quickstart.html#_4","text":"\u4e3a\u4e86\u8bad\u7ec3\u6a21\u578b\uff0c\u6211\u4eec\u9700\u8981\u635f\u5931\u51fd\u6570 loss_fn \u548c\u4f18\u5316\u5668 optimizer \uff0c\u635f\u5931\u51fd\u6570\u7528\u4e8e\u8bc4\u4ef7\u795e\u7ecf\u7f51\u7edc\u9884\u6d4b\u7684\u7ed3\u679c\u4e0e label \u7684\u5dee\u8ddd\uff1b optimizer \u8c03\u6574\u7f51\u7edc\u7684\u53c2\u6570\uff0c\u4f7f\u5f97\u7f51\u7edc\u9884\u6d4b\u7684\u7ed3\u679c\u8d8a\u6765\u8d8a\u63a5\u8fd1 label\uff08\u6807\u51c6\u7b54\u6848\uff09\uff0c\u8fd9\u91cc\u9009\u7528 oneflow.optim.SGD \u3002\u8fd9\u4e00\u8fc7\u7a0b\u88ab\u79f0\u4e3a\u53cd\u5411\u4f20\u64ad\u3002 loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) \u5b9a\u4e49\u4e00\u4e2a train \u51fd\u6570\u8fdb\u884c\u8bad\u7ec3\uff0c\u5b8c\u6210\u524d\u5411\u4f20\u64ad\u3001\u8ba1\u7b97 loss\u3001\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u7b49\u5de5\u4f5c\u3002 def train ( iter , model , loss_fn , optimizer ): size = len ( iter . dataset ) for batch , ( x , y ) in enumerate ( iter ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 100 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u540c\u65f6\uff0c\u5b9a\u4e49\u4e00\u4e2a test \u51fd\u6570\uff0c\u7528\u4e8e\u68c0\u9a8c\u6a21\u578b\u7684\u7cbe\u5ea6\uff1a def test ( iter , model , loss_fn ): size = len ( iter . dataset ) num_batches = len ( iter ) model . eval () test_loss , correct = 0 , 0 with flow . no_grad (): for x , y in iter : x = x . to ( DEVICE ) y = y . to ( DEVICE ) pred = model ( x ) test_loss += loss_fn ( pred , y ) bool_value = ( pred . argmax ( 1 ) . to ( dtype = flow . int64 ) == y ) correct += float ( bool_value . sum () . numpy ()) test_loss /= num_batches print ( \"test_loss\" , test_loss , \"num_batches \" , num_batches ) correct /= size print ( f \"Test Error: \\n Accuracy: { ( 100 * correct ) : >0.1f } , Avg loss: { test_loss : >8f } \" ) \u7136\u540e\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\uff0c\u5b9a\u4e495\u8f6e epoch\uff0c\u6bcf\u8bad\u7ec3\u5b8c\u4e00\u4e2a epoch \u90fd\u4f7f\u7528 test \u6765\u8bc4\u4f30\u4e00\u4e0b\u7f51\u7edc\u7684\u7cbe\u5ea6\uff1a epochs = 5 for t in range ( epochs ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) train ( train_dataloader , model , loss_fn , optimizer ) test ( test_dataloader , model , loss_fn ) print ( \"Done!\" ) \u8f93\u51fa\uff1a Epoch 1 ------------------------------- loss: 2.152148 [ 0/60000] loss: 2.140148 [ 6400/60000] loss: 2.147773 [12800/60000] loss: 2.088032 [19200/60000] loss: 2.074728 [25600/60000] loss: 2.034325 [32000/60000] loss: 1.994112 [38400/60000] loss: 1.984397 [44800/60000] loss: 1.918280 [51200/60000] loss: 1.884574 [57600/60000] test_loss tensor(1.9015, device='cuda:0', dtype=oneflow.float32) num_batches 157 Test Error: Accuracy: 56.3, Avg loss: 1.901461 Epoch 2 ------------------------------- loss: 1.914766 [ 0/60000] loss: 1.817333 [ 6400/60000] loss: 1.835239 [12800/60000] ... \u81ea\u52a8\u6c42\u68af\u5ea6 \u53cd\u5411\u4f20\u64ad\u4e0e optimizer","title":"\u8bad\u7ec3\u6a21\u578b"},{"location":"basics/01_quickstart.html#_5","text":"\u8c03\u7528 oneflow.save \u53ef\u4ee5\u4fdd\u5b58\u6a21\u578b\u3002\u4fdd\u5b58\u7684\u6a21\u578b\u53ef\u4ee5\u901a\u8fc7 oneflow.load \u52a0\u8f7d\uff0c\u7528\u4e8e\u9884\u6d4b\u7b49\u5de5\u4f5c\u3002 flow . save ( model . state_dict (), \"./model\" ) \u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58","title":"\u4fdd\u5b58\u4e0e\u52a0\u8f7d\u6a21\u578b"},{"location":"basics/01_quickstart.html#qq","text":"\u5b89\u88c5\u6216\u4f7f\u7528\u8fc7\u7a0b\u9047\u5230\u95ee\u9898\uff0c\u6b22\u8fce\u5165\u7fa4\u4e0e\u4f17\u591a OneFlow \u7231\u597d\u8005\u5171\u540c\u8ba8\u8bba\u4ea4\u6d41\uff1a \u52a0 QQ \u7fa4 331883 \u6216\u626b\u63cf\u4e8c\u7ef4\u7801\uff1a","title":"\u4ea4\u6d41 QQ \u7fa4"},{"location":"basics/02_tensor.html","text":"Tensor \u5f20\u91cf \u00b6 \u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u6570\u636e\uff0c\u90fd\u5b58\u653e\u5728 Tensor \u4e2d\uff0cTensor \u7c7b\u4f3c\u591a\u7ef4\u6570\u7ec4\u6216\u8005\u6570\u5b66\u4e0a\u7684\u77e9\u9635\u3002OneFlow \u63d0\u4f9b\u4e86\u5f88\u591a\u7528\u4e8e\u64cd\u4f5c Tensor \u7684\u7b97\u5b50\uff0cTensor \u4e0e\u7b97\u5b50\u4e00\u8d77\u6784\u6210\u795e\u7ecf\u7f51\u7edc\u3002 Tensor \u6709\u522b\u4e8e\u666e\u901a\u7684\u591a\u7ef4\u6570\u7ec4\u7684\u5730\u65b9\u662f\uff1a\u9664\u4e86\u53ef\u4ee5\u8fd0\u884c\u5728 CPU \u4e0a\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u8fd0\u884c\u5728 \u5176\u5b83 AI \u82af\u7247\uff08\u5982 NVIDIA GPU\uff09\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u63d0\u9ad8\u8fd0\u7b97\u901f\u5ea6\u3002\u6b64\u5916\uff0cOneFlow \u8fd8\u4e3a\u5f20\u91cf\u63d0\u4f9b\u4e86 \u81ea\u52a8\u6c42\u5bfc \u7684\u529f\u80fd\u3002 import oneflow as flow import numpy as np \u521b\u5efa Tensor \u00b6 \u6709\u591a\u79cd\u65b9\u6cd5\u521b\u5efa Tensor\uff0c\u5305\u62ec\uff1a \u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa \u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa \u4f7f\u7528\u7b97\u5b50\u521b\u5efa \u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa \u00b6 \u53ef\u4ee5\u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa Tensor\uff1a x1 = flow . tensor ([[ 1 , 2 ], [ 3 , 4 ]]) x2 = flow . tensor ([[ 1.0 , 2.0 ], [ 3.0 , 4.0 ]]) print ( x1 ) print ( x2 ) \u53ef\u4ee5\u770b\u5230\u521b\u5efa\u7684 x1 \u3001 x2 Tensor\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u5206\u522b\u662f int64 \u548c float32 \u3002 tensor([[1, 2], [3, 4]], dtype=oneflow.int64) tensor([[1., 2.], [3., 4.]], dtype=oneflow.float32) \u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa \u00b6 Tensor \u53ef\u4ee5\u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa\uff0c\u53ea\u9700\u8981\u5728\u521b\u5efa Tensor \u5bf9\u8c61\u65f6\uff0c\u5c06 Numpy \u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u5373\u53ef\u3002 x3 = flow . tensor ( np . ones (( 2 , 3 ))) x4 = flow . tensor ( np . random . rand ( 2 , 3 )) print ( x3 ) print ( x4 ) tensor([[1., 1., 1.], [1., 1., 1.]], dtype=oneflow.float64) tensor([[0.6213, 0.6142, 0.1592], [0.5539, 0.8453, 0.8576]], dtype=oneflow.float64) \u901a\u8fc7\u7b97\u5b50\u521b\u5efa \u00b6 OneFlow \u4e2d\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b97\u5b50\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u521b\u5efa Tensor\u3002\u6bd4\u5982 ones \u3001 zeros \u3001 eye \uff0c\u5b83\u4eec\u5206\u522b\u521b\u5efa\u5168\u4e3a1\u7684\u5f20\u91cf\u3001\u5168\u4e3a0\u7684\u5f20\u91cf\u548c\u5355\u4f4d\u5f20\u91cf\u3002 x5 = flow . ones ( 2 , 3 ) x6 = flow . zeros ( 2 , 3 ) x7 = flow . eye ( 3 ) print ( x5 ) print ( x6 ) print ( x7 ) tensor([[1., 1., 1.], [1., 1., 1.]], dtype=oneflow.float32) tensor([[0., 0., 0.], [0., 0., 0.]], dtype=oneflow.float32) tensor([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]], dtype=oneflow.float32) randn \u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u968f\u673a\u5316\u7684\u5f20\u91cf\uff1a x8 = flow . randn ( 2 , 3 ) Tensor \u4e0e tensor \u7684\u533a\u522b \u00b6 \u7ec6\u5fc3\u7684\u7528\u6237\u4f1a\u53d1\u73b0\uff0cOneFlow \u4e2d\u6709 oneflow.Tensor \u548c oneflow.tensor \u4e24\u4e2a\u63a5\u53e3\uff0c\u5b83\u4eec\u90fd\u80fd\u7528\u6765\u521b\u5efa\u5f20\u91cf\u3002\u90a3\u4e48\u5b83\u4eec\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f \u7b80\u5355\u800c\u8a00\uff0c\u5927\u5199\u7684 Tensor \u6570\u636e\u7c7b\u578b\u9ed8\u8ba4\u9650\u5b9a\u4e3a float32 \uff0c\u800c\u5c0f\u5199\u7684 tensor \u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u968f\u7740\u521b\u5efa\u65f6\u7684\u6570\u636e\u6539\u53d8\u3002\u4ee5\u4e0b\u4ee3\u7801\u5c55\u793a\u4e86\u4e24\u8005\u8fd9\u65b9\u9762\u7684\u533a\u522b\uff1a print ( flow . Tensor ([ 1 , 2 , 3 ])) print ( flow . tensor ([ 1 , 2 , 3 ])) print ( flow . tensor ([ 1.0 , 2.0 , 3.0 ])) \u6570\u636e\u7ed3\u679c\u4e3a\uff1a tensor([1., 2., 3.], dtype=oneflow.float32) tensor([1, 2, 3], dtype=oneflow.int64) tensor([1., 2., 3.], dtype=oneflow.float32) \u6b64\u5916\uff0c\u5927\u5199\u7684 Tensor \u53ef\u4ee5\u5728\u521b\u5efa\u65f6\u4e0d\u6307\u5b9a\u5177\u4f53\u6570\u636e\uff1a x9 = flow . Tensor ( 2 , 3 ) print ( x9 . shape ) flow.Size([2, 3]) \u56e0\u6b64\uff0c\u5982\u679c\u5728\u521b\u5efa\u5f20\u91cf\u7684\u540c\u65f6\u4e0d\u60f3\u6307\u5b9a\u6570\u636e\uff0c\u90a3\u4e48\u5e38\u5e38\u7528 oneflow.Tensor \uff0c\u5426\u5219\uff0c\u5e94\u8be5\u4f7f\u7528 oneflow.tensor \u3002 Tensor \u7684\u5c5e\u6027 \u00b6 Tensor \u7684 shape \u3001 dtype \u3001 device \u5c5e\u6027\u5206\u522b\u63cf\u8ff0\u4e86 Tensor \u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u548c\u6240\u5728\u7684\u8bbe\u5907\u7c7b\u578b\u3002 x9 = flow . randn ( 1 , 4 ) print ( x9 . shape ) print ( x9 . dtype ) print ( x9 . device ) \u8f93\u51fa\u7ed3\u679c\u5206\u522b\u5c55\u793a\u4e86\u5f20\u91cf\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u548c\u6240\u5904\u7684\u8bbe\u5907\uff08\u7b2c0\u53f7 CPU \u4e0a\uff0c\u4e4b\u6240\u4ee5\u6709\u7f16\u53f7\uff0c\u662f\u56e0\u4e3a OneFlow \u5f88\u65b9\u4fbf\u81ea\u7136\u5730\u652f\u6301\u5206\u5e03\u5f0f\uff0c\u53ef\u53c2\u8003 Global Tensor \uff09 flow.Size([1, 4]) oneflow.float32 cpu:0 \u53ef\u4ee5\u901a\u8fc7 reshape \u65b9\u6cd5\u6539\u53d8 Tensor \u7684\u5f62\u72b6\uff0c\u7528 Tensor.to \u65b9\u6cd5\u6539\u53d8 Tensor \u7684\u6570\u636e\u7c7b\u578b\u548c\u6240\u5904\u8bbe\u5907\uff1a x10 = x9.reshape(2, 2) x11 = x10.to(dtype=flow.int32, device=flow.device(\"cuda\")) print(x10.shape) print(x11.dtype, x11.device) flow.Size([2, 2]) oneflow.int32 cuda:0 \u64cd\u4f5c Tensor \u7684\u5e38\u89c1\u7b97\u5b50 \u00b6 OneFlow \u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7b97\u5b50\uff0c\u5bf9 Tensor \u8fdb\u884c\u64cd\u4f5c\uff0c\u5b83\u4eec\u5927\u591a\u5728 oneflow \u3001 oneflow.Tensor \u3001 oneflow.nn \u3001 oneflow.nn.functional \u8fd9\u51e0\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e0b\u3002 OneFlow \u4e2d\u7684 Tensor\uff0c\u4e0e Numpy \u6570\u7ec4\u4e00\u6837\u6613\u7528\u3002\u6bd4\u5982\uff0c\u652f\u6301\u4e0e Numpy \u7c7b\u4f3c\u7684\u5207\u7247\u64cd\u4f5c\uff1a tensor = flow . ones ( 4 , 4 ) print ( 'First row: ' , tensor [ 0 ]) print ( 'First column: ' , tensor [:, 0 ]) print ( 'Last column:' , tensor [ ... , - 1 ]) tensor [:, 1 ] = 0 print ( tensor ) First row: tensor([1., 1., 1., 1.], dtype=oneflow.float32) First column: tensor([1., 1., 1., 1.], dtype=oneflow.float32) Last column: tensor([1., 1., 1., 1.], dtype=oneflow.float32) tensor([[1., 0., 1., 1.], [1., 0., 1., 1.], [1., 0., 1., 1.], [1., 0., 1., 1.]], dtype=oneflow.float32) \u6b64\u5916\uff0cOneFlow \u4e2d\u8fd8\u6709\u5f88\u591a\u5176\u5b83\u64cd\u4f5c\uff0c\u5982\u7b97\u6570\u76f8\u5173\u64cd\u4f5c\u7684 add \u3001 sub \u3001 mul \u3001 div \u7b49\uff1b\u4f4d\u7f6e\u76f8\u5173\u64cd\u4f5c\u7684 scatter \u3001 gather \u7b49\uff1b\u4ee5\u53ca\u6fc0\u6d3b\u51fd\u6570\u3001\u5377\u79ef\u7b49\uff08 relu \u3001 conv2d \uff09\uff0c\u70b9\u51fb\u5b83\u4eec\u7684\u94fe\u63a5\u53ef\u4ee5\u67e5\u770b\u66f4\u8be6\u7ec6\u7684 API \u8bf4\u660e\uff0c\u5e76\u627e\u5230\u66f4\u591a\u7684\u5176\u5b83\u7b97\u5b50\u3002","title":"Tensor"},{"location":"basics/02_tensor.html#tensor","text":"\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u6570\u636e\uff0c\u90fd\u5b58\u653e\u5728 Tensor \u4e2d\uff0cTensor \u7c7b\u4f3c\u591a\u7ef4\u6570\u7ec4\u6216\u8005\u6570\u5b66\u4e0a\u7684\u77e9\u9635\u3002OneFlow \u63d0\u4f9b\u4e86\u5f88\u591a\u7528\u4e8e\u64cd\u4f5c Tensor \u7684\u7b97\u5b50\uff0cTensor \u4e0e\u7b97\u5b50\u4e00\u8d77\u6784\u6210\u795e\u7ecf\u7f51\u7edc\u3002 Tensor \u6709\u522b\u4e8e\u666e\u901a\u7684\u591a\u7ef4\u6570\u7ec4\u7684\u5730\u65b9\u662f\uff1a\u9664\u4e86\u53ef\u4ee5\u8fd0\u884c\u5728 CPU \u4e0a\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u8fd0\u884c\u5728 \u5176\u5b83 AI \u82af\u7247\uff08\u5982 NVIDIA GPU\uff09\u4e0a\uff0c\u56e0\u6b64\u53ef\u4ee5\u63d0\u9ad8\u8fd0\u7b97\u901f\u5ea6\u3002\u6b64\u5916\uff0cOneFlow \u8fd8\u4e3a\u5f20\u91cf\u63d0\u4f9b\u4e86 \u81ea\u52a8\u6c42\u5bfc \u7684\u529f\u80fd\u3002 import oneflow as flow import numpy as np","title":"Tensor \u5f20\u91cf"},{"location":"basics/02_tensor.html#tensor_1","text":"\u6709\u591a\u79cd\u65b9\u6cd5\u521b\u5efa Tensor\uff0c\u5305\u62ec\uff1a \u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa \u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa \u4f7f\u7528\u7b97\u5b50\u521b\u5efa","title":"\u521b\u5efa Tensor"},{"location":"basics/02_tensor.html#_1","text":"\u53ef\u4ee5\u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa Tensor\uff1a x1 = flow . tensor ([[ 1 , 2 ], [ 3 , 4 ]]) x2 = flow . tensor ([[ 1.0 , 2.0 ], [ 3.0 , 4.0 ]]) print ( x1 ) print ( x2 ) \u53ef\u4ee5\u770b\u5230\u521b\u5efa\u7684 x1 \u3001 x2 Tensor\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u5206\u522b\u662f int64 \u548c float32 \u3002 tensor([[1, 2], [3, 4]], dtype=oneflow.int64) tensor([[1., 2.], [3., 4.]], dtype=oneflow.float32)","title":"\u76f4\u63a5\u4ece\u6570\u636e\u521b\u5efa"},{"location":"basics/02_tensor.html#numpy","text":"Tensor \u53ef\u4ee5\u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa\uff0c\u53ea\u9700\u8981\u5728\u521b\u5efa Tensor \u5bf9\u8c61\u65f6\uff0c\u5c06 Numpy \u6570\u7ec4\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u5373\u53ef\u3002 x3 = flow . tensor ( np . ones (( 2 , 3 ))) x4 = flow . tensor ( np . random . rand ( 2 , 3 )) print ( x3 ) print ( x4 ) tensor([[1., 1., 1.], [1., 1., 1.]], dtype=oneflow.float64) tensor([[0.6213, 0.6142, 0.1592], [0.5539, 0.8453, 0.8576]], dtype=oneflow.float64)","title":"\u901a\u8fc7 Numpy \u6570\u7ec4\u521b\u5efa"},{"location":"basics/02_tensor.html#_2","text":"OneFlow \u4e2d\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7b97\u5b50\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u4eec\u521b\u5efa Tensor\u3002\u6bd4\u5982 ones \u3001 zeros \u3001 eye \uff0c\u5b83\u4eec\u5206\u522b\u521b\u5efa\u5168\u4e3a1\u7684\u5f20\u91cf\u3001\u5168\u4e3a0\u7684\u5f20\u91cf\u548c\u5355\u4f4d\u5f20\u91cf\u3002 x5 = flow . ones ( 2 , 3 ) x6 = flow . zeros ( 2 , 3 ) x7 = flow . eye ( 3 ) print ( x5 ) print ( x6 ) print ( x7 ) tensor([[1., 1., 1.], [1., 1., 1.]], dtype=oneflow.float32) tensor([[0., 0., 0.], [0., 0., 0.]], dtype=oneflow.float32) tensor([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]], dtype=oneflow.float32) randn \u65b9\u6cd5\u53ef\u4ee5\u521b\u5efa\u968f\u673a\u5316\u7684\u5f20\u91cf\uff1a x8 = flow . randn ( 2 , 3 )","title":"\u901a\u8fc7\u7b97\u5b50\u521b\u5efa"},{"location":"basics/02_tensor.html#tensor-tensor","text":"\u7ec6\u5fc3\u7684\u7528\u6237\u4f1a\u53d1\u73b0\uff0cOneFlow \u4e2d\u6709 oneflow.Tensor \u548c oneflow.tensor \u4e24\u4e2a\u63a5\u53e3\uff0c\u5b83\u4eec\u90fd\u80fd\u7528\u6765\u521b\u5efa\u5f20\u91cf\u3002\u90a3\u4e48\u5b83\u4eec\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f \u7b80\u5355\u800c\u8a00\uff0c\u5927\u5199\u7684 Tensor \u6570\u636e\u7c7b\u578b\u9ed8\u8ba4\u9650\u5b9a\u4e3a float32 \uff0c\u800c\u5c0f\u5199\u7684 tensor \u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u968f\u7740\u521b\u5efa\u65f6\u7684\u6570\u636e\u6539\u53d8\u3002\u4ee5\u4e0b\u4ee3\u7801\u5c55\u793a\u4e86\u4e24\u8005\u8fd9\u65b9\u9762\u7684\u533a\u522b\uff1a print ( flow . Tensor ([ 1 , 2 , 3 ])) print ( flow . tensor ([ 1 , 2 , 3 ])) print ( flow . tensor ([ 1.0 , 2.0 , 3.0 ])) \u6570\u636e\u7ed3\u679c\u4e3a\uff1a tensor([1., 2., 3.], dtype=oneflow.float32) tensor([1, 2, 3], dtype=oneflow.int64) tensor([1., 2., 3.], dtype=oneflow.float32) \u6b64\u5916\uff0c\u5927\u5199\u7684 Tensor \u53ef\u4ee5\u5728\u521b\u5efa\u65f6\u4e0d\u6307\u5b9a\u5177\u4f53\u6570\u636e\uff1a x9 = flow . Tensor ( 2 , 3 ) print ( x9 . shape ) flow.Size([2, 3]) \u56e0\u6b64\uff0c\u5982\u679c\u5728\u521b\u5efa\u5f20\u91cf\u7684\u540c\u65f6\u4e0d\u60f3\u6307\u5b9a\u6570\u636e\uff0c\u90a3\u4e48\u5e38\u5e38\u7528 oneflow.Tensor \uff0c\u5426\u5219\uff0c\u5e94\u8be5\u4f7f\u7528 oneflow.tensor \u3002","title":"Tensor \u4e0e tensor \u7684\u533a\u522b"},{"location":"basics/02_tensor.html#tensor_2","text":"Tensor \u7684 shape \u3001 dtype \u3001 device \u5c5e\u6027\u5206\u522b\u63cf\u8ff0\u4e86 Tensor \u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u548c\u6240\u5728\u7684\u8bbe\u5907\u7c7b\u578b\u3002 x9 = flow . randn ( 1 , 4 ) print ( x9 . shape ) print ( x9 . dtype ) print ( x9 . device ) \u8f93\u51fa\u7ed3\u679c\u5206\u522b\u5c55\u793a\u4e86\u5f20\u91cf\u7684\u5f62\u72b6\u3001\u6570\u636e\u7c7b\u578b\u548c\u6240\u5904\u7684\u8bbe\u5907\uff08\u7b2c0\u53f7 CPU \u4e0a\uff0c\u4e4b\u6240\u4ee5\u6709\u7f16\u53f7\uff0c\u662f\u56e0\u4e3a OneFlow \u5f88\u65b9\u4fbf\u81ea\u7136\u5730\u652f\u6301\u5206\u5e03\u5f0f\uff0c\u53ef\u53c2\u8003 Global Tensor \uff09 flow.Size([1, 4]) oneflow.float32 cpu:0 \u53ef\u4ee5\u901a\u8fc7 reshape \u65b9\u6cd5\u6539\u53d8 Tensor \u7684\u5f62\u72b6\uff0c\u7528 Tensor.to \u65b9\u6cd5\u6539\u53d8 Tensor \u7684\u6570\u636e\u7c7b\u578b\u548c\u6240\u5904\u8bbe\u5907\uff1a x10 = x9.reshape(2, 2) x11 = x10.to(dtype=flow.int32, device=flow.device(\"cuda\")) print(x10.shape) print(x11.dtype, x11.device) flow.Size([2, 2]) oneflow.int32 cuda:0","title":"Tensor \u7684\u5c5e\u6027"},{"location":"basics/02_tensor.html#tensor_3","text":"OneFlow \u4e2d\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7b97\u5b50\uff0c\u5bf9 Tensor \u8fdb\u884c\u64cd\u4f5c\uff0c\u5b83\u4eec\u5927\u591a\u5728 oneflow \u3001 oneflow.Tensor \u3001 oneflow.nn \u3001 oneflow.nn.functional \u8fd9\u51e0\u4e2a\u540d\u79f0\u7a7a\u95f4\u4e0b\u3002 OneFlow \u4e2d\u7684 Tensor\uff0c\u4e0e Numpy \u6570\u7ec4\u4e00\u6837\u6613\u7528\u3002\u6bd4\u5982\uff0c\u652f\u6301\u4e0e Numpy \u7c7b\u4f3c\u7684\u5207\u7247\u64cd\u4f5c\uff1a tensor = flow . ones ( 4 , 4 ) print ( 'First row: ' , tensor [ 0 ]) print ( 'First column: ' , tensor [:, 0 ]) print ( 'Last column:' , tensor [ ... , - 1 ]) tensor [:, 1 ] = 0 print ( tensor ) First row: tensor([1., 1., 1., 1.], dtype=oneflow.float32) First column: tensor([1., 1., 1., 1.], dtype=oneflow.float32) Last column: tensor([1., 1., 1., 1.], dtype=oneflow.float32) tensor([[1., 0., 1., 1.], [1., 0., 1., 1.], [1., 0., 1., 1.], [1., 0., 1., 1.]], dtype=oneflow.float32) \u6b64\u5916\uff0cOneFlow \u4e2d\u8fd8\u6709\u5f88\u591a\u5176\u5b83\u64cd\u4f5c\uff0c\u5982\u7b97\u6570\u76f8\u5173\u64cd\u4f5c\u7684 add \u3001 sub \u3001 mul \u3001 div \u7b49\uff1b\u4f4d\u7f6e\u76f8\u5173\u64cd\u4f5c\u7684 scatter \u3001 gather \u7b49\uff1b\u4ee5\u53ca\u6fc0\u6d3b\u51fd\u6570\u3001\u5377\u79ef\u7b49\uff08 relu \u3001 conv2d \uff09\uff0c\u70b9\u51fb\u5b83\u4eec\u7684\u94fe\u63a5\u53ef\u4ee5\u67e5\u770b\u66f4\u8be6\u7ec6\u7684 API \u8bf4\u660e\uff0c\u5e76\u627e\u5230\u66f4\u591a\u7684\u5176\u5b83\u7b97\u5b50\u3002","title":"\u64cd\u4f5c Tensor \u7684\u5e38\u89c1\u7b97\u5b50"},{"location":"basics/03_dataset_dataloader.html","text":"Dataset \u4e0e DataLoader \u00b6 OneFlow \u7684 Dataset \u4e0e DataLoader \u7684\u884c\u4e3a\u4e0e PyTorch \u7684\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4e3a\u4e86\u8ba9\u6570\u636e\u96c6\u7ba1\u7406\u4e0e\u6a21\u578b\u8bad\u7ec3\u89e3\u8026\u3002 Dataset \u7c7b\u7528\u4e8e\u5b9a\u4e49\u5982\u4f55\u8bfb\u53d6\u6570\u636e\u3002\u5bf9\u4e8e\u5e38\u89c1\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u6570\u636e\u96c6\uff08\u5982 FashionMNIST\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 FlowVision \u5e93\u7684 datasets \u6a21\u5757\u63d0\u4f9b\u7684\u6570\u636e\u96c6\u7c7b\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u81ea\u52a8\u4e0b\u8f7d\u5e76\u52a0\u8f7d\u4e00\u4e9b\u6d41\u884c\u7684\u6570\u636e\u96c6\uff0c\u8fd9\u4e9b\u7c7b\u90fd\u95f4\u63a5\u7ee7\u627f\u4e86 Dataset \u7c7b\u3002\u5bf9\u4e8e\u5176\u4ed6\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f Dataset \u7c7b\u6765\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7c7b\u3002 DataLoader \u5c06 Dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u8bad\u7ec3\u65f6\u904d\u5386\u5e76\u64cd\u4f5c\u6570\u636e\u3002 import matplotlib.pyplot as plt import oneflow as flow import oneflow.nn as nn from oneflow.utils.data import Dataset from flowvision import datasets from flowvision import transforms \u4e0a\u9762\u5bfc\u5165\u7684 flowvision.transforms \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5bf9\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u53d8\u6362\u7684\u64cd\u4f5c\uff08\u5982 ToTensor \u53ef\u4ee5\u5c06 PIL \u56fe\u50cf\u6216 NumPy \u6570\u7ec4\u8f6c\u6362\u4e3a\u5f20\u91cf\uff09\uff0c\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u7c7b\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002 \u4f7f\u7528 FlowVision \u52a0\u8f7d\u6570\u636e\u96c6 \u00b6 \u4ee5\u4e0b\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 flowvision.datasets \u52a0\u8f7d FashionMNIST \u6570\u636e\u96c6\u3002 \u6211\u4eec\u5411 FashionMNIST \u7c7b\u4f20\u5165\u4ee5\u4e0b\u53c2\u6570\uff1a - root \uff1a\u6570\u636e\u96c6\u5b58\u653e\u7684\u8def\u5f84 - train \uff1a True \u4ee3\u8868\u4e0b\u8f7d\u8bad\u7ec3\u96c6\u3001 False \u4ee3\u8868\u4e0b\u8f7d\u6d4b\u8bd5\u96c6 - download=True \uff1a \u5982\u679c root \u8def\u5f84\u4e0b\u6570\u636e\u96c6\u4e0d\u5b58\u5728\uff0c\u5219\u4ece\u7f51\u7edc\u4e0b\u8f7d - transforms \uff1a\u6307\u5b9a\u7684\u6570\u636e\u8f6c\u6362\u65b9\u5f0f training_data = datasets . FashionMNIST ( root = \"data\" , train = True , download = True , transform = transforms . ToTensor (), source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) test_data = datasets . FashionMNIST ( root = \"data\" , train = False , download = True , transform = transforms . ToTensor (), source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) \u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u4f1a\u4e0b\u8f7d\u6570\u636e\u96c6\uff0c\u8f93\u51fa\uff1a Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz 26422272/? [00:02<00:00, 8090800.72it/s] Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-labels-idx1-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz 29696/? [00:00<00:00, 806948.09it/s] Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-images-idx3-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz 4422656/? [00:00<00:00, 19237994.98it/s] Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-labels-idx1-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz 6144/? [00:00<00:00, 152710.85it/s] Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw \u904d\u5386\u6570\u636e \u00b6 Dataset \u5bf9\u8c61\uff0c\u53ef\u4ee5\u50cf list \u4e00\u6837\uff0c\u7528\u4e0b\u6807\u7d22\u5f15\uff0c\u6bd4\u5982 training_data[index] \u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u968f\u673a\u8bbf\u95ee training_data \u4e2d\u76849\u4e2a\u56fe\u7247\uff0c\u5e76\u663e\u793a\u3002 labels_map = { 0 : \"T-Shirt\" , 1 : \"Trouser\" , 2 : \"Pullover\" , 3 : \"Dress\" , 4 : \"Coat\" , 5 : \"Sandal\" , 6 : \"Shirt\" , 7 : \"Sneaker\" , 8 : \"Bag\" , 9 : \"Ankle Boot\" , } figure = plt . figure ( figsize = ( 8 , 8 )) cols , rows = 3 , 3 from random import randint for i in range ( 1 , cols * rows + 1 ): sample_idx = randint ( 0 , len ( training_data )) img , label = training_data [ sample_idx ] figure . add_subplot ( rows , cols , i ) plt . title ( labels_map [ label ]) plt . axis ( \"off\" ) plt . imshow ( img . squeeze () . numpy (), cmap = \"gray\" ) plt . show () \u81ea\u5b9a\u4e49 Dataset \u00b6 \u901a\u8fc7\u7ee7\u627f oneflow.utils.data.Dataset \u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49 Dataset \uff0c\u81ea\u5b9a\u4e49 Dataset \u540c\u6837\u53ef\u4ee5\u914d\u5408\u4e0b\u4e00\u8282\u4ecb\u7ecd\u7684 Dataloader \u4f7f\u7528\uff0c\u7b80\u5316\u6570\u636e\u5904\u7406\u7684\u6d41\u7a0b\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49 Dataset \uff0c\u5b83\u7684\u5173\u952e\u6b65\u9aa4\u662f\uff1a \u7ee7\u627f oneflow.utils.data.Dataset \u5b9e\u73b0\u7c7b\u7684 __len__ \u65b9\u6cd5\uff0c\u8fd4\u56de\u7ed3\u679c\u901a\u5e38\u4e3a\u8be5\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u91cf \u5b9e\u73b0\u7c7b\u7684 __getitem__ \u65b9\u6cd5\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u5bf9\u5e94\u4e86\u7528\u6237\uff08\u6216\u6846\u67b6\uff09\u8c03\u7528 dataset_obj[idx] \u65f6\u5f97\u5230\u7684\u7ed3\u679c import numpy as np class CustomDataset ( Dataset ): raw_data_x = np . array ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = np . float32 ) raw_label = np . array ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = np . float32 ) def __init__ ( self , transform = None , target_transform = None ): self . transform = transform self . target_transform = target_transform def __len__ ( self ): return len ( raw_label ) def __getitem__ ( self , idx ): x = CustomDataset . raw_data_x [ idx ] label = CustomDataset . raw_label [ idx ] if self . transform : x = self . transform ( x ) if self . target_transform : label = self . target_transform ( label ) return x , label custom_dataset = CustomDataset () print ( custom_dataset [ 0 ]) print ( custom_dataset [ 1 ]) \u8f93\u51fa\uff1a (array([1., 2.], dtype=float32), array([8.], dtype=float32)) (array([2., 3.], dtype=float32), array([13.], dtype=float32)) \u4f7f\u7528 DataLoader \u00b6 \u5229\u7528 Dataset \u53ef\u4ee5\u4e00\u6b21\u83b7\u53d6\u4e00\u6761\u6837\u672c\u6570\u636e\u3002\u4f46\u662f\u5728\u8bad\u7ec3\u4e2d\uff0c\u5f80\u5f80\u6709\u5176\u5b83\u7684\u9700\u6c42\uff0c\u5982\uff1a\u4e00\u6b21\u8bfb\u53d6 batch size \u4efd\u6570\u636e\uff1b1\u8f6e epoch \u8bad\u7ec3\u540e\uff0c\u6570\u636e\u91cd\u65b0\u6253\u4e71\uff08reshuffle\uff09\u7b49\u3002 \u8fd9\u65f6\u5019\uff0c\u4f7f\u7528 DataLoader \u5373\u53ef\u3002 DataLoader \u53ef\u4ee5\u5c06 Dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u8bad\u7ec3\u5faa\u73af\u4e2d\u83b7\u53d6\u6570\u636e\u3002\u5982\u4ee5\u4e0b\u4f8b\u5b50\uff1a batch_size=64 \uff1a \u6307\u5b9a\u4e00\u6b21\u8fed\u4ee3\u8fd4\u56de\u7684\u6570\u636e batch size shuffle \uff1a\u662f\u5426\u8981\u968f\u673a\u6253\u4e71\u6570\u636e\u7684\u987a\u5e8f from oneflow.utils.data import DataLoader train_dataloader = DataLoader ( training_data , batch_size = 64 , shuffle = True ) x , label = next ( iter ( train_dataloader )) print ( f \"shape of x: { x . shape } , shape of label: { label . shape } \" ) \u8f93\u51fa\uff1a shape of x:flow.Size([64, 1, 28, 28]), shape of label: flow.Size([64]) img = x [ 0 ] . squeeze () . numpy () label = label [ 0 ] plt . imshow ( img , cmap = \"gray\" ) plt . show () print ( label ) \u8f93\u51fa\uff1a\uff08\u968f\u673a\u8f93\u51fa\u4e00\u5f20\u56fe\u7247\uff09 tensor(9, dtype=oneflow.int64) \u81ea\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8bad\u7ec3\u7684\u5faa\u73af\u4e2d\uff0c\u4f7f\u7528 DataLoader \u8fed\u4ee3\u5668\uff1a for x , label in train_dataloader : print ( x . shape , label . shape ) # training...","title":"Dataset \u4e0e DataLoader"},{"location":"basics/03_dataset_dataloader.html#dataset-dataloader","text":"OneFlow \u7684 Dataset \u4e0e DataLoader \u7684\u884c\u4e3a\u4e0e PyTorch \u7684\u662f\u4e00\u81f4\u7684\uff0c\u90fd\u662f\u4e3a\u4e86\u8ba9\u6570\u636e\u96c6\u7ba1\u7406\u4e0e\u6a21\u578b\u8bad\u7ec3\u89e3\u8026\u3002 Dataset \u7c7b\u7528\u4e8e\u5b9a\u4e49\u5982\u4f55\u8bfb\u53d6\u6570\u636e\u3002\u5bf9\u4e8e\u5e38\u89c1\u7684\u8ba1\u7b97\u673a\u89c6\u89c9\u6570\u636e\u96c6\uff08\u5982 FashionMNIST\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 FlowVision \u5e93\u7684 datasets \u6a21\u5757\u63d0\u4f9b\u7684\u6570\u636e\u96c6\u7c7b\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u81ea\u52a8\u4e0b\u8f7d\u5e76\u52a0\u8f7d\u4e00\u4e9b\u6d41\u884c\u7684\u6570\u636e\u96c6\uff0c\u8fd9\u4e9b\u7c7b\u90fd\u95f4\u63a5\u7ee7\u627f\u4e86 Dataset \u7c7b\u3002\u5bf9\u4e8e\u5176\u4ed6\u6570\u636e\u96c6\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f Dataset \u7c7b\u6765\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7c7b\u3002 DataLoader \u5c06 Dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u8bad\u7ec3\u65f6\u904d\u5386\u5e76\u64cd\u4f5c\u6570\u636e\u3002 import matplotlib.pyplot as plt import oneflow as flow import oneflow.nn as nn from oneflow.utils.data import Dataset from flowvision import datasets from flowvision import transforms \u4e0a\u9762\u5bfc\u5165\u7684 flowvision.transforms \u63d0\u4f9b\u4e86\u4e00\u4e9b\u5bf9\u56fe\u50cf\u6570\u636e\u8fdb\u884c\u53d8\u6362\u7684\u64cd\u4f5c\uff08\u5982 ToTensor \u53ef\u4ee5\u5c06 PIL \u56fe\u50cf\u6216 NumPy \u6570\u7ec4\u8f6c\u6362\u4e3a\u5f20\u91cf\uff09\uff0c\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u7c7b\u4e2d\u76f4\u63a5\u4f7f\u7528\u3002","title":"Dataset \u4e0e DataLoader"},{"location":"basics/03_dataset_dataloader.html#flowvision","text":"\u4ee5\u4e0b\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 flowvision.datasets \u52a0\u8f7d FashionMNIST \u6570\u636e\u96c6\u3002 \u6211\u4eec\u5411 FashionMNIST \u7c7b\u4f20\u5165\u4ee5\u4e0b\u53c2\u6570\uff1a - root \uff1a\u6570\u636e\u96c6\u5b58\u653e\u7684\u8def\u5f84 - train \uff1a True \u4ee3\u8868\u4e0b\u8f7d\u8bad\u7ec3\u96c6\u3001 False \u4ee3\u8868\u4e0b\u8f7d\u6d4b\u8bd5\u96c6 - download=True \uff1a \u5982\u679c root \u8def\u5f84\u4e0b\u6570\u636e\u96c6\u4e0d\u5b58\u5728\uff0c\u5219\u4ece\u7f51\u7edc\u4e0b\u8f7d - transforms \uff1a\u6307\u5b9a\u7684\u6570\u636e\u8f6c\u6362\u65b9\u5f0f training_data = datasets . FashionMNIST ( root = \"data\" , train = True , download = True , transform = transforms . ToTensor (), source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) test_data = datasets . FashionMNIST ( root = \"data\" , train = False , download = True , transform = transforms . ToTensor (), source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/\" , ) \u7b2c\u4e00\u6b21\u8fd0\u884c\uff0c\u4f1a\u4e0b\u8f7d\u6570\u636e\u96c6\uff0c\u8f93\u51fa\uff1a Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-images-idx3-ubyte.gz to data/FashionMNIST/raw/train-images-idx3-ubyte.gz 26422272/? [00:02<00:00, 8090800.72it/s] Extracting data/FashionMNIST/raw/train-images-idx3-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-labels-idx1-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw/train-labels-idx1-ubyte.gz 29696/? [00:00<00:00, 806948.09it/s] Extracting data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-images-idx3-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz 4422656/? [00:00<00:00, 19237994.98it/s] Extracting data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to data/FashionMNIST/raw Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-labels-idx1-ubyte.gz Downloading https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/mnist/Fashion-MNIST/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz 6144/? [00:00<00:00, 152710.85it/s] Extracting data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to data/FashionMNIST/raw","title":"\u4f7f\u7528 FlowVision \u52a0\u8f7d\u6570\u636e\u96c6"},{"location":"basics/03_dataset_dataloader.html#_1","text":"Dataset \u5bf9\u8c61\uff0c\u53ef\u4ee5\u50cf list \u4e00\u6837\uff0c\u7528\u4e0b\u6807\u7d22\u5f15\uff0c\u6bd4\u5982 training_data[index] \u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u968f\u673a\u8bbf\u95ee training_data \u4e2d\u76849\u4e2a\u56fe\u7247\uff0c\u5e76\u663e\u793a\u3002 labels_map = { 0 : \"T-Shirt\" , 1 : \"Trouser\" , 2 : \"Pullover\" , 3 : \"Dress\" , 4 : \"Coat\" , 5 : \"Sandal\" , 6 : \"Shirt\" , 7 : \"Sneaker\" , 8 : \"Bag\" , 9 : \"Ankle Boot\" , } figure = plt . figure ( figsize = ( 8 , 8 )) cols , rows = 3 , 3 from random import randint for i in range ( 1 , cols * rows + 1 ): sample_idx = randint ( 0 , len ( training_data )) img , label = training_data [ sample_idx ] figure . add_subplot ( rows , cols , i ) plt . title ( labels_map [ label ]) plt . axis ( \"off\" ) plt . imshow ( img . squeeze () . numpy (), cmap = \"gray\" ) plt . show ()","title":"\u904d\u5386\u6570\u636e"},{"location":"basics/03_dataset_dataloader.html#dataset","text":"\u901a\u8fc7\u7ee7\u627f oneflow.utils.data.Dataset \u53ef\u4ee5\u5b9e\u73b0\u81ea\u5b9a\u4e49 Dataset \uff0c\u81ea\u5b9a\u4e49 Dataset \u540c\u6837\u53ef\u4ee5\u914d\u5408\u4e0b\u4e00\u8282\u4ecb\u7ecd\u7684 Dataloader \u4f7f\u7528\uff0c\u7b80\u5316\u6570\u636e\u5904\u7406\u7684\u6d41\u7a0b\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u81ea\u5b9a\u4e49 Dataset \uff0c\u5b83\u7684\u5173\u952e\u6b65\u9aa4\u662f\uff1a \u7ee7\u627f oneflow.utils.data.Dataset \u5b9e\u73b0\u7c7b\u7684 __len__ \u65b9\u6cd5\uff0c\u8fd4\u56de\u7ed3\u679c\u901a\u5e38\u4e3a\u8be5\u6570\u636e\u96c6\u4e2d\u7684\u6837\u672c\u6570\u91cf \u5b9e\u73b0\u7c7b\u7684 __getitem__ \u65b9\u6cd5\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u5bf9\u5e94\u4e86\u7528\u6237\uff08\u6216\u6846\u67b6\uff09\u8c03\u7528 dataset_obj[idx] \u65f6\u5f97\u5230\u7684\u7ed3\u679c import numpy as np class CustomDataset ( Dataset ): raw_data_x = np . array ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = np . float32 ) raw_label = np . array ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = np . float32 ) def __init__ ( self , transform = None , target_transform = None ): self . transform = transform self . target_transform = target_transform def __len__ ( self ): return len ( raw_label ) def __getitem__ ( self , idx ): x = CustomDataset . raw_data_x [ idx ] label = CustomDataset . raw_label [ idx ] if self . transform : x = self . transform ( x ) if self . target_transform : label = self . target_transform ( label ) return x , label custom_dataset = CustomDataset () print ( custom_dataset [ 0 ]) print ( custom_dataset [ 1 ]) \u8f93\u51fa\uff1a (array([1., 2.], dtype=float32), array([8.], dtype=float32)) (array([2., 3.], dtype=float32), array([13.], dtype=float32))","title":"\u81ea\u5b9a\u4e49 Dataset"},{"location":"basics/03_dataset_dataloader.html#dataloader","text":"\u5229\u7528 Dataset \u53ef\u4ee5\u4e00\u6b21\u83b7\u53d6\u4e00\u6761\u6837\u672c\u6570\u636e\u3002\u4f46\u662f\u5728\u8bad\u7ec3\u4e2d\uff0c\u5f80\u5f80\u6709\u5176\u5b83\u7684\u9700\u6c42\uff0c\u5982\uff1a\u4e00\u6b21\u8bfb\u53d6 batch size \u4efd\u6570\u636e\uff1b1\u8f6e epoch \u8bad\u7ec3\u540e\uff0c\u6570\u636e\u91cd\u65b0\u6253\u4e71\uff08reshuffle\uff09\u7b49\u3002 \u8fd9\u65f6\u5019\uff0c\u4f7f\u7528 DataLoader \u5373\u53ef\u3002 DataLoader \u53ef\u4ee5\u5c06 Dataset \u5c01\u88c5\u4e3a\u8fed\u4ee3\u5668\uff0c\u65b9\u4fbf\u8bad\u7ec3\u5faa\u73af\u4e2d\u83b7\u53d6\u6570\u636e\u3002\u5982\u4ee5\u4e0b\u4f8b\u5b50\uff1a batch_size=64 \uff1a \u6307\u5b9a\u4e00\u6b21\u8fed\u4ee3\u8fd4\u56de\u7684\u6570\u636e batch size shuffle \uff1a\u662f\u5426\u8981\u968f\u673a\u6253\u4e71\u6570\u636e\u7684\u987a\u5e8f from oneflow.utils.data import DataLoader train_dataloader = DataLoader ( training_data , batch_size = 64 , shuffle = True ) x , label = next ( iter ( train_dataloader )) print ( f \"shape of x: { x . shape } , shape of label: { label . shape } \" ) \u8f93\u51fa\uff1a shape of x:flow.Size([64, 1, 28, 28]), shape of label: flow.Size([64]) img = x [ 0 ] . squeeze () . numpy () label = label [ 0 ] plt . imshow ( img , cmap = \"gray\" ) plt . show () print ( label ) \u8f93\u51fa\uff1a\uff08\u968f\u673a\u8f93\u51fa\u4e00\u5f20\u56fe\u7247\uff09 tensor(9, dtype=oneflow.int64) \u81ea\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u5728\u8bad\u7ec3\u7684\u5faa\u73af\u4e2d\uff0c\u4f7f\u7528 DataLoader \u8fed\u4ee3\u5668\uff1a for x , label in train_dataloader : print ( x . shape , label . shape ) # training...","title":"\u4f7f\u7528 DataLoader"},{"location":"basics/04_build_network.html","text":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u00b6 \u200b\u795e\u7ecf\u7f51\u7edc\u7684\u5404\u5c42\uff0c\u53ef\u4ee5\u4f7f\u7528 oneflow.nn \u540d\u79f0\u7a7a\u95f4\u4e0b\u7684 API \u642d\u5efa\uff0c\u5b83\u63d0\u4f9b\u4e86\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u6240\u9700\u7684\u5e38\u89c1 Module\uff08\u5982 oneflow.nn.Conv2d \uff0c oneflow.nn.ReLU \u7b49\u7b49\uff09\u3002 \u7528\u4e8e\u642d\u5efa\u7f51\u7edc\u7684\u6240\u6709 Module \u7c7b\u90fd\u7ee7\u627f\u81ea oneflow.nn.Module \uff0c\u591a\u4e2a\u7b80\u5355\u7684 Module \u53ef\u4ee5\u7ec4\u5408\u5728\u4e00\u8d77\u6784\u6210\u66f4\u590d\u6742\u7684 Module\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5730\u642d\u5efa\u548c\u7ba1\u7406\u590d\u6742\u7684\u795e\u7ecf\u7f51\u7edc\u3002 import oneflow as flow import oneflow.nn as nn \u5b9a\u4e49 Module \u7c7b \u00b6 oneflow.nn \u4e0b\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684 Module \u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\uff0c\u6216\u8005\u5728\u5b83\u4eec\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49 Module \u7c7b\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u3002\u642d\u5efa\u8fc7\u7a0b\u5305\u62ec\uff1a \u5199\u4e00\u4e2a\u7ee7\u627f\u81ea oneflow.nn.Module \u7684\u7c7b \u5b9e\u73b0\u7c7b\u7684 __init__ \u65b9\u6cd5\uff0c\u5728\u5176\u4e2d\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784 \u5b9e\u73b0\u7c7b\u7684 forward \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9488\u5bf9 Module \u7684\u8f93\u5165\u8fdb\u884c\u8ba1\u7b97 class NeuralNetwork ( nn . Module ): def __init__ ( self ): super ( NeuralNetwork , self ) . __init__ () self . flatten = nn . Flatten () self . linear_relu_stack = nn . Sequential ( nn . Linear ( 28 * 28 , 512 ), nn . ReLU (), nn . Linear ( 512 , 512 ), nn . ReLU (), nn . Linear ( 512 , 10 ), nn . ReLU () ) def forward ( self , x ): x = self . flatten ( x ) logits = self . linear_relu_stack ( x ) return logits net = NeuralNetwork () print ( net ) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u4f1a\u8f93\u51fa\u521a\u521a\u642d\u5efa\u7684 NeuralNetwork \u7f51\u7edc\u7684\u7ed3\u6784\uff1a NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) (5): ReLU() ) ) \u63a5\u7740\uff0c\u8c03\u7528 net \uff08\u6ce8\u610f\uff1a\u4e0d\u63a8\u8350\u663e\u5f0f\u8c03\u7528 forward \uff09\u5373\u53ef\u5b8c\u6210\u524d\u5411\u4f20\u64ad\uff1a X = flow . ones ( 1 , 28 , 28 ) logits = net ( X ) pred_probab = nn . Softmax ( dim = 1 )( logits ) y_pred = pred_probab . argmax ( 1 ) print ( f \"Predicted class: { y_pred } \" ) \u4f1a\u5f97\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u8f93\u51fa\u7ed3\u679c\uff1a Predicted class: tensor([1], dtype=oneflow.int32) \u4ee5\u4e0a\u4ece\u6570\u636e\u8f93\u5165\u3001\u5230\u7f51\u7edc\u8ba1\u7b97\uff0c\u6700\u7ec8\u63a8\u7406\u8f93\u51fa\u7684\u6d41\u7a0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a flow.nn.functional \u00b6 \u9664\u4e86 oneflow.nn \u5916\uff0c oneflow.nn.functional \u540d\u79f0\u7a7a\u95f4\u4e0b\u4e5f\u63d0\u4f9b\u4e86\u4e0d\u5c11 API\u3002\u5b83\u4e0e oneflow.nn \u5728\u529f\u80fd\u4e0a\u6709\u4e00\u5b9a\u7684\u91cd\u53e0\u3002\u6bd4\u5982 nn.functional.relu \u4e0e nn.ReLU \u90fd\u53ef\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u505a activation \u64cd\u4f5c\u3002 \u4e24\u8005\u7684\u533a\u522b\u4e3b\u8981\u6709\uff1a nn \u4e0b\u7684 API \u662f\u7c7b\uff0c\u9700\u8981\u5148\u6784\u9020\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u518d\u8c03\u7528\uff1b nn.functional \u4e0b\u7684 API \u662f\u4f5c\u4e3a\u51fd\u6570\u76f4\u63a5\u8c03\u7528 nn \u4e0b\u7684\u7c7b\u5185\u90e8\u81ea\u5df1\u7ba1\u7406\u4e86\u7f51\u7edc\u53c2\u6570\uff1b\u800c nn.functional \u4e0b\u7684\u51fd\u6570\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u53c2\u6570\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u624b\u52a8\u4f20\u5165 \u5b9e\u9645\u4e0a\uff0cOneFlow \u63d0\u4f9b\u7684\u5927\u90e8\u5206 Module \u662f\u901a\u8fc7\u5c01\u88c5 nn.functional \u4e0b\u7684\u65b9\u6cd5\u5f97\u5230\u7684\u3002 nn.functional \u63d0\u4f9b\u4e86\u66f4\u52a0\u7ec6\u7c92\u5ea6\u7ba1\u7406\u7f51\u7edc\u7684\u53ef\u80fd\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528 nn.functional \u4e2d\u7684\u65b9\u6cd5\uff0c\u6784\u5efa\u4e0e\u4e0a\u6587\u4e2d NeuralNetwork \u7c7b\u7b49\u4ef7\u7684 Module FunctionalNeuralNetwork \uff0c\u8bfb\u8005\u53ef\u4ee5\u4f53\u4f1a\u4e24\u8005\u7684\u5f02\u540c\uff1a class FunctionalNeuralNetwork ( nn . Module ): def __init__ ( self ): super ( FunctionalNeuralNetwork , self ) . __init__ () self . weight1 = nn . Parameter ( flow . randn ( 28 * 28 , 512 )) self . bias1 = nn . Parameter ( flow . randn ( 512 )) self . weight2 = nn . Parameter ( flow . randn ( 512 , 512 )) self . bias2 = nn . Parameter ( flow . randn ( 512 )) self . weight3 = nn . Parameter ( flow . randn ( 512 , 10 )) self . bias3 = nn . Parameter ( flow . randn ( 10 )) def forward ( self , x ): x = x . reshape ( 1 , 28 * 28 ) out = flow . matmul ( x , self . weight1 ) out = out + self . bias1 out = nn . functional . relu ( out ) out = flow . matmul ( out , self . weight2 ) out = out + self . bias2 out = nn . functional . relu ( out ) out = flow . matmul ( out , self . weight3 ) out = out + self . bias3 out = nn . functional . relu ( out ) return out net = FunctionalNeuralNetwork () X = flow . ones ( 1 , 28 , 28 ) logits = net ( X ) pred_probab = nn . Softmax ( dim = 1 )( logits ) y_pred = pred_probab . argmax ( 1 ) print ( f \"Predicted class: { y_pred } \" ) Module \u5bb9\u5668 \u00b6 \u6bd4\u8f83\u4ee5\u4e0a NeuralNetwork \u4e0e FunctionalNeuralNetwork \u5b9e\u73b0\u7684\u5f02\u540c\uff0c\u53ef\u4ee5\u53d1\u73b0 nn.Sequential \u5bf9\u4e8e\u7b80\u5316\u4ee3\u7801\u8d77\u5230\u4e86\u91cd\u8981\u4f5c\u7528\u3002 nn.Sequential \u662f\u4e00\u79cd\u7279\u6b8a\u5bb9\u5668\uff0c\u53ea\u8981\u662f\u7ee7\u627f\u81ea nn.Module \u7684\u7c7b\u90fd\u53ef\u4ee5\u653e\u7f6e\u653e\u7f6e\u5230\u5176\u4e2d\u3002 \u5b83\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\uff1a\u5f53 Sequential \u8fdb\u884c\u524d\u5411\u4f20\u64ad\u65f6\uff0cSequential \u4f1a\u81ea\u52a8\u5730\u5c06\u5bb9\u5668\u4e2d\u5305\u542b\u7684\u5404\u5c42\u201c\u4e32\u8054\u201d\u8d77\u6765\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4f1a\u6309\u7167\u5404\u5c42\u52a0\u5165 Sequential \u7684\u987a\u5e8f\uff0c\u81ea\u52a8\u5730\u5c06\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u4f20\u9012\uff0c\u76f4\u5230\u5f97\u5230\u6574\u4e2a Module \u7684\u6700\u540e\u4e00\u5c42\u7684\u8f93\u51fa\u3002 \u4ee5\u4e0b\u662f\u4e0d\u4f7f\u7528 Sequential \u6784\u5efa\u7f51\u7edc\u7684\u4f8b\u5b50\uff08\u4e0d\u63a8\u8350\uff09\uff1a class MyModel ( nn . Module ): def __init__ ( self ): super ( MyModel , self ) . __init__ () self . conv1 = nn . Conv2d ( 1 , 20 , 5 ) self . relu1 = nn . ReLU () self . conv2 = nn . Conv2d ( 20 , 64 , 5 ) self . relu2 = nn . ReLU () def forward ( self , x ): out = self . conv1 ( x ) out = self . relu1 ( out ) out = self . conv2 ( out ) out = self . relu2 ( out ) return out \u5982\u679c\u4f7f\u7528 Sequential\uff0c\u5219\u770b\u8d77\u6765\u662f\u8fd9\u6837\uff0c\u4f1a\u663e\u5f97\u66f4\u7b80\u6d01\u3002 class MySeqModel ( nn . Module ): def __init__ ( self ): super ( MySeqModel , self ) . __init__ () self . seq = nn . Sequential ( nn . Conv2d ( 1 , 20 , 5 ), nn . ReLU (), nn . Conv2d ( 20 , 64 , 5 ), nn . ReLU () ) def forward ( self , x ): return self . seq ( x ) \u9664\u4e86 Sequential \u5916\uff0c\u8fd8\u6709 nn.ModuleList \u53ca nn.ModuleDict \uff0c\u9664\u4e86\u4f1a\u81ea\u52a8\u6ce8\u518c\u53c2\u6570\u5230\u6574\u4e2a\u7f51\u7edc\u5916\uff0c\u4ed6\u4eec\u7684\u5176\u5b83\u884c\u4e3a\u7c7b\u4f3c Python list\u3001Python dict\uff0c\u53ea\u662f\u5e38\u7528\u7b80\u5355\u7684\u5bb9\u5668\uff0c\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u884c\u524d\u540e\u5c42\u7684\u524d\u5411\u4f20\u64ad\uff0c\u9700\u8981\u81ea\u5df1\u624b\u5de5\u904d\u5386\u5b8c\u6210\u5404\u5c42\u7684\u8ba1\u7b97\u3002","title":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"basics/04_build_network.html#_1","text":"\u200b\u795e\u7ecf\u7f51\u7edc\u7684\u5404\u5c42\uff0c\u53ef\u4ee5\u4f7f\u7528 oneflow.nn \u540d\u79f0\u7a7a\u95f4\u4e0b\u7684 API \u642d\u5efa\uff0c\u5b83\u63d0\u4f9b\u4e86\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u6240\u9700\u7684\u5e38\u89c1 Module\uff08\u5982 oneflow.nn.Conv2d \uff0c oneflow.nn.ReLU \u7b49\u7b49\uff09\u3002 \u7528\u4e8e\u642d\u5efa\u7f51\u7edc\u7684\u6240\u6709 Module \u7c7b\u90fd\u7ee7\u627f\u81ea oneflow.nn.Module \uff0c\u591a\u4e2a\u7b80\u5355\u7684 Module \u53ef\u4ee5\u7ec4\u5408\u5728\u4e00\u8d77\u6784\u6210\u66f4\u590d\u6742\u7684 Module\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5730\u642d\u5efa\u548c\u7ba1\u7406\u590d\u6742\u7684\u795e\u7ecf\u7f51\u7edc\u3002 import oneflow as flow import oneflow.nn as nn","title":"\u642d\u5efa\u795e\u7ecf\u7f51\u7edc"},{"location":"basics/04_build_network.html#module","text":"oneflow.nn \u4e0b\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684 Module \u7c7b\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b83\u4eec\uff0c\u6216\u8005\u5728\u5b83\u4eec\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49 Module \u7c7b\u642d\u5efa\u795e\u7ecf\u7f51\u7edc\u3002\u642d\u5efa\u8fc7\u7a0b\u5305\u62ec\uff1a \u5199\u4e00\u4e2a\u7ee7\u627f\u81ea oneflow.nn.Module \u7684\u7c7b \u5b9e\u73b0\u7c7b\u7684 __init__ \u65b9\u6cd5\uff0c\u5728\u5176\u4e2d\u6784\u5efa\u795e\u7ecf\u7f51\u7edc\u7684\u7ed3\u6784 \u5b9e\u73b0\u7c7b\u7684 forward \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9488\u5bf9 Module \u7684\u8f93\u5165\u8fdb\u884c\u8ba1\u7b97 class NeuralNetwork ( nn . Module ): def __init__ ( self ): super ( NeuralNetwork , self ) . __init__ () self . flatten = nn . Flatten () self . linear_relu_stack = nn . Sequential ( nn . Linear ( 28 * 28 , 512 ), nn . ReLU (), nn . Linear ( 512 , 512 ), nn . ReLU (), nn . Linear ( 512 , 10 ), nn . ReLU () ) def forward ( self , x ): x = self . flatten ( x ) logits = self . linear_relu_stack ( x ) return logits net = NeuralNetwork () print ( net ) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u4f1a\u8f93\u51fa\u521a\u521a\u642d\u5efa\u7684 NeuralNetwork \u7f51\u7edc\u7684\u7ed3\u6784\uff1a NeuralNetwork( (flatten): Flatten(start_dim=1, end_dim=-1) (linear_relu_stack): Sequential( (0): Linear(in_features=784, out_features=512, bias=True) (1): ReLU() (2): Linear(in_features=512, out_features=512, bias=True) (3): ReLU() (4): Linear(in_features=512, out_features=10, bias=True) (5): ReLU() ) ) \u63a5\u7740\uff0c\u8c03\u7528 net \uff08\u6ce8\u610f\uff1a\u4e0d\u63a8\u8350\u663e\u5f0f\u8c03\u7528 forward \uff09\u5373\u53ef\u5b8c\u6210\u524d\u5411\u4f20\u64ad\uff1a X = flow . ones ( 1 , 28 , 28 ) logits = net ( X ) pred_probab = nn . Softmax ( dim = 1 )( logits ) y_pred = pred_probab . argmax ( 1 ) print ( f \"Predicted class: { y_pred } \" ) \u4f1a\u5f97\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u8f93\u51fa\u7ed3\u679c\uff1a Predicted class: tensor([1], dtype=oneflow.int32) \u4ee5\u4e0a\u4ece\u6570\u636e\u8f93\u5165\u3001\u5230\u7f51\u7edc\u8ba1\u7b97\uff0c\u6700\u7ec8\u63a8\u7406\u8f93\u51fa\u7684\u6d41\u7a0b\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u5b9a\u4e49 Module \u7c7b"},{"location":"basics/04_build_network.html#flownnfunctional","text":"\u9664\u4e86 oneflow.nn \u5916\uff0c oneflow.nn.functional \u540d\u79f0\u7a7a\u95f4\u4e0b\u4e5f\u63d0\u4f9b\u4e86\u4e0d\u5c11 API\u3002\u5b83\u4e0e oneflow.nn \u5728\u529f\u80fd\u4e0a\u6709\u4e00\u5b9a\u7684\u91cd\u53e0\u3002\u6bd4\u5982 nn.functional.relu \u4e0e nn.ReLU \u90fd\u53ef\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u505a activation \u64cd\u4f5c\u3002 \u4e24\u8005\u7684\u533a\u522b\u4e3b\u8981\u6709\uff1a nn \u4e0b\u7684 API \u662f\u7c7b\uff0c\u9700\u8981\u5148\u6784\u9020\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u518d\u8c03\u7528\uff1b nn.functional \u4e0b\u7684 API \u662f\u4f5c\u4e3a\u51fd\u6570\u76f4\u63a5\u8c03\u7528 nn \u4e0b\u7684\u7c7b\u5185\u90e8\u81ea\u5df1\u7ba1\u7406\u4e86\u7f51\u7edc\u53c2\u6570\uff1b\u800c nn.functional \u4e0b\u7684\u51fd\u6570\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u53c2\u6570\uff0c\u6bcf\u6b21\u8c03\u7528\u65f6\u624b\u52a8\u4f20\u5165 \u5b9e\u9645\u4e0a\uff0cOneFlow \u63d0\u4f9b\u7684\u5927\u90e8\u5206 Module \u662f\u901a\u8fc7\u5c01\u88c5 nn.functional \u4e0b\u7684\u65b9\u6cd5\u5f97\u5230\u7684\u3002 nn.functional \u63d0\u4f9b\u4e86\u66f4\u52a0\u7ec6\u7c92\u5ea6\u7ba1\u7406\u7f51\u7edc\u7684\u53ef\u80fd\u3002 \u4ee5\u4e0b\u7684\u4f8b\u5b50\uff0c\u4f7f\u7528 nn.functional \u4e2d\u7684\u65b9\u6cd5\uff0c\u6784\u5efa\u4e0e\u4e0a\u6587\u4e2d NeuralNetwork \u7c7b\u7b49\u4ef7\u7684 Module FunctionalNeuralNetwork \uff0c\u8bfb\u8005\u53ef\u4ee5\u4f53\u4f1a\u4e24\u8005\u7684\u5f02\u540c\uff1a class FunctionalNeuralNetwork ( nn . Module ): def __init__ ( self ): super ( FunctionalNeuralNetwork , self ) . __init__ () self . weight1 = nn . Parameter ( flow . randn ( 28 * 28 , 512 )) self . bias1 = nn . Parameter ( flow . randn ( 512 )) self . weight2 = nn . Parameter ( flow . randn ( 512 , 512 )) self . bias2 = nn . Parameter ( flow . randn ( 512 )) self . weight3 = nn . Parameter ( flow . randn ( 512 , 10 )) self . bias3 = nn . Parameter ( flow . randn ( 10 )) def forward ( self , x ): x = x . reshape ( 1 , 28 * 28 ) out = flow . matmul ( x , self . weight1 ) out = out + self . bias1 out = nn . functional . relu ( out ) out = flow . matmul ( out , self . weight2 ) out = out + self . bias2 out = nn . functional . relu ( out ) out = flow . matmul ( out , self . weight3 ) out = out + self . bias3 out = nn . functional . relu ( out ) return out net = FunctionalNeuralNetwork () X = flow . ones ( 1 , 28 , 28 ) logits = net ( X ) pred_probab = nn . Softmax ( dim = 1 )( logits ) y_pred = pred_probab . argmax ( 1 ) print ( f \"Predicted class: { y_pred } \" )","title":"flow.nn.functional"},{"location":"basics/04_build_network.html#module_1","text":"\u6bd4\u8f83\u4ee5\u4e0a NeuralNetwork \u4e0e FunctionalNeuralNetwork \u5b9e\u73b0\u7684\u5f02\u540c\uff0c\u53ef\u4ee5\u53d1\u73b0 nn.Sequential \u5bf9\u4e8e\u7b80\u5316\u4ee3\u7801\u8d77\u5230\u4e86\u91cd\u8981\u4f5c\u7528\u3002 nn.Sequential \u662f\u4e00\u79cd\u7279\u6b8a\u5bb9\u5668\uff0c\u53ea\u8981\u662f\u7ee7\u627f\u81ea nn.Module \u7684\u7c7b\u90fd\u53ef\u4ee5\u653e\u7f6e\u653e\u7f6e\u5230\u5176\u4e2d\u3002 \u5b83\u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\uff1a\u5f53 Sequential \u8fdb\u884c\u524d\u5411\u4f20\u64ad\u65f6\uff0cSequential \u4f1a\u81ea\u52a8\u5730\u5c06\u5bb9\u5668\u4e2d\u5305\u542b\u7684\u5404\u5c42\u201c\u4e32\u8054\u201d\u8d77\u6765\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4f1a\u6309\u7167\u5404\u5c42\u52a0\u5165 Sequential \u7684\u987a\u5e8f\uff0c\u81ea\u52a8\u5730\u5c06\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\u4f20\u9012\uff0c\u76f4\u5230\u5f97\u5230\u6574\u4e2a Module \u7684\u6700\u540e\u4e00\u5c42\u7684\u8f93\u51fa\u3002 \u4ee5\u4e0b\u662f\u4e0d\u4f7f\u7528 Sequential \u6784\u5efa\u7f51\u7edc\u7684\u4f8b\u5b50\uff08\u4e0d\u63a8\u8350\uff09\uff1a class MyModel ( nn . Module ): def __init__ ( self ): super ( MyModel , self ) . __init__ () self . conv1 = nn . Conv2d ( 1 , 20 , 5 ) self . relu1 = nn . ReLU () self . conv2 = nn . Conv2d ( 20 , 64 , 5 ) self . relu2 = nn . ReLU () def forward ( self , x ): out = self . conv1 ( x ) out = self . relu1 ( out ) out = self . conv2 ( out ) out = self . relu2 ( out ) return out \u5982\u679c\u4f7f\u7528 Sequential\uff0c\u5219\u770b\u8d77\u6765\u662f\u8fd9\u6837\uff0c\u4f1a\u663e\u5f97\u66f4\u7b80\u6d01\u3002 class MySeqModel ( nn . Module ): def __init__ ( self ): super ( MySeqModel , self ) . __init__ () self . seq = nn . Sequential ( nn . Conv2d ( 1 , 20 , 5 ), nn . ReLU (), nn . Conv2d ( 20 , 64 , 5 ), nn . ReLU () ) def forward ( self , x ): return self . seq ( x ) \u9664\u4e86 Sequential \u5916\uff0c\u8fd8\u6709 nn.ModuleList \u53ca nn.ModuleDict \uff0c\u9664\u4e86\u4f1a\u81ea\u52a8\u6ce8\u518c\u53c2\u6570\u5230\u6574\u4e2a\u7f51\u7edc\u5916\uff0c\u4ed6\u4eec\u7684\u5176\u5b83\u884c\u4e3a\u7c7b\u4f3c Python list\u3001Python dict\uff0c\u53ea\u662f\u5e38\u7528\u7b80\u5355\u7684\u5bb9\u5668\uff0c\u4e0d\u4f1a\u81ea\u52a8\u8fdb\u884c\u524d\u540e\u5c42\u7684\u524d\u5411\u4f20\u64ad\uff0c\u9700\u8981\u81ea\u5df1\u624b\u5de5\u904d\u5386\u5b8c\u6210\u5404\u5c42\u7684\u8ba1\u7b97\u3002","title":"Module \u5bb9\u5668"},{"location":"basics/05_autograd.html","text":"Autograd \u00b6 \u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u8fc7\u7a0b\u79bb\u4e0d\u5f00 \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 \uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u83b7\u53d6 loss \u51fd\u6570\u5bf9\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u7528\u4e8e\u66f4\u65b0\u53c2\u6570\u3002 OneFlow \u63d0\u4f9b\u4e86\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\uff0c\u53ef\u81ea\u52a8\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u4e2d\u53c2\u6570\u7684\u68af\u5ea6\u3002 \u672c\u6587\u5c06\u5148\u4ecb\u7ecd\u8ba1\u7b97\u56fe\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5b83\u6709\u5229\u4e8e\u7406\u89e3 OneFlow \u81ea\u52a8\u6c42\u5bfc\u7684\u5e38\u89c1\u8bbe\u7f6e\u53ca\u9650\u5236\uff0c\u518d\u4ecb\u7ecd OneFlow \u4e2d\u4e0e\u81ea\u52a8\u6c42\u5bfc\u6709\u5173\u7684\u5e38\u89c1\u63a5\u53e3\u3002 \u8ba1\u7b97\u56fe \u00b6 \u5f20\u91cf\u4e0e\u7b97\u5b50\uff0c\u5171\u540c\u7ec4\u6210\u8ba1\u7b97\u56fe\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a import oneflow as flow def loss ( y_pred , y ): return flow . sum ( 1 / 2 * ( y_pred - y ) ** 2 ) x = flow . ones ( 1 , 5 ) # \u8f93\u5165 w = flow . randn ( 5 , 3 , requires_grad = True ) b = flow . randn ( 1 , 3 , requires_grad = True ) z = flow . matmul ( x , w ) + b y = flow . zeros ( 1 , 3 ) # label l = loss ( z , y ) \u5b83\u5bf9\u5e94\u7684\u8ba1\u7b97\u56fe\u5982\u4e0b\uff1a \u8ba1\u7b97\u56fe\u4e2d\uff0c\u50cf x \u3001 w \u3001 b \u3001 y \u8fd9\u79cd\u53ea\u6709\u8f93\u51fa\uff0c\u6ca1\u6709\u8f93\u5165\u7684\u8282\u70b9\u79f0\u4e3a \u53f6\u5b50\u8282\u70b9 \uff1b\u50cf loss \u8fd9\u79cd\u53ea\u6709\u8f93\u5165\u6ca1\u6709\u8f93\u51fa\u7684\u8282\u70b9\uff0c\u79f0\u4e3a \u6839\u8282\u70b9 \u3002 \u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6c42\u5f97 l \u5bf9 w \u3001 b \u7684\u68af\u5ea6\uff0c\u4ee5\u66f4\u65b0\u8fd9\u4e24\u4e2a\u6a21\u578b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u521b\u5efa\u5b83\u4eec\u65f6\uff0c\u8bbe\u7f6e requires_grad \u4e3a True \u3002 \u81ea\u52a8\u6c42\u68af\u5ea6 \u00b6 backward \u4e0e\u68af\u5ea6 \u00b6 \u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5f97\u5230 l \u5206\u522b\u5bf9 w \u3001 b \u7684\u68af\u5ea6 \\(\\frac{\\partial l}{\\partial w}\\) \u548c \\(\\frac{\\partial l}{\\partial b}\\) \u3002\u6211\u4eec\u53ea\u9700\u8981\u5bf9 l \u8c03\u7528 backward() \u65b9\u6cd5\uff0c\u7136\u540e OneFlow \u5c31\u4f1a\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6\uff0c\u5e76\u4e14\u5b58\u653e\u5230 w \u4e0e b \u7684 grad \u6210\u5458\u4e2d\u3002 l . backward () print ( w . grad ) print ( b . grad ) tensor([[0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377]], dtype=oneflow.float32) tensor([[0.9397, 2.5428, 2.5377]], dtype=oneflow.float32) \u5bf9\u975e\u53f6\u5b50\u8282\u70b9\u6c42\u68af\u5ea6 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709 requires_grad=True \u7684\u53f6\u5b50\u8282\u70b9\u7684\u68af\u5ea6\u4f1a\u88ab\u4fdd\u7559\u3002\u975e\u53f6\u5b50\u8282\u70b9\u7684 grad \u5c5e\u6027\u9ed8\u8ba4\u5728 backward \u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u81ea\u52a8\u91ca\u653e\uff0c\u4e0d\u80fd\u67e5\u770b\u3002 \u5982\u679c\u60f3\u4fdd\u7559\u5e76\u67e5\u770b\u975e\u53f6\u5b50\u8282\u70b9\u7684\u68af\u5ea6\uff0c\u53ef\u4ee5\u8c03\u7528 Tensor.retain_grad \u65b9\u6cd5\uff1a from math import pi n1 = flow . tensor ( pi / 2 , requires_grad = True ) n2 = flow . sin ( n1 ) n2 . retain_grad () n3 = flow . pow ( n2 , 2 ) n3 . backward () print ( n1 . grad ) print ( n2 . grad ) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u65e2\u6c42 \\(\\frac{\\partial n_3}{\\partial n_1}\\) \uff0c\u4e5f\u6c42 \\(\\frac{\\partial n_3}{\\partial n_2}\\) \u8f93\u51fa: tensor(-8.7423e-08, dtype=oneflow.float32) tensor(2., dtype=oneflow.float32) \u5bf9\u4e00\u4e2a\u8ba1\u7b97\u56fe\u591a\u6b21 backward() \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8ba1\u7b97\u56fe\uff0c\u53ea\u80fd\u8c03\u7528 backward() \u4e00\u6b21\u3002\u6bd4\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u4f1a\u62a5\u9519\uff1a n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward () n2 . backward () \u62a5\u9519\u4fe1\u606f\uff1a Maybe you try to backward through the node a second time. Specify retain_graph=True when calling .backward() or autograd.grad() the first time. \u5982\u679c\u60f3\u8981\u5728\u540c\u4e00\u4e2a\u8ba1\u7b97\u56fe\u4e0a\u8c03\u7528\u591a\u6b21 backward() \uff0c\u9700\u8981\u5728\u8c03\u7528\u65f6\u8bbe\u7f6e retain_graph=True \u3002 n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward ( retain_graph = True ) print ( n1 . grad ) n2 . backward () print ( n1 . grad ) \u8f93\u51fa\uff1a tensor(20., dtype=oneflow.float32) tensor(40., dtype=oneflow.float32) \u4ee5\u4e0a\u8f93\u51fa\u53ef\u77e5\uff0cOneFlow \u4f1a \u7d2f\u52a0 \u591a\u6b21 backward() \u8ba1\u7b97\u5f97\u5230\u7684\u68af\u5ea6\u3002 \u5982\u679c\u60f3\u6e05\u7a7a\u68af\u5ea6\uff0c\u53ef\u4ee5\u8c03\u7528 zero_ \u65b9\u6cd5\uff1a n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward ( retain_graph = True ) print ( n1 . grad ) n1 . grad . zero_ () n2 . backward () print ( n1 . grad ) \u8f93\u51fa\uff1a tensor(20., dtype=oneflow.float32) tensor(20., dtype=oneflow.float32) \u4e0d\u8bb0\u5f55\u67d0\u4e2a Tensor \u7684\u68af\u5ea6 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOneFlow \u4f1a tracing requires_grad \u4e3a True \u7684 Tensor\uff0c\u81ea\u52a8\u6c42\u68af\u5ea6\u3002 \u4e0d\u8fc7\u6709\u4e9b\u60c5\u51b5\u53ef\u80fd\u5e76\u4e0d\u9700\u8981 OneFlow \u8fd9\u6837\u505a\uff0c\u6bd4\u5982\u53ea\u662f\u60f3\u8bd5\u4e00\u8bd5\u524d\u5411\u63a8\u7406\u3002\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 oneflow.no_grad \u6216 oneflow.Tensor.detach \u65b9\u6cd5\u8bbe\u7f6e\u3002 z = flow . matmul ( x , w ) + b print ( z . requires_grad ) with flow . no_grad (): z = flow . matmul ( x , w ) + b print ( z . requires_grad ) \u8f93\u51fa\uff1a True False z_det = z . detach () print ( z_det . requires_grad ) \u8f93\u51fa\uff1a False \u8f93\u51fa\u4e0d\u662f\u6807\u91cf\u65f6\u5982\u4f55\u6c42\u68af\u5ea6 \u00b6 \u901a\u5e38\uff0c\u8c03\u7528 backward() \u65b9\u6cd5\u7684\u662f\u795e\u7ecf\u7f51\u7edc\u7684 loss\uff0c\u662f\u4e00\u4e2a\u6807\u91cf\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4e0d\u662f\u6807\u91cf\uff0c\u5bf9 Tensor \u8c03\u7528 backward() \u65f6\u4f1a\u62a5\u9519\u3002 x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y . backward () \u62a5\u9519\u4fe1\u606f\uff1a Check failed: IsScalarTensor(*outputs.at(i)) Grad can be implicitly created only for scalar outputs \u800c\u5bf9 y \u6c42 sum \u540e\u53ef\u4ee5\u6c42\u68af\u5ea6\uff1a x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y = y . sum () y . backward () print ( x . grad ) \u8f93\u51fa\uff1a tensor([[3., 3.]], dtype=oneflow.float32) \u9519\u8bef\u539f\u56e0\u53ca\u89e3\u51b3\u65b9\u6cd5\u7684\u5206\u6790\u8bf7\u53c2\u8003\u4e0b\u6587 \u201c\u6269\u5c55\u9605\u8bfb\u201d \u90e8\u5206\u3002 \u6269\u5c55\u9605\u8bfb \u00b6 x \u5f20\u91cf\u4e2d\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u8bb0\u4f5c \\(x_1\\) \u4e0e \\(x_2\\) \uff0c y \u5f20\u91cf\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u8bb0\u4f5c \\(y_1\\) \u4e0e \\(y_2\\) \uff0c\u5e76\u4e14\u4e24\u8005\u7684\u5173\u7cfb\u662f\uff1a \\[ \\mathbf{x} = [x_1, x_2] \\] \\[ \\mathbf{y} = [y_1, y_2] = [3x_1+1, 3x_2+1] \\] \u6b64\u65f6\uff0c\u60f3\u76f4\u63a5\u6c42 \\(\\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}}\\) \\[ \\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}} = \\frac{[3x_1+1, 3x_2+1]}{[x_1, x_2]} \\] \u5728\u6570\u5b66\u4e0a\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u56e0\u6b64\u5f53\u7136\u5c31\u62a5\u9519\u4e86\u3002 \u5b9e\u9645\u4e0a\uff0c\u5f53\u7528\u6237\u8c03\u7528 y.backward() \u65f6\uff0c\u5176\u5b9e\u60f3\u8981\u7684\u7ed3\u679c\u901a\u5e38\u662f\uff1a \\[ [\\frac{\\partial y_1}{\\partial x_1}, \\frac{\\partial y_2}{\\partial x_2}] \\] \u5f53\u5bf9 y \u8fdb\u884c sum \u8fd0\u7b97\u540e\uff1a \\[ y = y_1 + y_2 = 3x_1 + 3x_2 + 2 \\] \u6b64\u65f6\uff0c\u8c03\u7528 backward() \u65f6\uff0c\u5bf9 \\(x_1\\) \u548c \\(x_2\\) \u53ef\u6c42\u68af\u5ea6\uff1a \\[ \\frac{\\partial y}{\\partial x_1} = \\frac{\\partial 3x_1 + 3x_2 + 2}{\\partial x_1} = 3 \\] \\[ \\frac{\\partial y}{\\partial x_2} = \\frac{\\partial 3x_1 + 3x_2 + 2}{\\partial x_2} = 3 \\] \u9664\u4e86\u4f7f\u7528 sum \u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u901a\u7528\u65b9\u6cd5\uff0c\u5373 Vector Jacobian Product(VJP) \u5b8c\u6210\u975e\u6807\u91cf\u7684\u6839\u8282\u70b9\u7684\u68af\u5ea6\u8ba1\u7b97\u3002\u4f9d\u7136\u7528\u4e0a\u6587\u7684\u4f8b\u5b50\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0cOneFlow \u4f1a\u6839\u636e\u8ba1\u7b97\u56fe\u751f\u6210\u96c5\u53ef\u6bd4\u77e9\u9635\uff1a \\[ J = \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & \\frac{\\partial y_1}{\\partial x_2}\\\\ \\frac{\\partial y_2}{\\partial x_1} & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix}\\\\ = \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & 0 \\\\ 0 & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix} \\] \u53ea\u9700\u63d0\u4f9b\u4e00\u4e2a\u4e0e \\(\\mathbf{y}\\) \u5927\u5c0f\u4e00\u81f4\u7684\u5411\u91cf \\(\\mathbf{v}\\) \uff0c\u5373\u53ef\u8ba1\u7b97 VJP\uff1a \\[ \\begin{bmatrix} v_1\\\\ v_2 \\end{bmatrix} \\times \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & 0 \\\\ 0 & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix}= \\begin{bmatrix} v_1 \\frac{\\partial y_1}{\\partial x_1}\\\\ v_2 \\frac{\\partial y_2}{\\partial x_2} \\end{bmatrix} \\] \u82e5\u5411\u91cf \\(\\mathbf{v}\\) \u662f\u53cd\u5411\u4f20\u64ad\u4e2d\u4e0a\u4e00\u5c42\u7684\u68af\u5ea6\uff0cVJP \u7684\u7ed3\u679c\u521a\u597d\u662f\u5f53\u524d\u5c42\u8981\u6c42\u7684\u68af\u5ea6\u3002 backward \u65b9\u6cd5\u662f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5f20\u91cf\u505a\u53c2\u6570\u7684\uff0c\u8be5\u53c2\u6570\u5c31\u662f VJP \u4e2d\u7684 \\(\\mathbf{v}\\) \uff0c\u7406\u89e3\u4ee5\u4e0a\u9053\u7406\u540e\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u65b9\u5f0f\u5bf9\u5f20\u91cf\u6c42\u68af\u5ea6\uff1a x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y . backward ( flow . ones_like ( y )) print ( x . grad ) \u8f93\u51fa\uff1a tensor([[3., 3.]], dtype=oneflow.float32) \u5916\u90e8\u94fe\u63a5 Automatic Differentiation","title":"Autograd"},{"location":"basics/05_autograd.html#autograd","text":"\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u8fc7\u7a0b\u79bb\u4e0d\u5f00 \u53cd\u5411\u4f20\u64ad\u7b97\u6cd5 \uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u83b7\u53d6 loss \u51fd\u6570\u5bf9\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6\uff0c\u7528\u4e8e\u66f4\u65b0\u53c2\u6570\u3002 OneFlow \u63d0\u4f9b\u4e86\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\uff0c\u53ef\u81ea\u52a8\u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u4e2d\u53c2\u6570\u7684\u68af\u5ea6\u3002 \u672c\u6587\u5c06\u5148\u4ecb\u7ecd\u8ba1\u7b97\u56fe\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5b83\u6709\u5229\u4e8e\u7406\u89e3 OneFlow \u81ea\u52a8\u6c42\u5bfc\u7684\u5e38\u89c1\u8bbe\u7f6e\u53ca\u9650\u5236\uff0c\u518d\u4ecb\u7ecd OneFlow \u4e2d\u4e0e\u81ea\u52a8\u6c42\u5bfc\u6709\u5173\u7684\u5e38\u89c1\u63a5\u53e3\u3002","title":"Autograd"},{"location":"basics/05_autograd.html#_1","text":"\u5f20\u91cf\u4e0e\u7b97\u5b50\uff0c\u5171\u540c\u7ec4\u6210\u8ba1\u7b97\u56fe\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a import oneflow as flow def loss ( y_pred , y ): return flow . sum ( 1 / 2 * ( y_pred - y ) ** 2 ) x = flow . ones ( 1 , 5 ) # \u8f93\u5165 w = flow . randn ( 5 , 3 , requires_grad = True ) b = flow . randn ( 1 , 3 , requires_grad = True ) z = flow . matmul ( x , w ) + b y = flow . zeros ( 1 , 3 ) # label l = loss ( z , y ) \u5b83\u5bf9\u5e94\u7684\u8ba1\u7b97\u56fe\u5982\u4e0b\uff1a \u8ba1\u7b97\u56fe\u4e2d\uff0c\u50cf x \u3001 w \u3001 b \u3001 y \u8fd9\u79cd\u53ea\u6709\u8f93\u51fa\uff0c\u6ca1\u6709\u8f93\u5165\u7684\u8282\u70b9\u79f0\u4e3a \u53f6\u5b50\u8282\u70b9 \uff1b\u50cf loss \u8fd9\u79cd\u53ea\u6709\u8f93\u5165\u6ca1\u6709\u8f93\u51fa\u7684\u8282\u70b9\uff0c\u79f0\u4e3a \u6839\u8282\u70b9 \u3002 \u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u6c42\u5f97 l \u5bf9 w \u3001 b \u7684\u68af\u5ea6\uff0c\u4ee5\u66f4\u65b0\u8fd9\u4e24\u4e2a\u6a21\u578b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u521b\u5efa\u5b83\u4eec\u65f6\uff0c\u8bbe\u7f6e requires_grad \u4e3a True \u3002","title":"\u8ba1\u7b97\u56fe"},{"location":"basics/05_autograd.html#_2","text":"","title":"\u81ea\u52a8\u6c42\u68af\u5ea6"},{"location":"basics/05_autograd.html#backward","text":"\u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5f97\u5230 l \u5206\u522b\u5bf9 w \u3001 b \u7684\u68af\u5ea6 \\(\\frac{\\partial l}{\\partial w}\\) \u548c \\(\\frac{\\partial l}{\\partial b}\\) \u3002\u6211\u4eec\u53ea\u9700\u8981\u5bf9 l \u8c03\u7528 backward() \u65b9\u6cd5\uff0c\u7136\u540e OneFlow \u5c31\u4f1a\u81ea\u52a8\u8ba1\u7b97\u68af\u5ea6\uff0c\u5e76\u4e14\u5b58\u653e\u5230 w \u4e0e b \u7684 grad \u6210\u5458\u4e2d\u3002 l . backward () print ( w . grad ) print ( b . grad ) tensor([[0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377], [0.9397, 2.5428, 2.5377]], dtype=oneflow.float32) tensor([[0.9397, 2.5428, 2.5377]], dtype=oneflow.float32)","title":"backward \u4e0e\u68af\u5ea6"},{"location":"basics/05_autograd.html#_3","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709 requires_grad=True \u7684\u53f6\u5b50\u8282\u70b9\u7684\u68af\u5ea6\u4f1a\u88ab\u4fdd\u7559\u3002\u975e\u53f6\u5b50\u8282\u70b9\u7684 grad \u5c5e\u6027\u9ed8\u8ba4\u5728 backward \u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u81ea\u52a8\u91ca\u653e\uff0c\u4e0d\u80fd\u67e5\u770b\u3002 \u5982\u679c\u60f3\u4fdd\u7559\u5e76\u67e5\u770b\u975e\u53f6\u5b50\u8282\u70b9\u7684\u68af\u5ea6\uff0c\u53ef\u4ee5\u8c03\u7528 Tensor.retain_grad \u65b9\u6cd5\uff1a from math import pi n1 = flow . tensor ( pi / 2 , requires_grad = True ) n2 = flow . sin ( n1 ) n2 . retain_grad () n3 = flow . pow ( n2 , 2 ) n3 . backward () print ( n1 . grad ) print ( n2 . grad ) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u65e2\u6c42 \\(\\frac{\\partial n_3}{\\partial n_1}\\) \uff0c\u4e5f\u6c42 \\(\\frac{\\partial n_3}{\\partial n_2}\\) \u8f93\u51fa: tensor(-8.7423e-08, dtype=oneflow.float32) tensor(2., dtype=oneflow.float32)","title":"\u5bf9\u975e\u53f6\u5b50\u8282\u70b9\u6c42\u68af\u5ea6"},{"location":"basics/05_autograd.html#backward_1","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u8ba1\u7b97\u56fe\uff0c\u53ea\u80fd\u8c03\u7528 backward() \u4e00\u6b21\u3002\u6bd4\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\u4f1a\u62a5\u9519\uff1a n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward () n2 . backward () \u62a5\u9519\u4fe1\u606f\uff1a Maybe you try to backward through the node a second time. Specify retain_graph=True when calling .backward() or autograd.grad() the first time. \u5982\u679c\u60f3\u8981\u5728\u540c\u4e00\u4e2a\u8ba1\u7b97\u56fe\u4e0a\u8c03\u7528\u591a\u6b21 backward() \uff0c\u9700\u8981\u5728\u8c03\u7528\u65f6\u8bbe\u7f6e retain_graph=True \u3002 n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward ( retain_graph = True ) print ( n1 . grad ) n2 . backward () print ( n1 . grad ) \u8f93\u51fa\uff1a tensor(20., dtype=oneflow.float32) tensor(40., dtype=oneflow.float32) \u4ee5\u4e0a\u8f93\u51fa\u53ef\u77e5\uff0cOneFlow \u4f1a \u7d2f\u52a0 \u591a\u6b21 backward() \u8ba1\u7b97\u5f97\u5230\u7684\u68af\u5ea6\u3002 \u5982\u679c\u60f3\u6e05\u7a7a\u68af\u5ea6\uff0c\u53ef\u4ee5\u8c03\u7528 zero_ \u65b9\u6cd5\uff1a n1 = flow . tensor ( 10. , requires_grad = True ) n2 = flow . pow ( n1 , 2 ) n2 . backward ( retain_graph = True ) print ( n1 . grad ) n1 . grad . zero_ () n2 . backward () print ( n1 . grad ) \u8f93\u51fa\uff1a tensor(20., dtype=oneflow.float32) tensor(20., dtype=oneflow.float32)","title":"\u5bf9\u4e00\u4e2a\u8ba1\u7b97\u56fe\u591a\u6b21 backward()"},{"location":"basics/05_autograd.html#tensor","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cOneFlow \u4f1a tracing requires_grad \u4e3a True \u7684 Tensor\uff0c\u81ea\u52a8\u6c42\u68af\u5ea6\u3002 \u4e0d\u8fc7\u6709\u4e9b\u60c5\u51b5\u53ef\u80fd\u5e76\u4e0d\u9700\u8981 OneFlow \u8fd9\u6837\u505a\uff0c\u6bd4\u5982\u53ea\u662f\u60f3\u8bd5\u4e00\u8bd5\u524d\u5411\u63a8\u7406\u3002\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528 oneflow.no_grad \u6216 oneflow.Tensor.detach \u65b9\u6cd5\u8bbe\u7f6e\u3002 z = flow . matmul ( x , w ) + b print ( z . requires_grad ) with flow . no_grad (): z = flow . matmul ( x , w ) + b print ( z . requires_grad ) \u8f93\u51fa\uff1a True False z_det = z . detach () print ( z_det . requires_grad ) \u8f93\u51fa\uff1a False","title":"\u4e0d\u8bb0\u5f55\u67d0\u4e2a Tensor \u7684\u68af\u5ea6"},{"location":"basics/05_autograd.html#_4","text":"\u901a\u5e38\uff0c\u8c03\u7528 backward() \u65b9\u6cd5\u7684\u662f\u795e\u7ecf\u7f51\u7edc\u7684 loss\uff0c\u662f\u4e00\u4e2a\u6807\u91cf\u3002 \u4f46\u662f\uff0c\u5982\u679c\u4e0d\u662f\u6807\u91cf\uff0c\u5bf9 Tensor \u8c03\u7528 backward() \u65f6\u4f1a\u62a5\u9519\u3002 x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y . backward () \u62a5\u9519\u4fe1\u606f\uff1a Check failed: IsScalarTensor(*outputs.at(i)) Grad can be implicitly created only for scalar outputs \u800c\u5bf9 y \u6c42 sum \u540e\u53ef\u4ee5\u6c42\u68af\u5ea6\uff1a x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y = y . sum () y . backward () print ( x . grad ) \u8f93\u51fa\uff1a tensor([[3., 3.]], dtype=oneflow.float32) \u9519\u8bef\u539f\u56e0\u53ca\u89e3\u51b3\u65b9\u6cd5\u7684\u5206\u6790\u8bf7\u53c2\u8003\u4e0b\u6587 \u201c\u6269\u5c55\u9605\u8bfb\u201d \u90e8\u5206\u3002","title":"\u8f93\u51fa\u4e0d\u662f\u6807\u91cf\u65f6\u5982\u4f55\u6c42\u68af\u5ea6"},{"location":"basics/05_autograd.html#_5","text":"x \u5f20\u91cf\u4e2d\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u8bb0\u4f5c \\(x_1\\) \u4e0e \\(x_2\\) \uff0c y \u5f20\u91cf\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u8bb0\u4f5c \\(y_1\\) \u4e0e \\(y_2\\) \uff0c\u5e76\u4e14\u4e24\u8005\u7684\u5173\u7cfb\u662f\uff1a \\[ \\mathbf{x} = [x_1, x_2] \\] \\[ \\mathbf{y} = [y_1, y_2] = [3x_1+1, 3x_2+1] \\] \u6b64\u65f6\uff0c\u60f3\u76f4\u63a5\u6c42 \\(\\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}}\\) \\[ \\frac{\\partial \\mathbf{y}}{\\partial \\mathbf{x}} = \\frac{[3x_1+1, 3x_2+1]}{[x_1, x_2]} \\] \u5728\u6570\u5b66\u4e0a\u662f\u6ca1\u6709\u610f\u4e49\u7684\uff0c\u56e0\u6b64\u5f53\u7136\u5c31\u62a5\u9519\u4e86\u3002 \u5b9e\u9645\u4e0a\uff0c\u5f53\u7528\u6237\u8c03\u7528 y.backward() \u65f6\uff0c\u5176\u5b9e\u60f3\u8981\u7684\u7ed3\u679c\u901a\u5e38\u662f\uff1a \\[ [\\frac{\\partial y_1}{\\partial x_1}, \\frac{\\partial y_2}{\\partial x_2}] \\] \u5f53\u5bf9 y \u8fdb\u884c sum \u8fd0\u7b97\u540e\uff1a \\[ y = y_1 + y_2 = 3x_1 + 3x_2 + 2 \\] \u6b64\u65f6\uff0c\u8c03\u7528 backward() \u65f6\uff0c\u5bf9 \\(x_1\\) \u548c \\(x_2\\) \u53ef\u6c42\u68af\u5ea6\uff1a \\[ \\frac{\\partial y}{\\partial x_1} = \\frac{\\partial 3x_1 + 3x_2 + 2}{\\partial x_1} = 3 \\] \\[ \\frac{\\partial y}{\\partial x_2} = \\frac{\\partial 3x_1 + 3x_2 + 2}{\\partial x_2} = 3 \\] \u9664\u4e86\u4f7f\u7528 sum \u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u901a\u7528\u65b9\u6cd5\uff0c\u5373 Vector Jacobian Product(VJP) \u5b8c\u6210\u975e\u6807\u91cf\u7684\u6839\u8282\u70b9\u7684\u68af\u5ea6\u8ba1\u7b97\u3002\u4f9d\u7136\u7528\u4e0a\u6587\u7684\u4f8b\u5b50\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0cOneFlow \u4f1a\u6839\u636e\u8ba1\u7b97\u56fe\u751f\u6210\u96c5\u53ef\u6bd4\u77e9\u9635\uff1a \\[ J = \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & \\frac{\\partial y_1}{\\partial x_2}\\\\ \\frac{\\partial y_2}{\\partial x_1} & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix}\\\\ = \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & 0 \\\\ 0 & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix} \\] \u53ea\u9700\u63d0\u4f9b\u4e00\u4e2a\u4e0e \\(\\mathbf{y}\\) \u5927\u5c0f\u4e00\u81f4\u7684\u5411\u91cf \\(\\mathbf{v}\\) \uff0c\u5373\u53ef\u8ba1\u7b97 VJP\uff1a \\[ \\begin{bmatrix} v_1\\\\ v_2 \\end{bmatrix} \\times \\begin{pmatrix} \\frac{\\partial y_1}{\\partial x_1} & 0 \\\\ 0 & \\frac{\\partial y_2}{\\partial x_2} \\end{pmatrix}= \\begin{bmatrix} v_1 \\frac{\\partial y_1}{\\partial x_1}\\\\ v_2 \\frac{\\partial y_2}{\\partial x_2} \\end{bmatrix} \\] \u82e5\u5411\u91cf \\(\\mathbf{v}\\) \u662f\u53cd\u5411\u4f20\u64ad\u4e2d\u4e0a\u4e00\u5c42\u7684\u68af\u5ea6\uff0cVJP \u7684\u7ed3\u679c\u521a\u597d\u662f\u5f53\u524d\u5c42\u8981\u6c42\u7684\u68af\u5ea6\u3002 backward \u65b9\u6cd5\u662f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u5f20\u91cf\u505a\u53c2\u6570\u7684\uff0c\u8be5\u53c2\u6570\u5c31\u662f VJP \u4e2d\u7684 \\(\\mathbf{v}\\) \uff0c\u7406\u89e3\u4ee5\u4e0a\u9053\u7406\u540e\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u7684\u65b9\u5f0f\u5bf9\u5f20\u91cf\u6c42\u68af\u5ea6\uff1a x = flow . randn ( 1 , 2 , requires_grad = True ) y = 3 * x + 1 y . backward ( flow . ones_like ( y )) print ( x . grad ) \u8f93\u51fa\uff1a tensor([[3., 3.]], dtype=oneflow.float32) \u5916\u90e8\u94fe\u63a5 Automatic Differentiation","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"basics/06_optimization.html","text":"\u53cd\u5411\u4f20\u64ad\u4e0e optimizer \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u4f7f\u7528 OneFlow \u52a0\u8f7d\u6570\u636e \u3001 \u642d\u5efa\u6a21\u578b \u3001 \u81ea\u52a8\u8ba1\u7b97\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6 \uff0c\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u8bad\u7ec3\u6a21\u578b\u3002 \u5728 oneflow.optim \u4e2d\uff0c\u6709\u5404\u7c7b optimizer \uff0c\u5b83\u4eec\u53ef\u4ee5\u7b80\u5316\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad\u7684\u4ee3\u7801\u3002 \u672c\u6587\u5c06\u5148\u4ecb\u7ecd\u53cd\u5411\u4f20\u64ad\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u518d\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 oneflow.optim \u7c7b\u3002 numpy \u624b\u5de5\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad \u00b6 \u4e3a\u4e86\u8bfb\u8005\u66f4\u65b9\u4fbf\u7406\u89e3\u53cd\u5411\u4f20\u64ad\u4e0e\u81ea\u52a8\u6c42\u5bfc\u7684\u5173\u7cfb\uff0c\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4efd\u4ec5\u7528 numpy \u5b9e\u73b0\u7684\u7b80\u5355\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff1a import numpy as np ITER_COUNT = 500 LR = 0.01 # \u524d\u5411\u4f20\u64ad def forward ( x , w ): return np . matmul ( x , w ) # \u635f\u5931\u51fd\u6570 def loss ( y_pred , y ): return (( y_pred - y ) ** 2 ) . sum () # \u8ba1\u7b97\u68af\u5ea6 def gradient ( x , y , y_pred ): return np . matmul ( x . T , 2 * ( y_pred - y )) if __name__ == \"__main__\" : # \u8bad\u7ec3\u76ee\u6807: Y = 2*X1 + 3*X2 x = np . array ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = np . float32 ) y = np . array ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = np . float32 ) w = np . array ([[ 2 ], [ 1 ]], dtype = np . float32 ) # \u8bad\u7ec3\u5faa\u73af for i in range ( 0 , ITER_COUNT ): y_pred = forward ( x , w ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { 500 } loss: { l } \" ) grad = gradient ( x , y , y_pred ) w -= LR * grad print ( f \"w: { w } \" ) \u8f93\u51fa\uff1a 50/500 loss:0.0034512376878410578 100/500 loss:1.965487399502308e-06 150/500 loss:1.05524122773204e-09 200/500 loss:3.865352482534945e-12 250/500 loss:3.865352482534945e-12 300/500 loss:3.865352482534945e-12 350/500 loss:3.865352482534945e-12 400/500 loss:3.865352482534945e-12 450/500 loss:3.865352482534945e-12 500/500 loss:3.865352482534945e-12 w:[[2.000001 ] [2.9999993]] \u6ce8\u610f\u6211\u4eec\u9009\u62e9\u7684 loss \u51fd\u6570\u8868\u8fbe\u5f0f\u4e3a \\(\\sum (y_{p} - y)^2\\) \uff0c\u56e0\u6b64 loss \u5bf9\u53c2\u6570 w \u6c42\u68af\u5ea6\u7684\u4ee3\u7801\u4e3a\uff1a def gradient ( x , y , y_pred ): return np . matmul ( x . T , 2 * ( y_pred - y )) \u66f4\u65b0\u53c2\u6570\u91c7\u7528\u7684\u662f SGD \uff1a grad = gradient ( x , y , y_pred ) w -= LR * grad \u603b\u7ed3\u800c\u8a00\uff0c\u8bad\u7ec3\u4e2d\u7684\u4e00\u6b21\u5b8c\u6574\u8fed\u4ee3\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6a21\u578b\u6839\u636e\u8f93\u5165\u3001\u53c2\u6570\uff0c\u8ba1\u7b97\u5f97\u51fa\u9884\u6d4b\u503c ( y_pred ) \u8ba1\u7b97 loss\uff0c\u5373\u9884\u6d4b\u503c\u4e0e\u6807\u7b7e\u4e4b\u95f4\u7684\u8bef\u5dee \u6c42 loss \u5bf9\u53c2\u6570\u7684\u68af\u5ea6 \u66f4\u65b0\u53c2\u6570 \u5176\u4e2d 1~2 \u4e3a\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\uff1b3~4\u4e3a\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u3002 \u8d85\u53c2 Hyperparameters \u00b6 \u8d85\u53c2\u6570\u662f\u6709\u5173\u6a21\u578b\u8bad\u7ec3\u8bbe\u7f6e\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u5f71\u54cd\u5230\u6a21\u578b\u8bad\u7ec3\u7684\u6548\u7387\u548c\u7ed3\u679c\u3002\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 ITER_COUNT \u3001 LR \u5c31\u662f\u8d85\u53c2\u6570\u3002 \u4f7f\u7528 oneflow.optim \u4e2d\u7684\u4f18\u5316\u5668\u7c7b \u00b6 \u4f7f\u7528 oneflow.optim \u4e2d\u7684\u4f18\u5316\u5668\u7c7b\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u4f1a\u66f4\u7b80\u6d01\u65b9\u4fbf\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u3002 \u9996\u5148\uff0c\u5148\u51c6\u5907\u597d\u6570\u636e\u548c\u6a21\u578b\uff0c\u4f7f\u7528 Module \u7684\u4e00\u4e2a\u65b9\u4fbf\u4e4b\u5904\u5c31\u662f\uff0c\u53ef\u4ee5\u628a\u8d85\u53c2\u653e\u7f6e\u5728 Module \u4e2d\u4fbf\u4e8e\u7ba1\u7406\u3002 import oneflow as flow x = flow . tensor ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = flow . float32 ) y = flow . tensor ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = flow . float32 ) class MyLrModule ( flow . nn . Module ): def __init__ ( self , lr , iter_count ): super () . __init__ () self . w = flow . nn . Parameter ( flow . tensor ([[ 2 ], [ 1 ]], dtype = flow . float32 )) self . lr = lr self . iter_count = iter_count def forward ( self , x ): return flow . matmul ( x , self . w ) model = MyLrModule ( 0.01 , 500 ) loss \u51fd\u6570 \u00b6 \u7136\u540e\uff0c\u9009\u62e9\u597d loss \u51fd\u6570\uff0cOneFlow \u81ea\u5e26\u4e86\u591a\u79cd loss \u51fd\u6570\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u9009\u62e9 MSELoss \uff1a loss = flow . nn . MSELoss ( reduction = \"sum\" ) \u6784\u9020 optimizer \u00b6 \u53cd\u5411\u4f20\u64ad\u7684\u903b\u8f91\uff0c\u90fd\u88ab\u5c01\u88c5\u5728 optimizer \u4e2d\u3002\u6211\u4eec\u5728\u6b64\u9009\u62e9 SGD \uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9009\u62e9\u5176\u5b83\u7684\u4f18\u5316\u7b97\u6cd5\uff0c\u5982 Adam \u3001 AdamW \u7b49\u3002 optimizer = flow . optim . SGD ( model . parameters (), model . lr ) \u6784\u9020 optimizer \u65f6\uff0c\u5c06\u6a21\u578b\u53c2\u6570\u53ca learning rate \u4f20\u9012\u7ed9 SGD \u3002\u4e4b\u540e\u8c03\u7528 optimizer.step() \uff0c\u5728\u5176\u5185\u90e8\u5c31\u4f1a\u81ea\u52a8\u5b8c\u6210\u5bf9\u6a21\u578b\u53c2\u6570\u6c42\u68af\u5ea6\u3001\u5e76\u6309\u7167 SGD \u7b97\u6cd5\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002 \u8bad\u7ec3 \u00b6 \u4ee5\u4e0a\u51c6\u5907\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\uff1a for i in range ( 0 , model . iter_count ): y_pred = model ( x ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { model . iter_count } loss: { l . numpy () } \" ) optimizer . zero_grad () l . backward () optimizer . step () print ( f \" \\n w: { model . w } \" ) \u8f93\u51fa\uff1a 50/500 loss:0.003451163647696376 100/500 loss:1.965773662959691e-06 150/500 loss:1.103217073250562e-09 200/500 loss:3.865352482534945e-12 250/500 loss:3.865352482534945e-12 300/500 loss:3.865352482534945e-12 350/500 loss:3.865352482534945e-12 400/500 loss:3.865352482534945e-12 450/500 loss:3.865352482534945e-12 500/500 loss:3.865352482534945e-12 w: tensor([[2.], [3.]], dtype=oneflow.float32, grad_fn=<accumulate_grad>)","title":"\u53cd\u5411\u4f20\u64ad\u4e0e optimizer"},{"location":"basics/06_optimization.html#optimizer","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u638c\u63e1\u5982\u4f55\u4f7f\u7528 OneFlow \u52a0\u8f7d\u6570\u636e \u3001 \u642d\u5efa\u6a21\u578b \u3001 \u81ea\u52a8\u8ba1\u7b97\u6a21\u578b\u53c2\u6570\u7684\u68af\u5ea6 \uff0c\u5c06\u5b83\u4eec\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u8bad\u7ec3\u6a21\u578b\u3002 \u5728 oneflow.optim \u4e2d\uff0c\u6709\u5404\u7c7b optimizer \uff0c\u5b83\u4eec\u53ef\u4ee5\u7b80\u5316\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad\u7684\u4ee3\u7801\u3002 \u672c\u6587\u5c06\u5148\u4ecb\u7ecd\u53cd\u5411\u4f20\u64ad\u7684\u57fa\u672c\u6982\u5ff5\uff0c\u518d\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 oneflow.optim \u7c7b\u3002","title":"\u53cd\u5411\u4f20\u64ad\u4e0e optimizer"},{"location":"basics/06_optimization.html#numpy","text":"\u4e3a\u4e86\u8bfb\u8005\u66f4\u65b9\u4fbf\u7406\u89e3\u53cd\u5411\u4f20\u64ad\u4e0e\u81ea\u52a8\u6c42\u5bfc\u7684\u5173\u7cfb\uff0c\u5728\u8fd9\u91cc\u63d0\u4f9b\u4e86\u4e00\u4efd\u4ec5\u7528 numpy \u5b9e\u73b0\u7684\u7b80\u5355\u6a21\u578b\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff1a import numpy as np ITER_COUNT = 500 LR = 0.01 # \u524d\u5411\u4f20\u64ad def forward ( x , w ): return np . matmul ( x , w ) # \u635f\u5931\u51fd\u6570 def loss ( y_pred , y ): return (( y_pred - y ) ** 2 ) . sum () # \u8ba1\u7b97\u68af\u5ea6 def gradient ( x , y , y_pred ): return np . matmul ( x . T , 2 * ( y_pred - y )) if __name__ == \"__main__\" : # \u8bad\u7ec3\u76ee\u6807: Y = 2*X1 + 3*X2 x = np . array ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = np . float32 ) y = np . array ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = np . float32 ) w = np . array ([[ 2 ], [ 1 ]], dtype = np . float32 ) # \u8bad\u7ec3\u5faa\u73af for i in range ( 0 , ITER_COUNT ): y_pred = forward ( x , w ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { 500 } loss: { l } \" ) grad = gradient ( x , y , y_pred ) w -= LR * grad print ( f \"w: { w } \" ) \u8f93\u51fa\uff1a 50/500 loss:0.0034512376878410578 100/500 loss:1.965487399502308e-06 150/500 loss:1.05524122773204e-09 200/500 loss:3.865352482534945e-12 250/500 loss:3.865352482534945e-12 300/500 loss:3.865352482534945e-12 350/500 loss:3.865352482534945e-12 400/500 loss:3.865352482534945e-12 450/500 loss:3.865352482534945e-12 500/500 loss:3.865352482534945e-12 w:[[2.000001 ] [2.9999993]] \u6ce8\u610f\u6211\u4eec\u9009\u62e9\u7684 loss \u51fd\u6570\u8868\u8fbe\u5f0f\u4e3a \\(\\sum (y_{p} - y)^2\\) \uff0c\u56e0\u6b64 loss \u5bf9\u53c2\u6570 w \u6c42\u68af\u5ea6\u7684\u4ee3\u7801\u4e3a\uff1a def gradient ( x , y , y_pred ): return np . matmul ( x . T , 2 * ( y_pred - y )) \u66f4\u65b0\u53c2\u6570\u91c7\u7528\u7684\u662f SGD \uff1a grad = gradient ( x , y , y_pred ) w -= LR * grad \u603b\u7ed3\u800c\u8a00\uff0c\u8bad\u7ec3\u4e2d\u7684\u4e00\u6b21\u5b8c\u6574\u8fed\u4ee3\u5305\u62ec\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u6a21\u578b\u6839\u636e\u8f93\u5165\u3001\u53c2\u6570\uff0c\u8ba1\u7b97\u5f97\u51fa\u9884\u6d4b\u503c ( y_pred ) \u8ba1\u7b97 loss\uff0c\u5373\u9884\u6d4b\u503c\u4e0e\u6807\u7b7e\u4e4b\u95f4\u7684\u8bef\u5dee \u6c42 loss \u5bf9\u53c2\u6570\u7684\u68af\u5ea6 \u66f4\u65b0\u53c2\u6570 \u5176\u4e2d 1~2 \u4e3a\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\uff1b3~4\u4e3a\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u3002","title":"numpy \u624b\u5de5\u5b9e\u73b0\u53cd\u5411\u4f20\u64ad"},{"location":"basics/06_optimization.html#hyperparameters","text":"\u8d85\u53c2\u6570\u662f\u6709\u5173\u6a21\u578b\u8bad\u7ec3\u8bbe\u7f6e\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u5f71\u54cd\u5230\u6a21\u578b\u8bad\u7ec3\u7684\u6548\u7387\u548c\u7ed3\u679c\u3002\u5982\u4ee5\u4e0a\u4ee3\u7801\u4e2d\u7684 ITER_COUNT \u3001 LR \u5c31\u662f\u8d85\u53c2\u6570\u3002","title":"\u8d85\u53c2 Hyperparameters"},{"location":"basics/06_optimization.html#oneflowoptim","text":"\u4f7f\u7528 oneflow.optim \u4e2d\u7684\u4f18\u5316\u5668\u7c7b\u8fdb\u884c\u53cd\u5411\u4f20\u64ad\u4f1a\u66f4\u7b80\u6d01\u65b9\u4fbf\uff0c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u3002 \u9996\u5148\uff0c\u5148\u51c6\u5907\u597d\u6570\u636e\u548c\u6a21\u578b\uff0c\u4f7f\u7528 Module \u7684\u4e00\u4e2a\u65b9\u4fbf\u4e4b\u5904\u5c31\u662f\uff0c\u53ef\u4ee5\u628a\u8d85\u53c2\u653e\u7f6e\u5728 Module \u4e2d\u4fbf\u4e8e\u7ba1\u7406\u3002 import oneflow as flow x = flow . tensor ([[ 1 , 2 ], [ 2 , 3 ], [ 4 , 6 ], [ 3 , 1 ]], dtype = flow . float32 ) y = flow . tensor ([[ 8 ], [ 13 ], [ 26 ], [ 9 ]], dtype = flow . float32 ) class MyLrModule ( flow . nn . Module ): def __init__ ( self , lr , iter_count ): super () . __init__ () self . w = flow . nn . Parameter ( flow . tensor ([[ 2 ], [ 1 ]], dtype = flow . float32 )) self . lr = lr self . iter_count = iter_count def forward ( self , x ): return flow . matmul ( x , self . w ) model = MyLrModule ( 0.01 , 500 )","title":"\u4f7f\u7528 oneflow.optim \u4e2d\u7684\u4f18\u5316\u5668\u7c7b"},{"location":"basics/06_optimization.html#loss","text":"\u7136\u540e\uff0c\u9009\u62e9\u597d loss \u51fd\u6570\uff0cOneFlow \u81ea\u5e26\u4e86\u591a\u79cd loss \u51fd\u6570\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u9009\u62e9 MSELoss \uff1a loss = flow . nn . MSELoss ( reduction = \"sum\" )","title":"loss \u51fd\u6570"},{"location":"basics/06_optimization.html#optimizer_1","text":"\u53cd\u5411\u4f20\u64ad\u7684\u903b\u8f91\uff0c\u90fd\u88ab\u5c01\u88c5\u5728 optimizer \u4e2d\u3002\u6211\u4eec\u5728\u6b64\u9009\u62e9 SGD \uff0c\u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u9009\u62e9\u5176\u5b83\u7684\u4f18\u5316\u7b97\u6cd5\uff0c\u5982 Adam \u3001 AdamW \u7b49\u3002 optimizer = flow . optim . SGD ( model . parameters (), model . lr ) \u6784\u9020 optimizer \u65f6\uff0c\u5c06\u6a21\u578b\u53c2\u6570\u53ca learning rate \u4f20\u9012\u7ed9 SGD \u3002\u4e4b\u540e\u8c03\u7528 optimizer.step() \uff0c\u5728\u5176\u5185\u90e8\u5c31\u4f1a\u81ea\u52a8\u5b8c\u6210\u5bf9\u6a21\u578b\u53c2\u6570\u6c42\u68af\u5ea6\u3001\u5e76\u6309\u7167 SGD \u7b97\u6cd5\u66f4\u65b0\u6a21\u578b\u53c2\u6570\u3002","title":"\u6784\u9020 optimizer"},{"location":"basics/06_optimization.html#_1","text":"\u4ee5\u4e0a\u51c6\u5907\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u8bad\u7ec3\uff1a for i in range ( 0 , model . iter_count ): y_pred = model ( x ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { model . iter_count } loss: { l . numpy () } \" ) optimizer . zero_grad () l . backward () optimizer . step () print ( f \" \\n w: { model . w } \" ) \u8f93\u51fa\uff1a 50/500 loss:0.003451163647696376 100/500 loss:1.965773662959691e-06 150/500 loss:1.103217073250562e-09 200/500 loss:3.865352482534945e-12 250/500 loss:3.865352482534945e-12 300/500 loss:3.865352482534945e-12 350/500 loss:3.865352482534945e-12 400/500 loss:3.865352482534945e-12 450/500 loss:3.865352482534945e-12 500/500 loss:3.865352482534945e-12 w: tensor([[2.], [3.]], dtype=oneflow.float32, grad_fn=<accumulate_grad>)","title":"\u8bad\u7ec3"},{"location":"basics/07_model_load_save.html","text":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58 \u00b6 \u5bf9\u4e8e\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58\uff0c\u5e38\u7528\u7684\u573a\u666f\u6709\uff1a \u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u7ee7\u7eed\u8bad\u7ec3 \u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u540e\u7eed\u76f4\u63a5\u7528\u4e8e\u9884\u6d4b \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\uff0c\u5982\u4f55\u4f7f\u7528 save \u548c load API \u4fdd\u5b58\u6a21\u578b\u3001\u52a0\u8f7d\u6a21\u578b\u3002 \u540c\u65f6\u4e5f\u4f1a\u5c55\u793a\uff0c\u5982\u4f55\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5b8c\u6210\u9884\u6d4b\u4efb\u52a1\u3002 \u6a21\u578b\u53c2\u6570\u7684\u83b7\u53d6\u4e0e\u52a0\u8f7d \u00b6 OneFlow \u9884\u5148\u63d0\u4f9b\u7684\u5404\u79cd Module \u6216\u8005\u7528\u6237\u81ea\u5b9a\u4e49\u7684 Module \uff0c\u90fd\u63d0\u4f9b\u4e86 state_dict \u65b9\u6cd5\u83b7\u53d6\u6a21\u578b\u6240\u6709\u7684\u53c2\u6570\uff0c\u5b83\u662f\u4ee5 \u201c\u53c2\u6570\u540d-\u53c2\u6570\u503c\u201d \u5f62\u5f0f\u5b58\u653e\u7684\u5b57\u5178\u3002 import oneflow as flow m = flow . nn . Linear ( 2 , 3 ) print ( m . state_dict ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06\u663e\u5f0f\u6784\u9020\u597d\u7684 Linear Module \u5bf9\u8c61 m \u4e2d\u7684\u53c2\u6570\u6253\u5370\u51fa\u6765\uff1a OrderedDict([('weight', tensor([[-0.4297, -0.3571], [ 0.6797, -0.5295], [ 0.4918, -0.3039]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([ 0.0977, 0.1219, -0.5372], dtype=oneflow.float32, requires_grad=True))]) \u901a\u8fc7\u8c03\u7528 Module \u7684 load_state_dict \u65b9\u6cd5\uff0c\u53ef\u4ee5\u52a0\u8f7d\u53c2\u6570\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a myparams = { \"weight\" : flow . ones ( 3 , 2 ), \"bias\" : flow . zeros ( 3 )} m . load_state_dict ( myparams ) print ( m . state_dict ()) \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u5178\u4e2d\u7684\u5f20\u91cf\uff0c\u5df2\u7ecf\u88ab\u52a0\u8f7d\u5230 m Module \u4e2d\uff1a OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0.], dtype=oneflow.float32, requires_grad=True))]) \u6a21\u578b\u4fdd\u5b58 \u00b6 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.save \u65b9\u6cd5\u4fdd\u5b58\u6a21\u578b\u3002 flow . save ( m . state_dict (), \"./model\" ) \u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684 Module \u7684\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4fdd\u5b58\u8def\u5f84\u3002\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06 m Module \u5bf9\u8c61\u7684\u53c2\u6570\uff0c\u4fdd\u5b58\u5230\u4e86 model \u6587\u4ef6\u4e0b\u3002 \u6a21\u578b\u52a0\u8f7d \u00b6 \u4f7f\u7528 oneflow.load \u53ef\u4ee5\u5c06\u53c2\u6570\u4ece\u6307\u5b9a\u7684\u78c1\u76d8\u8def\u5f84\u52a0\u8f7d\u53c2\u6570\u5230\u5185\u5b58\uff0c\u5f97\u5230\u5b58\u6709\u53c2\u6570\u7684\u5b57\u5178\u3002 params = flow . load ( \"./model\" ) \u7136\u540e\uff0c\u518d\u501f\u52a9\u4e0a\u6587\u4ecb\u7ecd\u7684 load_state_dict \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b57\u5178\u52a0\u8f7d\u5230\u6a21\u578b\u4e2d\uff1a m2 = flow . nn . Linear ( 2 , 3 ) m2 . load_state_dict ( params ) print ( m2 . state_dict ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u65b0\u6784\u5efa\u4e86\u4e00\u4e2a Linear Module \u5bf9\u8c61 m2 \uff0c\u5e76\u4e14\u5c06\u4ece\u4e0a\u6587\u4fdd\u5b58\u5f97\u5230\u7684\u7684\u53c2\u6570\u52a0\u8f7d\u5230 m2 \u4e0a\u3002\u5f97\u5230\u8f93\u51fa\uff1a OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0.], dtype=oneflow.float32, requires_grad=True))]) \u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u9884\u6d4b \u00b6 OneFlow \u662f\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d PyTorch \u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u7528\u4e8e\u9884\u6d4b\u7684\u3002 \u53ea\u8981\u6a21\u578b\u7684\u4f5c\u8005\u80fd\u591f\u786e\u4fdd\u642d\u5efa\u7684\u6a21\u578b\u7684\u7ed3\u6784\u3001\u53c2\u6570\u540d\u4e0e PyTorch \u6a21\u578b\u5bf9\u9f50\u3002 \u76f8\u5173\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 OneFlow Models \u4ed3\u5e93\u7684\u8fd9\u4e2a README \u67e5\u770b\u3002 \u4ee5\u4e0b\u547d\u4ee4\u884c\uff0c\u53ef\u4ee5\u4f53\u9a8c\u5982\u4f55\u4f7f\u7528\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u8fdb\u884c\u9884\u6d4b\uff1a git clone https://github.com/Oneflow-Inc/models.git cd models/Vision/classification/image/shufflenetv2/ bash infer.sh","title":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58"},{"location":"basics/07_model_load_save.html#_1","text":"\u5bf9\u4e8e\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58\uff0c\u5e38\u7528\u7684\u573a\u666f\u6709\uff1a \u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e0b\u6b21\u7ee7\u7eed\u8bad\u7ec3 \u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u4fdd\u5b58\uff0c\u65b9\u4fbf\u540e\u7eed\u76f4\u63a5\u7528\u4e8e\u9884\u6d4b \u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\uff0c\u5982\u4f55\u4f7f\u7528 save \u548c load API \u4fdd\u5b58\u6a21\u578b\u3001\u52a0\u8f7d\u6a21\u578b\u3002 \u540c\u65f6\u4e5f\u4f1a\u5c55\u793a\uff0c\u5982\u4f55\u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5b8c\u6210\u9884\u6d4b\u4efb\u52a1\u3002","title":"\u6a21\u578b\u7684\u52a0\u8f7d\u4e0e\u4fdd\u5b58"},{"location":"basics/07_model_load_save.html#_2","text":"OneFlow \u9884\u5148\u63d0\u4f9b\u7684\u5404\u79cd Module \u6216\u8005\u7528\u6237\u81ea\u5b9a\u4e49\u7684 Module \uff0c\u90fd\u63d0\u4f9b\u4e86 state_dict \u65b9\u6cd5\u83b7\u53d6\u6a21\u578b\u6240\u6709\u7684\u53c2\u6570\uff0c\u5b83\u662f\u4ee5 \u201c\u53c2\u6570\u540d-\u53c2\u6570\u503c\u201d \u5f62\u5f0f\u5b58\u653e\u7684\u5b57\u5178\u3002 import oneflow as flow m = flow . nn . Linear ( 2 , 3 ) print ( m . state_dict ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06\u663e\u5f0f\u6784\u9020\u597d\u7684 Linear Module \u5bf9\u8c61 m \u4e2d\u7684\u53c2\u6570\u6253\u5370\u51fa\u6765\uff1a OrderedDict([('weight', tensor([[-0.4297, -0.3571], [ 0.6797, -0.5295], [ 0.4918, -0.3039]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([ 0.0977, 0.1219, -0.5372], dtype=oneflow.float32, requires_grad=True))]) \u901a\u8fc7\u8c03\u7528 Module \u7684 load_state_dict \u65b9\u6cd5\uff0c\u53ef\u4ee5\u52a0\u8f7d\u53c2\u6570\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\uff1a myparams = { \"weight\" : flow . ones ( 3 , 2 ), \"bias\" : flow . zeros ( 3 )} m . load_state_dict ( myparams ) print ( m . state_dict ()) \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u5178\u4e2d\u7684\u5f20\u91cf\uff0c\u5df2\u7ecf\u88ab\u52a0\u8f7d\u5230 m Module \u4e2d\uff1a OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0.], dtype=oneflow.float32, requires_grad=True))])","title":"\u6a21\u578b\u53c2\u6570\u7684\u83b7\u53d6\u4e0e\u52a0\u8f7d"},{"location":"basics/07_model_load_save.html#_3","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 oneflow.save \u65b9\u6cd5\u4fdd\u5b58\u6a21\u578b\u3002 flow . save ( m . state_dict (), \"./model\" ) \u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684 Module \u7684\u53c2\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u4fdd\u5b58\u8def\u5f84\u3002\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06 m Module \u5bf9\u8c61\u7684\u53c2\u6570\uff0c\u4fdd\u5b58\u5230\u4e86 model \u6587\u4ef6\u4e0b\u3002","title":"\u6a21\u578b\u4fdd\u5b58"},{"location":"basics/07_model_load_save.html#_4","text":"\u4f7f\u7528 oneflow.load \u53ef\u4ee5\u5c06\u53c2\u6570\u4ece\u6307\u5b9a\u7684\u78c1\u76d8\u8def\u5f84\u52a0\u8f7d\u53c2\u6570\u5230\u5185\u5b58\uff0c\u5f97\u5230\u5b58\u6709\u53c2\u6570\u7684\u5b57\u5178\u3002 params = flow . load ( \"./model\" ) \u7136\u540e\uff0c\u518d\u501f\u52a9\u4e0a\u6587\u4ecb\u7ecd\u7684 load_state_dict \u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b57\u5178\u52a0\u8f7d\u5230\u6a21\u578b\u4e2d\uff1a m2 = flow . nn . Linear ( 2 , 3 ) m2 . load_state_dict ( params ) print ( m2 . state_dict ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u65b0\u6784\u5efa\u4e86\u4e00\u4e2a Linear Module \u5bf9\u8c61 m2 \uff0c\u5e76\u4e14\u5c06\u4ece\u4e0a\u6587\u4fdd\u5b58\u5f97\u5230\u7684\u7684\u53c2\u6570\u52a0\u8f7d\u5230 m2 \u4e0a\u3002\u5f97\u5230\u8f93\u51fa\uff1a OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.]], dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0.], dtype=oneflow.float32, requires_grad=True))])","title":"\u6a21\u578b\u52a0\u8f7d"},{"location":"basics/07_model_load_save.html#_5","text":"OneFlow \u662f\u53ef\u4ee5\u76f4\u63a5\u52a0\u8f7d PyTorch \u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u7528\u4e8e\u9884\u6d4b\u7684\u3002 \u53ea\u8981\u6a21\u578b\u7684\u4f5c\u8005\u80fd\u591f\u786e\u4fdd\u642d\u5efa\u7684\u6a21\u578b\u7684\u7ed3\u6784\u3001\u53c2\u6570\u540d\u4e0e PyTorch \u6a21\u578b\u5bf9\u9f50\u3002 \u76f8\u5173\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728 OneFlow Models \u4ed3\u5e93\u7684\u8fd9\u4e2a README \u67e5\u770b\u3002 \u4ee5\u4e0b\u547d\u4ee4\u884c\uff0c\u53ef\u4ee5\u4f53\u9a8c\u5982\u4f55\u4f7f\u7528\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u8fdb\u884c\u9884\u6d4b\uff1a git clone https://github.com/Oneflow-Inc/models.git cd models/Vision/classification/image/shufflenetv2/ bash infer.sh","title":"\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u9884\u6d4b"},{"location":"basics/08_nn_graph.html","text":"\u9759\u6001\u56fe\u6a21\u5757 nn.Graph \u00b6 \u76ee\u524d\uff0c\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u6a21\u578b\u7684\u8fd0\u884c\u65b9\u5f0f\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5373 \u52a8\u6001\u56fe \u4e0e \u9759\u6001\u56fe \uff0c\u5728 OneFlow \u4e2d\uff0c\u4e5f\u88ab\u4e60\u60ef\u79f0\u4e3a Eager \u6a21\u5f0f \u548c Graph \u6a21\u5f0f \u3002 \u8fd9\u4e24\u79cd\u65b9\u5f0f\u5404\u6709\u4f18\u7f3a\u70b9\uff0cOneFlow \u5bf9\u4e24\u79cd\u65b9\u5f0f\u5747\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f Eager \u6a21\u5f0f\u3002\u5982\u679c\u4f60\u662f\u6309\u987a\u5e8f\u9605\u8bfb\u672c\u57fa\u7840\u4e13\u9898\u7684\u6559\u7a0b\uff0c\u90a3\u4e48\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u63a5\u89e6\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662f Eager \u6a21\u5f0f\u7684\u4ee3\u7801\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u52a8\u6001\u56fe\u66f4\u6613\u7528\uff0c\u9759\u6001\u56fe\u6027\u80fd\u66f4\u5177\u4f18\u52bf\u3002OneFlow \u63d0\u4f9b\u7684 nn.Graph \u6a21\u5757\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7528\u7c7b\u4f3c Eager \u7684\u7f16\u7a0b\u4e60\u60ef\uff0c\u6784\u5efa\u9759\u6001\u56fe\u5e76\u8bad\u7ec3\u6a21\u578b\u3002 OneFlow \u7684 Eager \u6a21\u5f0f \u00b6 OneFlow \u9ed8\u8ba4\u4ee5 Eager \u6a21\u5f0f\u8fd0\u884c\u3002 \u4ee5\u4e0b\u811a\u672c\uff0c\u4f7f\u7528 CIFAR10 \u6570\u636e\u96c6\u8bad\u7ec3 mobilenet_v2 \u6a21\u578b\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/cifar/cifar-10-python.tar.gz\" , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model . train () loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u8f93\u51fa\uff1a loss: 6.921304 [ 0/50000] loss: 6.824391 [ 320/50000] loss: 6.688272 [ 640/50000] loss: 6.644351 [ 960/50000] ... OneFlow \u7684 Graph \u6a21\u5f0f \u00b6 \u81ea\u5b9a\u4e49\u4e00\u4e2a Graph \u00b6 OneFlow \u63d0\u4f9b\u4e86 nn.Graph \u57fa\u7c7b\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u5b83\uff0c\u81ea\u5b9a\u4e49 Graph \u7c7b\u3002 import oneflow as flow import oneflow.nn as nn class ModuleMyLinear ( nn . Module ): def __init__ ( self , in_features , out_features ): super () . __init__ () self . weight = nn . Parameter ( flow . randn ( in_features , out_features )) self . bias = nn . Parameter ( flow . randn ( out_features )) def forward ( self , input ): return flow . matmul ( input , self . weight ) + self . bias linear_model = ModuleMyLinear ( 4 , 3 ) class GraphMyLinear ( nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = linear_model def build ( self , input ): return self . model ( input ) \u4ee5\u4e0a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5305\u542b\u4e86\u81ea\u5b9a\u4e49 Graph \u6240\u9700\u7684\u91cd\u8981\u6b65\u9aa4\uff1a \u7ee7\u627f nn.Graph \u5728 __init__ \u6700\u5f00\u59cb\u8c03\u7528 super().__init__() \uff0c\u8ba9 OneFlow \u5b8c\u6210 Graph \u5fc5\u8981\u7684\u521d\u59cb\u5316\u5de5\u4f5c \u5728 __init__ \u4e2d\u590d\u7528 Eager \u6a21\u5f0f\u4e0b\u7684 nn.Module \u5bf9\u8c61\uff08 self.model = model \uff09 \u5728 build \u4e2d\u63cf\u8ff0\u8ba1\u7b97\u8fc7\u7a0b \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u5b9e\u4f8b\u5316\u5e76\u8c03\u7528 Graph\u3002 graph_mylinear = GraphMyLinear () input = flow . randn ( 1 , 4 ) out = graph_mylinear ( input ) print ( out ) \u8f93\u51fa\uff1a tensor([[-0.3298, -3.7907, 0.1661]], dtype=oneflow.float32) \u6ce8\u610f\uff0cGraph \u4e0e Module \u7c7b\u4f3c\uff0c\u5bf9\u8c61\u672c\u8eab\u662f\u53ef\u8c03\u7528\u7684\uff0c\u5e76\u4e14 \u4e0d\u63a8\u8350 \u663e\u5f0f\u8c03\u7528 build \u65b9\u6cd5\u3002Graph \u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684 Module\u3002\u56e0\u6b64\uff0c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003 \u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u5185\u5bb9\u642d\u5efa\u597d\u795e\u7ecf\u7f51\u7edc\uff0c\u7136\u540e\u5728 Graph \u7684 __init__ \u4e2d\u5c06 Module \u8bbe\u7f6e\u4e3a Graph \u7684\u6210\u5458\u5373\u53ef\u3002 \u6bd4\u5982\uff0c\u76f4\u63a5\u4f7f\u7528\u4e4b\u524d\u5b9a\u4e49\u597d\u7684 linear_model \uff0c\u4f5c\u4e3a\u7f51\u7edc\u7ed3\u6784\uff1a class ModelGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = linear_model def build ( self , x , y ): y_pred = self . model ( x ) return loss model_graph = ModelGraph () \u4e0e Module \u7684\u663e\u8457\u533a\u522b\u5728\u4e8e\uff0cGraph \u4f7f\u7528 build \u800c\u4e0d\u662f forward \u65b9\u6cd5\u63cf\u8ff0\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u8fd9\u662f\u56e0\u4e3a build \u4e0d\u4ec5\u53ef\u4ee5\u5305\u542b\u524d\u5411\u8ba1\u7b97\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e loss \uff0c\u4f18\u5316\u5668\u7b49\uff0c\u5728\u4e0b\u6587\u4f1a\u770b\u5230\u4f7f\u7528 Graph \u505a\u8bad\u7ec3\u7684\u5b9e\u9645\u4f8b\u5b50\u3002 \u4f7f\u7528 Graph \u505a\u9884\u6d4b \u00b6 \u4ee5\u4e0b Graph \u505a\u9884\u6d4b\u7684\u4f8b\u5b50\uff0c\u76f4\u63a5\u4f7f\u7528\u4e86\u672c\u6587\u5f00\u59cb Eager \u6a21\u5f0f\u8bad\u7ec3\u597d\u7684 module\u3002 class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model def build ( self , x ): return self . model ( x ) graph_mobile_net_v2 = GraphMobileNetV2 () x , _ = next ( iter ( train_dataloader )) x = x . to ( DEVICE ) y_pred = graph_mobile_net_v2 ( x ) \u4f7f\u7528 Graph \u505a\u8bad\u7ec3 \u00b6 \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Graph \u505a\u8bad\u7ec3\u3002\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True , drop_last = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model . train () loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model self . loss_fn = loss_fn self . add_optimizer ( optimizer ) def build ( self , x , y ): y_pred = self . model ( x ) loss = self . loss_fn ( y_pred , y ) loss . backward () return loss graph_mobile_net_v2 = GraphMobileNetV2 () # graph_mobile_net_v2.debug() for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) loss = graph_mobile_net_v2 ( x , y ) current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u4e0e Graph \u505a\u9884\u6d4b\u7684\u4ee3\u7801\u505a\u6bd4\u8f83\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u6709\u4ee5\u4e0b\u51e0\u70b9\u662f Graph \u505a\u8bad\u7ec3\u65f6\u7279\u6709\u7684\uff1a # Optimizer optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) # (1) # The MobileNetV2 Graph class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): # ... self . add_optimizer ( optimizer ) # (2) def build ( self , x , y ): # ... loss . backward () # (3) # ... \u6784\u9020 optimizer \u5bf9\u8c61\uff0c\u8fd9\u70b9\u548c \u53cd\u5411\u4f20\u64ad\u4e0e optimizer \u4ecb\u7ecd\u7684 Eager \u6a21\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5\u662f\u5b8c\u5168\u4e00\u81f4\u7684\u3002 \u5728 Graph \u7c7b\u7684 __init__ \u4e2d\uff0c\u8c03\u7528 self.add_optimizer \u65b9\u6cd5\uff0c\u5c06\u4e0a\u4e00\u6b65\u6784\u9020\u7684 optimizer \u5bf9\u8c61\u6dfb\u52a0\u8fdb Graph \u4e2d\u3002 \u5728 Graph \u7c7b\u7684 build \u4e2d\u8c03\u7528 backward \uff0c\u89e6\u53d1\u53cd\u5411\u4f20\u64ad Graph \u8c03\u8bd5 \u00b6 \u5f53\u524d\u8f93\u51fa Graph \u7684\u8c03\u8bd5\u4fe1\u606f\u5171\u6709\u4e24\u79cd\u65b9\u5f0f\u3002 \u7b2c\u4e00\u79cd \u53ef\u4ee5\u8c03\u7528 print \u6253\u5370 Graph \u5bf9\u8c61\uff0c\u8f93\u51fa Graph \u5bf9\u8c61\u7684\u4fe1\u606f\u3002 print ( graph_mobile_net_v2 ) \u6839\u636e Graph \u5bf9\u8c61\u662f\u5426 \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7 \uff0c\u8f93\u51fa\u7684\u6548\u679c\u7565\u6709\u4e0d\u540c\uff1a \u5982\u679c Graph \u5bf9\u8c61\u8c03\u7528\u524d print \uff0c\u8f93\u51fa\u7684\u662f\u7f51\u7edc\u7ed3\u6784\u7684\u4fe1\u606f\u3002 \u4ee5\u4e0a graph_mobile_net_v2 \u8c03\u7528\u524d print \u6548\u679c\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2): ( (CONFIG:config:GraphConfig(training=True, )) (MODULE:model:MobileNetV2()): ( (MODULE:model.features:Sequential()): ( (MODULE:model.features.0:ConvBNActivation()): ( (MODULE:model.features.0.0:Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)): ( (PARAMETER:model.features.0.0.weight:tensor(..., device='cuda:0', size=(32, 3, 3, 3), dtype=oneflow.float32, requires_grad=True)): () ) ... (MODULE:model.classifer:Sequential()): ( (MODULE:model.classifer.0:Dropout(p=0.2, inplace=False)): () (MODULE:model.classifer.1:Linear(in_features=1280, out_features=10, bias=True)): ( (PARAMETER:model.classifer.1.weight:tensor(..., size=(10, 1280), dtype=oneflow.float32, requires_grad=True)): () (PARAMETER:model.classifer.1.bias:tensor(..., size=(10,), dtype=oneflow.float32, requires_grad=True)): () ) ) ) (MODULE:loss_fn:CrossEntropyLoss()): () ) \u5728\u4e0a\u9762\u7684\u8c03\u8bd5\u4fe1\u606f\u4e2d\uff0c\u8868\u793a\u57fa\u4e8e Sequential \u6a21\u578b\uff0c\u7f51\u7edc\u4e2d\u81ea\u5b9a\u4e49\u4e86 ConvBNActivation (\u5bf9\u5e94 MBConv \u6a21\u5757)\u3001\u5377\u79ef\u5c42(\u5305\u62ec\u8be6\u7ec6\u7684 channel \u3001 kernel_size \u548c stride \u7b49\u53c2\u6570\u4fe1\u606f)\u3001 Dropout \u548c\u5168\u8fde\u63a5\u5c42\u7b49\u7ed3\u6784\u3002 \u5982\u679c\u662f Graph \u5bf9\u8c61\u8c03\u7528\u540e print \uff0c\u9664\u4e86\u7f51\u7edc\u7684\u7ed3\u6784\u4fe1\u606f\u5916\uff0c\u8fd8\u4f1a\u6253\u5370\u8f93\u5165\u8f93\u51fa\u5f20\u91cf\u7684\u4fe1\u606f\uff0c\u6709\u5982\u4e0b\u7c7b\u4f3c\u6548\u679c\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2): ( (CONFIG:config:GraphConfig(training=True, )) (INPUT:_GraphMobileNetV2_0-input_0:tensor(..., device='cuda:0', size=(64, 3, 32, 32), dtype=oneflow.float32)) (INPUT:_GraphMobileNetV2_0-input_1:tensor(..., device='cuda:0', size=(64,), dtype=oneflow.int64)) (MODULE:model:MobileNetV2()): ( (INPUT:_model-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features:Sequential()): ( (INPUT:_model.features-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features.0:ConvBNActivation()): ( (INPUT:_model.features.0-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features.0.0:Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)): ( (INPUT:_model.features.0.0-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (PARAMETER:model.features.0.0.weight:tensor(..., device='cuda:0', size=(32, 3, 3, 3), dtype=oneflow.float32, requires_grad=True)): () (OUTPUT:_model.features.0.0-output_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 32, 16, 16), dtype=oneflow.float32)) ) ... \u7b2c\u4e8c\u79cd \u65b9\u5f0f\u662f\u8c03\u7528 Graph \u5bf9\u8c61\u7684 debug \u65b9\u6cd5\uff0c\u5c31\u5f00\u542f\u4e86 Graph \u7684\u8c03\u8bd5\u6a21\u5f0f\u3002 graph_mobile_net_v2 . debug ( v_level = 1 ) # v_level \u53c2\u6570\u9ed8\u8ba4\u503c\u4e3a 0 \u53ef\u4ee5\u7b80\u5199\u4e3a\uff1a graph_mobile_net_v2 . debug ( 1 ) OneFlow \u5728\u7f16\u8bd1\u751f\u6210\u8ba1\u7b97\u56fe\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\uff0c\u6bd4\u5982\uff0c\u5c06\u4e0a\u9762\u4f8b\u5b50\u4ee3\u7801\u4e2d graph_mobile_net_v2.debug() \u7684\u6ce8\u91ca\u53bb\u6389\uff0c\u5c06\u5728\u63a7\u5236\u53f0\u4e0a\u8f93\u51fa\u5982\u4e0b\u8f93\u51fa\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) end building graph. (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) start compiling plan and init graph runtime. (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) end compiling plan and init graph rumtime. \u4f7f\u7528 debug \u7684\u597d\u5904\u5728\u4e8e\uff0c\u8c03\u8bd5\u4fe1\u606f\u662f \u8fb9\u6784\u56fe\u3001\u8fb9\u8f93\u51fa \u7684\uff0c\u8fd9\u6837\u5982\u679c\u6784\u56fe\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\uff0c\u5bb9\u6613\u53d1\u73b0\u6784\u56fe\u65f6\u7684\u95ee\u9898\u3002 \u5f53\u524d\u53ef\u4ee5\u4f7f\u7528 v_level \u9009\u62e9\u8be6\u7ec6\u8c03\u8bd5\u4fe1\u606f\u7ea7\u522b\uff0c\u9ed8\u8ba4\u7ea7\u522b\u4e3a 0\uff0c\u6700\u5927\u7ea7\u522b\u4e3a 3\u3002 v_level=0 \u65f6\uff0c\u53ea\u8f93\u51fa\u6700\u57fa\u7840\u7684\u8b66\u544a\u548c\u6784\u56fe\u9636\u6bb5\u4fe1\u606f\uff0c\u5982\u6784\u56fe\u65f6\u95f4\u3002 v_level=1 \u65f6\uff0c\u5c06\u989d\u5916\u6253\u5370\u6bcf\u4e2a nn.Module \u7684\u6784\u56fe\u4fe1\u606f\uff0c\u5177\u4f53\u5185\u5bb9\u5728\u4e0b\u9762\u7684\u8868\u683c\u4e2d\u4ecb\u7ecd\u3002 v_level=2 \u65f6\uff0c\u5728\u6784\u56fe\u9636\u6bb5\uff0c\u5c06\u989d\u5916\u6253\u5370\u6bcf\u4e2a Op \u7684\u521b\u5efa\u4fe1\u606f\uff0c\u5305\u62ec\u540d\u79f0\u3001\u8f93\u5165\u5185\u5bb9\u3001\u8bbe\u5907\u548c SBP \u4fe1\u606f\u7b49\u3002 v_level=3 \u65f6\uff0c\u5c06\u989d\u5916\u6253\u5370\u6bcf\u4e2a Op \u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u5982\u4e0e\u4ee3\u7801\u4f4d\u7f6e\u6709\u5173\u7684\u4fe1\u606f\uff0c\u65b9\u4fbf\u5b9a\u4f4d\u4ee3\u7801\u95ee\u9898\u3002 \u9664\u4e86\u8bbe\u7f6e v_level \uff0cGraph \u7684 debug \u8fd8\u63d0\u4f9b\u4e86\u8bbe\u7f6e\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u7684\u8bbe\u5907\uff08\u591a\u5361\u6761\u4ef6\u4e0b\uff09\u3001\u6307\u5b9a\u8c03\u8bd5\u4fe1\u606f\u7684\u6700\u5927 Python \u5806\u6808\u6df1\u5ea6\u3001\u6253\u5370\u7cfb\u7edf\u7b97\u5b50\u4f4d\u7f6e\u3001\u6253\u5370\u7528\u6237\u4ee3\u7801\u4f4d\u7f6e\u548c\u6e90\u4ee3\u7801\u7684\u529f\u80fd\u3002\u4f7f\u7528\u65f6\u5177\u4f53\u89c1\u53c2\u6570\u89c1\uff1a nn.Graph.debug \u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u5f00\u53d1\u8005\u5bf9 Graph \u5bf9\u8c61\u4e0b\u7684\u7c7b\u578b\u6709\u66f4\u6e05\u6670\u7684\u8ba4\u77e5\uff0c\u4e0b\u9762\u5bf9 debug \u8f93\u51fa\u7684\u5185\u5bb9\u8fdb\u884c\u5206\u6790\uff0c\u57fa\u672c\u5305\u62ec GRAPH \u3001 CONFIG \u3001 MODULE \u3001 PARAMETER \u3001 BUFFER \u3001 OPERATOR \u3001 INPUT \u548c OUTPUT \u516b\u4e2a\u7c7b\u522b\u7684\u6807\u7b7e\u3002 Name Info Example GRAPH \u7528\u6237\u6240\u5b9a\u4e49\u7684 Graph \u4fe1\u606f\uff0c\u4f9d\u6b21\u662f\u7c7b\u578b\uff1a\u540d\u5b57\uff1a\u6784\u9020\u65b9\u6cd5\u3002 (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) CONFIG Graph \u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5982\u662f\u5426\u5904\u4e8e\u8bad\u7ec3\u6a21\u5f0f\uff0c training=True \u8868\u793a Graph \u5904\u4e8e\u8bad\u7ec3\u6a21\u5f0f\uff0c\u5982\u679c\u5728 Graph \u7684\u9884\u6d4b\u6a21\u5f0f\uff0c\u5219\u5bf9\u5e94 training=False \u3002 (CONFIG:config:GraphConfig(training=True, ) MODULE \u5bf9\u5e94 nn.Module \uff0cMODULE \u53ef\u4ee5\u5728 Graph \u6807\u7b7e\u4e0b\u5c42\uff0c\u540c\u65f6\uff0c\u591a\u4e2a MODULE \u4e4b\u95f4\u4e5f\u5b58\u5728\u5c42\u7ea7\u5173\u7cfb\u3002 (MODULE:model:MobileNetV2()) \uff0c\u5176\u4e2d\uff0c MobileNetV2 \u4e3a\u7528\u6237\u590d\u7528 Eager \u6a21\u5f0f\u4e0b\u7684 Module \u7c7b\u540d\u3002 PARAMETER \u7ed9\u51fa\u4e86\u66f4\u6e05\u6670\u7684 weight \u548c bias \u4fe1\u606f\u3002\u6b64\u5916\uff0c\u5728\u6784\u56fe\u65f6\uff0ctensor \u7684\u6570\u636e\u5185\u5bb9\u4e0d\u592a\u91cd\u8981\uff0c\u6240\u4ee5\u53ea\u5c55\u793a\u4e86 tensor \u7684\u5143\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5bf9\u6784\u5efa\u7f51\u7edc\u66f4\u4e3a\u91cd\u8981\u3002 (PARAMETER:model.features.0.1.weight:tensor(..., device='cuda:0', size=(32,), dtype=oneflow.float32, requires_grad=True)) BUFFER \u5728\u8bad\u7ec3\u65f6\u4ea7\u751f\u7684\u7edf\u8ba1\u7279\u6027\u7b49\u5185\u5bb9\uff0c\u5982 running_mean \u548c running_var\u3002 (BUFFER:model.features.0.1.running_mean:tensor(..., device='cuda:0', size=(32,), dtype=oneflow.float32)) OPERATOR \u6784\u5efa Graph \u6d89\u53ca\u5230\u7684\u7b97\u5b50\u4fe1\u606f\u3002 - INPUT & OUPTUT \u8868\u793a\u8f93\u5165\u8f93\u51fa\u7684\u5f20\u91cf\u4fe1\u606f\u3002 (INPUT:_model_input.0.0_2:tensor(..., device='cuda:0', is_lazy='True', size=(16, 3, 32, 32), dtype=oneflow.float32)) Note \u5f53\u6253\u5370\u6267\u884c\u8fc7\u7684 Graph \u65f6\uff0c OPERATOR \u5b57\u6bb5\u8fd8\u5305\u62ec\u4e86\u5b50\u5b57\u6bb5 location \u3002 \u4e00\u4e2a\u539f\u59cb\u7684 location \uff1a location=(File \"test_debug.py\", line 11, in forward, source < return flow.matmul(input1, input2) >; File \"test_debug.py\", line 19, in build, source < return self.model(input1, input2) >; ... 1 more) \u6362\u884c\u540e\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a location=( File \"test_debug.py\", line 11, in forward, source < return flow.matmul(input1, input2) >; File \"test_debug.py\", line 19, in build, source < return self.model(input1, input2) >; ... 1 more ) \u8fd9\u91cc\u7684 location \u4ee3\u8868\u4ee3\u7801\u8c03\u7528\u6808\u4fe1\u606f\uff0c\u4e00\u4e2a\u4ee3\u7801\u8c03\u7528\u6808\u7531\u591a\u5c42\u4ee3\u7801\u4f4d\u7f6e\u4fe1\u606f\u7ec4\u6210\uff0c\u6bcf\u4e00\u5c42\u5305\u62ec\uff1a Flie\uff1a\u6587\u4ef6\u8def\u5f84\u3002 line\uff1a\u8868\u793a\u4ee3\u7801\u6240\u5728\u884c\u6570\u3002 in\uff1a\u8868\u793a\u8c03\u7528\u8be5\u4ee3\u7801\u7684\u51fd\u6570\u3002 source\uff1a < > \u91cc\u9762\u662f\u5bf9\u5e94\u7684\u6e90\u4ee3\u7801\u6587\u672c\u3002 \u5982\u679c\u60f3\u4f53\u9a8c\u4e0a\u8ff0\u8c03\u8bd5\u4fe1\u606f\u7684\u8f93\u51fa\uff0c\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import numpy as np class Model ( nn . Module ): def __init__ ( self ): super () . __init__ () def forward ( self , input1 , input2 ): return flow . matmul ( input1 , input2 ) class GraphModel ( nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = Model () def build ( self , input1 , input2 ): return self . model ( input1 , input2 ) graph = GraphModel () graph . debug ( 1 , op_repr_with_py_stack = True ) input1 = flow . tensor ( np . random . randn ( 2 , 6 ), dtype = flow . float32 ) input2 = flow . tensor ( np . random . randn ( 6 , 5 ), dtype = flow . float32 ) of_out = graph ( input1 , input2 ) print ( \"repr(graph) after run: \\n \" , repr ( graph )) \u201cCode\u201d \u7684\u90e8\u5206 OPERATOR \u5b57\u6bb5\u8f93\u51fa\uff1a (OPERATOR: model-matmul-0(_GraphModel_0_input.0.0_2/out:(sbp=(B), size=(2, 6), dtype=(oneflow.float32)), _GraphModel_0_input.0.1_3/out:(sbp=(B), size=(6, 5), dtype=(oneflow.float32))) -> (model-matmul-0/out_0:(sbp=(B), size=(2, 5), dtype=(oneflow.float32))), placement=(oneflow.placement(type=\"cpu\", ranks=[0])), location=(File \"test_debug.py\", line 11, in forward, source < return flow.matmul(input1, input2) >; File \"test_debug.py\", line 19, in build, source < return self.model(input1, input2) >; ... 1 more)) \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u50cf eager \u6a21\u5f0f\u4e00\u6837\uff0c\u901a\u8fc7\u8bbe\u7f6e verbose \u53c2\u6570\u83b7\u53d6\u5b9e\u65f6\u66f4\u65b0\u7684\u5b66\u4e60\u7387\u3002 optimizer = flow.optim.SGD(model.parameters(), lr=1e-3) # \u8bbe\u7f6e verbose=True scheduler = flow.optim.lr_scheduler.CosineDecayLR(optimizer, decay_steps=100, alpha=0.98, verbose=True) \u9664\u4e86\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u65b9\u6cd5\u5916\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u53c2\u6570\u7684\u68af\u5ea6\u7b49\u529f\u80fd\uff0c\u4e5f\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u5373\u5c06\u4e0a\u7ebf\u3002 Graph \u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u00b6 \u5728\u8bad\u7ec3 Graph \u6a21\u578b\u65f6\uff0c\u5e38\u5e38\u9700\u8981\u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u7684\u53c2\u6570\u4ee5\u53ca\u5176\u4ed6\u8bf8\u5982\u4f18\u5316\u5668\u53c2\u6570\u7b49\u72b6\u6001\u8fdb\u884c\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e2d\u65ad\u540e\u6062\u590d\u8bad\u7ec3\u3002 Graph \u6a21\u578b\u5bf9\u8c61\u5177\u6709\u548c Module \u7c7b\u4f3c\u7684 state_dict \u548c load_state_dict \u63a5\u53e3\uff0c\u914d\u5408 save \u548c load \u5c31\u53ef\u4ee5\u5b9e\u73b0\u4fdd\u5b58\u4e0e\u52a0\u8f7d Graph \u6a21\u578b\u3002\u8fd9\u4e0e\u4e4b\u524d\u5728 \u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u4e2d\u4ecb\u7ecd\u7684 Eager \u6a21\u5f0f\u4e0b\u662f\u7c7b\u4f3c\u7684\u3002\u548c Eager \u7565\u6709\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u8c03\u7528 Graph \u7684 state_dict \u65f6\uff0c\u9664\u4e86\u4f1a\u5f97\u5230\u5185\u90e8 Module \u5404\u5c42\u7684\u53c2\u6570\uff0c\u4e5f\u4f1a\u5f97\u5230\u8bad\u7ec3\u8fed\u4ee3\u6570\u3001\u4f18\u5316\u5668\u53c2\u6570\u7b49\u5176\u4ed6\u72b6\u6001\uff0c\u4ee5\u4fbf\u4e4b\u540e\u6062\u590d\u8bad\u7ec3\u3002 \u4f8b\u5982\uff0c\u5e0c\u671b\u5728\u4ee5\u4e0a\u8bad\u7ec3 graph_mobile_net_v2 \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u7ecf\u8fc7 1 \u4e2a epoch \u5c06\u6a21\u578b\u6700\u65b0\u7684\u72b6\u6001\u4fdd\u5b58\u4e00\u6b21\uff0c\u90a3\u4e48\u53ef\u4ee5\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4fdd\u5b58\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 \"GraphMobileNetV2\" \u4e2d\uff1a CHECKPOINT_SAVE_DIR = \"./GraphMobileNetV2\" \u5728\u6bcf\u4e2a epoch \u8bad\u7ec3\u5b8c\u6210\u5904\u63d2\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a import shutil shutil . rmtree ( CHECKPOINT_SAVE_DIR , ignore_errors = True ) # \u6e05\u7406\u4e0a\u4e00\u6b21\u7684\u72b6\u6001 flow . save ( graph_mobile_net_v2 . state_dict (), CHECKPOINT_SAVE_DIR ) Note \u4e0d\u80fd \u7528\u4ee5\u4e0b\u65b9\u5f0f\u4fdd\u5b58\u3002\u56e0\u4e3a Graph \u5728\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u5bf9\u6210\u5458\u505a\u5904\u7406\uff0c\u6240\u4ee5 graph_mobile_net_v2.model \u5176\u5b9e\u5df2\u7ecf\u4e0d\u518d\u662f Module \u7c7b\u578b\uff1a flow.save(graph_mobile_net_v2.model.state_dict(), CHECKPOINT_SAVE_DIR) # \u4f1a\u62a5\u9519 \u5f53\u9700\u8981\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u72b6\u6001\u65f6\uff1a state_dict = flow . load ( CHECKPOINT_SAVE_DIR ) graph_mobile_net_v2 . load_state_dict ( state_dict ) Graph \u4e0e\u90e8\u7f72 \u00b6 nn.Graph \u652f\u6301\u540c\u65f6\u4fdd\u5b58\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u652f\u6301\u6a21\u578b\u90e8\u7f72\u3002 \u5982\u679c\u6709\u6a21\u578b\u90e8\u7f72\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u5e94\u8be5\u901a\u8fc7 oneflow.save \u63a5\u53e3\uff0c\u5c06 Graph \u5bf9\u8c61\u5bfc\u51fa\u4e3a\u90e8\u7f72\u9700\u8981\u7684\u683c\u5f0f\uff1a MODEL_SAVE_DIR = \"./mobile_net_v2_model\" import os if not os . path . exists ( MODEL_SAVE_DIR ): os . makedirs ( MODEL_SAVE_DIR ) flow . save ( graph_mobile_net_v2 , MODEL_SAVE_DIR ) Note \u6ce8\u610f\u548c\u4e0a\u4e00\u8282\u7684\u533a\u522b\u3002 save \u63a5\u53e3\u65e2\u652f\u6301\u4fdd\u5b58 state_dict\uff0c\u4e5f\u652f\u6301\u4fdd\u5b58 Graph \u5bf9\u8c61\u3002\u5f53\u4fdd\u5b58 Graph \u5bf9\u8c61\u65f6\uff0c\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe\u5c06\u88ab\u540c\u65f6\u4fdd\u5b58\uff0c\u4ee5\u4e0e\u6a21\u578b\u7ed3\u6784\u5b9a\u4e49\u4ee3\u7801\u89e3\u8026\u3002 \u8fd9\u6837\uff0c ./mobile_net_v2_model \u76ee\u5f55\u4e0b\u4f1a\u540c\u65f6\u4fdd\u5b58\u90e8\u7f72\u6240\u9700\u7684\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe\u3002\u8be6\u7ec6\u7684\u90e8\u7f72\u6d41\u7a0b\u53ef\u4ee5\u53c2\u9605 \u6a21\u578b\u90e8\u7f72 \u4e00\u6587\u3002 \u56e0\u4e3a\u90e8\u7f72\u6240\u9700\u7684\u683c\u5f0f\uff0c\u5fc5\u9700\u901a\u8fc7 Graph \u5bf9\u8c61\u5bfc\u51fa\u3002\u6240\u4ee5\uff0c\u5982\u679c\u662f Eager \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff08\u5373 nn.Module \u5bf9\u8c61\uff09\uff0c\u9700\u8981\u7528 Graph \u5c06 Module \u5c01\u88c5\u540e\u518d\u5bfc\u51fa\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5 flowvision \u4ed3\u5e93\u4e2d\u7684 neural_style_transfer \u4e3a\u4f8b\u5b50\uff0c\u5c55\u793a\u5982\u4f55\u5c01\u88c5\u5e76\u5bfc\u51fa nn.Module \u6a21\u578b\u3002 import oneflow as flow import oneflow.nn as nn from flowvision.models.neural_style_transfer.stylenet import neural_style_transfer class MyGraph ( nn . Graph ): def __init__ ( self , model ): super () . __init__ () self . model = model def build ( self , * input ): return self . model ( * input ) if __name__ == \"__main__\" : fake_image = flow . ones (( 1 , 3 , 256 , 256 )) model = neural_style_transfer ( pretrained = True , progress = True ) model . eval () graph = MyGraph ( model ) out = graph ( fake_image ) MODEL_SAVE_DIR = \"./neural_style_transfer_model\" import os if not os . path . exists ( MODEL_SAVE_DIR ): os . makedirs ( MODEL_SAVE_DIR ) flow . save ( graph , MODEL_SAVE_DIR ) \u4ee5\u4e0a\u4ee3\u7801\u51e0\u5904\u7684\u5173\u952e\u4ee3\u7801\uff1a \u5b9a\u4e49\u4e86\u4e00\u4e2a MyGraph \u7c7b\uff0c\u5c06 nn.Module \u5bf9\u8c61\u7b80\u5355\u5730\u5c01\u88c5\u4e00\u5c42\uff08 return self.model(*input) \uff09\uff0c\u4f5c\u7528\u4ec5\u4ec5\u662f\u5c06 nn.Module \u8f6c\u4e3a Graph \u5bf9\u8c61\u3002 \u5b9e\u4f8b\u5316\u5f97\u5230 Graph \u5bf9\u8c61\uff08 graph = MyGraph(model) \uff09 \u8c03\u7528\u4e00\u6b21 Graph \u5b9e\u4f8b\u5316\u5bf9\u8c61\uff08 out = graph(fake_image) \uff09\u3002\u5b83\u5185\u90e8\u7684\u673a\u7406\u662f\u5229\u7528 \u201c\u5047\u6570\u636e\u201d \u5728\u6a21\u578b\u4e2d\u6d41\u52a8\u4e00\u904d\uff08\u5373 tracing \u673a\u5236\uff09\u6765\u5efa\u7acb\u8ba1\u7b97\u56fe\u3002 \u5bfc\u51fa\u90e8\u7f72\u6240\u9700\u7684\u6a21\u578b\uff1a flow.save(graph, \"1/model\") \u6269\u5c55\u9605\u8bfb\uff1a\u52a8\u6001\u56fe\u4e0e\u9759\u6001\u56fe \u00b6 \u7528\u6237\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u90fd\u4f1a\u88ab\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8f6c\u4e3a\u8ba1\u7b97\u56fe\uff0c\u5982 \u81ea\u52a8\u6c42\u68af\u5ea6 \u4e2d\u7684\u4f8b\u5b50\uff1a def loss ( y_pred , y ): return flow . sum ( 1 / 2 * ( y_pred - y ) ** 2 ) x = flow . ones ( 1 , 5 ) # \u8f93\u5165 w = flow . randn ( 5 , 3 , requires_grad = True ) b = flow . randn ( 1 , 3 , requires_grad = True ) z = flow . matmul ( x , w ) + b y = flow . zeros ( 1 , 3 ) # label l = loss ( z , y ) \u5bf9\u5e94\u7684\u8ba1\u7b97\u56fe\u4e3a\uff1a \u52a8\u6001\u56fe\uff08Dynamic Graph\uff09 \u52a8\u6001\u56fe\u7684\u7279\u70b9\u5728\u4e8e\uff0c\u5b83\u662f\u4e00\u8fb9\u6267\u884c\u4ee3\u7801\uff0c\u4e00\u8fb9\u5b8c\u6210\u8ba1\u7b97\u56fe\u7684\u6784\u5efa\u7684\u3002 \u4ee5\u4e0a\u4ee3\u7801\u548c\u6784\u56fe\u5173\u7cfb\u53ef\u770b\u4e0b\u56fe\uff08\u6ce8\u610f\uff1a\u4e0b\u56fe\u5bf9\u7b80\u5355\u7684\u8bed\u53e5\u505a\u4e86\u5408\u5e76\uff09 \u56e0\u4e3a\u52a8\u6001\u56fe\u662f\u4e00\u8fb9\u6267\u884c\u4e00\u8fb9\u6784\u56fe\uff0c\u6240\u4ee5\u5f88\u7075\u6d3b\uff0c\u53ef\u4ee5\u968f\u65f6\u4fee\u6539\u56fe\u7684\u7ed3\u6784\uff0c\u8fd0\u884c\u4e00\u884c\u4ee3\u7801\u5c31\u80fd\u5f97\u5230\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u6613\u4e8e\u8c03\u8bd5\u3002\u4f46\u662f\u56e0\u4e3a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u65e0\u6cd5\u83b7\u53d6\u5b8c\u6574\u7684\u56fe\u4fe1\u606f\uff08\u968f\u65f6\u53ef\u4ee5\u6539\u53d8\u3001\u6c38\u8fdc\u4e0d\u80fd\u8ba4\u4e3a\u6784\u56fe\u5df2\u7ecf\u5b8c\u6210\uff09\uff0c\u56e0\u6b64\u65e0\u6cd5\u8fdb\u884c\u5145\u5206\u7684\u5168\u5c40\u4f18\u5316\uff0c\u5728\u6027\u80fd\u4e0a\u4f1a\u76f8\u5bf9\u6b20\u7f3a\u3002 \u9759\u6001\u56fe\uff08Static Graph\uff09 \u4e0e\u52a8\u6001\u56fe\u4e0d\u540c\uff0c\u9759\u6001\u56fe\u5148\u5b9a\u4e49\u5b8c\u6574\u7684\u8ba1\u7b97\u56fe\u3002\u5373\u9700\u8981\u7528\u6237\u5148\u58f0\u660e\u6240\u6709\u8ba1\u7b97\u8282\u70b9\u540e\uff0c\u6846\u67b6\u624d\u5f00\u59cb\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u7528\u6237\u4ee3\u7801\u4e0e\u6700\u7ec8\u8fd0\u884c\u7684\u8ba1\u7b97\u56fe\u4e4b\u95f4\uff0c\u6846\u67b6\u8d77\u5230\u4e86\u7f16\u8bd1\u5668\u7684\u4f5c\u7528\u3002 \u4ee5 OneFlow \u6846\u67b6\u4e3a\u4f8b\uff0c\u7528\u6237\u7684\u4ee3\u7801\u4f1a\u88ab\u5148\u8f6c\u6362\u4e3a\u5b8c\u6574\u7684\u8ba1\u7b97\u56fe\uff0c\u7136\u540e\u518d\u7531 OneFlow Runtime \u6a21\u5757\u8fd0\u884c\u3002 \u9759\u6001\u56fe\u8fd9\u79cd\u5148\u83b7\u53d6\u5b8c\u6574\u7f51\u7edc\uff0c\u518d\u7f16\u8bd1\u8fd0\u884c\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u505a\u5f88\u591a\u52a8\u6001\u56fe\u505a\u4e0d\u5230\u7684\u4f18\u5316\uff0c\u56e0\u6b64\u6027\u80fd\u4e0a\u66f4\u6709\u4f18\u52bf\u3002\u5e76\u4e14\u7f16\u8bd1\u5b8c\u6210\u540e\u7684\u8ba1\u7b97\u56fe\uff0c\u4e5f\u66f4\u5bb9\u6613\u8de8\u5e73\u53f0\u90e8\u7f72\u3002 \u4e0d\u8fc7\uff0c\u5728\u9759\u6001\u56fe\u4e2d\u771f\u6b63\u7684\u8ba1\u7b97\u53d1\u751f\u65f6\uff0c\u5df2\u7ecf\u4e0e\u7528\u6237\u7684\u4ee3\u7801\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\u4e86\uff0c\u56e0\u6b64\u9759\u6001\u56fe\u7684\u8c03\u8bd5\u8f83\u4e0d\u65b9\u4fbf\u3002 \u4e24\u79cd\u65b9\u5f0f\u5bf9\u6bd4\u603b\u7ed3\u5982\u4e0b\uff1a \u52a8\u6001\u56fe \u9759\u6001\u56fe \u8ba1\u7b97\u65b9\u5f0f Eager \u6a21\u5f0f Graph \u6a21\u5f0f \u4f18\u70b9 \u4ee3\u7801\u7f16\u5199\u7075\u6d3b\uff0c\u6613\u4e8e\u8c03\u8bd5 \u6027\u80fd\u597d\uff0c\u6613\u4e8e\u4f18\u5316\u548c\u90e8\u7f72 \u7f3a\u70b9 \u6027\u80fd\u53ca\u53ef\u79fb\u690d\u6027\u5dee \u4e0d\u6613\u8c03\u8bd5 OneFlow \u63d0\u4f9b\u7684 Eager \u6a21\u5f0f\uff0c\u4e0e PyTorch \u5bf9\u9f50\uff0c\u8ba9\u719f\u6089 PyTorch \u7684\u7528\u6237\u53ef\u4ee5\u96f6\u6210\u672c\u76f4\u63a5\u4e0a\u624b\u3002 OneFlow \u63d0\u4f9b\u7684 Graph \u6a21\u5f0f\uff0c\u4e5f\u57fa\u4e8e\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u98ce\u683c\uff0c\u8ba9\u719f\u6089 Eager \u5f00\u53d1\u7684\u7528\u6237\uff0c\u53ea\u9700\u8981\u6539\u5f88\u5c11\u91cf\u7684\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ad8\u6548\u7387\u7684\u9759\u6001\u56fe\u3002 \u76f8\u5173\u94fe\u63a5 \u00b6 OneFlow Eager\u6a21\u5f0f\u4e0b\u7684\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\uff1a \u642d\u5efa\u795e\u7ecf\u7f51\u7edc","title":"\u9759\u6001\u56fe\u6a21\u5757 nn.Graph"},{"location":"basics/08_nn_graph.html#nngraph","text":"\u76ee\u524d\uff0c\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u6a21\u578b\u7684\u8fd0\u884c\u65b9\u5f0f\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5373 \u52a8\u6001\u56fe \u4e0e \u9759\u6001\u56fe \uff0c\u5728 OneFlow \u4e2d\uff0c\u4e5f\u88ab\u4e60\u60ef\u79f0\u4e3a Eager \u6a21\u5f0f \u548c Graph \u6a21\u5f0f \u3002 \u8fd9\u4e24\u79cd\u65b9\u5f0f\u5404\u6709\u4f18\u7f3a\u70b9\uff0cOneFlow \u5bf9\u4e24\u79cd\u65b9\u5f0f\u5747\u63d0\u4f9b\u4e86\u652f\u6301\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f Eager \u6a21\u5f0f\u3002\u5982\u679c\u4f60\u662f\u6309\u987a\u5e8f\u9605\u8bfb\u672c\u57fa\u7840\u4e13\u9898\u7684\u6559\u7a0b\uff0c\u90a3\u4e48\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u63a5\u89e6\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662f Eager \u6a21\u5f0f\u7684\u4ee3\u7801\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u52a8\u6001\u56fe\u66f4\u6613\u7528\uff0c\u9759\u6001\u56fe\u6027\u80fd\u66f4\u5177\u4f18\u52bf\u3002OneFlow \u63d0\u4f9b\u7684 nn.Graph \u6a21\u5757\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7528\u7c7b\u4f3c Eager \u7684\u7f16\u7a0b\u4e60\u60ef\uff0c\u6784\u5efa\u9759\u6001\u56fe\u5e76\u8bad\u7ec3\u6a21\u578b\u3002","title":"\u9759\u6001\u56fe\u6a21\u5757 nn.Graph"},{"location":"basics/08_nn_graph.html#oneflow-eager","text":"OneFlow \u9ed8\u8ba4\u4ee5 Eager \u6a21\u5f0f\u8fd0\u884c\u3002 \u4ee5\u4e0b\u811a\u672c\uff0c\u4f7f\u7528 CIFAR10 \u6570\u636e\u96c6\u8bad\u7ec3 mobilenet_v2 \u6a21\u578b\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , source_url = \"https://oneflow-public.oss-cn-beijing.aliyuncs.com/datasets/cifar/cifar-10-python.tar.gz\" , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model . train () loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u8f93\u51fa\uff1a loss: 6.921304 [ 0/50000] loss: 6.824391 [ 320/50000] loss: 6.688272 [ 640/50000] loss: 6.644351 [ 960/50000] ...","title":"OneFlow \u7684 Eager \u6a21\u5f0f"},{"location":"basics/08_nn_graph.html#oneflow-graph","text":"","title":"OneFlow \u7684 Graph \u6a21\u5f0f"},{"location":"basics/08_nn_graph.html#graph","text":"OneFlow \u63d0\u4f9b\u4e86 nn.Graph \u57fa\u7c7b\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u7ee7\u627f\u5b83\uff0c\u81ea\u5b9a\u4e49 Graph \u7c7b\u3002 import oneflow as flow import oneflow.nn as nn class ModuleMyLinear ( nn . Module ): def __init__ ( self , in_features , out_features ): super () . __init__ () self . weight = nn . Parameter ( flow . randn ( in_features , out_features )) self . bias = nn . Parameter ( flow . randn ( out_features )) def forward ( self , input ): return flow . matmul ( input , self . weight ) + self . bias linear_model = ModuleMyLinear ( 4 , 3 ) class GraphMyLinear ( nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = linear_model def build ( self , input ): return self . model ( input ) \u4ee5\u4e0a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5305\u542b\u4e86\u81ea\u5b9a\u4e49 Graph \u6240\u9700\u7684\u91cd\u8981\u6b65\u9aa4\uff1a \u7ee7\u627f nn.Graph \u5728 __init__ \u6700\u5f00\u59cb\u8c03\u7528 super().__init__() \uff0c\u8ba9 OneFlow \u5b8c\u6210 Graph \u5fc5\u8981\u7684\u521d\u59cb\u5316\u5de5\u4f5c \u5728 __init__ \u4e2d\u590d\u7528 Eager \u6a21\u5f0f\u4e0b\u7684 nn.Module \u5bf9\u8c61\uff08 self.model = model \uff09 \u5728 build \u4e2d\u63cf\u8ff0\u8ba1\u7b97\u8fc7\u7a0b \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u5b9e\u4f8b\u5316\u5e76\u8c03\u7528 Graph\u3002 graph_mylinear = GraphMyLinear () input = flow . randn ( 1 , 4 ) out = graph_mylinear ( input ) print ( out ) \u8f93\u51fa\uff1a tensor([[-0.3298, -3.7907, 0.1661]], dtype=oneflow.float32) \u6ce8\u610f\uff0cGraph \u4e0e Module \u7c7b\u4f3c\uff0c\u5bf9\u8c61\u672c\u8eab\u662f\u53ef\u8c03\u7528\u7684\uff0c\u5e76\u4e14 \u4e0d\u63a8\u8350 \u663e\u5f0f\u8c03\u7528 build \u65b9\u6cd5\u3002Graph \u53ef\u4ee5\u76f4\u63a5\u590d\u7528\u5df2\u7ecf\u5b9a\u4e49\u597d\u7684 Module\u3002\u56e0\u6b64\uff0c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003 \u642d\u5efa\u795e\u7ecf\u7f51\u7edc \u4e2d\u7684\u5185\u5bb9\u642d\u5efa\u597d\u795e\u7ecf\u7f51\u7edc\uff0c\u7136\u540e\u5728 Graph \u7684 __init__ \u4e2d\u5c06 Module \u8bbe\u7f6e\u4e3a Graph \u7684\u6210\u5458\u5373\u53ef\u3002 \u6bd4\u5982\uff0c\u76f4\u63a5\u4f7f\u7528\u4e4b\u524d\u5b9a\u4e49\u597d\u7684 linear_model \uff0c\u4f5c\u4e3a\u7f51\u7edc\u7ed3\u6784\uff1a class ModelGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = linear_model def build ( self , x , y ): y_pred = self . model ( x ) return loss model_graph = ModelGraph () \u4e0e Module \u7684\u663e\u8457\u533a\u522b\u5728\u4e8e\uff0cGraph \u4f7f\u7528 build \u800c\u4e0d\u662f forward \u65b9\u6cd5\u63cf\u8ff0\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u8fd9\u662f\u56e0\u4e3a build \u4e0d\u4ec5\u53ef\u4ee5\u5305\u542b\u524d\u5411\u8ba1\u7b97\uff0c\u8fd8\u53ef\u4ee5\u8bbe\u7f6e loss \uff0c\u4f18\u5316\u5668\u7b49\uff0c\u5728\u4e0b\u6587\u4f1a\u770b\u5230\u4f7f\u7528 Graph \u505a\u8bad\u7ec3\u7684\u5b9e\u9645\u4f8b\u5b50\u3002","title":"\u81ea\u5b9a\u4e49\u4e00\u4e2a Graph"},{"location":"basics/08_nn_graph.html#graph_1","text":"\u4ee5\u4e0b Graph \u505a\u9884\u6d4b\u7684\u4f8b\u5b50\uff0c\u76f4\u63a5\u4f7f\u7528\u4e86\u672c\u6587\u5f00\u59cb Eager \u6a21\u5f0f\u8bad\u7ec3\u597d\u7684 module\u3002 class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model def build ( self , x ): return self . model ( x ) graph_mobile_net_v2 = GraphMobileNetV2 () x , _ = next ( iter ( train_dataloader )) x = x . to ( DEVICE ) y_pred = graph_mobile_net_v2 ( x )","title":"\u4f7f\u7528 Graph \u505a\u9884\u6d4b"},{"location":"basics/08_nn_graph.html#graph_2","text":"\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Graph \u505a\u8bad\u7ec3\u3002\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True , drop_last = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model . train () loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model self . loss_fn = loss_fn self . add_optimizer ( optimizer ) def build ( self , x , y ): y_pred = self . model ( x ) loss = self . loss_fn ( y_pred , y ) loss . backward () return loss graph_mobile_net_v2 = GraphMobileNetV2 () # graph_mobile_net_v2.debug() for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to ( DEVICE ) y = y . to ( DEVICE ) loss = graph_mobile_net_v2 ( x , y ) current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u4e0e Graph \u505a\u9884\u6d4b\u7684\u4ee3\u7801\u505a\u6bd4\u8f83\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u6709\u4ee5\u4e0b\u51e0\u70b9\u662f Graph \u505a\u8bad\u7ec3\u65f6\u7279\u6709\u7684\uff1a # Optimizer optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) # (1) # The MobileNetV2 Graph class GraphMobileNetV2 ( flow . nn . Graph ): def __init__ ( self ): # ... self . add_optimizer ( optimizer ) # (2) def build ( self , x , y ): # ... loss . backward () # (3) # ... \u6784\u9020 optimizer \u5bf9\u8c61\uff0c\u8fd9\u70b9\u548c \u53cd\u5411\u4f20\u64ad\u4e0e optimizer \u4ecb\u7ecd\u7684 Eager \u6a21\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5\u662f\u5b8c\u5168\u4e00\u81f4\u7684\u3002 \u5728 Graph \u7c7b\u7684 __init__ \u4e2d\uff0c\u8c03\u7528 self.add_optimizer \u65b9\u6cd5\uff0c\u5c06\u4e0a\u4e00\u6b65\u6784\u9020\u7684 optimizer \u5bf9\u8c61\u6dfb\u52a0\u8fdb Graph \u4e2d\u3002 \u5728 Graph \u7c7b\u7684 build \u4e2d\u8c03\u7528 backward \uff0c\u89e6\u53d1\u53cd\u5411\u4f20\u64ad","title":"\u4f7f\u7528 Graph \u505a\u8bad\u7ec3"},{"location":"basics/08_nn_graph.html#graph_3","text":"\u5f53\u524d\u8f93\u51fa Graph \u7684\u8c03\u8bd5\u4fe1\u606f\u5171\u6709\u4e24\u79cd\u65b9\u5f0f\u3002 \u7b2c\u4e00\u79cd \u53ef\u4ee5\u8c03\u7528 print \u6253\u5370 Graph \u5bf9\u8c61\uff0c\u8f93\u51fa Graph \u5bf9\u8c61\u7684\u4fe1\u606f\u3002 print ( graph_mobile_net_v2 ) \u6839\u636e Graph \u5bf9\u8c61\u662f\u5426 \u5df2\u7ecf\u88ab\u8c03\u7528\u8fc7 \uff0c\u8f93\u51fa\u7684\u6548\u679c\u7565\u6709\u4e0d\u540c\uff1a \u5982\u679c Graph \u5bf9\u8c61\u8c03\u7528\u524d print \uff0c\u8f93\u51fa\u7684\u662f\u7f51\u7edc\u7ed3\u6784\u7684\u4fe1\u606f\u3002 \u4ee5\u4e0a graph_mobile_net_v2 \u8c03\u7528\u524d print \u6548\u679c\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2): ( (CONFIG:config:GraphConfig(training=True, )) (MODULE:model:MobileNetV2()): ( (MODULE:model.features:Sequential()): ( (MODULE:model.features.0:ConvBNActivation()): ( (MODULE:model.features.0.0:Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)): ( (PARAMETER:model.features.0.0.weight:tensor(..., device='cuda:0', size=(32, 3, 3, 3), dtype=oneflow.float32, requires_grad=True)): () ) ... (MODULE:model.classifer:Sequential()): ( (MODULE:model.classifer.0:Dropout(p=0.2, inplace=False)): () (MODULE:model.classifer.1:Linear(in_features=1280, out_features=10, bias=True)): ( (PARAMETER:model.classifer.1.weight:tensor(..., size=(10, 1280), dtype=oneflow.float32, requires_grad=True)): () (PARAMETER:model.classifer.1.bias:tensor(..., size=(10,), dtype=oneflow.float32, requires_grad=True)): () ) ) ) (MODULE:loss_fn:CrossEntropyLoss()): () ) \u5728\u4e0a\u9762\u7684\u8c03\u8bd5\u4fe1\u606f\u4e2d\uff0c\u8868\u793a\u57fa\u4e8e Sequential \u6a21\u578b\uff0c\u7f51\u7edc\u4e2d\u81ea\u5b9a\u4e49\u4e86 ConvBNActivation (\u5bf9\u5e94 MBConv \u6a21\u5757)\u3001\u5377\u79ef\u5c42(\u5305\u62ec\u8be6\u7ec6\u7684 channel \u3001 kernel_size \u548c stride \u7b49\u53c2\u6570\u4fe1\u606f)\u3001 Dropout \u548c\u5168\u8fde\u63a5\u5c42\u7b49\u7ed3\u6784\u3002 \u5982\u679c\u662f Graph \u5bf9\u8c61\u8c03\u7528\u540e print \uff0c\u9664\u4e86\u7f51\u7edc\u7684\u7ed3\u6784\u4fe1\u606f\u5916\uff0c\u8fd8\u4f1a\u6253\u5370\u8f93\u5165\u8f93\u51fa\u5f20\u91cf\u7684\u4fe1\u606f\uff0c\u6709\u5982\u4e0b\u7c7b\u4f3c\u6548\u679c\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2): ( (CONFIG:config:GraphConfig(training=True, )) (INPUT:_GraphMobileNetV2_0-input_0:tensor(..., device='cuda:0', size=(64, 3, 32, 32), dtype=oneflow.float32)) (INPUT:_GraphMobileNetV2_0-input_1:tensor(..., device='cuda:0', size=(64,), dtype=oneflow.int64)) (MODULE:model:MobileNetV2()): ( (INPUT:_model-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features:Sequential()): ( (INPUT:_model.features-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features.0:ConvBNActivation()): ( (INPUT:_model.features.0-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (MODULE:model.features.0.0:Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)): ( (INPUT:_model.features.0.0-input_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 3, 32, 32), dtype=oneflow.float32)) (PARAMETER:model.features.0.0.weight:tensor(..., device='cuda:0', size=(32, 3, 3, 3), dtype=oneflow.float32, requires_grad=True)): () (OUTPUT:_model.features.0.0-output_0:tensor(..., device='cuda:0', is_lazy='True', size=(64, 32, 16, 16), dtype=oneflow.float32)) ) ... \u7b2c\u4e8c\u79cd \u65b9\u5f0f\u662f\u8c03\u7528 Graph \u5bf9\u8c61\u7684 debug \u65b9\u6cd5\uff0c\u5c31\u5f00\u542f\u4e86 Graph \u7684\u8c03\u8bd5\u6a21\u5f0f\u3002 graph_mobile_net_v2 . debug ( v_level = 1 ) # v_level \u53c2\u6570\u9ed8\u8ba4\u503c\u4e3a 0 \u53ef\u4ee5\u7b80\u5199\u4e3a\uff1a graph_mobile_net_v2 . debug ( 1 ) OneFlow \u5728\u7f16\u8bd1\u751f\u6210\u8ba1\u7b97\u56fe\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\uff0c\u6bd4\u5982\uff0c\u5c06\u4e0a\u9762\u4f8b\u5b50\u4ee3\u7801\u4e2d graph_mobile_net_v2.debug() \u7684\u6ce8\u91ca\u53bb\u6389\uff0c\u5c06\u5728\u63a7\u5236\u53f0\u4e0a\u8f93\u51fa\u5982\u4e0b\u8f93\u51fa\uff1a (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) end building graph. (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) start compiling plan and init graph runtime. (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) end compiling plan and init graph rumtime. \u4f7f\u7528 debug \u7684\u597d\u5904\u5728\u4e8e\uff0c\u8c03\u8bd5\u4fe1\u606f\u662f \u8fb9\u6784\u56fe\u3001\u8fb9\u8f93\u51fa \u7684\uff0c\u8fd9\u6837\u5982\u679c\u6784\u56fe\u8fc7\u7a0b\u4e2d\u53d1\u751f\u9519\u8bef\uff0c\u5bb9\u6613\u53d1\u73b0\u6784\u56fe\u65f6\u7684\u95ee\u9898\u3002 \u5f53\u524d\u53ef\u4ee5\u4f7f\u7528 v_level \u9009\u62e9\u8be6\u7ec6\u8c03\u8bd5\u4fe1\u606f\u7ea7\u522b\uff0c\u9ed8\u8ba4\u7ea7\u522b\u4e3a 0\uff0c\u6700\u5927\u7ea7\u522b\u4e3a 3\u3002 v_level=0 \u65f6\uff0c\u53ea\u8f93\u51fa\u6700\u57fa\u7840\u7684\u8b66\u544a\u548c\u6784\u56fe\u9636\u6bb5\u4fe1\u606f\uff0c\u5982\u6784\u56fe\u65f6\u95f4\u3002 v_level=1 \u65f6\uff0c\u5c06\u989d\u5916\u6253\u5370\u6bcf\u4e2a nn.Module \u7684\u6784\u56fe\u4fe1\u606f\uff0c\u5177\u4f53\u5185\u5bb9\u5728\u4e0b\u9762\u7684\u8868\u683c\u4e2d\u4ecb\u7ecd\u3002 v_level=2 \u65f6\uff0c\u5728\u6784\u56fe\u9636\u6bb5\uff0c\u5c06\u989d\u5916\u6253\u5370\u6bcf\u4e2a Op \u7684\u521b\u5efa\u4fe1\u606f\uff0c\u5305\u62ec\u540d\u79f0\u3001\u8f93\u5165\u5185\u5bb9\u3001\u8bbe\u5907\u548c SBP \u4fe1\u606f\u7b49\u3002 v_level=3 \u65f6\uff0c\u5c06\u989d\u5916\u6253\u5370\u6bcf\u4e2a Op \u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u5982\u4e0e\u4ee3\u7801\u4f4d\u7f6e\u6709\u5173\u7684\u4fe1\u606f\uff0c\u65b9\u4fbf\u5b9a\u4f4d\u4ee3\u7801\u95ee\u9898\u3002 \u9664\u4e86\u8bbe\u7f6e v_level \uff0cGraph \u7684 debug \u8fd8\u63d0\u4f9b\u4e86\u8bbe\u7f6e\u8f93\u51fa\u8c03\u8bd5\u4fe1\u606f\u7684\u8bbe\u5907\uff08\u591a\u5361\u6761\u4ef6\u4e0b\uff09\u3001\u6307\u5b9a\u8c03\u8bd5\u4fe1\u606f\u7684\u6700\u5927 Python \u5806\u6808\u6df1\u5ea6\u3001\u6253\u5370\u7cfb\u7edf\u7b97\u5b50\u4f4d\u7f6e\u3001\u6253\u5370\u7528\u6237\u4ee3\u7801\u4f4d\u7f6e\u548c\u6e90\u4ee3\u7801\u7684\u529f\u80fd\u3002\u4f7f\u7528\u65f6\u5177\u4f53\u89c1\u53c2\u6570\u89c1\uff1a nn.Graph.debug \u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u5f00\u53d1\u8005\u5bf9 Graph \u5bf9\u8c61\u4e0b\u7684\u7c7b\u578b\u6709\u66f4\u6e05\u6670\u7684\u8ba4\u77e5\uff0c\u4e0b\u9762\u5bf9 debug \u8f93\u51fa\u7684\u5185\u5bb9\u8fdb\u884c\u5206\u6790\uff0c\u57fa\u672c\u5305\u62ec GRAPH \u3001 CONFIG \u3001 MODULE \u3001 PARAMETER \u3001 BUFFER \u3001 OPERATOR \u3001 INPUT \u548c OUTPUT \u516b\u4e2a\u7c7b\u522b\u7684\u6807\u7b7e\u3002 Name Info Example GRAPH \u7528\u6237\u6240\u5b9a\u4e49\u7684 Graph \u4fe1\u606f\uff0c\u4f9d\u6b21\u662f\u7c7b\u578b\uff1a\u540d\u5b57\uff1a\u6784\u9020\u65b9\u6cd5\u3002 (GRAPH:GraphMobileNetV2_0:GraphMobileNetV2) CONFIG Graph \u7684\u914d\u7f6e\u4fe1\u606f\u3002\u5982\u662f\u5426\u5904\u4e8e\u8bad\u7ec3\u6a21\u5f0f\uff0c training=True \u8868\u793a Graph \u5904\u4e8e\u8bad\u7ec3\u6a21\u5f0f\uff0c\u5982\u679c\u5728 Graph \u7684\u9884\u6d4b\u6a21\u5f0f\uff0c\u5219\u5bf9\u5e94 training=False \u3002 (CONFIG:config:GraphConfig(training=True, ) MODULE \u5bf9\u5e94 nn.Module \uff0cMODULE \u53ef\u4ee5\u5728 Graph \u6807\u7b7e\u4e0b\u5c42\uff0c\u540c\u65f6\uff0c\u591a\u4e2a MODULE \u4e4b\u95f4\u4e5f\u5b58\u5728\u5c42\u7ea7\u5173\u7cfb\u3002 (MODULE:model:MobileNetV2()) \uff0c\u5176\u4e2d\uff0c MobileNetV2 \u4e3a\u7528\u6237\u590d\u7528 Eager \u6a21\u5f0f\u4e0b\u7684 Module \u7c7b\u540d\u3002 PARAMETER \u7ed9\u51fa\u4e86\u66f4\u6e05\u6670\u7684 weight \u548c bias \u4fe1\u606f\u3002\u6b64\u5916\uff0c\u5728\u6784\u56fe\u65f6\uff0ctensor \u7684\u6570\u636e\u5185\u5bb9\u4e0d\u592a\u91cd\u8981\uff0c\u6240\u4ee5\u53ea\u5c55\u793a\u4e86 tensor \u7684\u5143\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5bf9\u6784\u5efa\u7f51\u7edc\u66f4\u4e3a\u91cd\u8981\u3002 (PARAMETER:model.features.0.1.weight:tensor(..., device='cuda:0', size=(32,), dtype=oneflow.float32, requires_grad=True)) BUFFER \u5728\u8bad\u7ec3\u65f6\u4ea7\u751f\u7684\u7edf\u8ba1\u7279\u6027\u7b49\u5185\u5bb9\uff0c\u5982 running_mean \u548c running_var\u3002 (BUFFER:model.features.0.1.running_mean:tensor(..., device='cuda:0', size=(32,), dtype=oneflow.float32)) OPERATOR \u6784\u5efa Graph \u6d89\u53ca\u5230\u7684\u7b97\u5b50\u4fe1\u606f\u3002 - INPUT & OUPTUT \u8868\u793a\u8f93\u5165\u8f93\u51fa\u7684\u5f20\u91cf\u4fe1\u606f\u3002 (INPUT:_model_input.0.0_2:tensor(..., device='cuda:0', is_lazy='True', size=(16, 3, 32, 32), dtype=oneflow.float32)) Note \u5f53\u6253\u5370\u6267\u884c\u8fc7\u7684 Graph \u65f6\uff0c OPERATOR \u5b57\u6bb5\u8fd8\u5305\u62ec\u4e86\u5b50\u5b57\u6bb5 location \u3002 \u4e00\u4e2a\u539f\u59cb\u7684 location \uff1a location=(File \"test_debug.py\", line 11, in forward, source < return flow.matmul(input1, input2) >; File \"test_debug.py\", line 19, in build, source < return self.model(input1, input2) >; ... 1 more) \u6362\u884c\u540e\u7684\u5f62\u5f0f\u5982\u4e0b\uff1a location=( File \"test_debug.py\", line 11, in forward, source < return flow.matmul(input1, input2) >; File \"test_debug.py\", line 19, in build, source < return self.model(input1, input2) >; ... 1 more ) \u8fd9\u91cc\u7684 location \u4ee3\u8868\u4ee3\u7801\u8c03\u7528\u6808\u4fe1\u606f\uff0c\u4e00\u4e2a\u4ee3\u7801\u8c03\u7528\u6808\u7531\u591a\u5c42\u4ee3\u7801\u4f4d\u7f6e\u4fe1\u606f\u7ec4\u6210\uff0c\u6bcf\u4e00\u5c42\u5305\u62ec\uff1a Flie\uff1a\u6587\u4ef6\u8def\u5f84\u3002 line\uff1a\u8868\u793a\u4ee3\u7801\u6240\u5728\u884c\u6570\u3002 in\uff1a\u8868\u793a\u8c03\u7528\u8be5\u4ee3\u7801\u7684\u51fd\u6570\u3002 source\uff1a < > \u91cc\u9762\u662f\u5bf9\u5e94\u7684\u6e90\u4ee3\u7801\u6587\u672c\u3002 \u5982\u679c\u60f3\u4f53\u9a8c\u4e0a\u8ff0\u8c03\u8bd5\u4fe1\u606f\u7684\u8f93\u51fa\uff0c\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import numpy as np class Model ( nn . Module ): def __init__ ( self ): super () . __init__ () def forward ( self , input1 , input2 ): return flow . matmul ( input1 , input2 ) class GraphModel ( nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = Model () def build ( self , input1 , input2 ): return self . model ( input1 , input2 ) graph = GraphModel () graph . debug ( 1 , op_repr_with_py_stack = True ) input1 = flow . tensor ( np . random . randn ( 2 , 6 ), dtype = flow . float32 ) input2 = flow . tensor ( np . random . randn ( 6 , 5 ), dtype = flow . float32 ) of_out = graph ( input1 , input2 ) print ( \"repr(graph) after run: \\n \" , repr ( graph )) \u201cCode\u201d \u7684\u90e8\u5206 OPERATOR \u5b57\u6bb5\u8f93\u51fa\uff1a (OPERATOR: model-matmul-0(_GraphModel_0_input.0.0_2/out:(sbp=(B), size=(2, 6), dtype=(oneflow.float32)), _GraphModel_0_input.0.1_3/out:(sbp=(B), size=(6, 5), dtype=(oneflow.float32))) -> (model-matmul-0/out_0:(sbp=(B), size=(2, 5), dtype=(oneflow.float32))), placement=(oneflow.placement(type=\"cpu\", ranks=[0])), location=(File \"test_debug.py\", line 11, in forward, source < return flow.matmul(input1, input2) >; File \"test_debug.py\", line 19, in build, source < return self.model(input1, input2) >; ... 1 more)) \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u50cf eager \u6a21\u5f0f\u4e00\u6837\uff0c\u901a\u8fc7\u8bbe\u7f6e verbose \u53c2\u6570\u83b7\u53d6\u5b9e\u65f6\u66f4\u65b0\u7684\u5b66\u4e60\u7387\u3002 optimizer = flow.optim.SGD(model.parameters(), lr=1e-3) # \u8bbe\u7f6e verbose=True scheduler = flow.optim.lr_scheduler.CosineDecayLR(optimizer, decay_steps=100, alpha=0.98, verbose=True) \u9664\u4e86\u4ee5\u4e0a\u4ecb\u7ecd\u7684\u65b9\u6cd5\u5916\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u83b7\u53d6\u53c2\u6570\u7684\u68af\u5ea6\u7b49\u529f\u80fd\uff0c\u4e5f\u6b63\u5728\u5f00\u53d1\u4e2d\uff0c\u5373\u5c06\u4e0a\u7ebf\u3002","title":"Graph \u8c03\u8bd5"},{"location":"basics/08_nn_graph.html#graph_4","text":"\u5728\u8bad\u7ec3 Graph \u6a21\u578b\u65f6\uff0c\u5e38\u5e38\u9700\u8981\u5c06\u5df2\u7ecf\u8bad\u7ec3\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6a21\u578b\u7684\u53c2\u6570\u4ee5\u53ca\u5176\u4ed6\u8bf8\u5982\u4f18\u5316\u5668\u53c2\u6570\u7b49\u72b6\u6001\u8fdb\u884c\u4fdd\u5b58\uff0c\u65b9\u4fbf\u4e2d\u65ad\u540e\u6062\u590d\u8bad\u7ec3\u3002 Graph \u6a21\u578b\u5bf9\u8c61\u5177\u6709\u548c Module \u7c7b\u4f3c\u7684 state_dict \u548c load_state_dict \u63a5\u53e3\uff0c\u914d\u5408 save \u548c load \u5c31\u53ef\u4ee5\u5b9e\u73b0\u4fdd\u5b58\u4e0e\u52a0\u8f7d Graph \u6a21\u578b\u3002\u8fd9\u4e0e\u4e4b\u524d\u5728 \u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d \u4e2d\u4ecb\u7ecd\u7684 Eager \u6a21\u5f0f\u4e0b\u662f\u7c7b\u4f3c\u7684\u3002\u548c Eager \u7565\u6709\u4e0d\u540c\u7684\u662f\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u8c03\u7528 Graph \u7684 state_dict \u65f6\uff0c\u9664\u4e86\u4f1a\u5f97\u5230\u5185\u90e8 Module \u5404\u5c42\u7684\u53c2\u6570\uff0c\u4e5f\u4f1a\u5f97\u5230\u8bad\u7ec3\u8fed\u4ee3\u6570\u3001\u4f18\u5316\u5668\u53c2\u6570\u7b49\u5176\u4ed6\u72b6\u6001\uff0c\u4ee5\u4fbf\u4e4b\u540e\u6062\u590d\u8bad\u7ec3\u3002 \u4f8b\u5982\uff0c\u5e0c\u671b\u5728\u4ee5\u4e0a\u8bad\u7ec3 graph_mobile_net_v2 \u7684\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u7ecf\u8fc7 1 \u4e2a epoch \u5c06\u6a21\u578b\u6700\u65b0\u7684\u72b6\u6001\u4fdd\u5b58\u4e00\u6b21\uff0c\u90a3\u4e48\u53ef\u4ee5\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a \u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4fdd\u5b58\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u7684 \"GraphMobileNetV2\" \u4e2d\uff1a CHECKPOINT_SAVE_DIR = \"./GraphMobileNetV2\" \u5728\u6bcf\u4e2a epoch \u8bad\u7ec3\u5b8c\u6210\u5904\u63d2\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a import shutil shutil . rmtree ( CHECKPOINT_SAVE_DIR , ignore_errors = True ) # \u6e05\u7406\u4e0a\u4e00\u6b21\u7684\u72b6\u6001 flow . save ( graph_mobile_net_v2 . state_dict (), CHECKPOINT_SAVE_DIR ) Note \u4e0d\u80fd \u7528\u4ee5\u4e0b\u65b9\u5f0f\u4fdd\u5b58\u3002\u56e0\u4e3a Graph \u5728\u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u5bf9\u6210\u5458\u505a\u5904\u7406\uff0c\u6240\u4ee5 graph_mobile_net_v2.model \u5176\u5b9e\u5df2\u7ecf\u4e0d\u518d\u662f Module \u7c7b\u578b\uff1a flow.save(graph_mobile_net_v2.model.state_dict(), CHECKPOINT_SAVE_DIR) # \u4f1a\u62a5\u9519 \u5f53\u9700\u8981\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u72b6\u6001\u65f6\uff1a state_dict = flow . load ( CHECKPOINT_SAVE_DIR ) graph_mobile_net_v2 . load_state_dict ( state_dict )","title":"Graph \u6a21\u578b\u7684\u4fdd\u5b58\u4e0e\u52a0\u8f7d"},{"location":"basics/08_nn_graph.html#graph_5","text":"nn.Graph \u652f\u6301\u540c\u65f6\u4fdd\u5b58\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u652f\u6301\u6a21\u578b\u90e8\u7f72\u3002 \u5982\u679c\u6709\u6a21\u578b\u90e8\u7f72\u7684\u9700\u6c42\uff0c\u90a3\u4e48\u5e94\u8be5\u901a\u8fc7 oneflow.save \u63a5\u53e3\uff0c\u5c06 Graph \u5bf9\u8c61\u5bfc\u51fa\u4e3a\u90e8\u7f72\u9700\u8981\u7684\u683c\u5f0f\uff1a MODEL_SAVE_DIR = \"./mobile_net_v2_model\" import os if not os . path . exists ( MODEL_SAVE_DIR ): os . makedirs ( MODEL_SAVE_DIR ) flow . save ( graph_mobile_net_v2 , MODEL_SAVE_DIR ) Note \u6ce8\u610f\u548c\u4e0a\u4e00\u8282\u7684\u533a\u522b\u3002 save \u63a5\u53e3\u65e2\u652f\u6301\u4fdd\u5b58 state_dict\uff0c\u4e5f\u652f\u6301\u4fdd\u5b58 Graph \u5bf9\u8c61\u3002\u5f53\u4fdd\u5b58 Graph \u5bf9\u8c61\u65f6\uff0c\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe\u5c06\u88ab\u540c\u65f6\u4fdd\u5b58\uff0c\u4ee5\u4e0e\u6a21\u578b\u7ed3\u6784\u5b9a\u4e49\u4ee3\u7801\u89e3\u8026\u3002 \u8fd9\u6837\uff0c ./mobile_net_v2_model \u76ee\u5f55\u4e0b\u4f1a\u540c\u65f6\u4fdd\u5b58\u90e8\u7f72\u6240\u9700\u7684\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe\u3002\u8be6\u7ec6\u7684\u90e8\u7f72\u6d41\u7a0b\u53ef\u4ee5\u53c2\u9605 \u6a21\u578b\u90e8\u7f72 \u4e00\u6587\u3002 \u56e0\u4e3a\u90e8\u7f72\u6240\u9700\u7684\u683c\u5f0f\uff0c\u5fc5\u9700\u901a\u8fc7 Graph \u5bf9\u8c61\u5bfc\u51fa\u3002\u6240\u4ee5\uff0c\u5982\u679c\u662f Eager \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff08\u5373 nn.Module \u5bf9\u8c61\uff09\uff0c\u9700\u8981\u7528 Graph \u5c06 Module \u5c01\u88c5\u540e\u518d\u5bfc\u51fa\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5 flowvision \u4ed3\u5e93\u4e2d\u7684 neural_style_transfer \u4e3a\u4f8b\u5b50\uff0c\u5c55\u793a\u5982\u4f55\u5c01\u88c5\u5e76\u5bfc\u51fa nn.Module \u6a21\u578b\u3002 import oneflow as flow import oneflow.nn as nn from flowvision.models.neural_style_transfer.stylenet import neural_style_transfer class MyGraph ( nn . Graph ): def __init__ ( self , model ): super () . __init__ () self . model = model def build ( self , * input ): return self . model ( * input ) if __name__ == \"__main__\" : fake_image = flow . ones (( 1 , 3 , 256 , 256 )) model = neural_style_transfer ( pretrained = True , progress = True ) model . eval () graph = MyGraph ( model ) out = graph ( fake_image ) MODEL_SAVE_DIR = \"./neural_style_transfer_model\" import os if not os . path . exists ( MODEL_SAVE_DIR ): os . makedirs ( MODEL_SAVE_DIR ) flow . save ( graph , MODEL_SAVE_DIR ) \u4ee5\u4e0a\u4ee3\u7801\u51e0\u5904\u7684\u5173\u952e\u4ee3\u7801\uff1a \u5b9a\u4e49\u4e86\u4e00\u4e2a MyGraph \u7c7b\uff0c\u5c06 nn.Module \u5bf9\u8c61\u7b80\u5355\u5730\u5c01\u88c5\u4e00\u5c42\uff08 return self.model(*input) \uff09\uff0c\u4f5c\u7528\u4ec5\u4ec5\u662f\u5c06 nn.Module \u8f6c\u4e3a Graph \u5bf9\u8c61\u3002 \u5b9e\u4f8b\u5316\u5f97\u5230 Graph \u5bf9\u8c61\uff08 graph = MyGraph(model) \uff09 \u8c03\u7528\u4e00\u6b21 Graph \u5b9e\u4f8b\u5316\u5bf9\u8c61\uff08 out = graph(fake_image) \uff09\u3002\u5b83\u5185\u90e8\u7684\u673a\u7406\u662f\u5229\u7528 \u201c\u5047\u6570\u636e\u201d \u5728\u6a21\u578b\u4e2d\u6d41\u52a8\u4e00\u904d\uff08\u5373 tracing \u673a\u5236\uff09\u6765\u5efa\u7acb\u8ba1\u7b97\u56fe\u3002 \u5bfc\u51fa\u90e8\u7f72\u6240\u9700\u7684\u6a21\u578b\uff1a flow.save(graph, \"1/model\")","title":"Graph \u4e0e\u90e8\u7f72"},{"location":"basics/08_nn_graph.html#_1","text":"\u7528\u6237\u5b9a\u4e49\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u90fd\u4f1a\u88ab\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u8f6c\u4e3a\u8ba1\u7b97\u56fe\uff0c\u5982 \u81ea\u52a8\u6c42\u68af\u5ea6 \u4e2d\u7684\u4f8b\u5b50\uff1a def loss ( y_pred , y ): return flow . sum ( 1 / 2 * ( y_pred - y ) ** 2 ) x = flow . ones ( 1 , 5 ) # \u8f93\u5165 w = flow . randn ( 5 , 3 , requires_grad = True ) b = flow . randn ( 1 , 3 , requires_grad = True ) z = flow . matmul ( x , w ) + b y = flow . zeros ( 1 , 3 ) # label l = loss ( z , y ) \u5bf9\u5e94\u7684\u8ba1\u7b97\u56fe\u4e3a\uff1a \u52a8\u6001\u56fe\uff08Dynamic Graph\uff09 \u52a8\u6001\u56fe\u7684\u7279\u70b9\u5728\u4e8e\uff0c\u5b83\u662f\u4e00\u8fb9\u6267\u884c\u4ee3\u7801\uff0c\u4e00\u8fb9\u5b8c\u6210\u8ba1\u7b97\u56fe\u7684\u6784\u5efa\u7684\u3002 \u4ee5\u4e0a\u4ee3\u7801\u548c\u6784\u56fe\u5173\u7cfb\u53ef\u770b\u4e0b\u56fe\uff08\u6ce8\u610f\uff1a\u4e0b\u56fe\u5bf9\u7b80\u5355\u7684\u8bed\u53e5\u505a\u4e86\u5408\u5e76\uff09 \u56e0\u4e3a\u52a8\u6001\u56fe\u662f\u4e00\u8fb9\u6267\u884c\u4e00\u8fb9\u6784\u56fe\uff0c\u6240\u4ee5\u5f88\u7075\u6d3b\uff0c\u53ef\u4ee5\u968f\u65f6\u4fee\u6539\u56fe\u7684\u7ed3\u6784\uff0c\u8fd0\u884c\u4e00\u884c\u4ee3\u7801\u5c31\u80fd\u5f97\u5230\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u6613\u4e8e\u8c03\u8bd5\u3002\u4f46\u662f\u56e0\u4e3a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u65e0\u6cd5\u83b7\u53d6\u5b8c\u6574\u7684\u56fe\u4fe1\u606f\uff08\u968f\u65f6\u53ef\u4ee5\u6539\u53d8\u3001\u6c38\u8fdc\u4e0d\u80fd\u8ba4\u4e3a\u6784\u56fe\u5df2\u7ecf\u5b8c\u6210\uff09\uff0c\u56e0\u6b64\u65e0\u6cd5\u8fdb\u884c\u5145\u5206\u7684\u5168\u5c40\u4f18\u5316\uff0c\u5728\u6027\u80fd\u4e0a\u4f1a\u76f8\u5bf9\u6b20\u7f3a\u3002 \u9759\u6001\u56fe\uff08Static Graph\uff09 \u4e0e\u52a8\u6001\u56fe\u4e0d\u540c\uff0c\u9759\u6001\u56fe\u5148\u5b9a\u4e49\u5b8c\u6574\u7684\u8ba1\u7b97\u56fe\u3002\u5373\u9700\u8981\u7528\u6237\u5148\u58f0\u660e\u6240\u6709\u8ba1\u7b97\u8282\u70b9\u540e\uff0c\u6846\u67b6\u624d\u5f00\u59cb\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u53ef\u4ee5\u7406\u89e3\u4e3a\u5728\u7528\u6237\u4ee3\u7801\u4e0e\u6700\u7ec8\u8fd0\u884c\u7684\u8ba1\u7b97\u56fe\u4e4b\u95f4\uff0c\u6846\u67b6\u8d77\u5230\u4e86\u7f16\u8bd1\u5668\u7684\u4f5c\u7528\u3002 \u4ee5 OneFlow \u6846\u67b6\u4e3a\u4f8b\uff0c\u7528\u6237\u7684\u4ee3\u7801\u4f1a\u88ab\u5148\u8f6c\u6362\u4e3a\u5b8c\u6574\u7684\u8ba1\u7b97\u56fe\uff0c\u7136\u540e\u518d\u7531 OneFlow Runtime \u6a21\u5757\u8fd0\u884c\u3002 \u9759\u6001\u56fe\u8fd9\u79cd\u5148\u83b7\u53d6\u5b8c\u6574\u7f51\u7edc\uff0c\u518d\u7f16\u8bd1\u8fd0\u884c\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u5b83\u53ef\u4ee5\u505a\u5f88\u591a\u52a8\u6001\u56fe\u505a\u4e0d\u5230\u7684\u4f18\u5316\uff0c\u56e0\u6b64\u6027\u80fd\u4e0a\u66f4\u6709\u4f18\u52bf\u3002\u5e76\u4e14\u7f16\u8bd1\u5b8c\u6210\u540e\u7684\u8ba1\u7b97\u56fe\uff0c\u4e5f\u66f4\u5bb9\u6613\u8de8\u5e73\u53f0\u90e8\u7f72\u3002 \u4e0d\u8fc7\uff0c\u5728\u9759\u6001\u56fe\u4e2d\u771f\u6b63\u7684\u8ba1\u7b97\u53d1\u751f\u65f6\uff0c\u5df2\u7ecf\u4e0e\u7528\u6237\u7684\u4ee3\u7801\u6ca1\u6709\u76f4\u63a5\u5173\u7cfb\u4e86\uff0c\u56e0\u6b64\u9759\u6001\u56fe\u7684\u8c03\u8bd5\u8f83\u4e0d\u65b9\u4fbf\u3002 \u4e24\u79cd\u65b9\u5f0f\u5bf9\u6bd4\u603b\u7ed3\u5982\u4e0b\uff1a \u52a8\u6001\u56fe \u9759\u6001\u56fe \u8ba1\u7b97\u65b9\u5f0f Eager \u6a21\u5f0f Graph \u6a21\u5f0f \u4f18\u70b9 \u4ee3\u7801\u7f16\u5199\u7075\u6d3b\uff0c\u6613\u4e8e\u8c03\u8bd5 \u6027\u80fd\u597d\uff0c\u6613\u4e8e\u4f18\u5316\u548c\u90e8\u7f72 \u7f3a\u70b9 \u6027\u80fd\u53ca\u53ef\u79fb\u690d\u6027\u5dee \u4e0d\u6613\u8c03\u8bd5 OneFlow \u63d0\u4f9b\u7684 Eager \u6a21\u5f0f\uff0c\u4e0e PyTorch \u5bf9\u9f50\uff0c\u8ba9\u719f\u6089 PyTorch \u7684\u7528\u6237\u53ef\u4ee5\u96f6\u6210\u672c\u76f4\u63a5\u4e0a\u624b\u3002 OneFlow \u63d0\u4f9b\u7684 Graph \u6a21\u5f0f\uff0c\u4e5f\u57fa\u4e8e\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u98ce\u683c\uff0c\u8ba9\u719f\u6089 Eager \u5f00\u53d1\u7684\u7528\u6237\uff0c\u53ea\u9700\u8981\u6539\u5f88\u5c11\u91cf\u7684\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ad8\u6548\u7387\u7684\u9759\u6001\u56fe\u3002","title":"\u6269\u5c55\u9605\u8bfb\uff1a\u52a8\u6001\u56fe\u4e0e\u9759\u6001\u56fe"},{"location":"basics/08_nn_graph.html#_2","text":"OneFlow Eager\u6a21\u5f0f\u4e0b\u7684\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\uff1a \u642d\u5efa\u795e\u7ecf\u7f51\u7edc","title":"\u76f8\u5173\u94fe\u63a5"},{"location":"cookies/activation_checkpointing.html","text":"Activation Checkpointing \u00b6 Activation Checkpointing \u7b80\u4ecb \u00b6 Activation Checkpointing \u662f\u9648\u5929\u5947\u56e2\u961f\u4e8e 2016 \u5e74\u5728\u8bba\u6587 Training Deep Nets with Sublinear Memory Cost \u4e2d\u63d0\u51fa\u7684\u4e00\u79cd\u4e9a\u7ebf\u6027\u5185\u5b58\u4f18\u5316\u6280\u672f\uff0c\u65e8\u5728\u51cf\u5c11\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u6fc0\u6d3b(activation)\u5e26\u6765\u7684\u663e\u5b58\u5360\u7528\u3002Activation Checkpointing \u7684\u57fa\u672c\u539f\u7406\u662f \u4ee5\u65f6\u95f4\u6362\u7a7a\u95f4 \uff1a\u7ecf\u8fc7\u8ba1\u7b97\u56fe\u5206\u6790\u540e\uff0c\u524d\u5411\u8fc7\u7a0b\u4e2d\u4e00\u4e9b\u6682\u65f6\u7528\u4e0d\u5230\u7684\u4e2d\u95f4\u6fc0\u6d3b\u7279\u5f81\u5c06\u88ab\u5220\u9664\u4ee5\u51cf\u5c11\u663e\u5b58\u5360\u7528\uff0c\u540e\u5411\u8fc7\u7a0b\u4e2d\u9700\u8981\u65f6\u518d\u501f\u52a9\u989d\u5916\u7684\u524d\u5411\u8ba1\u7b97\u6062\u590d\u5b83\u4eec\u3002 OneFlow \u7684\u9759\u6001\u56fe\u6a21\u5757 nn.Graph \u5df2\u7ecf\u652f\u6301 Activation Checkpointing\uff0c\u672c\u6587\u5c06\u4ecb\u7ecd\u5982\u4f55\u5728\u8bad\u7ec3\u4e2d\u5f00\u542f\u5b83\u3002 Activation Checkpointing \u4f7f\u7528\u793a\u4f8b \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\uff08\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff09\u3001\u635f\u5931\u51fd\u6570\u53ca\u4f18\u5316\u5668\uff0c\u548c\u4ee5\u5f80\u7684\u7528\u6cd5\u5b8c\u5168\u76f8\u540c\u3002 import oneflow as flow import oneflow.nn as nn DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) model_part1 = nn . Sequential ( nn . Linear ( 256 , 128 ), nn . ReLU (), nn . Linear ( 128 , 64 ), nn . ReLU () ) model_part1 = model_part1 . to ( DEVICE ) model_part1 . train () model_part2 = nn . Sequential ( nn . Linear ( 64 , 32 ), nn . ReLU (), nn . Linear ( 32 , 10 ) ) model_part2 = model_part2 . to ( DEVICE ) model_part2 . train () loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ([{ 'params' : model_part1 . parameters ()}, { 'params' : model_part2 . parameters ()}], lr = 1e-3 ) \u5982\u679c\u8981\u5f00\u542f activation checkpointing\uff0c\u53ea\u9700\u5728 nn.Graph \u6a21\u578b\u4e2d\u7684 Eager \u6a21\u578b\u6210\u5458 (\u5373 nn.Module \u5bf9\u8c61) \u5229\u7528 .to(nn.graph.GraphModule) \u65b9\u6cd5\u8f6c\u6362\u4e3a nn.graph.GraphModule \u5bf9\u8c61\uff0c\u5e76\u5728\u5176\u4e0a\u6307\u5b9a .activation_checkpointing = True \u3002\u6b64 API \u8be6\u89c1\uff1a activation_checkpointing \u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6253\u5f00 \"activation checkpointing\" \u7684 nn.Module\uff0c\u5176\u8f93\u5165 activation \u5c06\u4f1a\u88ab\u4fdd\u7559\uff0c\u800c\u5176\u5b83\u4e2d\u95f4 activation \u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u88ab\u4f7f\u7528\u65f6\u4f1a\u88ab\u91cd\u65b0\u8ba1\u7b97\u3002 class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model_part1 = model_part1 self . model_part2 = model_part2 # \u5728\u8fde\u7eed\u7684\u4e24\u4e2a nn.Module \u4e0a\u5f00\u542f activation checkpointing self . model_part1 . to ( nn . graph . GraphModule ) . activation_checkpointing = True self . model_part2 . to ( nn . graph . GraphModule ) . activation_checkpointing = True self . loss_fn = loss_fn self . add_optimizer ( optimizer ) def build ( self , x , y ): y_pred = self . model_part2 ( self . model_part1 ( x )) loss = self . loss_fn ( y_pred , y ) loss . backward () return y_pred , loss \u7136\u540e\uff0c\u50cf\u4ee5\u5f80\u90a3\u6837\u5f00\u59cb\u8bad\u7ec3\u7b49\u64cd\u4f5c\u5373\u53ef\u3002 graph_model = CustomGraph () for _ in range ( 100 ): x = flow . randn ( 128 , 256 ) . to ( DEVICE ) y = flow . ones ( 128 , 1 , dtype = flow . int64 ) . to ( DEVICE ) graph_model ( x , y ) # \u5176\u4ed6\u4ee3\u7801... \u5728 BERT \u6a21\u578b\u4e0a\u7684\u5bf9\u6bd4\u5b9e\u9a8c \u00b6 \u4e3a\u4e86\u9a8c\u8bc1 Activation Checkpointing \u7684\u5b9e\u9645\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 BERT \u6a21\u578b\u4e0a\u8fdb\u884c\u5bf9\u6bd4\u5b9e\u9a8c\u3002\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 libai \u5e93\u63d0\u4f9b\u7684 BERT \u6a21\u578b\uff0c\u53ea\u9700\u901a\u8fc7\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5c06 train.activation_checkpoint.enabled \u8bbe\u7f6e\u4e3a True \u5c31\u53ef\u4ee5\u5f00\u542f Activation Checkpointing\u3002 \u9996\u5148\uff0c\u6309\u7167 Prepare the Data and the Vocab \u51c6\u5907\u597d\u6570\u636e\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4f7f\u7528\u5355\u5361\u8bad\u7ec3\uff08\u5b9e\u9a8c\u73af\u5883\u4f7f\u7528\u7684 GPU \u4e3a NVIDIA GeForce RTX 3090\uff0c\u663e\u5b58\u5927\u5c0f\u4e3a 24268 MB\uff09\uff1a time python tools/train_net.py --config-file configs/bert_large_pretrain.py \u5728\u547d\u4ee4\u6700\u5f00\u5934\u52a0\u4e0a time \u547d\u4ee4\u6765\u8ba1\u91cf\u8bad\u7ec3\u8fc7\u7a0b\u6240\u8017\u8d39\u7684\u65f6\u95f4\u3002 \u5b9e\u9a8c\u7ed3\u679c\u5982\u4e0b\uff1a \u662f\u5426\u5f00\u542f Activation Checkpointing \u5e73\u5747\u663e\u5b58\u5360\u7528 \u8bad\u7ec3\u5b8c\u6210\u6240\u7528\u65f6\u95f4 \u5426 9141 MB 25 \u5206 16 \u79d2 \u662f 5978 MB 33 \u5206 36 \u79d2 \u4ece\u4e0a\u8868\u53ef\u4ee5\u770b\u51fa\uff0cActivation Checkpointing \u663e\u8457\u51cf\u5c11\u4e86\u8bad\u7ec3\u65f6\u7684\u663e\u5b58\u5360\u7528\u3002\u540c\u65f6\uff0c\u8bad\u7ec3\u6240\u7528\u65f6\u95f4\u7531\u4e8e\u9700\u8981\u989d\u5916\u7684\u524d\u5411\u8ba1\u7b97\u800c\u6709\u6240\u589e\u52a0\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u5f53\u7f3a\u4e4f\u663e\u5b58\u65f6\uff0cActivation Checkpointing \u4e0d\u5931\u4e3a\u4e00\u79cd\u5f88\u6709\u6548\u7684\u89e3\u51b3\u529e\u6cd5\u3002","title":"Activation Checkpointing"},{"location":"cookies/activation_checkpointing.html#activation-checkpointing","text":"","title":"Activation Checkpointing"},{"location":"cookies/activation_checkpointing.html#activation-checkpointing_1","text":"Activation Checkpointing \u662f\u9648\u5929\u5947\u56e2\u961f\u4e8e 2016 \u5e74\u5728\u8bba\u6587 Training Deep Nets with Sublinear Memory Cost \u4e2d\u63d0\u51fa\u7684\u4e00\u79cd\u4e9a\u7ebf\u6027\u5185\u5b58\u4f18\u5316\u6280\u672f\uff0c\u65e8\u5728\u51cf\u5c11\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u6fc0\u6d3b(activation)\u5e26\u6765\u7684\u663e\u5b58\u5360\u7528\u3002Activation Checkpointing \u7684\u57fa\u672c\u539f\u7406\u662f \u4ee5\u65f6\u95f4\u6362\u7a7a\u95f4 \uff1a\u7ecf\u8fc7\u8ba1\u7b97\u56fe\u5206\u6790\u540e\uff0c\u524d\u5411\u8fc7\u7a0b\u4e2d\u4e00\u4e9b\u6682\u65f6\u7528\u4e0d\u5230\u7684\u4e2d\u95f4\u6fc0\u6d3b\u7279\u5f81\u5c06\u88ab\u5220\u9664\u4ee5\u51cf\u5c11\u663e\u5b58\u5360\u7528\uff0c\u540e\u5411\u8fc7\u7a0b\u4e2d\u9700\u8981\u65f6\u518d\u501f\u52a9\u989d\u5916\u7684\u524d\u5411\u8ba1\u7b97\u6062\u590d\u5b83\u4eec\u3002 OneFlow \u7684\u9759\u6001\u56fe\u6a21\u5757 nn.Graph \u5df2\u7ecf\u652f\u6301 Activation Checkpointing\uff0c\u672c\u6587\u5c06\u4ecb\u7ecd\u5982\u4f55\u5728\u8bad\u7ec3\u4e2d\u5f00\u542f\u5b83\u3002","title":"Activation Checkpointing \u7b80\u4ecb"},{"location":"cookies/activation_checkpointing.html#activation-checkpointing_2","text":"\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\uff08\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff09\u3001\u635f\u5931\u51fd\u6570\u53ca\u4f18\u5316\u5668\uff0c\u548c\u4ee5\u5f80\u7684\u7528\u6cd5\u5b8c\u5168\u76f8\u540c\u3002 import oneflow as flow import oneflow.nn as nn DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) model_part1 = nn . Sequential ( nn . Linear ( 256 , 128 ), nn . ReLU (), nn . Linear ( 128 , 64 ), nn . ReLU () ) model_part1 = model_part1 . to ( DEVICE ) model_part1 . train () model_part2 = nn . Sequential ( nn . Linear ( 64 , 32 ), nn . ReLU (), nn . Linear ( 32 , 10 ) ) model_part2 = model_part2 . to ( DEVICE ) model_part2 . train () loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ([{ 'params' : model_part1 . parameters ()}, { 'params' : model_part2 . parameters ()}], lr = 1e-3 ) \u5982\u679c\u8981\u5f00\u542f activation checkpointing\uff0c\u53ea\u9700\u5728 nn.Graph \u6a21\u578b\u4e2d\u7684 Eager \u6a21\u578b\u6210\u5458 (\u5373 nn.Module \u5bf9\u8c61) \u5229\u7528 .to(nn.graph.GraphModule) \u65b9\u6cd5\u8f6c\u6362\u4e3a nn.graph.GraphModule \u5bf9\u8c61\uff0c\u5e76\u5728\u5176\u4e0a\u6307\u5b9a .activation_checkpointing = True \u3002\u6b64 API \u8be6\u89c1\uff1a activation_checkpointing \u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6253\u5f00 \"activation checkpointing\" \u7684 nn.Module\uff0c\u5176\u8f93\u5165 activation \u5c06\u4f1a\u88ab\u4fdd\u7559\uff0c\u800c\u5176\u5b83\u4e2d\u95f4 activation \u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u88ab\u4f7f\u7528\u65f6\u4f1a\u88ab\u91cd\u65b0\u8ba1\u7b97\u3002 class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model_part1 = model_part1 self . model_part2 = model_part2 # \u5728\u8fde\u7eed\u7684\u4e24\u4e2a nn.Module \u4e0a\u5f00\u542f activation checkpointing self . model_part1 . to ( nn . graph . GraphModule ) . activation_checkpointing = True self . model_part2 . to ( nn . graph . GraphModule ) . activation_checkpointing = True self . loss_fn = loss_fn self . add_optimizer ( optimizer ) def build ( self , x , y ): y_pred = self . model_part2 ( self . model_part1 ( x )) loss = self . loss_fn ( y_pred , y ) loss . backward () return y_pred , loss \u7136\u540e\uff0c\u50cf\u4ee5\u5f80\u90a3\u6837\u5f00\u59cb\u8bad\u7ec3\u7b49\u64cd\u4f5c\u5373\u53ef\u3002 graph_model = CustomGraph () for _ in range ( 100 ): x = flow . randn ( 128 , 256 ) . to ( DEVICE ) y = flow . ones ( 128 , 1 , dtype = flow . int64 ) . to ( DEVICE ) graph_model ( x , y ) # \u5176\u4ed6\u4ee3\u7801...","title":"Activation Checkpointing \u4f7f\u7528\u793a\u4f8b"},{"location":"cookies/activation_checkpointing.html#bert","text":"\u4e3a\u4e86\u9a8c\u8bc1 Activation Checkpointing \u7684\u5b9e\u9645\u6548\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 BERT \u6a21\u578b\u4e0a\u8fdb\u884c\u5bf9\u6bd4\u5b9e\u9a8c\u3002\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 libai \u5e93\u63d0\u4f9b\u7684 BERT \u6a21\u578b\uff0c\u53ea\u9700\u901a\u8fc7\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5c06 train.activation_checkpoint.enabled \u8bbe\u7f6e\u4e3a True \u5c31\u53ef\u4ee5\u5f00\u542f Activation Checkpointing\u3002 \u9996\u5148\uff0c\u6309\u7167 Prepare the Data and the Vocab \u51c6\u5907\u597d\u6570\u636e\u3002\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u4f7f\u7528\u5355\u5361\u8bad\u7ec3\uff08\u5b9e\u9a8c\u73af\u5883\u4f7f\u7528\u7684 GPU \u4e3a NVIDIA GeForce RTX 3090\uff0c\u663e\u5b58\u5927\u5c0f\u4e3a 24268 MB\uff09\uff1a time python tools/train_net.py --config-file configs/bert_large_pretrain.py \u5728\u547d\u4ee4\u6700\u5f00\u5934\u52a0\u4e0a time \u547d\u4ee4\u6765\u8ba1\u91cf\u8bad\u7ec3\u8fc7\u7a0b\u6240\u8017\u8d39\u7684\u65f6\u95f4\u3002 \u5b9e\u9a8c\u7ed3\u679c\u5982\u4e0b\uff1a \u662f\u5426\u5f00\u542f Activation Checkpointing \u5e73\u5747\u663e\u5b58\u5360\u7528 \u8bad\u7ec3\u5b8c\u6210\u6240\u7528\u65f6\u95f4 \u5426 9141 MB 25 \u5206 16 \u79d2 \u662f 5978 MB 33 \u5206 36 \u79d2 \u4ece\u4e0a\u8868\u53ef\u4ee5\u770b\u51fa\uff0cActivation Checkpointing \u663e\u8457\u51cf\u5c11\u4e86\u8bad\u7ec3\u65f6\u7684\u663e\u5b58\u5360\u7528\u3002\u540c\u65f6\uff0c\u8bad\u7ec3\u6240\u7528\u65f6\u95f4\u7531\u4e8e\u9700\u8981\u989d\u5916\u7684\u524d\u5411\u8ba1\u7b97\u800c\u6709\u6240\u589e\u52a0\u3002\u603b\u4f53\u6765\u8bf4\uff0c\u5f53\u7f3a\u4e4f\u663e\u5b58\u65f6\uff0cActivation Checkpointing \u4e0d\u5931\u4e3a\u4e00\u79cd\u5f88\u6709\u6548\u7684\u89e3\u51b3\u529e\u6cd5\u3002","title":"\u5728 BERT \u6a21\u578b\u4e0a\u7684\u5bf9\u6bd4\u5b9e\u9a8c"},{"location":"cookies/amp.html","text":"\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 \u00b6 AMP \u7b80\u4ecb \u00b6 \u5f53\u6211\u4eec\u5728\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u65f6\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u662f 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570 (FP32)\uff0c\u800c \u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6 (Automatic Mixed Precision, AMP) \u662f\u4e00\u79cd\u5141\u8bb8\u5728\u8bad\u7ec3\u6a21\u578b\u65f6\u540c\u65f6\u4f7f\u7528 FP32 \u548c FP16 \u7684\u6280\u672f\u3002\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u8bad\u7ec3\u6a21\u578b\u65f6\u7684\u5185\u5b58\u5360\u7528\u66f4\u5c11\u3001\u8ba1\u7b97\u66f4\u5feb\uff0c\u4f46\u7531\u4e8e FP16 \u7684\u6570\u503c\u8303\u56f4\u6bd4 FP32 \u5c0f\uff0c\u56e0\u6b64\u66f4\u5bb9\u6613\u51fa\u73b0\u6570\u503c\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u540c\u65f6\u53ef\u80fd\u5b58\u5728\u4e00\u5b9a\u8bef\u5dee\u3002\u4f46\u5927\u91cf\u5b9e\u8df5\u8bc1\u660e\uff0c\u5f88\u591a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u7528\u8fd9\u79cd\u6280\u672f\u6765\u8bad\u7ec3\uff0c\u5e76\u4e14\u6ca1\u6709\u7cbe\u5ea6\u635f\u5931\u3002 AMP \u4f7f\u7528\u793a\u4f8b \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u3001\u635f\u5931\u51fd\u6570\u53ca\u4f18\u5316\u5668\uff0c\u548c\u4ee5\u5f80\u7684\u7528\u6cd5\u5b8c\u5168\u76f8\u540c\u3002 import oneflow as flow import oneflow.nn as nn DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) model = nn . Sequential ( nn . Linear ( 256 , 128 ), nn . ReLU (), nn . Linear ( 128 , 10 ) ) model = model . to ( DEVICE ) model . train () loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) \u5982\u679c\u8981\u5f00\u542f AMP \u6a21\u5f0f\uff0c\u53ea\u9700\u5728 nn.Graph \u6a21\u578b\u4e2d\u6dfb\u52a0 self.config.enable_amp(True) \uff0c\u6b64 API \u8be6\u89c1\uff1a enable_amp \u3002 class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model self . loss_fn = loss_fn self . add_optimizer ( optimizer ) self . config . enable_amp ( True ) # \u5f00\u542f AMP \u6a21\u5f0f def build ( self , x , y ): y_pred = self . model ( x ) loss = self . loss_fn ( y_pred , y ) loss . backward () return y_pred \u7136\u540e\uff0c\u50cf\u4ee5\u5f80\u90a3\u6837\u5f00\u59cb\u8bad\u7ec3\u7b49\u64cd\u4f5c\u5373\u53ef\u3002 graph_model = CustomGraph () for _ in range ( 100 ): x = flow . randn ( 128 , 256 ) . to ( DEVICE ) y = flow . ones ( 128 , 1 , dtype = flow . int64 ) . to ( DEVICE ) graph_model ( x , y ) Gradient Scaling \u00b6 Gradient Scaling (\u68af\u5ea6\u7f29\u653e) \u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3 FP16 \u6613\u5bfc\u81f4\u6570\u503c\u6ea2\u51fa\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u5176\u57fa\u672c\u539f\u7406\u662f\u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e00\u4e2a scale factor \u5bf9\u635f\u5931\u548c\u68af\u5ea6\u8fdb\u884c\u7f29\u653e\uff0c\u4ee5\u6539\u53d8\u5176\u6570\u503c\u7684\u91cf\u7ea7\uff0c\u4ece\u800c\u5c3d\u53ef\u80fd\u7f13\u89e3\u6570\u503c\u6ea2\u51fa\u95ee\u9898\u3002 OneFlow \u63d0\u4f9b\u4e86 GradScaler \u6765\u5728 AMP \u6a21\u5f0f\u4e0b\u4f7f\u7528 Gradient Scaling\uff0c\u53ea\u9700\u8981\u5728 nn.Graph \u6a21\u578b\u7684 __init__ \u65b9\u6cd5\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2a GradScaler \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 set_grad_scaler \u63a5\u53e3\u8fdb\u884c\u6307\u5b9a\u5373\u53ef\uff0cnn.Graph \u5c06\u4f1a\u81ea\u52a8\u7ba1\u7406 Gradient Scaling \u7684\u6574\u4e2a\u8fc7\u7a0b\u3002\u4ee5\u4e0a\u6587\u4e2d\u7684 CustomGraph \u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5728\u5176 __init__ \u65b9\u6cd5\u4e2d\u6dfb\u52a0\uff1a grad_scaler = flow . amp . GradScaler ( init_scale = 2 ** 12 , growth_factor = 2.0 , backoff_factor = 0.5 , growth_interval = 1000 , ) self . set_grad_scaler ( grad_scaler ) scale factor \u7684\u8ba1\u7b97\u8fc7\u7a0b\u4ee5\u53ca GradScaler \u7684\u53c2\u6570\u7684\u542b\u4e49\u5982\u4e0b\uff1a scale factor \u7684\u5927\u5c0f\u5728\u8fed\u4ee3\u66f4\u65b0\u4e2d\u52a8\u6001\u4f30\u8ba1\uff08\u521d\u59cb\u503c\u7531 init_scale \u6307\u5b9a\uff09\uff0c\u4e3a\u4e86\u5c3d\u53ef\u80fd\u51cf\u5c11\u6570\u503c\u4e0b\u6ea2 (underflow)\uff0cscale factor \u5e94\u8be5\u66f4\u5927\uff1b\u4f46\u5982\u679c\u592a\u5927\uff0cFP16 \u53c8\u5bb9\u6613\u53d1\u751f\u6570\u503c\u4e0a\u6ea2 (overflow)\uff0c\u5bfc\u81f4\u51fa\u73b0 inf \u6216 NaN\u3002\u52a8\u6001\u4f30\u8ba1\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u4e0d\u51fa\u73b0 inf \u6216 NaN \u7684\u60c5\u51b5\u4e0b\uff0c\u5c3d\u53ef\u80fd\u589e\u5927 scale factor\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u90fd\u4f1a\u68c0\u67e5\u662f\u5426\u6709 inf \u6216 NaN \u7684\u68af\u5ea6\u51fa\u73b0\uff1a \u5982\u679c\u6709\uff1a\u6b64\u6b21\u6743\u91cd\u66f4\u65b0\u5c06\u88ab\u5ffd\u7565\uff0c\u5e76\u4e14 scale factor \u5c06\u4f1a\u51cf\u5c0f\uff08\u4e58\u4e0a backoff_factor \uff09 \u5982\u679c\u6ca1\u6709\uff1a\u6743\u91cd\u6b63\u5e38\u66f4\u65b0\uff0c\u5f53\u8fde\u7eed\u591a\u6b21\u8fed\u4ee3\u4e2d\uff08\u7531 growth_interval \u6307\u5b9a\uff09\u6ca1\u6709\u51fa\u73b0 inf \u6216 NaN\uff0c\u5219 scale factor \u5c06\u4f1a\u589e\u5927\uff08\u4e58\u4e0a growth_factor \uff09","title":"\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3"},{"location":"cookies/amp.html#_1","text":"","title":"\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3"},{"location":"cookies/amp.html#amp","text":"\u5f53\u6211\u4eec\u5728\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u65f6\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u662f 32 \u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570 (FP32)\uff0c\u800c \u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6 (Automatic Mixed Precision, AMP) \u662f\u4e00\u79cd\u5141\u8bb8\u5728\u8bad\u7ec3\u6a21\u578b\u65f6\u540c\u65f6\u4f7f\u7528 FP32 \u548c FP16 \u7684\u6280\u672f\u3002\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u8bad\u7ec3\u6a21\u578b\u65f6\u7684\u5185\u5b58\u5360\u7528\u66f4\u5c11\u3001\u8ba1\u7b97\u66f4\u5feb\uff0c\u4f46\u7531\u4e8e FP16 \u7684\u6570\u503c\u8303\u56f4\u6bd4 FP32 \u5c0f\uff0c\u56e0\u6b64\u66f4\u5bb9\u6613\u51fa\u73b0\u6570\u503c\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u540c\u65f6\u53ef\u80fd\u5b58\u5728\u4e00\u5b9a\u8bef\u5dee\u3002\u4f46\u5927\u91cf\u5b9e\u8df5\u8bc1\u660e\uff0c\u5f88\u591a\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u7528\u8fd9\u79cd\u6280\u672f\u6765\u8bad\u7ec3\uff0c\u5e76\u4e14\u6ca1\u6709\u7cbe\u5ea6\u635f\u5931\u3002","title":"AMP \u7b80\u4ecb"},{"location":"cookies/amp.html#amp_1","text":"\u9996\u5148\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\u3001\u635f\u5931\u51fd\u6570\u53ca\u4f18\u5316\u5668\uff0c\u548c\u4ee5\u5f80\u7684\u7528\u6cd5\u5b8c\u5168\u76f8\u540c\u3002 import oneflow as flow import oneflow.nn as nn DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) model = nn . Sequential ( nn . Linear ( 256 , 128 ), nn . ReLU (), nn . Linear ( 128 , 10 ) ) model = model . to ( DEVICE ) model . train () loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) \u5982\u679c\u8981\u5f00\u542f AMP \u6a21\u5f0f\uff0c\u53ea\u9700\u5728 nn.Graph \u6a21\u578b\u4e2d\u6dfb\u52a0 self.config.enable_amp(True) \uff0c\u6b64 API \u8be6\u89c1\uff1a enable_amp \u3002 class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model self . loss_fn = loss_fn self . add_optimizer ( optimizer ) self . config . enable_amp ( True ) # \u5f00\u542f AMP \u6a21\u5f0f def build ( self , x , y ): y_pred = self . model ( x ) loss = self . loss_fn ( y_pred , y ) loss . backward () return y_pred \u7136\u540e\uff0c\u50cf\u4ee5\u5f80\u90a3\u6837\u5f00\u59cb\u8bad\u7ec3\u7b49\u64cd\u4f5c\u5373\u53ef\u3002 graph_model = CustomGraph () for _ in range ( 100 ): x = flow . randn ( 128 , 256 ) . to ( DEVICE ) y = flow . ones ( 128 , 1 , dtype = flow . int64 ) . to ( DEVICE ) graph_model ( x , y )","title":"AMP \u4f7f\u7528\u793a\u4f8b"},{"location":"cookies/amp.html#gradient-scaling","text":"Gradient Scaling (\u68af\u5ea6\u7f29\u653e) \u662f\u4e00\u79cd\u7528\u4e8e\u89e3\u51b3 FP16 \u6613\u5bfc\u81f4\u6570\u503c\u6ea2\u51fa\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u5176\u57fa\u672c\u539f\u7406\u662f\u5728\u53cd\u5411\u4f20\u64ad\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e00\u4e2a scale factor \u5bf9\u635f\u5931\u548c\u68af\u5ea6\u8fdb\u884c\u7f29\u653e\uff0c\u4ee5\u6539\u53d8\u5176\u6570\u503c\u7684\u91cf\u7ea7\uff0c\u4ece\u800c\u5c3d\u53ef\u80fd\u7f13\u89e3\u6570\u503c\u6ea2\u51fa\u95ee\u9898\u3002 OneFlow \u63d0\u4f9b\u4e86 GradScaler \u6765\u5728 AMP \u6a21\u5f0f\u4e0b\u4f7f\u7528 Gradient Scaling\uff0c\u53ea\u9700\u8981\u5728 nn.Graph \u6a21\u578b\u7684 __init__ \u65b9\u6cd5\u4e2d\u5b9e\u4f8b\u5316\u4e00\u4e2a GradScaler \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7 set_grad_scaler \u63a5\u53e3\u8fdb\u884c\u6307\u5b9a\u5373\u53ef\uff0cnn.Graph \u5c06\u4f1a\u81ea\u52a8\u7ba1\u7406 Gradient Scaling \u7684\u6574\u4e2a\u8fc7\u7a0b\u3002\u4ee5\u4e0a\u6587\u4e2d\u7684 CustomGraph \u4e3a\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u5728\u5176 __init__ \u65b9\u6cd5\u4e2d\u6dfb\u52a0\uff1a grad_scaler = flow . amp . GradScaler ( init_scale = 2 ** 12 , growth_factor = 2.0 , backoff_factor = 0.5 , growth_interval = 1000 , ) self . set_grad_scaler ( grad_scaler ) scale factor \u7684\u8ba1\u7b97\u8fc7\u7a0b\u4ee5\u53ca GradScaler \u7684\u53c2\u6570\u7684\u542b\u4e49\u5982\u4e0b\uff1a scale factor \u7684\u5927\u5c0f\u5728\u8fed\u4ee3\u66f4\u65b0\u4e2d\u52a8\u6001\u4f30\u8ba1\uff08\u521d\u59cb\u503c\u7531 init_scale \u6307\u5b9a\uff09\uff0c\u4e3a\u4e86\u5c3d\u53ef\u80fd\u51cf\u5c11\u6570\u503c\u4e0b\u6ea2 (underflow)\uff0cscale factor \u5e94\u8be5\u66f4\u5927\uff1b\u4f46\u5982\u679c\u592a\u5927\uff0cFP16 \u53c8\u5bb9\u6613\u53d1\u751f\u6570\u503c\u4e0a\u6ea2 (overflow)\uff0c\u5bfc\u81f4\u51fa\u73b0 inf \u6216 NaN\u3002\u52a8\u6001\u4f30\u8ba1\u7684\u8fc7\u7a0b\u5c31\u662f\u5728\u4e0d\u51fa\u73b0 inf \u6216 NaN \u7684\u60c5\u51b5\u4e0b\uff0c\u5c3d\u53ef\u80fd\u589e\u5927 scale factor\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u90fd\u4f1a\u68c0\u67e5\u662f\u5426\u6709 inf \u6216 NaN \u7684\u68af\u5ea6\u51fa\u73b0\uff1a \u5982\u679c\u6709\uff1a\u6b64\u6b21\u6743\u91cd\u66f4\u65b0\u5c06\u88ab\u5ffd\u7565\uff0c\u5e76\u4e14 scale factor \u5c06\u4f1a\u51cf\u5c0f\uff08\u4e58\u4e0a backoff_factor \uff09 \u5982\u679c\u6ca1\u6709\uff1a\u6743\u91cd\u6b63\u5e38\u66f4\u65b0\uff0c\u5f53\u8fde\u7eed\u591a\u6b21\u8fed\u4ee3\u4e2d\uff08\u7531 growth_interval \u6307\u5b9a\uff09\u6ca1\u6709\u51fa\u73b0 inf \u6216 NaN\uff0c\u5219 scale factor \u5c06\u4f1a\u589e\u5927\uff08\u4e58\u4e0a growth_factor \uff09","title":"Gradient Scaling"},{"location":"cookies/global_tensor.html","text":"\u4f7f\u7528 Global Tensor \u8fdb\u884c\u5206\u5e03\u5f0f\u7f16\u7a0b\uff1a\u57fa\u7840\u64cd\u4f5c \u00b6 By YaoChi , Xu Xiaoyu , Zuo Yihao , Guoliang Cheng Global Tensor \u662f\u591a\u673a\u591a\u8bbe\u5907\u6267\u884c\u7684 Tensor\uff0c\u662f\u5b9e\u73b0\u5168\u5c40\u89c6\u89d2\uff08Global View\uff09\u7f16\u7a0b\u7684\u63a5\u53e3\u3002 \u5f53\u524d\u7684\u5e76\u884c\u7a0b\u5e8f\uff0c\u5927\u90fd\u91c7\u7528\u5355\u7a0b\u5e8f\u591a\u6570\u636e\uff08SPMD\uff09\u7684\u65b9\u5f0f\u6765\u7f16\u7a0b\u3002\u5e76\u884c\u6267\u884c\u540c\u6837\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u5904\u7406\u4e0d\u540c\u6570\u636e\uff0c\u4ee5\u6b64\u5b9e\u73b0\u6570\u636e\u7684\u5e76\u884c\u5904\u7406\u3002\u4ee5 PyTorch DistributedDataParallel\uff08DDP\uff09 \u4e3a\u4f8b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6267\u884c\u540c\u6837\u7684\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u903b\u8f91\uff0c\u4f46\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u52a0\u8f7d\u6570\u636e\u96c6\u7684\u4e0d\u540c\u5206\u7247\u3002 \u5355\u7a0b\u5e8f\u591a\u6570\u636e\uff08SPMD\uff09\u7f16\u7a0b\u7684\u7f3a\u9677\u662f\u591a\u6570\u636e\u7684\u901a\u4fe1\u9ebb\u70e6\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u7684\u573a\u666f\u4e0b\uff0cSPMD \u7f16\u7a0b\u9700\u8981\u5728\u539f\u8ba1\u7b97\u4ee3\u7801\u4e2d\u63d2\u5165\u901a\u4fe1\u64cd\u4f5c\uff0c\u6bd4\u5982\u6570\u636e\u5e76\u884c\u65f6\u5bf9\u68af\u5ea6\u6c47\u603b\uff08AllReduce \u64cd\u4f5c\uff09\uff0c\u6a21\u578b\u5e76\u884c\u65f6\u9700\u8981 AllGather/ReduceScatter \u64cd\u4f5c\u3002\u5982\u679c\u5e76\u884c\u6a21\u5f0f\u590d\u6742\uff0c\u6216\u8005\u9700\u8981\u8bd5\u9a8c\u65b0\u5e76\u884c\u6a21\u5f0f\uff0c\u63d2\u5165\u901a\u4fe1\u64cd\u4f5c\u5c31\u53d8\u5f97\u96be\u4ee5\u5f00\u53d1\u548c\u7ef4\u62a4\u3002 \u5168\u5c40\u89c6\u89d2\uff08Global View\uff09\u7f16\u7a0b\u63d0\u4f9b\u4e86\u5355\u7a0b\u5e8f\u5355\u6570\u636e\uff08SPSD\uff09\u7684\u7f16\u7a0b\u89c6\u89d2\u3002\u548c SPMD \u7f16\u7a0b\u4e0d\u540c\u7684\u662f\uff0c\u6570\u636e\u4ece\u7f16\u7a0b\u63a5\u53e3\u5c42\u9762\u770b\u4e5f\u662f\u5355\u4e00\u7684\u4e86\u3002 \u6570\u636e\u662f\u540c\u4e00\u4e2a\u903b\u8f91\u6570\u636e\uff0c\u5176\u5b9e\u5f88\u81ea\u7136\u3002\u5f53\u6211\u4eec\u628a\u4e00\u4e2a\u5355\u8fdb\u7a0b\u7a0b\u5e8f\u6269\u5c55\u5230\u5e76\u884c\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u5355\u8fdb\u7a0b\u6570\u636e\u88ab\u6269\u5c55\u6210\u591a\u8fdb\u7a0b\u6570\u636e\uff0c\u591a\u4e2a\u8fdb\u7a0b\u4e0a\u7684\u8fd9\u4e9b\u6570\u636e\u90fd\u5bf9\u5e94\u539f\u5355\u8fdb\u7a0b\u7a0b\u5e8f\u4e2d\u7684\u540c\u4e00\u4e2a\u903b\u8f91\u6570\u636e\u3002\u8fd9\u4e2a\u903b\u8f91\u6570\u636e\u5728 OneFlow \u4e2d\u53eb Global Tensor\u3002 \u7f16\u7a0b\u65f6\uff0cGlobal Tensor \u8ba9\u7528\u6237\u53ef\u4ee5\u7528 SPSD \u7684\u63a5\u53e3\u6765\u7f16\u7a0b\uff0c\u5373\u6309\u7167\u5355\u673a\u5355\u8bbe\u5907\u7684\u903b\u8f91\u89c6\u89d2\u6765\u5199\u7a0b\u5e8f\u3002\u7136\u540e OneFlow \u6846\u67b6\u5185\u90e8\u4f1a\u81ea\u52a8\u7684\u8f6c\u6362\u6210\u7269\u7406\u7684 SPMD/MPMD \u65b9\u5f0f\u6765\u505a\u5e76\u884c/\u5206\u5e03\u5f0f\u6267\u884c\u3002 \u4f7f\u7528 Global Tensor\uff0c\u5c31\u53ef\u4ee5\u91c7\u7528\u6bd4\u8f83\u81ea\u7136\u7684 Global View \u89c6\u89d2\uff0c\u628a\u591a\u673a\u591a\u8bbe\u5907\u770b\u505a\u4e00\u4e2a\u8bbe\u5907\u6765\u7f16\u7a0b\uff0c\u5b9e\u73b0 SPSD \u7f16\u7a0b\u3002 Global Tensor \u00b6 \u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0cGlobal \u7684\u542b\u4e49\u901a\u5e38\u662f\u8fdb\u7a0b\u5185\u7684\u5168\u5c40\u53ef\u89c1\uff0c\u6bd4\u5982 \u5168\u5c40\u53d8\u91cf\uff08Global Variable\uff09 \u3002 \u4f46\u662f Global Tensor \u4e2d\u7684 \u201cGlobal\u201d \u7684\u542b\u4e49\u662f\u8fdb\u7a0b\u95f4\u5168\u5c40\u53ef\u89c1\uff0c\u6240\u4ee5 Global Tensor \u66f4\u4e3a\u51c6\u786e\u7684\u7684\u8bf4\u6cd5\u662f Global (on all processes) Tensor\uff0c\u5373\u6240\u6709\u8fdb\u7a0b\u53ef\u89c1\u7684 Tensor\u3002 Global Tensor \u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e0a\u90fd\u5b58\u5728\uff0c\u5728\u6240\u6709\u8fdb\u7a0b\u4e0a\u88ab\u67d0\u7b97\u5b50\u6267\u884c\u65f6\uff0c\u5c31\u81ea\u52a8\u5b8c\u6210\u4e86\u5bf9\u8be5 Tensor \u7684\u591a\u673a\u591a\u8bbe\u5907\u6267\u884c\u3002 \u5f53\u524d\u5e38\u7528\u7684 Tensor\uff0c\u53ea\u5728\u5355\u4e2a\u8fdb\u7a0b\u5185\u53ef\u89c1\uff0c\u5b58\u5728\u4e8e\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff0cOneFlow \u4e2d\u628a\u8fd9\u79cd Tensor \u53eb\u505a Local Tensor\u3002Local \u662f\u76f8\u5bf9 Global \u800c\u8a00\u7684\uff0c\u6240\u4ee5 Local Tensor \u53ef\u4ee5\u8ba4\u4e3a\u662f Local (on one process) Tensor\u3002 OneFlow \u7684\u7b97\u5b50\u5927\u90e8\u5206\u517c\u5bb9 Local Tensor \u548c Global Tensor \u7684\u6267\u884c\u3002Local Tensor \u53ef\u4ee5\u4fbf\u6377\u5730\u8f6c\u5316\u4e3a Global Tensor\u3002\u5982\u6b64\uff0c\u5355\u673a\u5355\u5361\u6267\u884c\u7684\u4ee3\u7801\u53ef\u4ee5\u5e73\u6ed1\u5730\u8f6c\u6362\u6210\u591a\u673a\u591a\u5361\u6267\u884c\u7684\u4ee3\u7801\u3002 \u4f7f\u7528 Global Tensor\uff0c\u53ef\u4ee5\u975e\u5e38\u4fbf\u6377\u5730\u8fdb\u884c\u591a\u673a\u591a\u5361\u7684\u6a21\u578b\u5f00\u53d1\uff0c\u76f8\u6bd4\u4f7f\u7528\u539f\u59cb\u901a\u4fe1\u7b97\u5b50\uff0c\u53ef\u4ee5\u6210\u500d\u63d0\u9ad8\u5e76\u884c\u6267\u884c\u6a21\u578b\u7684\u5f00\u53d1\u6548\u7387\u3002 \u521b\u5efa Global Tensor \u00b6 \u73b0\u5728\u5c1d\u8bd5\u5728\u6709 2 \u5f20 GPU \u7684\u4e3b\u673a\u4e0a\u521b\u5efa\u4e00\u4e2a Global Tensor\u3002\u4ee5 randn \u7b97\u5b50\u4e3a\u4f8b\uff0c\u521b\u5efa\u4e00\u4e2a Python \u6587\u4ef6 test_randn_global.py \uff0c\u52a0\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a import oneflow as flow # Place a global tensor on cuda device of rank(process) 0 and 1 placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) # Each rank's local data is a part data as a result of spliting global data on dim 0 sbp = flow . sbp . split ( dim = 0 ) # Create a global tensor by randn x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) # Print local data print ( \"Local data of global tensor: \\n \" , x . to_local () . numpy ()) # Print global data print ( \"Global data of global tensor: \\n \" , x . numpy ()) \u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6709\u4e00\u4e9b\u65b0\u51fa\u73b0\u7684\u6982\u5ff5\uff1a placement \u8868\u793a Global Tensor \u5206\u5e03\u7684\u7269\u7406\u8bbe\u5907\uff0c\u53c2\u6570 type \u6307\u5b9a\u4e86\u7269\u7406\u8bbe\u5907\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u4f7f\u7528 \u201ccuda\u201d \u8868\u793a GPU \u8bbe\u5907\uff0c\u53c2\u6570 ranks \u6307\u5b9a\u4e86\u8bbe\u5907 ID\u3002\u5bf9\u4e8e\u6ca1\u6709 2 \u5f20 GPU \u7684\u8bfb\u8005\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u5c06 type \u6307\u5b9a\u4e3a \"cpu\" \uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528 CPU \u6a21\u62df\u591a\u4e2a\u8bbe\u5907\uff0c\u4e0b\u6587\u7684\u4ee3\u7801\u540c\u6837\u9002\u7528\uff1b sbp \u8868\u793a Global Tensor \u5206\u5e03\u7684\u65b9\u5f0f\uff0c\u4ee3\u7801\u4e2d\u7684 sbp = flow.sbp.split(dim=0) \u8868\u793a\u628a Global Tensor \u5728\u7ef4\u5ea6 0 \u5747\u5300\u5207\u5206\uff1b to_local() \u53ef\u4ee5\u4ece Global Tensor \u4e2d\u83b7\u53d6\u5176\u5728\u5f53\u524d rank \u7684 Local Tensor\uff0c\u56e0\u4e3a Global Tensor \u5728\u6bcf\u4e2a rank \u90fd\u5185\u542b\u4e86\u4e00\u4e2a Local Tensor \u4f5c\u4e3a\u5b9e\u9645\u5b58\u5728\u7684\u672c\u5730\u5206\u91cf\u3002 \u7136\u540e\u914d\u7f6e\u4e0b\u591a\u8fdb\u7a0b\u542f\u52a8\u4f9d\u8d56\u7684\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u91cc\u662f\u4e24\u5361\u6267\u884c\uff0c\u5bf9\u5e94\u4e24\u4e2a\u8fdb\u7a0b\u542f\u52a8\uff0c\u6240\u4ee5\u9700\u8981\u6253\u5f00\u4e24\u4e2a Terminal\uff0c\u5206\u522b\u914d\u7f6e\u5982\u4e0b\u73af\u5883\u53d8\u91cf\uff1a Note \u5206\u522b \u70b9\u51fb \u4ee5\u4e0b Terminal 0 \u6216 Terminal 1 \u6807\u7b7e\uff0c\u67e5\u770b 2 \u4e2a\u63a7\u5236\u53f0\u7684\u547d\u4ee4/\u4ee3\u7801 Terminal 0 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 0 LOCAL_RANK = 0 Terminal 1 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 1 LOCAL_RANK = 1 \u4ee5\u4e0a\u73af\u5883\u53d8\u91cf\u7684\u8be6\u7ec6\u89e3\u91ca\u53ca\u501f\u52a9\u5de5\u5177\u505a\u5206\u5e03\u5f0f\u542f\u52a8\uff0c\u8bf7\u53c2\u8003\u6587\u672b\u7684 \u6269\u5c55\u9605\u8bfb \u3002 \u6700\u540e\uff0c\u5728\u4e24\u4e2a Terminal \u4e0b\u5206\u522b\u542f\u52a8\u4e00\u4e0b test_randn_global.py \uff0c\u89c2\u5bdf Global Tensor \u7684\u521b\u5efa\u7ed3\u679c\uff1a python3 test_randn_global.py \u8fd9\u6837\uff0c\u5728 Terminal 0 \u5373 rank 0 \u53ef\u4ee5\u770b\u5230\uff1a Local data of global tensor: [[-0.07157125 -0.92717147 1.5102768 1.4611115 1.014263 ] [-0.1511031 1.570759 0.9416077 0.6184639 2.4420679 ]] Global data of global tensor: [[-0.07157125 -0.92717147 1.5102768 1.4611115 1.014263 ] [-0.1511031 1.570759 0.9416077 0.6184639 2.4420679 ] [-0.38203463 0.453836 0.9136015 2.35773 -0.3279942 ] [-0.8570119 -0.91476554 -0.06646168 0.50022084 -0.4387695 ]] \u5728 Terminal 1 \u5373 rank 1 \u53ef\u4ee5\u770b\u5230\uff1a Local data of global tensor: [[-0.38203463 0.453836 0.9136015 2.35773 -0.3279942 ] [-0.8570119 -0.91476554 -0.06646168 0.50022084 -0.4387695 ]] Global data of global tensor: [[-0.07157125 -0.92717147 1.5102768 1.4611115 1.014263 ] [-0.1511031 1.570759 0.9416077 0.6184639 2.4420679 ] [-0.38203463 0.453836 0.9136015 2.35773 -0.3279942 ] [-0.8570119 -0.91476554 -0.06646168 0.50022084 -0.4387695 ]] \u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a rank \u7684 Local Tensor \u5728\u7ef4\u5ea6 0 \u62fc\u63a5\u540e\uff0c\u5c31\u662f\u5b8c\u6574\u7684 Global Tensor \u7684\u503c\u3002 \u7531 Local Tensor \u5f97\u5230 Global Tensor \u00b6 \u53ef\u4ee5\u5148\u521b\u5efa Local Tensor\uff0c\u518d\u5229\u7528 Tensor.to_global \u65b9\u6cd5\uff0c\u5c06 Local Tensor \u8f6c\u4e3a Global Tensor\u3002 \u521b\u5efa\u5982\u4e0b\u7a0b\u5e8f\uff0c\u91c7\u7528\u4e0a\u6587\u540c\u6837\u7684\u65b9\u5f0f\u542f\u52a8\uff1a import oneflow as flow x = flow . randn ( 2 , 5 ) . cuda () print ( x . is_local ) # True print ( x . is_global ) # False placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) print ( x_global . shape ) # (4, 5) print ( x . is_local ) # True print ( x_global . is_global ) # True \u8be5\u7a0b\u5e8f\u5728 2 \u4e2a GPU \u8bbe\u5907\u4e0a\u5206\u522b\u521b\u5efa\u4e86 shape=(2,5) \u7684 Local Tensor\uff0c\u5373 x\u3002 \u7136\u540e\u5b9a\u4e49 placement \u4e3a rank 0 \u548c 1 \u4e0a\u7684 cuda \u8bbe\u5907\uff0cSBP \u4e3a tensor \u7b2c 0 \u7ef4\u7684\u5207\u5206\uff0c\u539f\u672c Local Tensor \u7ecf\u8fc7 to_global \u53d8\u6362\u540e\uff0c\u5c31\u5f97\u5230\u4e00\u4e2a\u540d\u4e3a x_global \u7684 Global Tensor\u3002 \u53ef\u4ee5\u89c2\u5bdf\u5230 x_global \u7684 shape \u53d8\u4e3a\u4e86 (4, 5) \uff0c\u8fd9\u662f Global Tensor \u7684 shape\uff08global shape\uff09\u3002 Global Tensor \u4e0e Local Tensor \u4e4b\u95f4\u4e3a\u603b\u91cf\u4e0e\u5206\u91cf\u7684\u5173\u7cfb\u3002Local Tensor \u662f\u603b\u91cf\u5728\u672c rank \u7684\u5206\u91cf\u3002\u5206\u91cf\u548c\u603b\u91cf\u7684\u5177\u4f53\u5173\u7cfb\u7531 Placement \u548c SBP \u786e\u5b9a\uff0c\u6bd4\u5982\u8fd9\u91cc\u7684\u5173\u7cfb\u662f\u5728 0 \u548c 1 \u53f7 GPU \u4e0a\uff0c x_global \u5728\u7b2c 0 \u7ef4 split \u800c\u5f97\u5230 x \u3002 to_global \u65b9\u6cd5\u6839\u636e\u5982\u4e0a\u5173\u7cfb\u53ef\u4ee5\u4ece x.shape \u63a8\u7406\u51fa x_global.shape \uff1a\u628a\u4e24\u4e2a GPU \u4e0a\u7684 Local Tensor x \u5728\u7b2c 0 \u7ef4\u62fc\u63a5\u540e\u5f97\u5230 x_global \u3002 Global Tensor \u9664\u4e86 shape\uff0c\u8fd8\u6709\u6570\u636e\u90e8\u5206\u3002\u4e00\u4e2a Global Tensor \u7684\u5185\u90e8\uff0c\u5728\u6bcf\u4e2a rank \u4e0a\u90fd\u5185\u542b\u4e86\u4e00\u4e2a Local Tensor \u4f5c\u4e3a\u5176\u672c\u5730\u5206\u91cf\u3002 \u8fd9\u4e2a Local Tensor \u5c31\u662f Global Tensor \u5728\u6bcf\u4e2a rank \u7684\u7269\u7406\u6570\u636e\u3002\u8fd9\u7b26\u5408\u671f\u5f85\u7684\uff0c\u6bcf\u4e2a rank \u53ea\u9700\u4fdd\u5b58\u4e00\u90e8\u5206\u7269\u7406\u6570\u636e\u3002 \u7531 Global Tensor \u5f97\u5230 Local Tensor \u00b6 \u5982\u679c\u60f3\u5f97\u5230 Global Tensor \u7684\u672c\u5730\u5206\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7 to_local \u65b9\u6cd5\u5f97\u5230\u3002\u4f8b\u5982\uff1a import oneflow as flow placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) print ( x . to_local ()) \u5f53\u6267\u884c x.to_local() \u65f6\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684 rank \u5c06\u5206\u522b\u5f97\u5230\u4e00\u4e2a shape \u4e3a (2, 5) \u7684\u672c\u5730\u5206\u91cf tensor\u3002 \u5728 Terminal 0 \u5373 rank 0 \u53ef\u4ee5\u770b\u5230\uff1a tensor([[-0.2730, 1.8042, 0.0721, -0.5024, -1.2583], [-0.3379, 0.9371, 0.7981, -0.5447, -0.5629]], dtype=oneflow.float32) \u5728 Terminal 1 \u5373 rank 1 \u53ef\u4ee5\u770b\u5230\uff1a tensor([[ 0.6829, 0.4849, 2.1611, 1.4059, 0.0934], [-0.0301, -0.6942, -0.8094, -1.3050, -0.1778]], dtype=oneflow.float32) to_local() \u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0c\u56e0\u4e3a Global Tensor \u5df2\u7ecf\u901a\u8fc7 placement \u548c SBP \u786e\u5b9a\u597d\u4e86\u5b83\u7684\u672c\u5730\u5206\u91cf\uff0c\u6240\u4ee5\u76f4\u63a5\u53d6\u672c\u5730\u5206\u91cf\u5bf9\u5e94\u7684 Local Tensor \u5c31\u597d\u3002 \u7531 Global Tensor \u8f6c\u6210\u53e6\u4e00\u4e2a Global Tensor \u00b6 \u8fdb\u884c\u5206\u5e03\u5f0f\u8ba1\u7b97\u901a\u5e38\u90fd\u9700\u8981\u5728\u6b63\u5e38\u7684\u8ba1\u7b97\u903b\u8f91\u4e4b\u95f4\u63d2\u5165\u901a\u4fe1\u64cd\u4f5c\uff0c\u800c\u4f7f\u7528 OneFlow \u65f6\u53ea\u9700\u8981\u505a Global Tensor \u7684\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u3002 Global Tensor \u76f8\u6bd4\u666e\u901a\u7684 Local Tensor\uff0c\u4ece\u7c7b\u578b\u4e0a\u8bb2\uff0c\u6700\u5927\u7684\u533a\u522b\u662f\u5e26\u6709\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\uff08Global Data Distribution Type\uff09\u3002\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u6307\u5b9a\u4e86 Global Tensor \u5728\u6bcf\u4e2a\u8fdb\u7a0b\uff08Rank\uff09\u7684\u6570\u636e\u5206\u5e03\u60c5\u51b5\uff0c\u7531 Placement \u548c SBP \u7ec4\u6210\u3002 \u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u4e2d\u7684 Placement \u6307\u5b9a\u4e86\u6570\u636e\u5206\u5e03\u7684\u8bbe\u5907\u96c6\u5408: \u53c2\u6570 type \u6307\u5b9a\u4e86\u7269\u7406\u8bbe\u5907\u7684\u7c7b\u578b\uff0c cuda \u8868\u793a GPU \u8bbe\u5907\u5185\u5b58, cpu \u8868\u793a CPU \u8bbe\u5907\u5185\u5b58\uff1b \u53c2\u6570 ranks \u6307\u5b9a\u4e86\u8fdb\u7a0b ID \u96c6\u5408\uff0c\u56e0\u4e3a\u9690\u542b\u4e86\u4e00\u4e2a Rank \u5bf9\u5e94\u4e00\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u6240\u4ee5 ranks \u5c31\u662f\u8bbe\u5907 ID \u96c6\u5408; \u5b9e\u9645\u4e0a ranks \u662f\u4e00\u4e2a\u7531 rank id \u7ec4\u6210 nd-array\uff0c\u652f\u6301\u9ad8\u7ef4\u8bbe\u5907\u6392\u5e03\u3002 \u8be6\u60c5\u53c2\u8003 oneflow.placement \u3002 \u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u4e2d\u7684 SBP \u6307\u5b9a\u4e86\u5168\u5c40\u6570\u636e\u548c\u5c40\u90e8\u6570\u636e\u7684\u5173\u7cfb: S\uff0c\u5373 split(dim)\uff0c\u5c40\u90e8\u548c\u5168\u5c40\u662f\u5207\u5206\u5173\u7cfb\uff0c \u8868\u793a\u5728 dim \u7ef4\u5ea6\u505a\u4e86\u5207\u5206\u7684\u6570\u636e\u5206\u5e03\u5173\u7cfb\uff1b B\uff0c\u5373 broadcast\uff0c\u5c40\u90e8\u548c\u5168\u5c40\u662f\u5e7f\u64ad\u5173\u7cfb\uff0c\u8868\u793a\u505a\u4e86\u5e7f\u64ad\u7684\u6570\u636e\u5206\u5e03\u5173\u7cfb\uff1b P\uff0c\u5373 partial_sum\uff0c\u5c40\u90e8\u548c\u5168\u5c40\u662f\u90e8\u5206\u5173\u7cfb\uff0c\u8868\u793a\u505a\u4e86 element-wise \u7d2f\u52a0\u7684\u6570\u636e\u5206\u5e03\u5173\u7cfb\uff1b \u8be6\u60c5\u53c2\u8003 oneflow.sbp.sbp \u3002 \u6570\u636e\u91cd\u5206\u5e03\uff08Re-distribution)\u662f\u5e76\u884c\u8ba1\u7b97\u4e2d\u7ecf\u5e38\u8981\u5904\u7406\u7684\uff0c\u5373\u53d8\u6362\u6570\u636e\u5206\u5e03\uff0c\u6bd4\u5982\u628a\u5206\u7247\u6570\u636e\u805a\u5408\u5230\u4e00\u8d77\u3002\u5728 MPI \u7f16\u7a0b\u8303\u5f0f\uff08SPMD\uff09\u4e0b, \u6570\u636e\u91cd\u5206\u5e03\u9700\u8981\u5199\u663e\u5f0f\u7684\u901a\u4fe1\u64cd\u4f5c\uff0c\u5982 AllReduce\u3001AllGather\u3001ReduceScatter\u3002\u5728 OneFlow \u7684 Global View \u7f16\u7a0b\u8303\u5f0f\uff08SPSD) \u4e0b\uff0c\u6570\u636e\u91cd\u5206\u5e03\u53ef\u4ee5\u901a\u8fc7 Global Tensor \u7684\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u5b8c\u6210\u3002 \u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u7684\u8f6c\u6362\u7c7b\u4f3c\u5e38\u89c4\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\uff08\u663e\u5f0f\uff09\u7c7b\u578b\u8f6c\u6362\u3002\u7c7b\u578b\u8f6c\u6362\u65f6\uff0c\u53ea\u9700\u6307\u5b9a\u8981\u53d8\u6362\u5230\u7684\u7c7b\u578b\uff0c\u91cc\u9762\u9690\u542b\u7684\u64cd\u4f5c\u4f1a\u88ab\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210\u3002\u6bd4\u5982 double \u7c7b\u578b\u5230 int \u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u53bb\u6389\u5c0f\u6570\u70b9\u90e8\u5206\u7684\u64cd\u4f5c\u5c31\u662f\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210\u7684\u3002 \u540c\u6837\uff0c\u53ea\u9700\u6307\u5b9a Global Tensor \u8981\u8f6c\u6362\u7684\u65b0\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\uff0c\u91cc\u9762\u9690\u542b\u7684\u901a\u4fe1\u64cd\u4f5c\u4f1a\u88ab OneFlow \u81ea\u52a8\u5b8c\u6210\u3002\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u7684\u63a5\u53e3\u662f Tensor.to_global \uff0c to_global \u6709 placement \u548c sbp \u4e24\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u5373\u671f\u671b\u8f6c\u6362\u6210\u7684\u65b0\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u3002 \u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u4e2d\u9690\u542b\u7684\u4e3b\u8981\u64cd\u4f5c\u662f\u901a\u4fe1\u7684\u63a8\u7406\u548c\u6267\u884c\uff0c\u80cc\u540e\u7684\u5b9e\u73b0\u673a\u5236\u662f OneFlow \u7684 Boxing \uff0c\u4e00\u79cd\u81ea\u52a8\u505a\u6570\u636e Re-distribution \u7684\u673a\u5236\u3002 \u4e0b\u9762\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8be5\u4f8b\u5b50\u53ef\u4ee5\u628a\u4e00\u4e2a\u6309 split \u5206\u5e03\u7684 Global Tensor \u8f6c\u6362\u4e3a\u4e00\u4e2a\u6309 broadcast \u5206\u5e03\u7684 Global Tensor\uff1a import oneflow as flow x = flow . randn ( 2 , 5 ) . cuda () placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) print ( x_global . shape ) # (4, 5) print ( x_global . to_local ()) sbp_b = flow . sbp . broadcast x_global_b = x_global . to_global ( placement = placement , sbp = sbp_b ) print ( x_global_b . shape ) # (4, 5) print ( x_global_b . to_local ()) \u53ef\u4ee5\u770b\u5230\uff0c x_global \u5230 x_global_b \u7684\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u53d8\u5316\u5c31\u662f sbp \u4ece flow.sbp.split(0) \u53d8\u6210\u4e86 flow.sbp.broadcast \u3002\u4ed6\u4eec\u7684 global shape \u90fd\u662f (4, 5) \uff0c\u4f46\u662f\u672c\u5730\u5206\u91cf\u4ece\u4e00\u4e2a\u5206\u7247\u53d8\u6210\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u53d8\u5316\u53ef\u4ee5\u4ece\u5bf9 to_local() \u7684\u6253\u5370\u7ed3\u679c\u89c2\u5bdf\u5230\u3002 \u8fd9\u91cc\u7684 to_global \u53d8\u6362\u5b8c\u6210\u4e86\u5bf9 local tensor \u7684\u5f52\u5e76\u3002\u901a\u5e38\u6765\u8bb2\uff0cSPMD \u7f16\u7a0b\u6a21\u5f0f\u8981\u6c42\u7528\u6237\u624b\u5199\u4e00\u4e2a all-gather \u96c6\u5408\u901a\u4fe1\u6765\u5b8c\u6210\u3002\u800c\u5728 OneFlow Global View \u4e2d\uff0c\u53ea\u9700\u505a\u4e00\u4e0b\u7c7b\u578b\u8f6c\u6362\u3002 \u901a\u8fc7 Global Tensor \u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u5c31\u81ea\u52a8\u5b8c\u6210\u901a\u4fe1\u64cd\u4f5c\u7684\u63a8\u7406\u548c\u6267\u884c\u3002\u8ba9\u7b97\u6cd5\u5f00\u53d1\u8005\u53ef\u4ee5 \u601d\u8003\u6570\u636e\u7684\u5206\u5e03(Thinking in data distribution) \uff0c\u800c\u4e0d\u662f \u601d\u8003\u5982\u4f55\u901a\u4fe1(Thinking in data communication operation) \uff0c\u5b9e\u73b0\u4e86\u6240\u60f3\u5373\u6240\u5f97\uff0c\u4ece\u800c\u63d0\u9ad8\u5206\u5e03\u5f0f\u7a0b\u5e8f\u7684\u5f00\u53d1\u6548\u7387\u3002 \u8fd9\u91cc\u8865\u5145\u4ecb\u7ecd\u4e00\u4e0b Global Tensor \u7684 numpy() \u65b9\u6cd5\u3002\u5bf9\u4e8e\u4efb\u610f\u7684 Global Tensor \u5982 x_global \uff0c x_global.numpy() \u7b49\u4ef7\u4e8e x_global.to_global(spb=flow.sbp.broadcast).to_local().numpy() \uff0c\u5373\u5185\u90e8\u9690\u542b\u4e86\u4e00\u6b21\u5c06\u539f Global Tensor \u8f6c\u6210 SBP \u4e3a flow.sbp.broadcast() \u7684 Global Tensor\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u6b21 to_local \u64cd\u4f5c\uff0c\u6700\u540e\u5bf9\u8fd9\u4e2a Local Tensor \u8c03\u7528 numpy() \u65b9\u6cd5\u3002\u6240\u4ee5 x_global.numpy() \u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6570\u636e\u3002 Global Tensor \u53c2\u4e0e\u8ba1\u7b97 \u00b6 \u8fd9\u4e00\u8282\u4ecb\u7ecd Global Tensor \u5982\u4f55\u53c2\u4e0e\u5b9e\u9645\u8ba1\u7b97\u3002\u4ee5 Global Tensor \u53c2\u4e0e\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97\u4e3a\u4f8b\uff0c\u6784\u9020\u5982\u4e0b\u7a0b\u5e8f\uff1a import oneflow as flow placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( dim = 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) print ( y . is_global ) # True print ( y . shape ) # (4, 8) print ( y . sbp ) # (flow.sbp.split(dim=0)) print ( y . to_local () . numpy ()) \u4ee5\u4e0a\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e24\u4e2a Global Tensor\uff0c\u5206\u522b\u662f x \u548c w \uff0c\u5b83\u4eec\u53c2\u4e0e oneflow.matmul \u8ba1\u7b97\u5f97\u5230 y \u3002 OneFlow \u4e2d\u7684\u5927\u90e8\u5206\u7b97\u5b50\u90fd\u652f\u6301\u8ba1\u7b97 Global Tensor\u3002 flow.matmul \u6267\u884c Global Tensor\u65f6\uff0c\u5728\u63a5\u53e3\u4e0a\u5e76\u65e0\u7279\u6b8a\u4e4b\u5904\u3002\u53ef\u4ee5\u8ba4\u4e3a OneFlow \u4e2d\u7684\u7b97\u5b50\u90fd\u662f\u591a\u6001\u7684\u3002\u5373\u6839\u636e\u8f93\u5165\uff0c\u51b3\u5b9a\u81ea\u5df1\u7684\u884c\u4e3a\uff1a \u5982\u679c\u7b97\u5b50\u7684\u8f93\u5165\u662f Local Tensor\uff0c\u90a3\u4e48\u7b97\u5b50\u4f1a\u6309\u7167\u666e\u901a\u7684\u5355\u673a\u5355\u8bbe\u5907\u6267\u884c\u6a21\u5f0f\u8fdb\u884c\u8ba1\u7b97\uff1b \u5982\u679c\u7b97\u5b50\u7684\u8f93\u5165\u662f Global Tensor\uff0c\u90a3\u4e48\u7b97\u5b50\u4f1a\u91c7\u7528 Global View\uff08\u591a\u673a\u591a\u8bbe\u5907\uff09\u6a21\u5f0f\u8fdb\u884c\u8ba1\u7b97\uff1b \u5f53\u7528\u6237\u9700\u8981\u5c06\u5355\u5361\u4ee3\u7801\u6539\u4e3a\u5206\u5e03\u5f0f\u4ee3\u7801\u65f6\uff0c\u7b97\u5b50\u652f\u6301\u591a\u6001\u6267\u884c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u6781\u5927\u7684\u4fbf\u5229\uff1a\u53ea\u9700\u8981\u628a\u8f93\u5165\u7684 (Local) Tensor \u8f6c\u6362\u6210 Global Tensor \u3002 \u7c7b\u4f3c\u4e8e\u5355\u8bbe\u5907\u6267\u884c\u65f6\u8981\u6c42\u8f93\u5165\u6570\u636e\u6240\u5728\u8bbe\u5907\u76f8\u540c\uff0c\u4ee5\u4e0a\u7a0b\u5e8f\u4e2d\uff0c flow.matmul \u8fd9\u4e00\u7b97\u5b50\u53ef\u4ee5\u987a\u5229\u6267\u884c\u7684\u524d\u7f6e\u6761\u4ef6\u662f\uff1a\u8f93\u5165\u7684 x \u548c w \u7684 placement \u76f8\u540c\u3002 \u7a0b\u5e8f\u4e2d\u77e9\u9635\u76f8\u4e58\u7684\u7ed3\u679c y \u540c\u6837\u662f\u4e00\u4e2a Global Tensor \u3002 flow.matmul \u5bf9\u8f93\u5165 x \u548c w \u505a\u8ba1\u7b97\u65f6\uff0c\u4f1a\u81ea\u52a8\u8fdb\u884c\u8f93\u51fa\u6570\u636e\u7684 placement \u548c SBP \u7684\u63a8\u7406\uff0c\u89c4\u5219\u5982\u4e0b\uff1a Placement: \u8f93\u51fa\u548c\u8f93\u5165\u7684 placement \u76f8\u540c\uff1b SBP: \u8f93\u51fa\u7684 SBP \u7684\u63a8\u7406\u89c4\u5219\uff0c\u56e0\u7b97\u5b50\u7c7b\u578b\u800c\u5f02\uff0c\u8fd9\u4e2a\u63a8\u7406\u89c4\u5219\u662f OneFlow \u5185\u7f6e\u7684\uff0c\u8be6\u60c5\u53ef\u89c1: SBP Signature \u6b64\u5904\uff0c flow.sbp.split(0) \u548c flow.sbp.broadcast \u76f8\u4e58\u7684\u8f93\u51fa\u6570\u636e\u4f1a\u88ab\u63a8\u7406\u6210 flow.sbp.split(0) \u3002 x \u5728\u6bcf\u4e2a rank \u4e0a\u662f\u4e00\u4e2a\u5206\u7247\u6570\u636e\uff0c w \u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6570\u636e\uff0c\u4e8c\u8005\u77e9\u9635\u4e58\u6cd5\u5f97\u5230\u7684 y \u662f\u4e00\u4e2a\u5206\u7247\u7684\u6570\u636e\u3002\u770b\u5230\u8fd9\u91cc\uff0c\u4e86\u89e3\u5e38\u89c1\u5e76\u884c\u6267\u884c\u65b9\u5f0f\u7684\u670b\u53cb\u53ef\u4ee5\u53d1\u73b0\uff1a\u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6570\u636e\u5e76\u884c\u7684\u524d\u5411\u8ba1\u7b97\uff0c x \u662f\u5207\u7247\u7684\u6570\u636e\uff0c w \u662f\u5b8c\u6574\u7684\u53c2\u6570\u3002 \u7ed3\u8bed \u00b6 \u4e0a\u6587\u4ecb\u7ecd\u4e86\uff1a Global View \u63d0\u4f9b\u7684 SPSD \u7f16\u7a0b\u89c6\u89d2\uff1b Global Tensor \u7684\u8de8\u8fdb\u7a0b\u53ef\u89c1\u7684\u6267\u884c\u7279\u70b9\uff1b Global Tensor \u548c Local Tensor \u7684\u4e92\u8f6c\uff1b \u901a\u8fc7 Global Tensor \u7684\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u6765\u5b9e\u73b0\u5206\u5e03\u5f0f\u901a\u4fe1\uff1b OneFlow \u7b97\u5b50\u7684\u591a\u6001\u7279\u6027\u652f\u6301\u4e86 Global Tensor \u7684\u6267\u884c\uff1b \u81f3\u6b64\uff0c\u672c\u6587\u4ece Global Tensor \u7684\u521b\u5efa\u5f00\u59cb\uff0c\u6700\u7ec8\u5b8c\u6210\u4e86\u4e00\u4e2a\u57fa\u4e8e Global Tensor \u7684\u6570\u636e\u5e76\u884c\u8ba1\u7b97\u6d41\u7a0b\u3002 \u66f4\u591a\u5e76\u884c\u65b9\u5f0f\u548c SBP \u7684\u63a8\u7406\u903b\u8f91\uff0c\u5c06\u5728\u540e\u7eed\u5185\u5bb9\u4ecb\u7ecd\u3002 \u6269\u5c55\u9605\u8bfb \u00b6 OneFlow \u591a\u673a\u591a\u5361\u542f\u52a8 \u548c \u4f9d\u8d56\u7684\u73af\u5883\u53d8\u91cf \u00b6 OneFlow \u7684 Global Tensor \u6267\u884c\u91c7\u7528\u7684\u662f \u591a\u5ba2\u6237\u7aef\u6a21\u5f0f (Multi-Client) \uff0c\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u4e00\u4e2a\u8fdb\u7a0b\u3002 n \u673a m \u5361 \u7684\u73af\u5883\uff0c\u5c31\u5bf9\u5e94 n * m \u4e2a\u8fdb\u7a0b\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u8fdb\u7a0b rank \u7f16\u53f7\uff0cGlobal Tensor \u4e2d\u7684 placement \u53c2\u6570\u4e2d\u7684 ranks \u5bf9\u5e94\u7684\u5c31\u662f\u8fd9\u4e2a rank \u7f16\u53f7\u3002 \u4ee5 2 \u673a 2 \u5361 \u4e3a\u4f8b\uff0c 0 \u53f7\u673a\u5668\u4e2d\u4e24\u5f20\u5361\u5206\u522b\u5bf9\u5e94\u7f16\u53f7 0 \u548c 1\uff0c\u7b2c 1 \u53f7\u673a\u5668\u4e2d\u4e24\u5f20\u5361\u5206\u522b\u5bf9\u5e94\u7f16\u53f7 2 \u548c 3\u3002\u6b64\u65f6 flow.placement(type=\"cuda\", ranks=[2]) \u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u7b2c 1 \u53f7\u673a\u5668\u4e2d\u7684\u7b2c 0 \u5361\u3002 \u4e00\u822c\u5730\uff0c\u5bf9\u4e8e n \u673a m \u5361 \u7684\u73af\u5883\uff0c flow.placement(type=\"cuda\", ranks=[k]) \u552f\u4e00\u6807\u8bc6\u7b2c k / n \u53f7\u673a\u5668\u7684\u7b2c k % m \u5f20\u5361\u3002 \u56e0\u4e3a\u91c7\u7528\u591a\u5ba2\u6237\u7aef\u6a21\u5f0f\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u5e94\u6bcf\u4e2a\u8bbe\u5907\u90fd\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u3002\u5728 OneFlow \u4e2d\uff0c\u6240\u6709\u8fdb\u7a0b\u90fd\u53ea\u9700\u8981\u542f\u52a8\u76f8\u540c\u7684\u811a\u672c\u7a0b\u5e8f\u3002\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u901a\u8fc7\u4e0d\u540c\u7684\u73af\u5883\u53d8\u91cf\u6765\u533a\u5206\u8fdb\u7a0b\u7f16\u53f7\u548c\u5efa\u7acb\u901a\u4fe1\u8fde\u63a5\u3002 \u73af\u5883\u53d8\u91cf\u8bf4\u660e\uff1a MASTER_ADDR \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c 0 \u53f7\u673a\u5668\u7684 IP\uff1b MASTER_PORT \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c 0 \u53f7\u673a\u5668\u7684\u76d1\u542c\u7aef\u53e3\uff0c\u4e0d\u4e0e\u5df2\u7ecf\u5360\u7528\u7684\u7aef\u53e3\u51b2\u7a81\u5373\u53ef\uff1b WORLD_SIZE \uff1a\u6574\u4e2a\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff0c\u56e0\u4e3a\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u5404\u4e2a\u673a\u5668\u4e0a\u663e\u5361\u6570\u76ee\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64 WORLD_SIZE \u7684\u6570\u76ee\u5b9e\u9645\u4e0a\u662f \\(\u673a\u5668\u6570\u76ee \\times \u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u663e\u5361\u6570\u76ee\\) \u3002 \u521b\u5efa Global Tensor \u4e2d\u7684\u793a\u4f8b\u662f\u5355\u673a 2 \u5361\u7684\u60c5\u51b5\uff0c\u56e0\u6b64 WORLD_SIZE=2 \uff1b RANK \uff1a\u96c6\u7fa4\u5185\u6240\u6709\u673a\u5668\u4e0b\u7684\u8fdb\u7a0b\u7f16\u53f7\uff1b LOCAL_RANK \uff1a\u5355\u4e2a\u673a\u5668\u5185\u7684\u8fdb\u7a0b\u7f16\u53f7\uff1b RANK \u548c LOCAL_RANK \u7684\u533a\u522b\uff1a \u5f53\u662f\u5355\u673a\u8bad\u7ec3\uff08\u5355\u673a\u5355\u5361\u6216\u5355\u673a\u591a\u5361\uff09\u65f6\uff0c\u4e24\u8005\u76f8\u7b49\uff1b \u5f53\u662f\u591a\u673a\u8bad\u7ec3\u65f6\uff0c\u6bcf\u53f0\u673a\u5668\u4e0a\u7684 LOCAL_RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff1b RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6240\u6709\u673a\u5668\u4e0a\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u7684\u603b\u548c\uff0c\u5b83\u4eec\u7684\u7f16\u53f7\u5747\u4ece0\u5f00\u59cb\u3002\uff08\u56e0\u4e3a\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u6240\u4ee5\u4e0d\u5305\u542b\u4e0a\u9650\uff09\u3002 \u4ee5 2 \u673a 2 \u5361 \u4e3a\u4f8b\uff0c\u6bcf\u5f20\u663e\u5361\u7684 LOCAL_RANK \u4e0e RANK \u5bf9\u5e94\u60c5\u51b5\u5982\u4e0b\uff1a RANK LOCAL_RANK \u673a\u5668 0 \u7684\u7b2c 0 \u5f20\u663e\u5361 0 0 \u673a\u5668 0 \u7684\u7b2c 1 \u5f20\u663e\u5361 1 1 \u673a\u5668 1 \u7684\u7b2c 0 \u5f20\u663e\u5361 2 0 \u673a\u5668 1 \u7684\u7b2c 1 \u5f20\u663e\u5361 3 1 \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u542f\u52a8\u867d\u7136\u7e41\u7410\uff0c\u4f46\u662f\u9002\u7528\u6027\u5e7f\uff0c\u53ef\u4ee5\u91c7\u7528\u4efb\u610f\u7684\u65b9\u5f0f\u6765\u542f\u52a8\u8fdb\u7a0b\u3002 \u53e6\u5916\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cOneFlow \u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5206\u5e03\u5f0f\u542f\u52a8\u591a\u8fdb\u7a0b\u4e14\u81ea\u52a8\u6784\u5efa\u73af\u5883\u53d8\u91cf\u7684\u5de5\u5177 oneflow.distributed.launch \u3002","title":"\u4f7f\u7528 Global Tensor \u8fdb\u884c\u5206\u5e03\u5f0f\u7f16\u7a0b\uff1a\u57fa\u7840\u64cd\u4f5c"},{"location":"cookies/global_tensor.html#global-tensor","text":"By YaoChi , Xu Xiaoyu , Zuo Yihao , Guoliang Cheng Global Tensor \u662f\u591a\u673a\u591a\u8bbe\u5907\u6267\u884c\u7684 Tensor\uff0c\u662f\u5b9e\u73b0\u5168\u5c40\u89c6\u89d2\uff08Global View\uff09\u7f16\u7a0b\u7684\u63a5\u53e3\u3002 \u5f53\u524d\u7684\u5e76\u884c\u7a0b\u5e8f\uff0c\u5927\u90fd\u91c7\u7528\u5355\u7a0b\u5e8f\u591a\u6570\u636e\uff08SPMD\uff09\u7684\u65b9\u5f0f\u6765\u7f16\u7a0b\u3002\u5e76\u884c\u6267\u884c\u540c\u6837\u7684\u7a0b\u5e8f\uff0c\u4f46\u662f\u5904\u7406\u4e0d\u540c\u6570\u636e\uff0c\u4ee5\u6b64\u5b9e\u73b0\u6570\u636e\u7684\u5e76\u884c\u5904\u7406\u3002\u4ee5 PyTorch DistributedDataParallel\uff08DDP\uff09 \u4e3a\u4f8b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6267\u884c\u540c\u6837\u7684\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u903b\u8f91\uff0c\u4f46\u662f\u6bcf\u4e2a\u8fdb\u7a0b\u52a0\u8f7d\u6570\u636e\u96c6\u7684\u4e0d\u540c\u5206\u7247\u3002 \u5355\u7a0b\u5e8f\u591a\u6570\u636e\uff08SPMD\uff09\u7f16\u7a0b\u7684\u7f3a\u9677\u662f\u591a\u6570\u636e\u7684\u901a\u4fe1\u9ebb\u70e6\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u7684\u573a\u666f\u4e0b\uff0cSPMD \u7f16\u7a0b\u9700\u8981\u5728\u539f\u8ba1\u7b97\u4ee3\u7801\u4e2d\u63d2\u5165\u901a\u4fe1\u64cd\u4f5c\uff0c\u6bd4\u5982\u6570\u636e\u5e76\u884c\u65f6\u5bf9\u68af\u5ea6\u6c47\u603b\uff08AllReduce \u64cd\u4f5c\uff09\uff0c\u6a21\u578b\u5e76\u884c\u65f6\u9700\u8981 AllGather/ReduceScatter \u64cd\u4f5c\u3002\u5982\u679c\u5e76\u884c\u6a21\u5f0f\u590d\u6742\uff0c\u6216\u8005\u9700\u8981\u8bd5\u9a8c\u65b0\u5e76\u884c\u6a21\u5f0f\uff0c\u63d2\u5165\u901a\u4fe1\u64cd\u4f5c\u5c31\u53d8\u5f97\u96be\u4ee5\u5f00\u53d1\u548c\u7ef4\u62a4\u3002 \u5168\u5c40\u89c6\u89d2\uff08Global View\uff09\u7f16\u7a0b\u63d0\u4f9b\u4e86\u5355\u7a0b\u5e8f\u5355\u6570\u636e\uff08SPSD\uff09\u7684\u7f16\u7a0b\u89c6\u89d2\u3002\u548c SPMD \u7f16\u7a0b\u4e0d\u540c\u7684\u662f\uff0c\u6570\u636e\u4ece\u7f16\u7a0b\u63a5\u53e3\u5c42\u9762\u770b\u4e5f\u662f\u5355\u4e00\u7684\u4e86\u3002 \u6570\u636e\u662f\u540c\u4e00\u4e2a\u903b\u8f91\u6570\u636e\uff0c\u5176\u5b9e\u5f88\u81ea\u7136\u3002\u5f53\u6211\u4eec\u628a\u4e00\u4e2a\u5355\u8fdb\u7a0b\u7a0b\u5e8f\u6269\u5c55\u5230\u5e76\u884c\u6267\u884c\u65f6\uff0c\u4e00\u4e2a\u5355\u8fdb\u7a0b\u6570\u636e\u88ab\u6269\u5c55\u6210\u591a\u8fdb\u7a0b\u6570\u636e\uff0c\u591a\u4e2a\u8fdb\u7a0b\u4e0a\u7684\u8fd9\u4e9b\u6570\u636e\u90fd\u5bf9\u5e94\u539f\u5355\u8fdb\u7a0b\u7a0b\u5e8f\u4e2d\u7684\u540c\u4e00\u4e2a\u903b\u8f91\u6570\u636e\u3002\u8fd9\u4e2a\u903b\u8f91\u6570\u636e\u5728 OneFlow \u4e2d\u53eb Global Tensor\u3002 \u7f16\u7a0b\u65f6\uff0cGlobal Tensor \u8ba9\u7528\u6237\u53ef\u4ee5\u7528 SPSD \u7684\u63a5\u53e3\u6765\u7f16\u7a0b\uff0c\u5373\u6309\u7167\u5355\u673a\u5355\u8bbe\u5907\u7684\u903b\u8f91\u89c6\u89d2\u6765\u5199\u7a0b\u5e8f\u3002\u7136\u540e OneFlow \u6846\u67b6\u5185\u90e8\u4f1a\u81ea\u52a8\u7684\u8f6c\u6362\u6210\u7269\u7406\u7684 SPMD/MPMD \u65b9\u5f0f\u6765\u505a\u5e76\u884c/\u5206\u5e03\u5f0f\u6267\u884c\u3002 \u4f7f\u7528 Global Tensor\uff0c\u5c31\u53ef\u4ee5\u91c7\u7528\u6bd4\u8f83\u81ea\u7136\u7684 Global View \u89c6\u89d2\uff0c\u628a\u591a\u673a\u591a\u8bbe\u5907\u770b\u505a\u4e00\u4e2a\u8bbe\u5907\u6765\u7f16\u7a0b\uff0c\u5b9e\u73b0 SPSD \u7f16\u7a0b\u3002","title":"\u4f7f\u7528 Global Tensor \u8fdb\u884c\u5206\u5e03\u5f0f\u7f16\u7a0b\uff1a\u57fa\u7840\u64cd\u4f5c"},{"location":"cookies/global_tensor.html#global-tensor_1","text":"\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0cGlobal \u7684\u542b\u4e49\u901a\u5e38\u662f\u8fdb\u7a0b\u5185\u7684\u5168\u5c40\u53ef\u89c1\uff0c\u6bd4\u5982 \u5168\u5c40\u53d8\u91cf\uff08Global Variable\uff09 \u3002 \u4f46\u662f Global Tensor \u4e2d\u7684 \u201cGlobal\u201d \u7684\u542b\u4e49\u662f\u8fdb\u7a0b\u95f4\u5168\u5c40\u53ef\u89c1\uff0c\u6240\u4ee5 Global Tensor \u66f4\u4e3a\u51c6\u786e\u7684\u7684\u8bf4\u6cd5\u662f Global (on all processes) Tensor\uff0c\u5373\u6240\u6709\u8fdb\u7a0b\u53ef\u89c1\u7684 Tensor\u3002 Global Tensor \u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e0a\u90fd\u5b58\u5728\uff0c\u5728\u6240\u6709\u8fdb\u7a0b\u4e0a\u88ab\u67d0\u7b97\u5b50\u6267\u884c\u65f6\uff0c\u5c31\u81ea\u52a8\u5b8c\u6210\u4e86\u5bf9\u8be5 Tensor \u7684\u591a\u673a\u591a\u8bbe\u5907\u6267\u884c\u3002 \u5f53\u524d\u5e38\u7528\u7684 Tensor\uff0c\u53ea\u5728\u5355\u4e2a\u8fdb\u7a0b\u5185\u53ef\u89c1\uff0c\u5b58\u5728\u4e8e\u4e00\u4e2a\u8bbe\u5907\u4e0a\uff0cOneFlow \u4e2d\u628a\u8fd9\u79cd Tensor \u53eb\u505a Local Tensor\u3002Local \u662f\u76f8\u5bf9 Global \u800c\u8a00\u7684\uff0c\u6240\u4ee5 Local Tensor \u53ef\u4ee5\u8ba4\u4e3a\u662f Local (on one process) Tensor\u3002 OneFlow \u7684\u7b97\u5b50\u5927\u90e8\u5206\u517c\u5bb9 Local Tensor \u548c Global Tensor \u7684\u6267\u884c\u3002Local Tensor \u53ef\u4ee5\u4fbf\u6377\u5730\u8f6c\u5316\u4e3a Global Tensor\u3002\u5982\u6b64\uff0c\u5355\u673a\u5355\u5361\u6267\u884c\u7684\u4ee3\u7801\u53ef\u4ee5\u5e73\u6ed1\u5730\u8f6c\u6362\u6210\u591a\u673a\u591a\u5361\u6267\u884c\u7684\u4ee3\u7801\u3002 \u4f7f\u7528 Global Tensor\uff0c\u53ef\u4ee5\u975e\u5e38\u4fbf\u6377\u5730\u8fdb\u884c\u591a\u673a\u591a\u5361\u7684\u6a21\u578b\u5f00\u53d1\uff0c\u76f8\u6bd4\u4f7f\u7528\u539f\u59cb\u901a\u4fe1\u7b97\u5b50\uff0c\u53ef\u4ee5\u6210\u500d\u63d0\u9ad8\u5e76\u884c\u6267\u884c\u6a21\u578b\u7684\u5f00\u53d1\u6548\u7387\u3002","title":"Global Tensor"},{"location":"cookies/global_tensor.html#global-tensor_2","text":"\u73b0\u5728\u5c1d\u8bd5\u5728\u6709 2 \u5f20 GPU \u7684\u4e3b\u673a\u4e0a\u521b\u5efa\u4e00\u4e2a Global Tensor\u3002\u4ee5 randn \u7b97\u5b50\u4e3a\u4f8b\uff0c\u521b\u5efa\u4e00\u4e2a Python \u6587\u4ef6 test_randn_global.py \uff0c\u52a0\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a import oneflow as flow # Place a global tensor on cuda device of rank(process) 0 and 1 placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) # Each rank's local data is a part data as a result of spliting global data on dim 0 sbp = flow . sbp . split ( dim = 0 ) # Create a global tensor by randn x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) # Print local data print ( \"Local data of global tensor: \\n \" , x . to_local () . numpy ()) # Print global data print ( \"Global data of global tensor: \\n \" , x . numpy ()) \u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6709\u4e00\u4e9b\u65b0\u51fa\u73b0\u7684\u6982\u5ff5\uff1a placement \u8868\u793a Global Tensor \u5206\u5e03\u7684\u7269\u7406\u8bbe\u5907\uff0c\u53c2\u6570 type \u6307\u5b9a\u4e86\u7269\u7406\u8bbe\u5907\u7684\u7c7b\u578b\uff0c\u8fd9\u91cc\u4f7f\u7528 \u201ccuda\u201d \u8868\u793a GPU \u8bbe\u5907\uff0c\u53c2\u6570 ranks \u6307\u5b9a\u4e86\u8bbe\u5907 ID\u3002\u5bf9\u4e8e\u6ca1\u6709 2 \u5f20 GPU \u7684\u8bfb\u8005\uff0c\u5728\u8fd9\u91cc\u53ef\u4ee5\u5c06 type \u6307\u5b9a\u4e3a \"cpu\" \uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u7528 CPU \u6a21\u62df\u591a\u4e2a\u8bbe\u5907\uff0c\u4e0b\u6587\u7684\u4ee3\u7801\u540c\u6837\u9002\u7528\uff1b sbp \u8868\u793a Global Tensor \u5206\u5e03\u7684\u65b9\u5f0f\uff0c\u4ee3\u7801\u4e2d\u7684 sbp = flow.sbp.split(dim=0) \u8868\u793a\u628a Global Tensor \u5728\u7ef4\u5ea6 0 \u5747\u5300\u5207\u5206\uff1b to_local() \u53ef\u4ee5\u4ece Global Tensor \u4e2d\u83b7\u53d6\u5176\u5728\u5f53\u524d rank \u7684 Local Tensor\uff0c\u56e0\u4e3a Global Tensor \u5728\u6bcf\u4e2a rank \u90fd\u5185\u542b\u4e86\u4e00\u4e2a Local Tensor \u4f5c\u4e3a\u5b9e\u9645\u5b58\u5728\u7684\u672c\u5730\u5206\u91cf\u3002 \u7136\u540e\u914d\u7f6e\u4e0b\u591a\u8fdb\u7a0b\u542f\u52a8\u4f9d\u8d56\u7684\u73af\u5883\u53d8\u91cf\u3002\u8fd9\u91cc\u662f\u4e24\u5361\u6267\u884c\uff0c\u5bf9\u5e94\u4e24\u4e2a\u8fdb\u7a0b\u542f\u52a8\uff0c\u6240\u4ee5\u9700\u8981\u6253\u5f00\u4e24\u4e2a Terminal\uff0c\u5206\u522b\u914d\u7f6e\u5982\u4e0b\u73af\u5883\u53d8\u91cf\uff1a Note \u5206\u522b \u70b9\u51fb \u4ee5\u4e0b Terminal 0 \u6216 Terminal 1 \u6807\u7b7e\uff0c\u67e5\u770b 2 \u4e2a\u63a7\u5236\u53f0\u7684\u547d\u4ee4/\u4ee3\u7801 Terminal 0 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 0 LOCAL_RANK = 0 Terminal 1 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 1 LOCAL_RANK = 1 \u4ee5\u4e0a\u73af\u5883\u53d8\u91cf\u7684\u8be6\u7ec6\u89e3\u91ca\u53ca\u501f\u52a9\u5de5\u5177\u505a\u5206\u5e03\u5f0f\u542f\u52a8\uff0c\u8bf7\u53c2\u8003\u6587\u672b\u7684 \u6269\u5c55\u9605\u8bfb \u3002 \u6700\u540e\uff0c\u5728\u4e24\u4e2a Terminal \u4e0b\u5206\u522b\u542f\u52a8\u4e00\u4e0b test_randn_global.py \uff0c\u89c2\u5bdf Global Tensor \u7684\u521b\u5efa\u7ed3\u679c\uff1a python3 test_randn_global.py \u8fd9\u6837\uff0c\u5728 Terminal 0 \u5373 rank 0 \u53ef\u4ee5\u770b\u5230\uff1a Local data of global tensor: [[-0.07157125 -0.92717147 1.5102768 1.4611115 1.014263 ] [-0.1511031 1.570759 0.9416077 0.6184639 2.4420679 ]] Global data of global tensor: [[-0.07157125 -0.92717147 1.5102768 1.4611115 1.014263 ] [-0.1511031 1.570759 0.9416077 0.6184639 2.4420679 ] [-0.38203463 0.453836 0.9136015 2.35773 -0.3279942 ] [-0.8570119 -0.91476554 -0.06646168 0.50022084 -0.4387695 ]] \u5728 Terminal 1 \u5373 rank 1 \u53ef\u4ee5\u770b\u5230\uff1a Local data of global tensor: [[-0.38203463 0.453836 0.9136015 2.35773 -0.3279942 ] [-0.8570119 -0.91476554 -0.06646168 0.50022084 -0.4387695 ]] Global data of global tensor: [[-0.07157125 -0.92717147 1.5102768 1.4611115 1.014263 ] [-0.1511031 1.570759 0.9416077 0.6184639 2.4420679 ] [-0.38203463 0.453836 0.9136015 2.35773 -0.3279942 ] [-0.8570119 -0.91476554 -0.06646168 0.50022084 -0.4387695 ]] \u53ef\u4ee5\u53d1\u73b0\u4e24\u4e2a rank \u7684 Local Tensor \u5728\u7ef4\u5ea6 0 \u62fc\u63a5\u540e\uff0c\u5c31\u662f\u5b8c\u6574\u7684 Global Tensor \u7684\u503c\u3002","title":"\u521b\u5efa Global Tensor"},{"location":"cookies/global_tensor.html#local-tensor-global-tensor","text":"\u53ef\u4ee5\u5148\u521b\u5efa Local Tensor\uff0c\u518d\u5229\u7528 Tensor.to_global \u65b9\u6cd5\uff0c\u5c06 Local Tensor \u8f6c\u4e3a Global Tensor\u3002 \u521b\u5efa\u5982\u4e0b\u7a0b\u5e8f\uff0c\u91c7\u7528\u4e0a\u6587\u540c\u6837\u7684\u65b9\u5f0f\u542f\u52a8\uff1a import oneflow as flow x = flow . randn ( 2 , 5 ) . cuda () print ( x . is_local ) # True print ( x . is_global ) # False placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) print ( x_global . shape ) # (4, 5) print ( x . is_local ) # True print ( x_global . is_global ) # True \u8be5\u7a0b\u5e8f\u5728 2 \u4e2a GPU \u8bbe\u5907\u4e0a\u5206\u522b\u521b\u5efa\u4e86 shape=(2,5) \u7684 Local Tensor\uff0c\u5373 x\u3002 \u7136\u540e\u5b9a\u4e49 placement \u4e3a rank 0 \u548c 1 \u4e0a\u7684 cuda \u8bbe\u5907\uff0cSBP \u4e3a tensor \u7b2c 0 \u7ef4\u7684\u5207\u5206\uff0c\u539f\u672c Local Tensor \u7ecf\u8fc7 to_global \u53d8\u6362\u540e\uff0c\u5c31\u5f97\u5230\u4e00\u4e2a\u540d\u4e3a x_global \u7684 Global Tensor\u3002 \u53ef\u4ee5\u89c2\u5bdf\u5230 x_global \u7684 shape \u53d8\u4e3a\u4e86 (4, 5) \uff0c\u8fd9\u662f Global Tensor \u7684 shape\uff08global shape\uff09\u3002 Global Tensor \u4e0e Local Tensor \u4e4b\u95f4\u4e3a\u603b\u91cf\u4e0e\u5206\u91cf\u7684\u5173\u7cfb\u3002Local Tensor \u662f\u603b\u91cf\u5728\u672c rank \u7684\u5206\u91cf\u3002\u5206\u91cf\u548c\u603b\u91cf\u7684\u5177\u4f53\u5173\u7cfb\u7531 Placement \u548c SBP \u786e\u5b9a\uff0c\u6bd4\u5982\u8fd9\u91cc\u7684\u5173\u7cfb\u662f\u5728 0 \u548c 1 \u53f7 GPU \u4e0a\uff0c x_global \u5728\u7b2c 0 \u7ef4 split \u800c\u5f97\u5230 x \u3002 to_global \u65b9\u6cd5\u6839\u636e\u5982\u4e0a\u5173\u7cfb\u53ef\u4ee5\u4ece x.shape \u63a8\u7406\u51fa x_global.shape \uff1a\u628a\u4e24\u4e2a GPU \u4e0a\u7684 Local Tensor x \u5728\u7b2c 0 \u7ef4\u62fc\u63a5\u540e\u5f97\u5230 x_global \u3002 Global Tensor \u9664\u4e86 shape\uff0c\u8fd8\u6709\u6570\u636e\u90e8\u5206\u3002\u4e00\u4e2a Global Tensor \u7684\u5185\u90e8\uff0c\u5728\u6bcf\u4e2a rank \u4e0a\u90fd\u5185\u542b\u4e86\u4e00\u4e2a Local Tensor \u4f5c\u4e3a\u5176\u672c\u5730\u5206\u91cf\u3002 \u8fd9\u4e2a Local Tensor \u5c31\u662f Global Tensor \u5728\u6bcf\u4e2a rank \u7684\u7269\u7406\u6570\u636e\u3002\u8fd9\u7b26\u5408\u671f\u5f85\u7684\uff0c\u6bcf\u4e2a rank \u53ea\u9700\u4fdd\u5b58\u4e00\u90e8\u5206\u7269\u7406\u6570\u636e\u3002","title":"\u7531 Local Tensor \u5f97\u5230 Global Tensor"},{"location":"cookies/global_tensor.html#global-tensor-local-tensor","text":"\u5982\u679c\u60f3\u5f97\u5230 Global Tensor \u7684\u672c\u5730\u5206\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7 to_local \u65b9\u6cd5\u5f97\u5230\u3002\u4f8b\u5982\uff1a import oneflow as flow placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) print ( x . to_local ()) \u5f53\u6267\u884c x.to_local() \u65f6\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684 rank \u5c06\u5206\u522b\u5f97\u5230\u4e00\u4e2a shape \u4e3a (2, 5) \u7684\u672c\u5730\u5206\u91cf tensor\u3002 \u5728 Terminal 0 \u5373 rank 0 \u53ef\u4ee5\u770b\u5230\uff1a tensor([[-0.2730, 1.8042, 0.0721, -0.5024, -1.2583], [-0.3379, 0.9371, 0.7981, -0.5447, -0.5629]], dtype=oneflow.float32) \u5728 Terminal 1 \u5373 rank 1 \u53ef\u4ee5\u770b\u5230\uff1a tensor([[ 0.6829, 0.4849, 2.1611, 1.4059, 0.0934], [-0.0301, -0.6942, -0.8094, -1.3050, -0.1778]], dtype=oneflow.float32) to_local() \u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0c\u56e0\u4e3a Global Tensor \u5df2\u7ecf\u901a\u8fc7 placement \u548c SBP \u786e\u5b9a\u597d\u4e86\u5b83\u7684\u672c\u5730\u5206\u91cf\uff0c\u6240\u4ee5\u76f4\u63a5\u53d6\u672c\u5730\u5206\u91cf\u5bf9\u5e94\u7684 Local Tensor \u5c31\u597d\u3002","title":"\u7531 Global Tensor \u5f97\u5230 Local Tensor"},{"location":"cookies/global_tensor.html#global-tensor-global-tensor","text":"\u8fdb\u884c\u5206\u5e03\u5f0f\u8ba1\u7b97\u901a\u5e38\u90fd\u9700\u8981\u5728\u6b63\u5e38\u7684\u8ba1\u7b97\u903b\u8f91\u4e4b\u95f4\u63d2\u5165\u901a\u4fe1\u64cd\u4f5c\uff0c\u800c\u4f7f\u7528 OneFlow \u65f6\u53ea\u9700\u8981\u505a Global Tensor \u7684\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u3002 Global Tensor \u76f8\u6bd4\u666e\u901a\u7684 Local Tensor\uff0c\u4ece\u7c7b\u578b\u4e0a\u8bb2\uff0c\u6700\u5927\u7684\u533a\u522b\u662f\u5e26\u6709\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\uff08Global Data Distribution Type\uff09\u3002\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u6307\u5b9a\u4e86 Global Tensor \u5728\u6bcf\u4e2a\u8fdb\u7a0b\uff08Rank\uff09\u7684\u6570\u636e\u5206\u5e03\u60c5\u51b5\uff0c\u7531 Placement \u548c SBP \u7ec4\u6210\u3002 \u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u4e2d\u7684 Placement \u6307\u5b9a\u4e86\u6570\u636e\u5206\u5e03\u7684\u8bbe\u5907\u96c6\u5408: \u53c2\u6570 type \u6307\u5b9a\u4e86\u7269\u7406\u8bbe\u5907\u7684\u7c7b\u578b\uff0c cuda \u8868\u793a GPU \u8bbe\u5907\u5185\u5b58, cpu \u8868\u793a CPU \u8bbe\u5907\u5185\u5b58\uff1b \u53c2\u6570 ranks \u6307\u5b9a\u4e86\u8fdb\u7a0b ID \u96c6\u5408\uff0c\u56e0\u4e3a\u9690\u542b\u4e86\u4e00\u4e2a Rank \u5bf9\u5e94\u4e00\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u6240\u4ee5 ranks \u5c31\u662f\u8bbe\u5907 ID \u96c6\u5408; \u5b9e\u9645\u4e0a ranks \u662f\u4e00\u4e2a\u7531 rank id \u7ec4\u6210 nd-array\uff0c\u652f\u6301\u9ad8\u7ef4\u8bbe\u5907\u6392\u5e03\u3002 \u8be6\u60c5\u53c2\u8003 oneflow.placement \u3002 \u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u4e2d\u7684 SBP \u6307\u5b9a\u4e86\u5168\u5c40\u6570\u636e\u548c\u5c40\u90e8\u6570\u636e\u7684\u5173\u7cfb: S\uff0c\u5373 split(dim)\uff0c\u5c40\u90e8\u548c\u5168\u5c40\u662f\u5207\u5206\u5173\u7cfb\uff0c \u8868\u793a\u5728 dim \u7ef4\u5ea6\u505a\u4e86\u5207\u5206\u7684\u6570\u636e\u5206\u5e03\u5173\u7cfb\uff1b B\uff0c\u5373 broadcast\uff0c\u5c40\u90e8\u548c\u5168\u5c40\u662f\u5e7f\u64ad\u5173\u7cfb\uff0c\u8868\u793a\u505a\u4e86\u5e7f\u64ad\u7684\u6570\u636e\u5206\u5e03\u5173\u7cfb\uff1b P\uff0c\u5373 partial_sum\uff0c\u5c40\u90e8\u548c\u5168\u5c40\u662f\u90e8\u5206\u5173\u7cfb\uff0c\u8868\u793a\u505a\u4e86 element-wise \u7d2f\u52a0\u7684\u6570\u636e\u5206\u5e03\u5173\u7cfb\uff1b \u8be6\u60c5\u53c2\u8003 oneflow.sbp.sbp \u3002 \u6570\u636e\u91cd\u5206\u5e03\uff08Re-distribution)\u662f\u5e76\u884c\u8ba1\u7b97\u4e2d\u7ecf\u5e38\u8981\u5904\u7406\u7684\uff0c\u5373\u53d8\u6362\u6570\u636e\u5206\u5e03\uff0c\u6bd4\u5982\u628a\u5206\u7247\u6570\u636e\u805a\u5408\u5230\u4e00\u8d77\u3002\u5728 MPI \u7f16\u7a0b\u8303\u5f0f\uff08SPMD\uff09\u4e0b, \u6570\u636e\u91cd\u5206\u5e03\u9700\u8981\u5199\u663e\u5f0f\u7684\u901a\u4fe1\u64cd\u4f5c\uff0c\u5982 AllReduce\u3001AllGather\u3001ReduceScatter\u3002\u5728 OneFlow \u7684 Global View \u7f16\u7a0b\u8303\u5f0f\uff08SPSD) \u4e0b\uff0c\u6570\u636e\u91cd\u5206\u5e03\u53ef\u4ee5\u901a\u8fc7 Global Tensor \u7684\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u5b8c\u6210\u3002 \u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u7684\u8f6c\u6362\u7c7b\u4f3c\u5e38\u89c4\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\uff08\u663e\u5f0f\uff09\u7c7b\u578b\u8f6c\u6362\u3002\u7c7b\u578b\u8f6c\u6362\u65f6\uff0c\u53ea\u9700\u6307\u5b9a\u8981\u53d8\u6362\u5230\u7684\u7c7b\u578b\uff0c\u91cc\u9762\u9690\u542b\u7684\u64cd\u4f5c\u4f1a\u88ab\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210\u3002\u6bd4\u5982 double \u7c7b\u578b\u5230 int \u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u53bb\u6389\u5c0f\u6570\u70b9\u90e8\u5206\u7684\u64cd\u4f5c\u5c31\u662f\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210\u7684\u3002 \u540c\u6837\uff0c\u53ea\u9700\u6307\u5b9a Global Tensor \u8981\u8f6c\u6362\u7684\u65b0\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\uff0c\u91cc\u9762\u9690\u542b\u7684\u901a\u4fe1\u64cd\u4f5c\u4f1a\u88ab OneFlow \u81ea\u52a8\u5b8c\u6210\u3002\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u7684\u63a5\u53e3\u662f Tensor.to_global \uff0c to_global \u6709 placement \u548c sbp \u4e24\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e24\u4e2a\u53c2\u6570\u5373\u671f\u671b\u8f6c\u6362\u6210\u7684\u65b0\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u3002 \u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u4e2d\u9690\u542b\u7684\u4e3b\u8981\u64cd\u4f5c\u662f\u901a\u4fe1\u7684\u63a8\u7406\u548c\u6267\u884c\uff0c\u80cc\u540e\u7684\u5b9e\u73b0\u673a\u5236\u662f OneFlow \u7684 Boxing \uff0c\u4e00\u79cd\u81ea\u52a8\u505a\u6570\u636e Re-distribution \u7684\u673a\u5236\u3002 \u4e0b\u9762\u770b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8be5\u4f8b\u5b50\u53ef\u4ee5\u628a\u4e00\u4e2a\u6309 split \u5206\u5e03\u7684 Global Tensor \u8f6c\u6362\u4e3a\u4e00\u4e2a\u6309 broadcast \u5206\u5e03\u7684 Global Tensor\uff1a import oneflow as flow x = flow . randn ( 2 , 5 ) . cuda () placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) print ( x_global . shape ) # (4, 5) print ( x_global . to_local ()) sbp_b = flow . sbp . broadcast x_global_b = x_global . to_global ( placement = placement , sbp = sbp_b ) print ( x_global_b . shape ) # (4, 5) print ( x_global_b . to_local ()) \u53ef\u4ee5\u770b\u5230\uff0c x_global \u5230 x_global_b \u7684\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u53d8\u5316\u5c31\u662f sbp \u4ece flow.sbp.split(0) \u53d8\u6210\u4e86 flow.sbp.broadcast \u3002\u4ed6\u4eec\u7684 global shape \u90fd\u662f (4, 5) \uff0c\u4f46\u662f\u672c\u5730\u5206\u91cf\u4ece\u4e00\u4e2a\u5206\u7247\u53d8\u6210\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u6570\u636e\uff0c\u8fd9\u4e2a\u53d8\u5316\u53ef\u4ee5\u4ece\u5bf9 to_local() \u7684\u6253\u5370\u7ed3\u679c\u89c2\u5bdf\u5230\u3002 \u8fd9\u91cc\u7684 to_global \u53d8\u6362\u5b8c\u6210\u4e86\u5bf9 local tensor \u7684\u5f52\u5e76\u3002\u901a\u5e38\u6765\u8bb2\uff0cSPMD \u7f16\u7a0b\u6a21\u5f0f\u8981\u6c42\u7528\u6237\u624b\u5199\u4e00\u4e2a all-gather \u96c6\u5408\u901a\u4fe1\u6765\u5b8c\u6210\u3002\u800c\u5728 OneFlow Global View \u4e2d\uff0c\u53ea\u9700\u505a\u4e00\u4e0b\u7c7b\u578b\u8f6c\u6362\u3002 \u901a\u8fc7 Global Tensor \u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u5c31\u81ea\u52a8\u5b8c\u6210\u901a\u4fe1\u64cd\u4f5c\u7684\u63a8\u7406\u548c\u6267\u884c\u3002\u8ba9\u7b97\u6cd5\u5f00\u53d1\u8005\u53ef\u4ee5 \u601d\u8003\u6570\u636e\u7684\u5206\u5e03(Thinking in data distribution) \uff0c\u800c\u4e0d\u662f \u601d\u8003\u5982\u4f55\u901a\u4fe1(Thinking in data communication operation) \uff0c\u5b9e\u73b0\u4e86\u6240\u60f3\u5373\u6240\u5f97\uff0c\u4ece\u800c\u63d0\u9ad8\u5206\u5e03\u5f0f\u7a0b\u5e8f\u7684\u5f00\u53d1\u6548\u7387\u3002 \u8fd9\u91cc\u8865\u5145\u4ecb\u7ecd\u4e00\u4e0b Global Tensor \u7684 numpy() \u65b9\u6cd5\u3002\u5bf9\u4e8e\u4efb\u610f\u7684 Global Tensor \u5982 x_global \uff0c x_global.numpy() \u7b49\u4ef7\u4e8e x_global.to_global(spb=flow.sbp.broadcast).to_local().numpy() \uff0c\u5373\u5185\u90e8\u9690\u542b\u4e86\u4e00\u6b21\u5c06\u539f Global Tensor \u8f6c\u6210 SBP \u4e3a flow.sbp.broadcast() \u7684 Global Tensor\uff0c\u7136\u540e\u8fdb\u884c\u4e00\u6b21 to_local \u64cd\u4f5c\uff0c\u6700\u540e\u5bf9\u8fd9\u4e2a Local Tensor \u8c03\u7528 numpy() \u65b9\u6cd5\u3002\u6240\u4ee5 x_global.numpy() \u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6570\u636e\u3002","title":"\u7531 Global Tensor \u8f6c\u6210\u53e6\u4e00\u4e2a Global Tensor"},{"location":"cookies/global_tensor.html#global-tensor_3","text":"\u8fd9\u4e00\u8282\u4ecb\u7ecd Global Tensor \u5982\u4f55\u53c2\u4e0e\u5b9e\u9645\u8ba1\u7b97\u3002\u4ee5 Global Tensor \u53c2\u4e0e\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97\u4e3a\u4f8b\uff0c\u6784\u9020\u5982\u4e0b\u7a0b\u5e8f\uff1a import oneflow as flow placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( dim = 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) print ( y . is_global ) # True print ( y . shape ) # (4, 8) print ( y . sbp ) # (flow.sbp.split(dim=0)) print ( y . to_local () . numpy ()) \u4ee5\u4e0a\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e24\u4e2a Global Tensor\uff0c\u5206\u522b\u662f x \u548c w \uff0c\u5b83\u4eec\u53c2\u4e0e oneflow.matmul \u8ba1\u7b97\u5f97\u5230 y \u3002 OneFlow \u4e2d\u7684\u5927\u90e8\u5206\u7b97\u5b50\u90fd\u652f\u6301\u8ba1\u7b97 Global Tensor\u3002 flow.matmul \u6267\u884c Global Tensor\u65f6\uff0c\u5728\u63a5\u53e3\u4e0a\u5e76\u65e0\u7279\u6b8a\u4e4b\u5904\u3002\u53ef\u4ee5\u8ba4\u4e3a OneFlow \u4e2d\u7684\u7b97\u5b50\u90fd\u662f\u591a\u6001\u7684\u3002\u5373\u6839\u636e\u8f93\u5165\uff0c\u51b3\u5b9a\u81ea\u5df1\u7684\u884c\u4e3a\uff1a \u5982\u679c\u7b97\u5b50\u7684\u8f93\u5165\u662f Local Tensor\uff0c\u90a3\u4e48\u7b97\u5b50\u4f1a\u6309\u7167\u666e\u901a\u7684\u5355\u673a\u5355\u8bbe\u5907\u6267\u884c\u6a21\u5f0f\u8fdb\u884c\u8ba1\u7b97\uff1b \u5982\u679c\u7b97\u5b50\u7684\u8f93\u5165\u662f Global Tensor\uff0c\u90a3\u4e48\u7b97\u5b50\u4f1a\u91c7\u7528 Global View\uff08\u591a\u673a\u591a\u8bbe\u5907\uff09\u6a21\u5f0f\u8fdb\u884c\u8ba1\u7b97\uff1b \u5f53\u7528\u6237\u9700\u8981\u5c06\u5355\u5361\u4ee3\u7801\u6539\u4e3a\u5206\u5e03\u5f0f\u4ee3\u7801\u65f6\uff0c\u7b97\u5b50\u652f\u6301\u591a\u6001\u6267\u884c\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u6781\u5927\u7684\u4fbf\u5229\uff1a\u53ea\u9700\u8981\u628a\u8f93\u5165\u7684 (Local) Tensor \u8f6c\u6362\u6210 Global Tensor \u3002 \u7c7b\u4f3c\u4e8e\u5355\u8bbe\u5907\u6267\u884c\u65f6\u8981\u6c42\u8f93\u5165\u6570\u636e\u6240\u5728\u8bbe\u5907\u76f8\u540c\uff0c\u4ee5\u4e0a\u7a0b\u5e8f\u4e2d\uff0c flow.matmul \u8fd9\u4e00\u7b97\u5b50\u53ef\u4ee5\u987a\u5229\u6267\u884c\u7684\u524d\u7f6e\u6761\u4ef6\u662f\uff1a\u8f93\u5165\u7684 x \u548c w \u7684 placement \u76f8\u540c\u3002 \u7a0b\u5e8f\u4e2d\u77e9\u9635\u76f8\u4e58\u7684\u7ed3\u679c y \u540c\u6837\u662f\u4e00\u4e2a Global Tensor \u3002 flow.matmul \u5bf9\u8f93\u5165 x \u548c w \u505a\u8ba1\u7b97\u65f6\uff0c\u4f1a\u81ea\u52a8\u8fdb\u884c\u8f93\u51fa\u6570\u636e\u7684 placement \u548c SBP \u7684\u63a8\u7406\uff0c\u89c4\u5219\u5982\u4e0b\uff1a Placement: \u8f93\u51fa\u548c\u8f93\u5165\u7684 placement \u76f8\u540c\uff1b SBP: \u8f93\u51fa\u7684 SBP \u7684\u63a8\u7406\u89c4\u5219\uff0c\u56e0\u7b97\u5b50\u7c7b\u578b\u800c\u5f02\uff0c\u8fd9\u4e2a\u63a8\u7406\u89c4\u5219\u662f OneFlow \u5185\u7f6e\u7684\uff0c\u8be6\u60c5\u53ef\u89c1: SBP Signature \u6b64\u5904\uff0c flow.sbp.split(0) \u548c flow.sbp.broadcast \u76f8\u4e58\u7684\u8f93\u51fa\u6570\u636e\u4f1a\u88ab\u63a8\u7406\u6210 flow.sbp.split(0) \u3002 x \u5728\u6bcf\u4e2a rank \u4e0a\u662f\u4e00\u4e2a\u5206\u7247\u6570\u636e\uff0c w \u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u6570\u636e\uff0c\u4e8c\u8005\u77e9\u9635\u4e58\u6cd5\u5f97\u5230\u7684 y \u662f\u4e00\u4e2a\u5206\u7247\u7684\u6570\u636e\u3002\u770b\u5230\u8fd9\u91cc\uff0c\u4e86\u89e3\u5e38\u89c1\u5e76\u884c\u6267\u884c\u65b9\u5f0f\u7684\u670b\u53cb\u53ef\u4ee5\u53d1\u73b0\uff1a\u8fd9\u91cc\u5b9e\u73b0\u4e86\u4e00\u4e2a\u6570\u636e\u5e76\u884c\u7684\u524d\u5411\u8ba1\u7b97\uff0c x \u662f\u5207\u7247\u7684\u6570\u636e\uff0c w \u662f\u5b8c\u6574\u7684\u53c2\u6570\u3002","title":"Global Tensor \u53c2\u4e0e\u8ba1\u7b97"},{"location":"cookies/global_tensor.html#_1","text":"\u4e0a\u6587\u4ecb\u7ecd\u4e86\uff1a Global View \u63d0\u4f9b\u7684 SPSD \u7f16\u7a0b\u89c6\u89d2\uff1b Global Tensor \u7684\u8de8\u8fdb\u7a0b\u53ef\u89c1\u7684\u6267\u884c\u7279\u70b9\uff1b Global Tensor \u548c Local Tensor \u7684\u4e92\u8f6c\uff1b \u901a\u8fc7 Global Tensor \u7684\u5168\u5c40\u6570\u636e\u5206\u5e03\u7c7b\u578b\u8f6c\u6362\u6765\u5b9e\u73b0\u5206\u5e03\u5f0f\u901a\u4fe1\uff1b OneFlow \u7b97\u5b50\u7684\u591a\u6001\u7279\u6027\u652f\u6301\u4e86 Global Tensor \u7684\u6267\u884c\uff1b \u81f3\u6b64\uff0c\u672c\u6587\u4ece Global Tensor \u7684\u521b\u5efa\u5f00\u59cb\uff0c\u6700\u7ec8\u5b8c\u6210\u4e86\u4e00\u4e2a\u57fa\u4e8e Global Tensor \u7684\u6570\u636e\u5e76\u884c\u8ba1\u7b97\u6d41\u7a0b\u3002 \u66f4\u591a\u5e76\u884c\u65b9\u5f0f\u548c SBP \u7684\u63a8\u7406\u903b\u8f91\uff0c\u5c06\u5728\u540e\u7eed\u5185\u5bb9\u4ecb\u7ecd\u3002","title":"\u7ed3\u8bed"},{"location":"cookies/global_tensor.html#_2","text":"","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"cookies/global_tensor.html#oneflow","text":"OneFlow \u7684 Global Tensor \u6267\u884c\u91c7\u7528\u7684\u662f \u591a\u5ba2\u6237\u7aef\u6a21\u5f0f (Multi-Client) \uff0c\u6bcf\u4e2a\u8bbe\u5907\u5bf9\u5e94\u4e00\u4e2a\u8fdb\u7a0b\u3002 n \u673a m \u5361 \u7684\u73af\u5883\uff0c\u5c31\u5bf9\u5e94 n * m \u4e2a\u8fdb\u7a0b\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u8fdb\u7a0b rank \u7f16\u53f7\uff0cGlobal Tensor \u4e2d\u7684 placement \u53c2\u6570\u4e2d\u7684 ranks \u5bf9\u5e94\u7684\u5c31\u662f\u8fd9\u4e2a rank \u7f16\u53f7\u3002 \u4ee5 2 \u673a 2 \u5361 \u4e3a\u4f8b\uff0c 0 \u53f7\u673a\u5668\u4e2d\u4e24\u5f20\u5361\u5206\u522b\u5bf9\u5e94\u7f16\u53f7 0 \u548c 1\uff0c\u7b2c 1 \u53f7\u673a\u5668\u4e2d\u4e24\u5f20\u5361\u5206\u522b\u5bf9\u5e94\u7f16\u53f7 2 \u548c 3\u3002\u6b64\u65f6 flow.placement(type=\"cuda\", ranks=[2]) \u53ef\u4ee5\u552f\u4e00\u6807\u8bc6\u7b2c 1 \u53f7\u673a\u5668\u4e2d\u7684\u7b2c 0 \u5361\u3002 \u4e00\u822c\u5730\uff0c\u5bf9\u4e8e n \u673a m \u5361 \u7684\u73af\u5883\uff0c flow.placement(type=\"cuda\", ranks=[k]) \u552f\u4e00\u6807\u8bc6\u7b2c k / n \u53f7\u673a\u5668\u7684\u7b2c k % m \u5f20\u5361\u3002 \u56e0\u4e3a\u91c7\u7528\u591a\u5ba2\u6237\u7aef\u6a21\u5f0f\uff0c\u6240\u4ee5\u9700\u8981\u5bf9\u5e94\u6bcf\u4e2a\u8bbe\u5907\u90fd\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u3002\u5728 OneFlow \u4e2d\uff0c\u6240\u6709\u8fdb\u7a0b\u90fd\u53ea\u9700\u8981\u542f\u52a8\u76f8\u540c\u7684\u811a\u672c\u7a0b\u5e8f\u3002\u4e0d\u540c\u8fdb\u7a0b\u4e4b\u95f4\u901a\u8fc7\u4e0d\u540c\u7684\u73af\u5883\u53d8\u91cf\u6765\u533a\u5206\u8fdb\u7a0b\u7f16\u53f7\u548c\u5efa\u7acb\u901a\u4fe1\u8fde\u63a5\u3002 \u73af\u5883\u53d8\u91cf\u8bf4\u660e\uff1a MASTER_ADDR \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c 0 \u53f7\u673a\u5668\u7684 IP\uff1b MASTER_PORT \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c 0 \u53f7\u673a\u5668\u7684\u76d1\u542c\u7aef\u53e3\uff0c\u4e0d\u4e0e\u5df2\u7ecf\u5360\u7528\u7684\u7aef\u53e3\u51b2\u7a81\u5373\u53ef\uff1b WORLD_SIZE \uff1a\u6574\u4e2a\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff0c\u56e0\u4e3a\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u5404\u4e2a\u673a\u5668\u4e0a\u663e\u5361\u6570\u76ee\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64 WORLD_SIZE \u7684\u6570\u76ee\u5b9e\u9645\u4e0a\u662f \\(\u673a\u5668\u6570\u76ee \\times \u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u663e\u5361\u6570\u76ee\\) \u3002 \u521b\u5efa Global Tensor \u4e2d\u7684\u793a\u4f8b\u662f\u5355\u673a 2 \u5361\u7684\u60c5\u51b5\uff0c\u56e0\u6b64 WORLD_SIZE=2 \uff1b RANK \uff1a\u96c6\u7fa4\u5185\u6240\u6709\u673a\u5668\u4e0b\u7684\u8fdb\u7a0b\u7f16\u53f7\uff1b LOCAL_RANK \uff1a\u5355\u4e2a\u673a\u5668\u5185\u7684\u8fdb\u7a0b\u7f16\u53f7\uff1b RANK \u548c LOCAL_RANK \u7684\u533a\u522b\uff1a \u5f53\u662f\u5355\u673a\u8bad\u7ec3\uff08\u5355\u673a\u5355\u5361\u6216\u5355\u673a\u591a\u5361\uff09\u65f6\uff0c\u4e24\u8005\u76f8\u7b49\uff1b \u5f53\u662f\u591a\u673a\u8bad\u7ec3\u65f6\uff0c\u6bcf\u53f0\u673a\u5668\u4e0a\u7684 LOCAL_RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff1b RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6240\u6709\u673a\u5668\u4e0a\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u7684\u603b\u548c\uff0c\u5b83\u4eec\u7684\u7f16\u53f7\u5747\u4ece0\u5f00\u59cb\u3002\uff08\u56e0\u4e3a\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u6240\u4ee5\u4e0d\u5305\u542b\u4e0a\u9650\uff09\u3002 \u4ee5 2 \u673a 2 \u5361 \u4e3a\u4f8b\uff0c\u6bcf\u5f20\u663e\u5361\u7684 LOCAL_RANK \u4e0e RANK \u5bf9\u5e94\u60c5\u51b5\u5982\u4e0b\uff1a RANK LOCAL_RANK \u673a\u5668 0 \u7684\u7b2c 0 \u5f20\u663e\u5361 0 0 \u673a\u5668 0 \u7684\u7b2c 1 \u5f20\u663e\u5361 1 1 \u673a\u5668 1 \u7684\u7b2c 0 \u5f20\u663e\u5361 2 0 \u673a\u5668 1 \u7684\u7b2c 1 \u5f20\u663e\u5361 3 1 \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u542f\u52a8\u867d\u7136\u7e41\u7410\uff0c\u4f46\u662f\u9002\u7528\u6027\u5e7f\uff0c\u53ef\u4ee5\u91c7\u7528\u4efb\u610f\u7684\u65b9\u5f0f\u6765\u542f\u52a8\u8fdb\u7a0b\u3002 \u53e6\u5916\u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528\uff0cOneFlow \u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5206\u5e03\u5f0f\u542f\u52a8\u591a\u8fdb\u7a0b\u4e14\u81ea\u52a8\u6784\u5efa\u73af\u5883\u53d8\u91cf\u7684\u5de5\u5177 oneflow.distributed.launch \u3002","title":"OneFlow \u591a\u673a\u591a\u5361\u542f\u52a8 \u548c \u4f9d\u8d56\u7684\u73af\u5883\u53d8\u91cf"},{"location":"cookies/global_tensor_distributed.html","text":"\u4f7f\u7528 Global Tensor \u8fdb\u884c\u5206\u5e03\u5f0f\u7f16\u7a0b\uff1a\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u00b6 By Guoliang Cheng , Xu Xiaoyu \u6df1\u5ea6\u5b66\u4e60\u662f\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u5b66\u4e60\u6837\u672c\u6570\u636e\u7684\u5185\u5728\u89c4\u5f8b\u548c\u8868\u73b0\u5c42\u6b21\u7684\u4e00\u79cd\u590d\u6742\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u3002\u8ba1\u7b97\u8fc7\u7a0b\u4e3b\u8981\u6d89\u53ca\u6570\u636e\u548c\u6a21\u578b\u4e24\u90e8\u5206\u3002 \u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u6a21\u578b\u89c4\u6a21\u4e0d\u65ad\u6269\u5927\uff0c\u5bf9\u786c\u4ef6\uff08\u7b97\u529b\u3001\u5185\u5b58\uff09\u7684\u9700\u6c42\u4e5f\u5728\u4e0d\u65ad\u63d0\u9ad8\u3002\u7136\u800c\uff0c\u53d7\u9650\u4e8e\u7269\u7406\u5b9a\u5f8b\uff0c\u6301\u7eed\u63d0\u9ad8\u82af\u7247\u7684\u96c6\u6210\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u5355\u4e00\u8bbe\u5907\u7684\u7b97\u529b\u53ca\u5bb9\u91cf\u96be\u4ee5\u8ddf\u4e0a\u6a21\u578b\u6269\u5927\u7684\u9700\u6c42\u3002 \u4e3a\u89e3\u51b3\u7b97\u529b\u589e\u901f\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u591a\u8282\u70b9\u96c6\u7fa4\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u65b9\u5f0f\u9010\u6e10\u53d7\u5230\u91cd\u89c6\uff0c\u9ad8\u6548\u6613\u7528\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565\u7684\u63d0\u51fa\u52bf\u5728\u5fc5\u884c\u3002 \u5e76\u884c\u7b56\u7565 \u00b6 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7b80\u5355\u7684\u8bbe\u5907\u5806\u53e0\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5e26\u6765\u7b97\u529b\u7684\u589e\u957f\u3002\u56e0\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u5e76\u4e0d\u662f\u5355\u7eaf\u7684\u201c\u628a\u539f\u6765\u4e00\u4e2a\u8bbe\u5907\u505a\u7684\u4e8b\u60c5\uff0c\u73b0\u5728\u5206\u7ed9\u591a\u4e2a\u8bbe\u5907\u5404\u81ea\u505a\u201d\uff0c\u5b83\u4e0d\u4ec5\u9700\u8981\u591a\u4e2a\u8bbe\u5907\u8fdb\u884c\u8ba1\u7b97\uff0c\u8fd8\u6d89\u53ca\u5230\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u53ea\u6709\u534f\u8c03\u597d\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u4e0e\u901a\u4fe1\uff0c\u624d\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565\u5305\u62ec \u6570\u636e\u5e76\u884c \u3001 \u6a21\u578b\u5e76\u884c \u548c \u6d41\u6c34\u5e76\u884c \uff0c\u7279\u70b9\u5982\u4e0b\uff1a \u6570\u636e\u5e76\u884c\uff1a\u5bf9 \u6570\u636e \u8fdb\u884c\u5207\u5206\uff0c\u4e0d\u540c\u8bbe\u5907\u6570\u636e\u4e0d\u540c\uff0c\u4f46\u6a21\u578b\u76f8\u540c \u6a21\u578b\u5e76\u884c\uff1a\u5bf9 \u6a21\u578b \u8fdb\u884c\u5207\u5206\uff0c\u4e0d\u540c\u8bbe\u5907\u6570\u636e\u76f8\u540c\uff0c\u4f46\u6a21\u578b\u4e0d\u540c \u6d41\u6c34\u5e76\u884c\uff1a\u5c06 \u6a21\u578b \u5206\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5206\u53d1\u5230\u4e0d\u540c\u8bbe\u5907\uff0c\u5404\u4e2a\u8bbe\u5907\u4e4b\u95f4\u4ee5\u201c\u6d41\u6c34\u7ebf\u201d\u7684\u65b9\u5f0f\u5b8c\u6210\u8bad\u7ec3 \u9664\u4e0a\u8ff0\u4e09\u79cd\u7b56\u7565\u5916\uff0c \u6df7\u5408\u5e76\u884c \u4e5f\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565\uff0c\u901a\u8fc7\u4e0a\u8ff0\u4e24\u79cd\u6216\u4e09\u79cd\u65b9\u5f0f\u7684\u6df7\u5408\u4f7f\u7528\u5b8c\u6210\u8bad\u7ec3\u76ee\u7684\u3002 \u672c\u6587\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u89e3\u91ca\u5e76\u884c\u7b56\u7565\u95f4\u7684\u533a\u522b\uff0c\u4ee5\u53ca\u5982\u4f55\u5229\u7528 Global Tensor \u5b9e\u73b0\u4e0d\u540c\u7684\u5e76\u884c\u65b9\u5f0f\u3002 \u5047\u8bbe\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u67d0\u4e00\u5c42\u662f\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97\uff0c\u5176\u4e2d\uff0c\u8f93\u5165 \\(x\\) \u7684\u5f62\u72b6\u4e3a \\(4\\times5\\) \uff0c\u6a21\u578b\u53c2\u6570 \\(w\\) \u7684\u5f62\u72b6\u4e3a \\(5\\times8\\) \uff0c\u90a3\u4e48\uff0c\u77e9\u9635\u4e58\u6cd5\u8f93\u51fa\u5f62\u72b6\u4e3a \\(4\\times8\\) \u3002 \u57fa\u7840\u4ee3\u7801\uff1a import oneflow as flow x = flow . randn ( 4 , 5 ) w = flow . randn ( 5 , 8 ) out = flow . matmul ( x , w ) print ( out . shape ) # (4, 8) \u793a\u610f\u56fe\u5982\u4e0b\uff1a \u5355\u8bbe\u5907\u7684\u8bad\u7ec3\u4e2d\uff0c\u4ee5\u4e0a\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97\u5f97\u5230 \\(out\\) \u540e\u4f1a\u4f20\u9012\u5230\u4e0b\u4e00\u5c42\uff0c\u5e76\u6700\u7ec8\u8ba1\u7b97\u5f97\u5230 \\(loss\\) \u3002\u7136\u540e\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5f97\u5230 \\(\\frac{\\partial loss}{\\partial w}\\) \uff0c\u7528\u4e8e\u66f4\u65b0 \\(w\\) \u3002 \u6570\u636e\u5e76\u884c \u00b6 \u6570\u636e\u5e76\u884c\u662f\u5c06\u6570\u636e\u8fdb\u884c\u5207\u5206\u8f93\u5165\u4e0d\u540c\u8bbe\u5907\uff0c\u800c\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u4fdd\u6301\u5b8c\u6574\u548c\u4e00\u81f4\u3002 OneFlow \u7279\u6709\u7684 Global Tensor \u91c7\u7528 placement \u4e0e sbp \u7ed3\u5408\u7684\u65b9\u5f0f\u5b8c\u6210\u5206\u5e03\u3002\u5176\u4e2d placement \u8868\u793a Global Tensor \u5206\u5e03\u7684\u7269\u7406\u8bbe\u5907\uff0c sbp \u8868\u793a Global Tensor \u5206\u5e03\u7684\u65b9\u5f0f\uff08\u8be6\u60c5\u53ef\u89c1\uff1a \u521b\u5efa Global Tensor \uff09\u3002 \u4ee5\u4e24\u5361\u5e76\u884c\u4e3a\u4f8b\uff0c\u77e9\u9635\u4e58\u6cd5\u6848\u4f8b\u7684\u6570\u636e\u5e76\u884c\u7a0b\u5e8f\u5982\u4e0b\uff1a \u6ce8\u610f\uff1a\u6ca1\u6709\u591a\u4e2a GPU \u7684\u8bfb\u8005\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u672c\u6587\u5e76\u884c\u793a\u4f8b\u4e2d\u7684 placement \u6307\u5b9a\u4e3a type=\"cpu\" \uff0c \u5b9e\u73b0\u7528 CPU \u6a21\u62df\u591a\u8bbe\u5907\u5e76\u884c import oneflow as flow placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( dim = 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) out = flow . matmul ( x , w ) print ( out . shape ) # (4, 8) \u5047\u8bbe\u4ee5\u4e0a\u7a0b\u5e8f\u6240\u5728\u811a\u672c\u6587\u4ef6\u4e3a test.py \uff0c\u4e0d\u540c\u4e8e\u4e0a\u4e00\u7bc7\u6587\u7ae0\uff0c\u672c\u6587\u7ae0\u501f\u52a9 oneflow \u5206\u5e03\u5f0f\u5de5\u5177\uff0c\u5728 Terminal \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u7a0b\u5e8f\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 test.py \u6570\u636e\u5e76\u884c\u793a\u610f\u56fe\uff1a \u4ee5\u4e0a\u7a0b\u5e8f\u53ef\u4ee5\u770b\u51fa\uff0cGlobal Tensor \u7684\u8bbe\u8ba1\u65b9\u5f0f\u4f7f\u5f97\u4e0a\u8ff0\u77e9\u9635\u4e58\u6cd5\u6848\u4f8b\u7684\u4fee\u6539\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5c06\uff1a \u6570\u636e \\(x\\) \u6309\u7b2c 0 \u7ef4\u5ea6\u5207\u5206( sbp=flow.sbp.split(dim=0) )\uff0c\u5206\u5e03\u5728\u4e24\u5361\u8bbe\u5907\u4e0a( placement=flow.placement(type=\"cuda\", ranks=[0, 1]) ) \u6a21\u578b \\(w\\) \u4fdd\u6301\u5b8c\u6574( sbp=flow.sbp.broadcast )\uff0c\u5206\u5e03\u5728\u4e24\u5361\u8bbe\u5907\u4e0a( placement=flow.placement(type=\"cuda\", ranks=[0, 1]) ) \u6a21\u578b\u5e76\u884c \u00b6 \u5f53\u795e\u7ecf\u7f51\u7edc\u975e\u5e38\u5de8\u5927\u65f6\uff0c\u6570\u636e\u5e76\u884c\u540c\u6b65\u68af\u5ea6\u7684\u4ee3\u4ef7\u5f88\u5927\uff0c\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u91c7\u7528\u6a21\u578b\u5e76\u884c\u7b56\u7565\u3002 \u4e0e\u6570\u636e\u5e76\u884c\u76f8\u53cd\uff0c\u6a21\u578b\u5e76\u884c\u662f\u5c06\u6a21\u578b\u8fdb\u884c\u5207\u5206\u8f93\u5165\u4e0d\u540c\u8bbe\u5907\uff0c\u800c\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u4fdd\u6301\u5b8c\u6574\u548c\u4e00\u81f4\u3002 \u540c\u6837\u4ee5\u4e24\u5361\u4e3a\u4f8b\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u6a21\u578b\u5e76\u884c\u7a0b\u5e8f\u5982\u4e0b\uff1a import oneflow as flow placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( dim = 1 )) out = flow . matmul ( x , w ) print ( out . shape ) # (4, 8) \u5047\u8bbe\u4ee5\u4e0a\u7a0b\u5e8f\u6240\u5728\u811a\u672c\u6587\u4ef6\u4e3a test.py \uff0c\u5728 Terminal \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u7a0b\u5e8f\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 test.py \u6a21\u578b\u5e76\u884c\u793a\u610f\u56fe\uff1a \u540c\u6837\u53ea\u9700\u8981\u4fee\u6539\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a \u6570\u636e \\(x\\) \u4fdd\u6301\u5b8c\u6574( sbp=flow.sbp.broadcast )\uff0c\u5206\u5e03\u5728\u4e24\u5361\u8bbe\u5907\u4e0a( placement=flow.placement(type=\"cuda\", ranks=[0, 1]) ) \u6a21\u578b \\(w\\) \u6309\u7b2c 1 \u7ef4\u5ea6\u5207\u5206( sbp=flow.sbp.split(dim=1) )\uff0c\u5206\u5e03\u5728\u4e24\u5361\u8bbe\u5907\u4e0a( placement=flow.placement(type=\"cuda\", ranks=[0, 1]) ) \u6d41\u6c34\u5e76\u884c \u00b6 \u5f53\u795e\u7ecf\u7f51\u7edc\u8fc7\u4e8e\u5de8\u5927\uff0c\u65e0\u6cd5\u5728\u4e00\u4e2a\u8bbe\u5907\u4e0a\u5b58\u653e\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u6d41\u6c34\u5e76\u884c\u7b56\u7565\u3002 \u6d41\u6c34\u5e76\u884c\u5c06\u7f51\u7edc\u5207\u5206\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5e76\u5206\u53d1\u5230\u4e0d\u540c\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e4b\u95f4\u4ee5\u201c\u6d41\u6c34\u7ebf\u201d\u7684\u65b9\u5f0f\u5b8c\u6210\u8bad\u7ec3\u3002 \u4ee5\u4e24\u5361\u6d41\u6c34\u5e76\u884c\u4e3a\u4f8b\uff0c\u6784\u9020\u4e24\u9636\u6bb5\u793a\u4f8b\u7a0b\u5e8f\uff1a import oneflow as flow P0 = flow . placement ( type = \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( type = \"cuda\" , ranks = [ 1 ]) BROADCAST = flow . sbp . broadcast # \u6a21\u578b\u7b2c\u4e00\u9636\u6bb5\u5206\u5e03\u5728\u7b2c 0 \u5361 w0 = flow . randn ( 5 , 8 , placement = P0 , sbp = BROADCAST ) # \u6a21\u578b\u7b2c\u4e8c\u9636\u6bb5\u5206\u5e03\u5728\u7b2c 1 \u5361 w1 = flow . randn ( 8 , 3 , placement = P1 , sbp = BROADCAST ) # \u968f\u673a\u751f\u6210\u6570\u636e\u6a21\u62df\u8f93\u5165\uff0c\u6ce8\u610f\u7b2c\u4e00\u9636\u6bb5\u7684\u6570\u636e\u5206\u5e03\u5728\u7b2c 0 \u5361 in_stage0 = flow . randn ( 4 , 5 , placement = P0 , sbp = BROADCAST ) out_stage0 = flow . matmul ( in_stage0 , w0 ) print ( out_stage0 . shape ) # (4, 8) # \u5229\u7528 to_global \u5c06\u7b2c\u4e8c\u9636\u6bb5\u7684\u6570\u636e\u5206\u5e03\u5728\u7b2c 1 \u5361 in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = flow . matmul ( in_stage1 , w1 ) print ( out_stage1 . shape ) # (4, 3) \u5047\u8bbe\u4ee5\u4e0a\u7a0b\u5e8f\u6240\u5728\u811a\u672c\u6587\u4ef6\u4e3a test.py \uff0c\u5728 Terminal \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u7a0b\u5e8f\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 test.py \u4ee5\u4e0a\u7a0b\u5e8f\u91c7\u7528\u77e9\u9635\u4e58\u6cd5\uff0c\u6a21\u62df\u4e86\u4e00\u4e2a\u4e24\u9636\u6bb5\u795e\u7ecf\u7f51\u7edc\u3002\u4e0e\u6570\u636e\u5e76\u884c\u548c\u6a21\u578b\u5e76\u884c\u4e0d\u540c\uff0c\u6d41\u6c34\u5e76\u884c\u4e2d\u7684\u6570\u636e\u548c\u6a21\u578b\u5747\u672a\u88ab\u5207\u5206\uff0c\u800c\u662f\u5206\u522b\u5c06\u4e24\u4e2a\u9636\u6bb5\u5206\u5e03\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\u8fdb\u884c\u8ba1\u7b97\u3002 Global Tensor \u7684\u8bbe\u8ba1\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u9700\u901a\u8fc7 to_global(...) \u65b9\u6cd5\u8c03\u6574\u4e0a\u4e00\u9636\u6bb5\u7684\u8f93\u51fa\u6570\u636e\u7684\u5206\u5e03\u7b56\u7565\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u9636\u6bb5\u7684\u8f93\u5165\u6570\u636e\u5373\u53ef\u3002 \u6df7\u5408\u5e76\u884c \u00b6 \u6df7\u5408\u5e76\u884c\u662f\u7ed3\u5408\u4f7f\u7528\u4ee5\u4e0a\u4e24\u79cd\u6216\u4e09\u79cd\u7b56\u7565\u7684\u5e76\u884c\u7b56\u7565\u3002 OneFlow \u540c\u65f6\u652f\u6301 Eager \u6a21\u5f0f \u548c Graph \u6a21\u5f0f \u4e24\u79cd\u6a21\u578b\u8fd0\u884c\u65b9\u5f0f\uff0c\u4e8c\u8005\u5747\u53ef\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7b56\u7565\u3002 Eager \u6a21\u5f0f \u662f OneFlow \u7684\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u7f51\u7edc\u6a21\u578b\u7ee7\u627f\u81ea nn.Module \u6a21\u5757\u3002 Graph \u6a21\u5f0f \u9700\u8981\u81ea\u5b9a\u4e49\u7ee7\u627f\u81ea nn.Graph \u7684\u7c7b\uff0c\u5e76\u5bf9 Eager \u6a21\u5f0f \u7684\u7f51\u7edc\u6a21\u578b\u8fdb\u884c\u590d\u7528\u3002 \u66f4\u591a\u5173\u4e8e Graph \u6a21\u5f0f \u7684\u7ec6\u8282\u8bf7\u53c2\u8003\uff1a \u9759\u6001\u56fe\u6a21\u5757 nn.Graph \u6b64\u5904\u4ee5 4 \u5361 \u6df7\u5408\u5e76\u884c\u7a0b\u5e8f\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 Note \u5206\u522b \u70b9\u51fb \u4ee5\u4e0b Eager \u6216 Graph \u6807\u7b7e\uff0c\u67e5\u770b \u4e24\u79cd\u6a21\u5f0f\u7684\u793a\u4f8b\u4ee3\u7801 Eager import oneflow as flow import oneflow.nn as nn P01 = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) P23 = flow . placement ( type = \"cuda\" , ranks = [ 2 , 3 ]) class StageModule ( nn . Module ): def __init__ ( self , in_dims , out_dims , placement = None , sbp = None ): super () . __init__ () self . w = nn . Parameter ( flow . randn ( in_dims , out_dims , placement = placement , sbp = sbp ) ) def forward ( self , x ): out = flow . matmul ( x , self . w ) return out class ModuleModel ( nn . Module ): def __init__ ( self ): super () . __init__ () # \u6a21\u578b\u7b2c\u4e00\u9636\u6bb5\u5728\u7b2c 0 \u548c\u7b2c 1 \u5361\u4e0a\u8fdb\u884c\u6570\u636e\u5e76\u884c\u8ba1\u7b97 self . m_stage0 = StageModule ( 5 , 8 , placement = P01 , sbp = flow . sbp . broadcast ) # \u6a21\u578b\u7b2c\u4e8c\u9636\u6bb5\u5728\u7b2c 2 \u548c\u7b2c 3 \u5361\u4e0a\u8fdb\u884c\u6a21\u578b\u5e76\u884c\u8ba1\u7b97 self . m_stage1 = StageModule ( 8 , 3 , placement = P23 , sbp = flow . sbp . split ( dim = 1 )) def forward ( self , x ): # \u7b2c\u4e00\u9636\u6bb5\uff0c\u6570\u636e\u5207\u5206\u5728\u7b2c 0 \u548c\u7b2c 1 \u5361\uff0c\u7528\u4e8e\u6570\u636e\u5e76\u884c out_stage0 = self . m_stage0 ( x ) # \u7b2c\u4e8c\u9636\u6bb5\u9700\u8981\u5c06\u8f93\u5165\u6570\u636e\u8fd8\u539f\u5b8c\u6574\uff0c\u5e76\u8f6c\u79fb\u81f3\u7b2c 2 \u548c\u7b2c 3 \u5361\uff0c\u7528\u4e8e\u6a21\u578b\u5e76\u884c in_stage1 = out_stage0 . to_global ( placement = P23 , sbp = flow . sbp . broadcast ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage0 , out_stage1 if __name__ == \"__main__\" : model = ModuleModel () # \u9700\u8981\u5c06\u8f93\u5165\u6570\u636e\u5207\u5206\uff0c\u7528\u4e8e\u6570\u636e\u5e76\u884c in_stage0 = flow . randn ( 4 , 5 , placement = P01 , sbp = flow . sbp . split ( dim = 0 )) out_stage0 , out_stage1 = model ( in_stage0 ) print ( out_stage0 . shape , out_stage1 . shape ) # (4, 8) (4, 3) Graph import oneflow as flow import oneflow.nn as nn P01 = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) P23 = flow . placement ( type = \"cuda\" , ranks = [ 2 , 3 ]) class StageModule ( nn . Module ): def __init__ ( self , in_dims , out_dims , placement = None , sbp = None ): super () . __init__ () self . w = nn . Parameter ( flow . randn ( in_dims , out_dims , placement = placement , sbp = sbp ) ) def forward ( self , x ): out = flow . matmul ( x , self . w ) return out class ModuleModel ( nn . Module ): def __init__ ( self ): super () . __init__ () # \u6a21\u578b\u7b2c\u4e00\u9636\u6bb5\u5728\u7b2c 0 \u548c\u7b2c 1 \u5361\u4e0a\u8fdb\u884c\u6570\u636e\u5e76\u884c\u8ba1\u7b97 self . m_stage0 = StageModule ( 5 , 8 , placement = P01 , sbp = flow . sbp . broadcast ) # \u6a21\u578b\u7b2c\u4e8c\u9636\u6bb5\u5728\u7b2c 2 \u548c\u7b2c 3 \u5361\u4e0a\u8fdb\u884c\u6a21\u578b\u5e76\u884c\u8ba1\u7b97 self . m_stage1 = StageModule ( 8 , 3 , placement = P23 , sbp = flow . sbp . split ( dim = 1 )) def forward ( self , x ): # \u7b2c\u4e00\u9636\u6bb5\uff0c\u6570\u636e\u5207\u5206\u5728\u7b2c 0 \u548c\u7b2c 1 \u5361\uff0c\u7528\u4e8e\u6570\u636e\u5e76\u884c out_stage0 = self . m_stage0 ( x ) # \u7b2c\u4e8c\u9636\u6bb5\u9700\u8981\u5c06\u8f93\u5165\u6570\u636e\u8fd8\u539f\u5b8c\u6574\uff0c\u5e76\u8f6c\u79fb\u81f3\u7b2c 2 \u548c\u7b2c 3 \u5361\uff0c\u7528\u4e8e\u6a21\u578b\u5e76\u884c in_stage1 = out_stage0 . to_global ( placement = P23 , sbp = flow . sbp . broadcast ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage0 , out_stage1 # Graph class GraphModel ( nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = ModuleModel () self . model . m_stage0 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 0 , placement = P01 ) self . model . m_stage1 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 1 , placement = P23 ) def build ( self , x ): return self . model ( x ) if __name__ == \"__main__\" : graph = GraphModel () # \u9700\u8981\u5c06\u8f93\u5165\u6570\u636e\u5207\u5206\uff0c\u7528\u4e8e\u6570\u636e\u5e76\u884c in_stage0 = flow . randn ( 4 , 5 , placement = P01 , sbp = flow . sbp . split ( dim = 0 )) out_stage0 , out_stage1 = graph ( in_stage0 ) print ( out_stage0 . shape , out_stage1 . shape ) # (4, 8) (4, 3) \u4ee5\u4e0a\u7a0b\u5e8f\u6784\u5efa\u4e86\u4e00\u4e2a\u4e24\u9636\u6bb5\u7f51\u7edc\uff0c\u5176 2 \u673a 2 \u5361 \u5e76\u884c\u65b9\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6a21\u578b\u7684\u4e24\u4e2a\u9636\u6bb5\u5206\u522b\u8fd0\u884c\u5728\u4e24\u53f0\u673a\u5668\u8fdb\u884c\u6d41\u6c34\u5e76\u884c\uff0c\u4e14\u7b2c\u4e00\u9636\u6bb5\u5728\u7b2c\u4e00\u53f0\u673a\u5668\u4e0a\u8fdb\u884c\u4e24\u5361\u6570\u636e\u5e76\u884c\uff0c\u7b2c\u4e8c\u9636\u6bb5\u5728\u7b2c\u4e8c\u53f0\u673a\u5668\u4e0a\u8fdb\u884c\u4e24\u5361\u6a21\u578b\u5e76\u884c\u3002 \u8fd0\u884c\u65b9\u5f0f\uff1a Eager \u6a21\u5f0f \u548c Graph \u6a21\u5f0f \u7684\u8fd0\u884c\u65b9\u5f0f\u4e00\u81f4\uff0c\u5047\u8bbe\u811a\u672c\u6587\u4ef6\u540d\u4e3a test.py \u5355\u673a\u56db\u5361\u542f\u52a8\u65b9\u5f0f\u4e3a\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 4 test.py oneflow \u5206\u5e03\u5f0f\u5de5\u5177\u652f\u6301\u591a\u673a\u591a\u8bbe\u5907\u5e76\u884c\uff0c\u4ee5 2 \u673a 2 \u5361 \u73af\u5883\u4e3a\u4f8b\uff0c\u542f\u52a8\u65b9\u5f0f\u5982\u4e0b\uff1a \u5728 \u7b2c 0 \u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 0 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ # \u7b2c 0 \u53f7\u673a\u5668\u7684 IP --master_port = 7788 \\ test.py \u5728 \u7b2c 1 \u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 1 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ # \u7b2c 0 \u53f7\u673a\u5668\u7684 IP --master_port = 7788 \\ test.py \u6ce8\u610f\u8981\u5c06 master_addr \u8bbe\u7f6e\u4e3a\u7b2c 0 \u53f7\u673a\u5668\u7684 IP \u7ed3\u8bed \u00b6 \u5e76\u884c\u7b56\u7565\u7684\u9009\u62e9\u5f71\u54cd\u7740\u8bad\u7ec3\u6548\u7387\uff0c\u6846\u67b6\u5bf9\u5e76\u884c\u8bad\u7ec3\u7684\u63a5\u53e3\u652f\u6301\u7a0b\u5ea6\uff0c\u51b3\u5b9a\u4e86\u7b97\u6cd5\u5de5\u7a0b\u5e08\u7684\u5f00\u53d1\u6548\u7387\u3002 \u672c\u6587\u4ecb\u7ecd\u4e86\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u4ee5\u53ca\u6df7\u5408\u5e76\u884c\u8fd9\u4e9b\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565\uff0c\u901a\u8fc7\u793a\u4f8b\u5c55\u793a\u4e86 OneFlow \u9488\u5bf9\u5206\u5e03\u5f0f\u8bad\u7ec3\u6240\u505a\u7684\u7cfb\u7edf\u7ea7\u8bbe\u8ba1\u548c\u521b\u65b0\uff0c\u4ee5\u4fbf\u4e8e\u7528\u6237\u8f7b\u677e\u4e0a\u624b\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002","title":"\u4f7f\u7528 Global Tensor \u8fdb\u884c\u5206\u5e03\u5f0f\u7f16\u7a0b\uff1a\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565"},{"location":"cookies/global_tensor_distributed.html#global-tensor","text":"By Guoliang Cheng , Xu Xiaoyu \u6df1\u5ea6\u5b66\u4e60\u662f\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc\u5b66\u4e60\u6837\u672c\u6570\u636e\u7684\u5185\u5728\u89c4\u5f8b\u548c\u8868\u73b0\u5c42\u6b21\u7684\u4e00\u79cd\u590d\u6742\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u3002\u8ba1\u7b97\u8fc7\u7a0b\u4e3b\u8981\u6d89\u53ca\u6570\u636e\u548c\u6a21\u578b\u4e24\u90e8\u5206\u3002 \u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u6a21\u578b\u89c4\u6a21\u4e0d\u65ad\u6269\u5927\uff0c\u5bf9\u786c\u4ef6\uff08\u7b97\u529b\u3001\u5185\u5b58\uff09\u7684\u9700\u6c42\u4e5f\u5728\u4e0d\u65ad\u63d0\u9ad8\u3002\u7136\u800c\uff0c\u53d7\u9650\u4e8e\u7269\u7406\u5b9a\u5f8b\uff0c\u6301\u7eed\u63d0\u9ad8\u82af\u7247\u7684\u96c6\u6210\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u5355\u4e00\u8bbe\u5907\u7684\u7b97\u529b\u53ca\u5bb9\u91cf\u96be\u4ee5\u8ddf\u4e0a\u6a21\u578b\u6269\u5927\u7684\u9700\u6c42\u3002 \u4e3a\u89e3\u51b3\u7b97\u529b\u589e\u901f\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u591a\u8282\u70b9\u96c6\u7fa4\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u65b9\u5f0f\u9010\u6e10\u53d7\u5230\u91cd\u89c6\uff0c\u9ad8\u6548\u6613\u7528\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565\u7684\u63d0\u51fa\u52bf\u5728\u5fc5\u884c\u3002","title":"\u4f7f\u7528 Global Tensor \u8fdb\u884c\u5206\u5e03\u5f0f\u7f16\u7a0b\uff1a\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565"},{"location":"cookies/global_tensor_distributed.html#_1","text":"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7b80\u5355\u7684\u8bbe\u5907\u5806\u53e0\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5e26\u6765\u7b97\u529b\u7684\u589e\u957f\u3002\u56e0\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u5e76\u4e0d\u662f\u5355\u7eaf\u7684\u201c\u628a\u539f\u6765\u4e00\u4e2a\u8bbe\u5907\u505a\u7684\u4e8b\u60c5\uff0c\u73b0\u5728\u5206\u7ed9\u591a\u4e2a\u8bbe\u5907\u5404\u81ea\u505a\u201d\uff0c\u5b83\u4e0d\u4ec5\u9700\u8981\u591a\u4e2a\u8bbe\u5907\u8fdb\u884c\u8ba1\u7b97\uff0c\u8fd8\u6d89\u53ca\u5230\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u53ea\u6709\u534f\u8c03\u597d\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u4e0e\u901a\u4fe1\uff0c\u624d\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565\u5305\u62ec \u6570\u636e\u5e76\u884c \u3001 \u6a21\u578b\u5e76\u884c \u548c \u6d41\u6c34\u5e76\u884c \uff0c\u7279\u70b9\u5982\u4e0b\uff1a \u6570\u636e\u5e76\u884c\uff1a\u5bf9 \u6570\u636e \u8fdb\u884c\u5207\u5206\uff0c\u4e0d\u540c\u8bbe\u5907\u6570\u636e\u4e0d\u540c\uff0c\u4f46\u6a21\u578b\u76f8\u540c \u6a21\u578b\u5e76\u884c\uff1a\u5bf9 \u6a21\u578b \u8fdb\u884c\u5207\u5206\uff0c\u4e0d\u540c\u8bbe\u5907\u6570\u636e\u76f8\u540c\uff0c\u4f46\u6a21\u578b\u4e0d\u540c \u6d41\u6c34\u5e76\u884c\uff1a\u5c06 \u6a21\u578b \u5206\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5206\u53d1\u5230\u4e0d\u540c\u8bbe\u5907\uff0c\u5404\u4e2a\u8bbe\u5907\u4e4b\u95f4\u4ee5\u201c\u6d41\u6c34\u7ebf\u201d\u7684\u65b9\u5f0f\u5b8c\u6210\u8bad\u7ec3 \u9664\u4e0a\u8ff0\u4e09\u79cd\u7b56\u7565\u5916\uff0c \u6df7\u5408\u5e76\u884c \u4e5f\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565\uff0c\u901a\u8fc7\u4e0a\u8ff0\u4e24\u79cd\u6216\u4e09\u79cd\u65b9\u5f0f\u7684\u6df7\u5408\u4f7f\u7528\u5b8c\u6210\u8bad\u7ec3\u76ee\u7684\u3002 \u672c\u6587\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u89e3\u91ca\u5e76\u884c\u7b56\u7565\u95f4\u7684\u533a\u522b\uff0c\u4ee5\u53ca\u5982\u4f55\u5229\u7528 Global Tensor \u5b9e\u73b0\u4e0d\u540c\u7684\u5e76\u884c\u65b9\u5f0f\u3002 \u5047\u8bbe\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u67d0\u4e00\u5c42\u662f\u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97\uff0c\u5176\u4e2d\uff0c\u8f93\u5165 \\(x\\) \u7684\u5f62\u72b6\u4e3a \\(4\\times5\\) \uff0c\u6a21\u578b\u53c2\u6570 \\(w\\) \u7684\u5f62\u72b6\u4e3a \\(5\\times8\\) \uff0c\u90a3\u4e48\uff0c\u77e9\u9635\u4e58\u6cd5\u8f93\u51fa\u5f62\u72b6\u4e3a \\(4\\times8\\) \u3002 \u57fa\u7840\u4ee3\u7801\uff1a import oneflow as flow x = flow . randn ( 4 , 5 ) w = flow . randn ( 5 , 8 ) out = flow . matmul ( x , w ) print ( out . shape ) # (4, 8) \u793a\u610f\u56fe\u5982\u4e0b\uff1a \u5355\u8bbe\u5907\u7684\u8bad\u7ec3\u4e2d\uff0c\u4ee5\u4e0a\u77e9\u9635\u4e58\u6cd5\u8ba1\u7b97\u5f97\u5230 \\(out\\) \u540e\u4f1a\u4f20\u9012\u5230\u4e0b\u4e00\u5c42\uff0c\u5e76\u6700\u7ec8\u8ba1\u7b97\u5f97\u5230 \\(loss\\) \u3002\u7136\u540e\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5f97\u5230 \\(\\frac{\\partial loss}{\\partial w}\\) \uff0c\u7528\u4e8e\u66f4\u65b0 \\(w\\) \u3002","title":"\u5e76\u884c\u7b56\u7565"},{"location":"cookies/global_tensor_distributed.html#_2","text":"\u6570\u636e\u5e76\u884c\u662f\u5c06\u6570\u636e\u8fdb\u884c\u5207\u5206\u8f93\u5165\u4e0d\u540c\u8bbe\u5907\uff0c\u800c\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u4fdd\u6301\u5b8c\u6574\u548c\u4e00\u81f4\u3002 OneFlow \u7279\u6709\u7684 Global Tensor \u91c7\u7528 placement \u4e0e sbp \u7ed3\u5408\u7684\u65b9\u5f0f\u5b8c\u6210\u5206\u5e03\u3002\u5176\u4e2d placement \u8868\u793a Global Tensor \u5206\u5e03\u7684\u7269\u7406\u8bbe\u5907\uff0c sbp \u8868\u793a Global Tensor \u5206\u5e03\u7684\u65b9\u5f0f\uff08\u8be6\u60c5\u53ef\u89c1\uff1a \u521b\u5efa Global Tensor \uff09\u3002 \u4ee5\u4e24\u5361\u5e76\u884c\u4e3a\u4f8b\uff0c\u77e9\u9635\u4e58\u6cd5\u6848\u4f8b\u7684\u6570\u636e\u5e76\u884c\u7a0b\u5e8f\u5982\u4e0b\uff1a \u6ce8\u610f\uff1a\u6ca1\u6709\u591a\u4e2a GPU \u7684\u8bfb\u8005\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u672c\u6587\u5e76\u884c\u793a\u4f8b\u4e2d\u7684 placement \u6307\u5b9a\u4e3a type=\"cpu\" \uff0c \u5b9e\u73b0\u7528 CPU \u6a21\u62df\u591a\u8bbe\u5907\u5e76\u884c import oneflow as flow placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( dim = 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) out = flow . matmul ( x , w ) print ( out . shape ) # (4, 8) \u5047\u8bbe\u4ee5\u4e0a\u7a0b\u5e8f\u6240\u5728\u811a\u672c\u6587\u4ef6\u4e3a test.py \uff0c\u4e0d\u540c\u4e8e\u4e0a\u4e00\u7bc7\u6587\u7ae0\uff0c\u672c\u6587\u7ae0\u501f\u52a9 oneflow \u5206\u5e03\u5f0f\u5de5\u5177\uff0c\u5728 Terminal \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u7a0b\u5e8f\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 test.py \u6570\u636e\u5e76\u884c\u793a\u610f\u56fe\uff1a \u4ee5\u4e0a\u7a0b\u5e8f\u53ef\u4ee5\u770b\u51fa\uff0cGlobal Tensor \u7684\u8bbe\u8ba1\u65b9\u5f0f\u4f7f\u5f97\u4e0a\u8ff0\u77e9\u9635\u4e58\u6cd5\u6848\u4f8b\u7684\u4fee\u6539\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5c06\uff1a \u6570\u636e \\(x\\) \u6309\u7b2c 0 \u7ef4\u5ea6\u5207\u5206( sbp=flow.sbp.split(dim=0) )\uff0c\u5206\u5e03\u5728\u4e24\u5361\u8bbe\u5907\u4e0a( placement=flow.placement(type=\"cuda\", ranks=[0, 1]) ) \u6a21\u578b \\(w\\) \u4fdd\u6301\u5b8c\u6574( sbp=flow.sbp.broadcast )\uff0c\u5206\u5e03\u5728\u4e24\u5361\u8bbe\u5907\u4e0a( placement=flow.placement(type=\"cuda\", ranks=[0, 1]) )","title":"\u6570\u636e\u5e76\u884c"},{"location":"cookies/global_tensor_distributed.html#_3","text":"\u5f53\u795e\u7ecf\u7f51\u7edc\u975e\u5e38\u5de8\u5927\u65f6\uff0c\u6570\u636e\u5e76\u884c\u540c\u6b65\u68af\u5ea6\u7684\u4ee3\u4ef7\u5f88\u5927\uff0c\u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u91c7\u7528\u6a21\u578b\u5e76\u884c\u7b56\u7565\u3002 \u4e0e\u6570\u636e\u5e76\u884c\u76f8\u53cd\uff0c\u6a21\u578b\u5e76\u884c\u662f\u5c06\u6a21\u578b\u8fdb\u884c\u5207\u5206\u8f93\u5165\u4e0d\u540c\u8bbe\u5907\uff0c\u800c\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u4fdd\u6301\u5b8c\u6574\u548c\u4e00\u81f4\u3002 \u540c\u6837\u4ee5\u4e24\u5361\u4e3a\u4f8b\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u6a21\u578b\u5e76\u884c\u7a0b\u5e8f\u5982\u4e0b\uff1a import oneflow as flow placement = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( dim = 1 )) out = flow . matmul ( x , w ) print ( out . shape ) # (4, 8) \u5047\u8bbe\u4ee5\u4e0a\u7a0b\u5e8f\u6240\u5728\u811a\u672c\u6587\u4ef6\u4e3a test.py \uff0c\u5728 Terminal \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u7a0b\u5e8f\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 test.py \u6a21\u578b\u5e76\u884c\u793a\u610f\u56fe\uff1a \u540c\u6837\u53ea\u9700\u8981\u4fee\u6539\u4ee5\u4e0b\u4e24\u90e8\u5206\uff1a \u6570\u636e \\(x\\) \u4fdd\u6301\u5b8c\u6574( sbp=flow.sbp.broadcast )\uff0c\u5206\u5e03\u5728\u4e24\u5361\u8bbe\u5907\u4e0a( placement=flow.placement(type=\"cuda\", ranks=[0, 1]) ) \u6a21\u578b \\(w\\) \u6309\u7b2c 1 \u7ef4\u5ea6\u5207\u5206( sbp=flow.sbp.split(dim=1) )\uff0c\u5206\u5e03\u5728\u4e24\u5361\u8bbe\u5907\u4e0a( placement=flow.placement(type=\"cuda\", ranks=[0, 1]) )","title":"\u6a21\u578b\u5e76\u884c"},{"location":"cookies/global_tensor_distributed.html#_4","text":"\u5f53\u795e\u7ecf\u7f51\u7edc\u8fc7\u4e8e\u5de8\u5927\uff0c\u65e0\u6cd5\u5728\u4e00\u4e2a\u8bbe\u5907\u4e0a\u5b58\u653e\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u6d41\u6c34\u5e76\u884c\u7b56\u7565\u3002 \u6d41\u6c34\u5e76\u884c\u5c06\u7f51\u7edc\u5207\u5206\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5e76\u5206\u53d1\u5230\u4e0d\u540c\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e4b\u95f4\u4ee5\u201c\u6d41\u6c34\u7ebf\u201d\u7684\u65b9\u5f0f\u5b8c\u6210\u8bad\u7ec3\u3002 \u4ee5\u4e24\u5361\u6d41\u6c34\u5e76\u884c\u4e3a\u4f8b\uff0c\u6784\u9020\u4e24\u9636\u6bb5\u793a\u4f8b\u7a0b\u5e8f\uff1a import oneflow as flow P0 = flow . placement ( type = \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( type = \"cuda\" , ranks = [ 1 ]) BROADCAST = flow . sbp . broadcast # \u6a21\u578b\u7b2c\u4e00\u9636\u6bb5\u5206\u5e03\u5728\u7b2c 0 \u5361 w0 = flow . randn ( 5 , 8 , placement = P0 , sbp = BROADCAST ) # \u6a21\u578b\u7b2c\u4e8c\u9636\u6bb5\u5206\u5e03\u5728\u7b2c 1 \u5361 w1 = flow . randn ( 8 , 3 , placement = P1 , sbp = BROADCAST ) # \u968f\u673a\u751f\u6210\u6570\u636e\u6a21\u62df\u8f93\u5165\uff0c\u6ce8\u610f\u7b2c\u4e00\u9636\u6bb5\u7684\u6570\u636e\u5206\u5e03\u5728\u7b2c 0 \u5361 in_stage0 = flow . randn ( 4 , 5 , placement = P0 , sbp = BROADCAST ) out_stage0 = flow . matmul ( in_stage0 , w0 ) print ( out_stage0 . shape ) # (4, 8) # \u5229\u7528 to_global \u5c06\u7b2c\u4e8c\u9636\u6bb5\u7684\u6570\u636e\u5206\u5e03\u5728\u7b2c 1 \u5361 in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = flow . matmul ( in_stage1 , w1 ) print ( out_stage1 . shape ) # (4, 3) \u5047\u8bbe\u4ee5\u4e0a\u7a0b\u5e8f\u6240\u5728\u811a\u672c\u6587\u4ef6\u4e3a test.py \uff0c\u5728 Terminal \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u7a0b\u5e8f\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 test.py \u4ee5\u4e0a\u7a0b\u5e8f\u91c7\u7528\u77e9\u9635\u4e58\u6cd5\uff0c\u6a21\u62df\u4e86\u4e00\u4e2a\u4e24\u9636\u6bb5\u795e\u7ecf\u7f51\u7edc\u3002\u4e0e\u6570\u636e\u5e76\u884c\u548c\u6a21\u578b\u5e76\u884c\u4e0d\u540c\uff0c\u6d41\u6c34\u5e76\u884c\u4e2d\u7684\u6570\u636e\u548c\u6a21\u578b\u5747\u672a\u88ab\u5207\u5206\uff0c\u800c\u662f\u5206\u522b\u5c06\u4e24\u4e2a\u9636\u6bb5\u5206\u5e03\u5728\u4e0d\u540c\u7684\u8bbe\u5907\u4e0a\u8fdb\u884c\u8ba1\u7b97\u3002 Global Tensor \u7684\u8bbe\u8ba1\uff0c\u4f7f\u5f97\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u9700\u901a\u8fc7 to_global(...) \u65b9\u6cd5\u8c03\u6574\u4e0a\u4e00\u9636\u6bb5\u7684\u8f93\u51fa\u6570\u636e\u7684\u5206\u5e03\u7b56\u7565\uff0c\u4f5c\u4e3a\u4e0b\u4e00\u9636\u6bb5\u7684\u8f93\u5165\u6570\u636e\u5373\u53ef\u3002","title":"\u6d41\u6c34\u5e76\u884c"},{"location":"cookies/global_tensor_distributed.html#_5","text":"\u6df7\u5408\u5e76\u884c\u662f\u7ed3\u5408\u4f7f\u7528\u4ee5\u4e0a\u4e24\u79cd\u6216\u4e09\u79cd\u7b56\u7565\u7684\u5e76\u884c\u7b56\u7565\u3002 OneFlow \u540c\u65f6\u652f\u6301 Eager \u6a21\u5f0f \u548c Graph \u6a21\u5f0f \u4e24\u79cd\u6a21\u578b\u8fd0\u884c\u65b9\u5f0f\uff0c\u4e8c\u8005\u5747\u53ef\u7528\u4e8e\u5e76\u884c\u8ba1\u7b97\u7b56\u7565\u3002 Eager \u6a21\u5f0f \u662f OneFlow \u7684\u9ed8\u8ba4\u6a21\u5f0f\uff0c\u7f51\u7edc\u6a21\u578b\u7ee7\u627f\u81ea nn.Module \u6a21\u5757\u3002 Graph \u6a21\u5f0f \u9700\u8981\u81ea\u5b9a\u4e49\u7ee7\u627f\u81ea nn.Graph \u7684\u7c7b\uff0c\u5e76\u5bf9 Eager \u6a21\u5f0f \u7684\u7f51\u7edc\u6a21\u578b\u8fdb\u884c\u590d\u7528\u3002 \u66f4\u591a\u5173\u4e8e Graph \u6a21\u5f0f \u7684\u7ec6\u8282\u8bf7\u53c2\u8003\uff1a \u9759\u6001\u56fe\u6a21\u5757 nn.Graph \u6b64\u5904\u4ee5 4 \u5361 \u6df7\u5408\u5e76\u884c\u7a0b\u5e8f\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 Note \u5206\u522b \u70b9\u51fb \u4ee5\u4e0b Eager \u6216 Graph \u6807\u7b7e\uff0c\u67e5\u770b \u4e24\u79cd\u6a21\u5f0f\u7684\u793a\u4f8b\u4ee3\u7801 Eager import oneflow as flow import oneflow.nn as nn P01 = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) P23 = flow . placement ( type = \"cuda\" , ranks = [ 2 , 3 ]) class StageModule ( nn . Module ): def __init__ ( self , in_dims , out_dims , placement = None , sbp = None ): super () . __init__ () self . w = nn . Parameter ( flow . randn ( in_dims , out_dims , placement = placement , sbp = sbp ) ) def forward ( self , x ): out = flow . matmul ( x , self . w ) return out class ModuleModel ( nn . Module ): def __init__ ( self ): super () . __init__ () # \u6a21\u578b\u7b2c\u4e00\u9636\u6bb5\u5728\u7b2c 0 \u548c\u7b2c 1 \u5361\u4e0a\u8fdb\u884c\u6570\u636e\u5e76\u884c\u8ba1\u7b97 self . m_stage0 = StageModule ( 5 , 8 , placement = P01 , sbp = flow . sbp . broadcast ) # \u6a21\u578b\u7b2c\u4e8c\u9636\u6bb5\u5728\u7b2c 2 \u548c\u7b2c 3 \u5361\u4e0a\u8fdb\u884c\u6a21\u578b\u5e76\u884c\u8ba1\u7b97 self . m_stage1 = StageModule ( 8 , 3 , placement = P23 , sbp = flow . sbp . split ( dim = 1 )) def forward ( self , x ): # \u7b2c\u4e00\u9636\u6bb5\uff0c\u6570\u636e\u5207\u5206\u5728\u7b2c 0 \u548c\u7b2c 1 \u5361\uff0c\u7528\u4e8e\u6570\u636e\u5e76\u884c out_stage0 = self . m_stage0 ( x ) # \u7b2c\u4e8c\u9636\u6bb5\u9700\u8981\u5c06\u8f93\u5165\u6570\u636e\u8fd8\u539f\u5b8c\u6574\uff0c\u5e76\u8f6c\u79fb\u81f3\u7b2c 2 \u548c\u7b2c 3 \u5361\uff0c\u7528\u4e8e\u6a21\u578b\u5e76\u884c in_stage1 = out_stage0 . to_global ( placement = P23 , sbp = flow . sbp . broadcast ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage0 , out_stage1 if __name__ == \"__main__\" : model = ModuleModel () # \u9700\u8981\u5c06\u8f93\u5165\u6570\u636e\u5207\u5206\uff0c\u7528\u4e8e\u6570\u636e\u5e76\u884c in_stage0 = flow . randn ( 4 , 5 , placement = P01 , sbp = flow . sbp . split ( dim = 0 )) out_stage0 , out_stage1 = model ( in_stage0 ) print ( out_stage0 . shape , out_stage1 . shape ) # (4, 8) (4, 3) Graph import oneflow as flow import oneflow.nn as nn P01 = flow . placement ( type = \"cuda\" , ranks = [ 0 , 1 ]) P23 = flow . placement ( type = \"cuda\" , ranks = [ 2 , 3 ]) class StageModule ( nn . Module ): def __init__ ( self , in_dims , out_dims , placement = None , sbp = None ): super () . __init__ () self . w = nn . Parameter ( flow . randn ( in_dims , out_dims , placement = placement , sbp = sbp ) ) def forward ( self , x ): out = flow . matmul ( x , self . w ) return out class ModuleModel ( nn . Module ): def __init__ ( self ): super () . __init__ () # \u6a21\u578b\u7b2c\u4e00\u9636\u6bb5\u5728\u7b2c 0 \u548c\u7b2c 1 \u5361\u4e0a\u8fdb\u884c\u6570\u636e\u5e76\u884c\u8ba1\u7b97 self . m_stage0 = StageModule ( 5 , 8 , placement = P01 , sbp = flow . sbp . broadcast ) # \u6a21\u578b\u7b2c\u4e8c\u9636\u6bb5\u5728\u7b2c 2 \u548c\u7b2c 3 \u5361\u4e0a\u8fdb\u884c\u6a21\u578b\u5e76\u884c\u8ba1\u7b97 self . m_stage1 = StageModule ( 8 , 3 , placement = P23 , sbp = flow . sbp . split ( dim = 1 )) def forward ( self , x ): # \u7b2c\u4e00\u9636\u6bb5\uff0c\u6570\u636e\u5207\u5206\u5728\u7b2c 0 \u548c\u7b2c 1 \u5361\uff0c\u7528\u4e8e\u6570\u636e\u5e76\u884c out_stage0 = self . m_stage0 ( x ) # \u7b2c\u4e8c\u9636\u6bb5\u9700\u8981\u5c06\u8f93\u5165\u6570\u636e\u8fd8\u539f\u5b8c\u6574\uff0c\u5e76\u8f6c\u79fb\u81f3\u7b2c 2 \u548c\u7b2c 3 \u5361\uff0c\u7528\u4e8e\u6a21\u578b\u5e76\u884c in_stage1 = out_stage0 . to_global ( placement = P23 , sbp = flow . sbp . broadcast ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage0 , out_stage1 # Graph class GraphModel ( nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = ModuleModel () self . model . m_stage0 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 0 , placement = P01 ) self . model . m_stage1 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 1 , placement = P23 ) def build ( self , x ): return self . model ( x ) if __name__ == \"__main__\" : graph = GraphModel () # \u9700\u8981\u5c06\u8f93\u5165\u6570\u636e\u5207\u5206\uff0c\u7528\u4e8e\u6570\u636e\u5e76\u884c in_stage0 = flow . randn ( 4 , 5 , placement = P01 , sbp = flow . sbp . split ( dim = 0 )) out_stage0 , out_stage1 = graph ( in_stage0 ) print ( out_stage0 . shape , out_stage1 . shape ) # (4, 8) (4, 3) \u4ee5\u4e0a\u7a0b\u5e8f\u6784\u5efa\u4e86\u4e00\u4e2a\u4e24\u9636\u6bb5\u7f51\u7edc\uff0c\u5176 2 \u673a 2 \u5361 \u5e76\u884c\u65b9\u5f0f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u6a21\u578b\u7684\u4e24\u4e2a\u9636\u6bb5\u5206\u522b\u8fd0\u884c\u5728\u4e24\u53f0\u673a\u5668\u8fdb\u884c\u6d41\u6c34\u5e76\u884c\uff0c\u4e14\u7b2c\u4e00\u9636\u6bb5\u5728\u7b2c\u4e00\u53f0\u673a\u5668\u4e0a\u8fdb\u884c\u4e24\u5361\u6570\u636e\u5e76\u884c\uff0c\u7b2c\u4e8c\u9636\u6bb5\u5728\u7b2c\u4e8c\u53f0\u673a\u5668\u4e0a\u8fdb\u884c\u4e24\u5361\u6a21\u578b\u5e76\u884c\u3002 \u8fd0\u884c\u65b9\u5f0f\uff1a Eager \u6a21\u5f0f \u548c Graph \u6a21\u5f0f \u7684\u8fd0\u884c\u65b9\u5f0f\u4e00\u81f4\uff0c\u5047\u8bbe\u811a\u672c\u6587\u4ef6\u540d\u4e3a test.py \u5355\u673a\u56db\u5361\u542f\u52a8\u65b9\u5f0f\u4e3a\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 4 test.py oneflow \u5206\u5e03\u5f0f\u5de5\u5177\u652f\u6301\u591a\u673a\u591a\u8bbe\u5907\u5e76\u884c\uff0c\u4ee5 2 \u673a 2 \u5361 \u73af\u5883\u4e3a\u4f8b\uff0c\u542f\u52a8\u65b9\u5f0f\u5982\u4e0b\uff1a \u5728 \u7b2c 0 \u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 0 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ # \u7b2c 0 \u53f7\u673a\u5668\u7684 IP --master_port = 7788 \\ test.py \u5728 \u7b2c 1 \u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 1 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ # \u7b2c 0 \u53f7\u673a\u5668\u7684 IP --master_port = 7788 \\ test.py \u6ce8\u610f\u8981\u5c06 master_addr \u8bbe\u7f6e\u4e3a\u7b2c 0 \u53f7\u673a\u5668\u7684 IP","title":"\u6df7\u5408\u5e76\u884c"},{"location":"cookies/global_tensor_distributed.html#_6","text":"\u5e76\u884c\u7b56\u7565\u7684\u9009\u62e9\u5f71\u54cd\u7740\u8bad\u7ec3\u6548\u7387\uff0c\u6846\u67b6\u5bf9\u5e76\u884c\u8bad\u7ec3\u7684\u63a5\u53e3\u652f\u6301\u7a0b\u5ea6\uff0c\u51b3\u5b9a\u4e86\u7b97\u6cd5\u5de5\u7a0b\u5e08\u7684\u5f00\u53d1\u6548\u7387\u3002 \u672c\u6587\u4ecb\u7ecd\u4e86\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u3001\u6d41\u6c34\u5e76\u884c\u4ee5\u53ca\u6df7\u5408\u5e76\u884c\u8fd9\u4e9b\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565\uff0c\u901a\u8fc7\u793a\u4f8b\u5c55\u793a\u4e86 OneFlow \u9488\u5bf9\u5206\u5e03\u5f0f\u8bad\u7ec3\u6240\u505a\u7684\u7cfb\u7edf\u7ea7\u8bbe\u8ba1\u548c\u521b\u65b0\uff0c\u4ee5\u4fbf\u4e8e\u7528\u6237\u8f7b\u677e\u4e0a\u624b\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002","title":"\u7ed3\u8bed"},{"location":"cookies/one_embedding.html","text":"\u5927\u89c4\u6a21 Embedding \u65b9\u6848\uff1a OneEmbedding \u00b6 Embedding \u662f\u63a8\u8350\u7cfb\u7edf\u7684\u91cd\u8981\u7ec4\u4ef6\uff0c\u4e5f\u6269\u6563\u5230\u4e86\u63a8\u8350\u7cfb\u7edf\u5916\u7684\u8bb8\u591a\u9886\u57df\u3002\u5404\u4e2a\u6846\u67b6\u90fd\u63d0\u4f9b\u4e86\u8fdb\u884c embedding \u7684\u57fa\u7840\u7b97\u5b50\uff0c\u6bd4\u5982 OneFlow \u4e2d\u7684 flow.nn.Embedding \uff1a import numpy as np import oneflow as flow indices = flow . tensor ([[ 1 , 2 , 4 , 5 ], [ 4 , 3 , 2 , 9 ]], dtype = flow . int ) embedding = flow . nn . Embedding ( 10 , 3 ) y = embedding ( indices ) OneFlow \u4e3a\u4e86\u89e3\u51b3\u5927\u89c4\u6a21\u6df1\u5ea6\u63a8\u8350\u7cfb\u7edf\u7684\u95ee\u9898\uff0c\u8fd8\u63d0\u4f9b\u4e86\u5927\u89c4\u6a21 Embedding \u7684\u65b9\u6848\uff1aOneEmbedding\u3002 \u4e0e\u666e\u901a\u7684\u7b97\u5b50\u76f8\u6bd4\uff0cOneEmbedding \u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u7075\u6d3b\u7684\u5206\u5c42\u5b58\u50a8\uff0c\u652f\u6301\u5c06 Embedding table \u653e\u7f6e\u5728 GPU \u663e\u5b58\u3001 CPU \u5185\u5b58\u6216\u8005 SSD \u4e0a\u9762\uff0c\u5141\u8bb8\u4f7f\u7528\u9ad8\u901f\u8bbe\u5907\u4f5c\u4e3a\u4f4e\u901f\u8bbe\u5907\u7684\u7f13\u5b58\uff0c\u5b9e\u73b0\u901f\u5ea6\u4e0e\u5bb9\u91cf\u7684\u517c\u987e\u3002 \u652f\u6301\u52a8\u6001\u6269\u5bb9\u3002 \u5feb\u901f\u4e0a\u624b OneEmbedding \u00b6 \u6211\u4eec\u5c06\u5c55\u793a\u4e00\u4e2a\u5feb\u901f\u4e0a\u624b OneEmbedding \u7684\u4f8b\u5b50\uff0c\u5b83\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u57fa\u672c\u6b65\u9aa4\uff1a \u4f7f\u7528 make_table_options \u914d\u7f6e\u8bcd\u8868 \u914d\u7f6e\u8bcd\u8868\u7684\u5b58\u50a8\u5c5e\u6027 \u5b9e\u4f8b\u5316 Embedding \u6784\u9020 Graph \u8fdb\u884c\u8bad\u7ec3 \u4f7f\u7528 make_table_options \u914d\u7f6e\u8bcd\u8868 \u00b6 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u5bfc\u5165\u76f8\u5173\u5305\uff0c\u5e76\u4f7f\u7528 make_table_options \u914d\u7f6e\u8bcd\u8868\u3002OneEmbedding \u652f\u6301\u540c\u65f6\u521b\u5efa\u591a\u4e2a\u8bcd\u8868\uff0c\u4ee5\u4e0b\u4ee3\u7801\u914d\u7f6e\u4e86\u4e09\u4e2a\u8bcd\u8868\u3002 import oneflow as flow import oneflow.nn as nn import numpy as np tables = [ flow . one_embedding . make_table_options ( flow . one_embedding . make_uniform_initializer ( low =- 0.1 , high = 0.1 ) ), flow . one_embedding . make_table_options ( flow . one_embedding . make_uniform_initializer ( low =- 0.05 , high = 0.05 ) ), flow . one_embedding . make_table_options ( flow . one_embedding . make_uniform_initializer ( low =- 0.15 , high = 0.15 ) ), ] \u914d\u7f6e\u8bcd\u8868\u65f6\u9700\u8981\u6307\u5b9a\u521d\u59cb\u5316\u7684\u65b9\u5f0f\uff0c\u4ee5\u4e0a\u8bcd\u8868\u5747\u91c7\u7528 uniform \u65b9\u5f0f\u521d\u59cb\u5316\u3002\u914d\u7f6e\u8bcd\u8868\u7684\u7ed3\u679c\u4fdd\u5b58\u5728 tables \u53d8\u91cf\u4e2d\u3002 \u70b9\u51fb make_table_options \u53ca make_uniform_initializer \u53ef\u4ee5\u67e5\u770b\u6709\u5173\u5b83\u4eec\u7684\u66f4\u8be6\u7ec6\u8bf4\u660e\u3002 \u914d\u7f6e\u8bcd\u8868\u7684\u5b58\u50a8\u5c5e\u6027 \u00b6 \u63a5\u7740\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u7528\u4e8e\u914d\u7f6e\u8bcd\u8868\u7684\u5b58\u50a8\u5c5e\u6027\uff1a store_options = flow . one_embedding . make_cached_ssd_store_options ( cache_budget_mb = 8142 , persistent_path = \"/your_path_to_ssd\" , capacity = 40000000 , size_factor = 1 , physical_block_size = 512 ) \u8fd9\u91cc\u901a\u8fc7\u8c03\u7528 make_cached_ssd_store_options \uff0c\u9009\u62e9\u5c06\u8bcd\u8868\u5b58\u50a8\u5728 SSD \u4e2d\uff0c\u5e76\u4e14\u4f7f\u7528 GPU \u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u3002\u5177\u4f53\u53c2\u6570\u7684\u610f\u4e49\u53ef\u4ee5\u53c2\u9605 make_cached_ssd_store_options API \u6587\u6863 \u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u7eaf GPU \u5b58\u50a8\uff1b\u6216\u8005\u4f7f\u7528 CPU \u5185\u5b58\u5b58\u50a8\u8bcd\u8868\u3001\u4f46\u7528 GPU \u505a\u9ad8\u901f\u7f13\u5b58\u3002\u5177\u4f53\u53ef\u4ee5\u5206\u522b\u53c2\u9605 make_device_mem_store_options \u53ca make_cached_host_mem_store_options \u3002 \u5b9e\u4f8b\u5316 Embedding \u00b6 \u4ee5\u4e0a\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u4f7f\u7528 MultiTableEmbedding \u53ef\u4ee5\u5f97\u5230\u5b9e\u4f8b\u5316\u7684 Embedding \u5c42\u3002 embedding_size = 128 embedding = flow . one_embedding . MultiTableEmbedding ( name = \"my_embedding\" , embedding_dim = embedding_size , dtype = flow . float , key_type = flow . int64 , tables = tables , store_options = store_options , ) embedding . to ( \"cuda\" ) \u5176\u4e2d\uff0c tables \u662f\u4e4b\u524d\u901a\u8fc7 make_table_options \u914d\u7f6e\u7684\u8bcd\u8868\u5c5e\u6027\uff0c store_options \u662f\u4e4b\u524d\u914d\u7f6e\u7684\u5b58\u50a8\u5c5e\u6027\uff0c embedding_dim \u662f\u7279\u5f81\u7ef4\u5ea6\uff0c dtype \u662f\u7279\u5f81\u5411\u91cf\u7684\u6570\u636e\u7c7b\u578b\uff0c key_type \u662f\u7279\u5f81 ID \u7684\u6570\u636e\u7c7b\u578b\u3002 \u5982\u679c\u540c\u65f6\u521b\u5efa\u4e86\u4e24\u4e2a OneEmbedding\uff0c\u5728\u5b9e\u4f8b\u5316\u65f6\u9700\u8981\u8bbe\u7f6e\u4e0d\u540c\u7684 name \u548c persistent path \u53c2\u6570\u3002 \u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u53c2\u9605 one_embedding.MultiTableEmbedding \u4f7f\u7528 Graph \u8bad\u7ec3 \u00b6 \u76ee\u524d OneEmbedding \u4ec5\u652f\u6301\u5728 Graph \u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 \u5728\u4ee5\u4e0b\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 Graph \u7c7b\uff0c\u5b83\u5305\u62ec\u4e86 embedding \u548c mlp \u4e24\u5c42\u3002 num_tables = 3 mlp = flow . nn . FusedMLP ( in_features = embedding_size * num_tables , hidden_features = [ 512 , 256 , 128 ], out_features = 1 , skip_final_activation = True , ) mlp . to ( \"cuda\" ) class TrainGraph ( flow . nn . Graph ): def __init__ ( self ,): super () . __init__ () self . embedding_lookup = embedding self . mlp = mlp self . add_optimizer ( flow . optim . SGD ( self . embedding_lookup . parameters (), lr = 0.1 , momentum = 0.0 ) ) self . add_optimizer ( flow . optim . SGD ( self . mlp . parameters (), lr = 0.1 , momentum = 0.0 ) ) def build ( self , ids ): embedding = self . embedding_lookup ( ids ) loss = self . mlp ( flow . reshape ( embedding , ( - 1 , num_tables * embedding_size ))) loss = loss . sum () loss . backward () return loss \u7136\u540e\u5c31\u53ef\u4ee5\u5b9e\u4f8b\u5316 Graph\uff0c\u5f00\u59cb\u8bad\u7ec3\u4e86\u3002 ids = np . random . randint ( 0 , 1000 , ( 100 , num_tables ), dtype = np . int64 ) ids_tensor = flow . tensor ( ids , requires_grad = False ) . to ( \"cuda\" ) graph = TrainGraph () loss = graph ( ids_tensor ) print ( loss ) \u5173\u4e8e Graph \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u9605 \u9759\u6001\u56fe\u6a21\u5757 nn.Graph \u83b7\u53d6\u66f4\u8be6\u7ec6\u4fe1\u606f\u3002 OneEmbedding \u7279\u70b9\u8bf4\u660e \u00b6 \u7279\u5f81 ID \u52a8\u6001\u6269\u5bb9 \u00b6 OneEmbedding \u652f\u6301\u52a8\u6001\u63d2\u5165\u65b0\u7684\u7279\u5f81 ID\uff0c\u53ea\u8981\u5b58\u50a8\u4ecb\u8d28\u7684\u5bb9\u91cf\u8db3\u591f\uff0c\u7279\u5f81 ID \u7684\u6570\u76ee\u662f\u6ca1\u6709\u4e0a\u9650\u7684\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528 make_table_options \u65f6\uff0c\u53ea\u9700\u8981\u6307\u5b9a\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u7279\u5f81 ID \u7684\u603b\u6570\u76ee\uff08\u8bcd\u8868\u884c\u6570\uff09\u3002 \u7279\u5f81 ID \u4e0e\u591a\u8868\u67e5\u8be2 \u00b6 \u7279\u5f81 ID \u4e0d\u80fd\u91cd\u590d \u5236\u4f5c\u6570\u636e\u96c6\u7684 OneEmbedding \u7528\u6237\u9700\u8981\u683c\u5916\u6ce8\u610f\uff1a\u4f7f\u7528 MultiTableEmbedding \u540c\u65f6\u521b\u5efa\u591a\u4e2a\u8868\u65f6\uff0c\u591a\u4e2a Embedding Table \u4ec5\u521d\u59cb\u5316\u53c2\u6570\u4e0d\u540c\uff0c\u5176\u4ed6\u53c2\u6570\u4e00\u81f4\uff0c\u6b64\u65f6\uff0c \u591a\u4e2a\u8868\u4e2d\u7684\u7279\u5f81 ID \u4e0d\u80fd\u91cd\u590d \u3002 \u591a\u8868\u67e5\u8be2 \u5982\u679c\u4f7f\u7528 MultiTableEmbedding \u53ea\u914d\u7f6e\u4e86\u4e00\u4e2a\u8868\uff0c\u5219\u67e5\u8be2\u65b9\u5f0f\u4e0e\u666e\u901a\u7684 Embedding \u67e5\u8be2\u65b9\u5f0f\u6ca1\u6709\u533a\u522b\uff0c\u76f4\u63a5\u8c03\u7528\uff0c\u5e76\u4f20\u9012\u7279\u5f81 ID \u5373\u53ef\uff0c\u5982 embedding_lookup(ids) \u3002 \u5982\u679c\u4f7f\u7528 MultiTableEmbedding \u914d\u7f6e\u4e86\u591a\u4e2a\u8868\uff0c\u5219\u5bf9\u4e8e\u67d0\u4e2a\u7279\u5f81 ID\uff0c\u9700\u8981\u6307\u660e\u5728\u54ea\u4e2a\u8868\u4e2d\u67e5\u8be2\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\u6307\u660e\uff1a \u65b9\u6cd5\u4e00\uff1a\u4f20\u9012\u4e00\u4e2a\u5f62\u72b6\u4e3a (batch_size, \u8bcd\u8868\u6570\u76ee) \u7684 ids \u7528\u4e8e\u67e5\u8be2\uff0c\u5219\u8fd9\u4e2a ids \u7684\u5217\uff0c\u4f9d\u6b21\u5bf9\u5e94\u4e00\u4e2a\u8bcd\u8868\u3002 \u6bd4\u5982\uff1a ids = np . array ([[ 488 , 333 , 220 ], [ 18 , 568 , 508 ]], dtype = np . int64 ) # \u8868\u793a\u5728\u7b2c 0 \u4e2a\u8868\u4e2d\u67e5\u8be2 `[[488], [18]]`\uff0c\u7b2c 1 \u4e2a\u8868\u4e2d\u67e5\u8be2 `[[333], [568]]`\uff0c\u7b2c 2 \u4e2a\u8868\u4e2d\u67e5\u8be2 `[[220], [508]]` \u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\u3002 embedding_lookup ( ids ) \u65b9\u6cd5\u4e8c\uff1a\u4f20\u9012 ids \u53c2\u6570\u7684\u540c\u65f6\uff0c\u518d\u4f20\u9012\u4e00\u4e2a table_ids \u53c2\u6570\uff0c\u5b83\u7684\u5f62\u72b6\u4e0e ids \u5b8c\u5168\u76f8\u540c\uff0c\u5728 table_ids \u4e2d\u6307\u5b9a\u8868\u7684\u5e8f\u53f7\u3002 \u6bd4\u5982\uff1a ids = np . array ([ 488 , 333 , 220 , 18 , 568 , 508 ], dtype = np . int64 ) # table_ids\u7684shape\u4e0eids\u4fdd\u6301\u4e00\u81f4 table_ids = np . array ([ 0 , 1 , 2 , 0 , 1 , 2 ]) # \u8868\u793a\u5728\u7b2c 0 \u4e2a\u8868\u4e2d\u67e5\u8be2 `488, 18`\uff0c\u7b2c 1 \u4e2a\u8868\u4e2d\u67e5\u8be2 `333, 568`\uff0c\u7b2c 2 \u4e2a\u8868\u4e2d\u67e5\u8be2 `220, 508` \u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\u3002 embedding_lookup ( ids , table_ids ) \u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u9605 MultiTableEmbedding.forward \u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u5b58\u50a8\u914d\u7f6e \u00b6 OneEmbedding \u63d0\u4f9b\u4e86\u4e09\u79cd\u5b58\u50a8\u9009\u9879\u914d\u7f6e\uff0c\u5206\u522b\u662f\u7eaf GPU \u5b58\u50a8\uff0c \u5b58\u50a8\u5728 CPU \u5185\u5b58\u4e2d\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u548c\u5b58\u50a8\u5728 SSD \u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u3002 \u7eaf GPU \u5b58\u50a8 \u5f53\u8bcd\u8868\u5927\u5c0f\u5c0f\u4e8e GPU \u663e\u5b58\u65f6\uff0c\u5c06\u5168\u90e8\u8bcd\u8868\u653e\u5728 GPU \u663e\u5b58\u4e0a\u662f\u6700\u5feb\u7684\uff0c\u6b64\u65f6\u63a8\u8350\u9009\u62e9\u7eaf GPU \u5b58\u50a8\u914d\u7f6e\u3002 \u5b58\u50a8\u5728 CPU \u5185\u5b58\u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58 \u5f53\u8bcd\u8868\u5927\u4e8e GPU \u663e\u5b58\uff0c\u4f46\u662f\u5c0f\u4e8e CPU \u5185\u5b58\u65f6\uff0c\u63a8\u8350\u8bcd\u8868\u5b58\u50a8\u5728 CPU \u5185\u5b58\u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u3002 \u5b58\u50a8\u5728 SSD \u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58 \u5f53\u8bcd\u8868\u5927\u5c0f\u65e2\u5927\u4e8e GPU \u663e\u5b58\uff0c\u4e5f\u5927\u4e8e\u7cfb\u7edf\u5185\u5b58\u65f6\uff0c\u5982\u679c\u6709\u9ad8\u901f\u7684 SSD\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u8bcd\u8868\u5b58\u50a8\u5728 SSD \u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f1a\u5bf9\u5b58\u50a8\u7684\u8bcd\u8868\u8fdb\u884c\u9891\u7e41\u7684\u6570\u636e\u8bfb\u5199\uff0c\u56e0\u6b64 persistent_path \u6240\u8bbe\u7f6e\u8def\u5f84\u4e0b\u7684\u6587\u4ef6\u968f\u673a\u8bfb\u5199\u901f\u5ea6\u5bf9\u6574\u4f53\u6027\u80fd\u5f71\u54cd\u5f88\u5927\u3002\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528\u9ad8\u6027\u80fd\u7684 SSD\uff0c\u5982\u679c\u4f7f\u7528\u666e\u901a\u78c1\u76d8\uff0c\u4f1a\u5bf9\u6027\u80fd\u6709\u5f88\u5927\u8d1f\u9762\u5f71\u54cd\u3002 \u5206\u5e03\u5f0f\u8bad\u7ec3 \u00b6 OneEmbedding \u540c OneFlow \u7684\u5176\u5b83\u6a21\u5757\u7c7b\u4f3c\uff0c\u90fd\u539f\u751f\u652f\u6301\u5206\u5e03\u5f0f\u6269\u5c55\u3002\u7528\u6237\u53ef\u4ee5\u53c2\u8003 #dlrm \u4e2d\u7684 README\uff0c \u542f\u52a8 DLRM \u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u8fd8\u53ef\u4ee5\u53c2\u8003 Global Tensor \u4e86\u89e3\u5fc5\u8981\u7684\u524d\u7f6e\u77e5\u8bc6\u3002 \u4f7f\u7528 OneEmbedding \u6a21\u5757\u8fdb\u884c\u5206\u5e03\u5f0f\u6269\u5c55\uff0c\u8981\u6ce8\u610f\uff1a \u76ee\u524d OneEmbedding \u53ea\u652f\u6301\u653e\u7f6e\u5728\u5168\u90e8\u8bbe\u5907\u4e0a\uff0c\u5e76\u884c\u5ea6\u9700\u548c world size \u4e00\u81f4\u3002\u6bd4\u5982\uff0c\u5728 4 \u5361\u5e76\u884c\u8bad\u7ec3\u65f6\uff0c\u8bcd\u8868\u7684\u5e76\u884c\u5ea6\u5fc5\u987b\u4e3a 4\uff0c\u6682\u4e0d\u652f\u6301\u7f51\u7edc\u4f7f\u7528 4 \u5361\u8bad\u7ec3\u4f46\u8bcd\u8868\u5e76\u884c\u5ea6\u4e3a 2 \u7684\u573a\u666f\u3002 store_options \u914d\u7f6e\u4e2d\u53c2\u6570 persistent_path \u6307\u5b9a\u5b58\u50a8\u7684\u8def\u5f84\u3002\u5728\u5e76\u884c\u573a\u666f\u4e2d\uff0c\u5b83\u65e2\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u8def\u5f84\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a list \u3002\u82e5\u914d\u7f6e\u4e3a\u4e00\u4e2a\u4ee3\u8868\u8def\u5f84\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u4ee3\u8868\u5206\u5e03\u5f0f\u5e76\u884c\u4e2d\u5404 rank \u4e0b\u7684\u6839\u76ee\u5f55\u3002OneFlow \u4f1a\u5728\u8fd9\u4e2a\u6839\u8def\u5f84\u4e0b\uff0c\u4f9d\u636e\u5404\u4e2a rank \u7684\u7f16\u53f7\u521b\u5efa\u5b58\u50a8\u8def\u5f84\uff0c\u540d\u79f0\u683c\u5f0f\u4e3a rank_id-num_rank \u3002\u82e5 persistent_path \u662f\u4e00\u4e2a list \uff0c\u5219\u4f1a\u4f9d\u636e\u5217\u8868\u4e2d\u7684\u6bcf\u9879\uff0c\u4e3a rank \u5355\u72ec\u914d\u7f6e\u3002 \u5728\u5e76\u884c\u573a\u666f\u4e2d\uff0c store_options \u914d\u7f6e\u4e2d\u7684 capacity \u4ee3\u8868\u8bcd\u8868\u603b\u5bb9\u91cf\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a rank \u7684\u5bb9\u91cf\u3002 cache_budget_mb \u4ee3\u8868\u6bcf\u4e2a GPU \u8bbe\u5907\u7684\u663e\u5b58\u3002 \u6269\u5c55\u9605\u8bfb\uff1aDLRM \u00b6 \u672c\u6587\u5c55\u793a\u4e86\u5982\u4f55\u5feb\u901f\u4e0a\u624b OneEmbedding\u3002 OneFlow \u6a21\u578b\u4ed3\u5e93\u4e2d\u51c6\u5907\u4e86\u5173\u4e8e OneEmbedding \u5728 DLRM \u4efb\u52a1\u7684\u5b9e\u9645\u4f8b\u5b50\uff0c\u53ef\u4f9b\u53c2\u8003\uff1a https://github.com/Oneflow-Inc/models/tree/main/RecommenderSystems/dlrm","title":"\u5927\u89c4\u6a21 Embedding \u65b9\u6848\uff1a OneEmbedding"},{"location":"cookies/one_embedding.html#embedding-oneembedding","text":"Embedding \u662f\u63a8\u8350\u7cfb\u7edf\u7684\u91cd\u8981\u7ec4\u4ef6\uff0c\u4e5f\u6269\u6563\u5230\u4e86\u63a8\u8350\u7cfb\u7edf\u5916\u7684\u8bb8\u591a\u9886\u57df\u3002\u5404\u4e2a\u6846\u67b6\u90fd\u63d0\u4f9b\u4e86\u8fdb\u884c embedding \u7684\u57fa\u7840\u7b97\u5b50\uff0c\u6bd4\u5982 OneFlow \u4e2d\u7684 flow.nn.Embedding \uff1a import numpy as np import oneflow as flow indices = flow . tensor ([[ 1 , 2 , 4 , 5 ], [ 4 , 3 , 2 , 9 ]], dtype = flow . int ) embedding = flow . nn . Embedding ( 10 , 3 ) y = embedding ( indices ) OneFlow \u4e3a\u4e86\u89e3\u51b3\u5927\u89c4\u6a21\u6df1\u5ea6\u63a8\u8350\u7cfb\u7edf\u7684\u95ee\u9898\uff0c\u8fd8\u63d0\u4f9b\u4e86\u5927\u89c4\u6a21 Embedding \u7684\u65b9\u6848\uff1aOneEmbedding\u3002 \u4e0e\u666e\u901a\u7684\u7b97\u5b50\u76f8\u6bd4\uff0cOneEmbedding \u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u7075\u6d3b\u7684\u5206\u5c42\u5b58\u50a8\uff0c\u652f\u6301\u5c06 Embedding table \u653e\u7f6e\u5728 GPU \u663e\u5b58\u3001 CPU \u5185\u5b58\u6216\u8005 SSD \u4e0a\u9762\uff0c\u5141\u8bb8\u4f7f\u7528\u9ad8\u901f\u8bbe\u5907\u4f5c\u4e3a\u4f4e\u901f\u8bbe\u5907\u7684\u7f13\u5b58\uff0c\u5b9e\u73b0\u901f\u5ea6\u4e0e\u5bb9\u91cf\u7684\u517c\u987e\u3002 \u652f\u6301\u52a8\u6001\u6269\u5bb9\u3002","title":"\u5927\u89c4\u6a21 Embedding \u65b9\u6848\uff1a OneEmbedding"},{"location":"cookies/one_embedding.html#oneembedding","text":"\u6211\u4eec\u5c06\u5c55\u793a\u4e00\u4e2a\u5feb\u901f\u4e0a\u624b OneEmbedding \u7684\u4f8b\u5b50\uff0c\u5b83\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u57fa\u672c\u6b65\u9aa4\uff1a \u4f7f\u7528 make_table_options \u914d\u7f6e\u8bcd\u8868 \u914d\u7f6e\u8bcd\u8868\u7684\u5b58\u50a8\u5c5e\u6027 \u5b9e\u4f8b\u5316 Embedding \u6784\u9020 Graph \u8fdb\u884c\u8bad\u7ec3","title":"\u5feb\u901f\u4e0a\u624b OneEmbedding"},{"location":"cookies/one_embedding.html#make_table_options","text":"\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5bfc\u5165\u76f8\u5173\u5305\uff0c\u5e76\u4f7f\u7528 make_table_options \u914d\u7f6e\u8bcd\u8868\u3002OneEmbedding \u652f\u6301\u540c\u65f6\u521b\u5efa\u591a\u4e2a\u8bcd\u8868\uff0c\u4ee5\u4e0b\u4ee3\u7801\u914d\u7f6e\u4e86\u4e09\u4e2a\u8bcd\u8868\u3002 import oneflow as flow import oneflow.nn as nn import numpy as np tables = [ flow . one_embedding . make_table_options ( flow . one_embedding . make_uniform_initializer ( low =- 0.1 , high = 0.1 ) ), flow . one_embedding . make_table_options ( flow . one_embedding . make_uniform_initializer ( low =- 0.05 , high = 0.05 ) ), flow . one_embedding . make_table_options ( flow . one_embedding . make_uniform_initializer ( low =- 0.15 , high = 0.15 ) ), ] \u914d\u7f6e\u8bcd\u8868\u65f6\u9700\u8981\u6307\u5b9a\u521d\u59cb\u5316\u7684\u65b9\u5f0f\uff0c\u4ee5\u4e0a\u8bcd\u8868\u5747\u91c7\u7528 uniform \u65b9\u5f0f\u521d\u59cb\u5316\u3002\u914d\u7f6e\u8bcd\u8868\u7684\u7ed3\u679c\u4fdd\u5b58\u5728 tables \u53d8\u91cf\u4e2d\u3002 \u70b9\u51fb make_table_options \u53ca make_uniform_initializer \u53ef\u4ee5\u67e5\u770b\u6709\u5173\u5b83\u4eec\u7684\u66f4\u8be6\u7ec6\u8bf4\u660e\u3002","title":"\u4f7f\u7528 make_table_options \u914d\u7f6e\u8bcd\u8868"},{"location":"cookies/one_embedding.html#_1","text":"\u63a5\u7740\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u7528\u4e8e\u914d\u7f6e\u8bcd\u8868\u7684\u5b58\u50a8\u5c5e\u6027\uff1a store_options = flow . one_embedding . make_cached_ssd_store_options ( cache_budget_mb = 8142 , persistent_path = \"/your_path_to_ssd\" , capacity = 40000000 , size_factor = 1 , physical_block_size = 512 ) \u8fd9\u91cc\u901a\u8fc7\u8c03\u7528 make_cached_ssd_store_options \uff0c\u9009\u62e9\u5c06\u8bcd\u8868\u5b58\u50a8\u5728 SSD \u4e2d\uff0c\u5e76\u4e14\u4f7f\u7528 GPU \u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u3002\u5177\u4f53\u53c2\u6570\u7684\u610f\u4e49\u53ef\u4ee5\u53c2\u9605 make_cached_ssd_store_options API \u6587\u6863 \u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u7eaf GPU \u5b58\u50a8\uff1b\u6216\u8005\u4f7f\u7528 CPU \u5185\u5b58\u5b58\u50a8\u8bcd\u8868\u3001\u4f46\u7528 GPU \u505a\u9ad8\u901f\u7f13\u5b58\u3002\u5177\u4f53\u53ef\u4ee5\u5206\u522b\u53c2\u9605 make_device_mem_store_options \u53ca make_cached_host_mem_store_options \u3002","title":"\u914d\u7f6e\u8bcd\u8868\u7684\u5b58\u50a8\u5c5e\u6027"},{"location":"cookies/one_embedding.html#embedding","text":"\u4ee5\u4e0a\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u4f7f\u7528 MultiTableEmbedding \u53ef\u4ee5\u5f97\u5230\u5b9e\u4f8b\u5316\u7684 Embedding \u5c42\u3002 embedding_size = 128 embedding = flow . one_embedding . MultiTableEmbedding ( name = \"my_embedding\" , embedding_dim = embedding_size , dtype = flow . float , key_type = flow . int64 , tables = tables , store_options = store_options , ) embedding . to ( \"cuda\" ) \u5176\u4e2d\uff0c tables \u662f\u4e4b\u524d\u901a\u8fc7 make_table_options \u914d\u7f6e\u7684\u8bcd\u8868\u5c5e\u6027\uff0c store_options \u662f\u4e4b\u524d\u914d\u7f6e\u7684\u5b58\u50a8\u5c5e\u6027\uff0c embedding_dim \u662f\u7279\u5f81\u7ef4\u5ea6\uff0c dtype \u662f\u7279\u5f81\u5411\u91cf\u7684\u6570\u636e\u7c7b\u578b\uff0c key_type \u662f\u7279\u5f81 ID \u7684\u6570\u636e\u7c7b\u578b\u3002 \u5982\u679c\u540c\u65f6\u521b\u5efa\u4e86\u4e24\u4e2a OneEmbedding\uff0c\u5728\u5b9e\u4f8b\u5316\u65f6\u9700\u8981\u8bbe\u7f6e\u4e0d\u540c\u7684 name \u548c persistent path \u53c2\u6570\u3002 \u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u53c2\u9605 one_embedding.MultiTableEmbedding","title":"\u5b9e\u4f8b\u5316 Embedding"},{"location":"cookies/one_embedding.html#graph","text":"\u76ee\u524d OneEmbedding \u4ec5\u652f\u6301\u5728 Graph \u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 \u5728\u4ee5\u4e0b\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 Graph \u7c7b\uff0c\u5b83\u5305\u62ec\u4e86 embedding \u548c mlp \u4e24\u5c42\u3002 num_tables = 3 mlp = flow . nn . FusedMLP ( in_features = embedding_size * num_tables , hidden_features = [ 512 , 256 , 128 ], out_features = 1 , skip_final_activation = True , ) mlp . to ( \"cuda\" ) class TrainGraph ( flow . nn . Graph ): def __init__ ( self ,): super () . __init__ () self . embedding_lookup = embedding self . mlp = mlp self . add_optimizer ( flow . optim . SGD ( self . embedding_lookup . parameters (), lr = 0.1 , momentum = 0.0 ) ) self . add_optimizer ( flow . optim . SGD ( self . mlp . parameters (), lr = 0.1 , momentum = 0.0 ) ) def build ( self , ids ): embedding = self . embedding_lookup ( ids ) loss = self . mlp ( flow . reshape ( embedding , ( - 1 , num_tables * embedding_size ))) loss = loss . sum () loss . backward () return loss \u7136\u540e\u5c31\u53ef\u4ee5\u5b9e\u4f8b\u5316 Graph\uff0c\u5f00\u59cb\u8bad\u7ec3\u4e86\u3002 ids = np . random . randint ( 0 , 1000 , ( 100 , num_tables ), dtype = np . int64 ) ids_tensor = flow . tensor ( ids , requires_grad = False ) . to ( \"cuda\" ) graph = TrainGraph () loss = graph ( ids_tensor ) print ( loss ) \u5173\u4e8e Graph \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u9605 \u9759\u6001\u56fe\u6a21\u5757 nn.Graph \u83b7\u53d6\u66f4\u8be6\u7ec6\u4fe1\u606f\u3002","title":"\u4f7f\u7528 Graph \u8bad\u7ec3"},{"location":"cookies/one_embedding.html#oneembedding_1","text":"","title":"OneEmbedding \u7279\u70b9\u8bf4\u660e"},{"location":"cookies/one_embedding.html#id","text":"OneEmbedding \u652f\u6301\u52a8\u6001\u63d2\u5165\u65b0\u7684\u7279\u5f81 ID\uff0c\u53ea\u8981\u5b58\u50a8\u4ecb\u8d28\u7684\u5bb9\u91cf\u8db3\u591f\uff0c\u7279\u5f81 ID \u7684\u6570\u76ee\u662f\u6ca1\u6709\u4e0a\u9650\u7684\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528 make_table_options \u65f6\uff0c\u53ea\u9700\u8981\u6307\u5b9a\u521d\u59cb\u5316\u65b9\u5f0f\uff0c\u4e0d\u9700\u8981\u6307\u5b9a\u7279\u5f81 ID \u7684\u603b\u6570\u76ee\uff08\u8bcd\u8868\u884c\u6570\uff09\u3002","title":"\u7279\u5f81 ID \u52a8\u6001\u6269\u5bb9"},{"location":"cookies/one_embedding.html#id_1","text":"\u7279\u5f81 ID \u4e0d\u80fd\u91cd\u590d \u5236\u4f5c\u6570\u636e\u96c6\u7684 OneEmbedding \u7528\u6237\u9700\u8981\u683c\u5916\u6ce8\u610f\uff1a\u4f7f\u7528 MultiTableEmbedding \u540c\u65f6\u521b\u5efa\u591a\u4e2a\u8868\u65f6\uff0c\u591a\u4e2a Embedding Table \u4ec5\u521d\u59cb\u5316\u53c2\u6570\u4e0d\u540c\uff0c\u5176\u4ed6\u53c2\u6570\u4e00\u81f4\uff0c\u6b64\u65f6\uff0c \u591a\u4e2a\u8868\u4e2d\u7684\u7279\u5f81 ID \u4e0d\u80fd\u91cd\u590d \u3002 \u591a\u8868\u67e5\u8be2 \u5982\u679c\u4f7f\u7528 MultiTableEmbedding \u53ea\u914d\u7f6e\u4e86\u4e00\u4e2a\u8868\uff0c\u5219\u67e5\u8be2\u65b9\u5f0f\u4e0e\u666e\u901a\u7684 Embedding \u67e5\u8be2\u65b9\u5f0f\u6ca1\u6709\u533a\u522b\uff0c\u76f4\u63a5\u8c03\u7528\uff0c\u5e76\u4f20\u9012\u7279\u5f81 ID \u5373\u53ef\uff0c\u5982 embedding_lookup(ids) \u3002 \u5982\u679c\u4f7f\u7528 MultiTableEmbedding \u914d\u7f6e\u4e86\u591a\u4e2a\u8868\uff0c\u5219\u5bf9\u4e8e\u67d0\u4e2a\u7279\u5f81 ID\uff0c\u9700\u8981\u6307\u660e\u5728\u54ea\u4e2a\u8868\u4e2d\u67e5\u8be2\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\u6307\u660e\uff1a \u65b9\u6cd5\u4e00\uff1a\u4f20\u9012\u4e00\u4e2a\u5f62\u72b6\u4e3a (batch_size, \u8bcd\u8868\u6570\u76ee) \u7684 ids \u7528\u4e8e\u67e5\u8be2\uff0c\u5219\u8fd9\u4e2a ids \u7684\u5217\uff0c\u4f9d\u6b21\u5bf9\u5e94\u4e00\u4e2a\u8bcd\u8868\u3002 \u6bd4\u5982\uff1a ids = np . array ([[ 488 , 333 , 220 ], [ 18 , 568 , 508 ]], dtype = np . int64 ) # \u8868\u793a\u5728\u7b2c 0 \u4e2a\u8868\u4e2d\u67e5\u8be2 `[[488], [18]]`\uff0c\u7b2c 1 \u4e2a\u8868\u4e2d\u67e5\u8be2 `[[333], [568]]`\uff0c\u7b2c 2 \u4e2a\u8868\u4e2d\u67e5\u8be2 `[[220], [508]]` \u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\u3002 embedding_lookup ( ids ) \u65b9\u6cd5\u4e8c\uff1a\u4f20\u9012 ids \u53c2\u6570\u7684\u540c\u65f6\uff0c\u518d\u4f20\u9012\u4e00\u4e2a table_ids \u53c2\u6570\uff0c\u5b83\u7684\u5f62\u72b6\u4e0e ids \u5b8c\u5168\u76f8\u540c\uff0c\u5728 table_ids \u4e2d\u6307\u5b9a\u8868\u7684\u5e8f\u53f7\u3002 \u6bd4\u5982\uff1a ids = np . array ([ 488 , 333 , 220 , 18 , 568 , 508 ], dtype = np . int64 ) # table_ids\u7684shape\u4e0eids\u4fdd\u6301\u4e00\u81f4 table_ids = np . array ([ 0 , 1 , 2 , 0 , 1 , 2 ]) # \u8868\u793a\u5728\u7b2c 0 \u4e2a\u8868\u4e2d\u67e5\u8be2 `488, 18`\uff0c\u7b2c 1 \u4e2a\u8868\u4e2d\u67e5\u8be2 `333, 568`\uff0c\u7b2c 2 \u4e2a\u8868\u4e2d\u67e5\u8be2 `220, 508` \u5bf9\u5e94\u7684\u7279\u5f81\u5411\u91cf\u3002 embedding_lookup ( ids , table_ids ) \u66f4\u8be6\u7ec6\u7684\u8bf4\u660e\uff0c\u53ef\u4ee5\u53c2\u9605 MultiTableEmbedding.forward","title":"\u7279\u5f81 ID \u4e0e\u591a\u8868\u67e5\u8be2"},{"location":"cookies/one_embedding.html#_2","text":"OneEmbedding \u63d0\u4f9b\u4e86\u4e09\u79cd\u5b58\u50a8\u9009\u9879\u914d\u7f6e\uff0c\u5206\u522b\u662f\u7eaf GPU \u5b58\u50a8\uff0c \u5b58\u50a8\u5728 CPU \u5185\u5b58\u4e2d\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u548c\u5b58\u50a8\u5728 SSD \u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u3002 \u7eaf GPU \u5b58\u50a8 \u5f53\u8bcd\u8868\u5927\u5c0f\u5c0f\u4e8e GPU \u663e\u5b58\u65f6\uff0c\u5c06\u5168\u90e8\u8bcd\u8868\u653e\u5728 GPU \u663e\u5b58\u4e0a\u662f\u6700\u5feb\u7684\uff0c\u6b64\u65f6\u63a8\u8350\u9009\u62e9\u7eaf GPU \u5b58\u50a8\u914d\u7f6e\u3002 \u5b58\u50a8\u5728 CPU \u5185\u5b58\u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58 \u5f53\u8bcd\u8868\u5927\u4e8e GPU \u663e\u5b58\uff0c\u4f46\u662f\u5c0f\u4e8e CPU \u5185\u5b58\u65f6\uff0c\u63a8\u8350\u8bcd\u8868\u5b58\u50a8\u5728 CPU \u5185\u5b58\u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u3002 \u5b58\u50a8\u5728 SSD \u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58 \u5f53\u8bcd\u8868\u5927\u5c0f\u65e2\u5927\u4e8e GPU \u663e\u5b58\uff0c\u4e5f\u5927\u4e8e\u7cfb\u7edf\u5185\u5b58\u65f6\uff0c\u5982\u679c\u6709\u9ad8\u901f\u7684 SSD\uff0c\u53ef\u4ee5\u9009\u62e9\u5c06\u8bcd\u8868\u5b58\u50a8\u5728 SSD \u4e2d\uff0c\u5e76\u4f7f\u7528 GPU \u663e\u5b58\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f1a\u5bf9\u5b58\u50a8\u7684\u8bcd\u8868\u8fdb\u884c\u9891\u7e41\u7684\u6570\u636e\u8bfb\u5199\uff0c\u56e0\u6b64 persistent_path \u6240\u8bbe\u7f6e\u8def\u5f84\u4e0b\u7684\u6587\u4ef6\u968f\u673a\u8bfb\u5199\u901f\u5ea6\u5bf9\u6574\u4f53\u6027\u80fd\u5f71\u54cd\u5f88\u5927\u3002\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528\u9ad8\u6027\u80fd\u7684 SSD\uff0c\u5982\u679c\u4f7f\u7528\u666e\u901a\u78c1\u76d8\uff0c\u4f1a\u5bf9\u6027\u80fd\u6709\u5f88\u5927\u8d1f\u9762\u5f71\u54cd\u3002","title":"\u5982\u4f55\u9009\u62e9\u5408\u9002\u7684\u5b58\u50a8\u914d\u7f6e"},{"location":"cookies/one_embedding.html#_3","text":"OneEmbedding \u540c OneFlow \u7684\u5176\u5b83\u6a21\u5757\u7c7b\u4f3c\uff0c\u90fd\u539f\u751f\u652f\u6301\u5206\u5e03\u5f0f\u6269\u5c55\u3002\u7528\u6237\u53ef\u4ee5\u53c2\u8003 #dlrm \u4e2d\u7684 README\uff0c \u542f\u52a8 DLRM \u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u8fd8\u53ef\u4ee5\u53c2\u8003 Global Tensor \u4e86\u89e3\u5fc5\u8981\u7684\u524d\u7f6e\u77e5\u8bc6\u3002 \u4f7f\u7528 OneEmbedding \u6a21\u5757\u8fdb\u884c\u5206\u5e03\u5f0f\u6269\u5c55\uff0c\u8981\u6ce8\u610f\uff1a \u76ee\u524d OneEmbedding \u53ea\u652f\u6301\u653e\u7f6e\u5728\u5168\u90e8\u8bbe\u5907\u4e0a\uff0c\u5e76\u884c\u5ea6\u9700\u548c world size \u4e00\u81f4\u3002\u6bd4\u5982\uff0c\u5728 4 \u5361\u5e76\u884c\u8bad\u7ec3\u65f6\uff0c\u8bcd\u8868\u7684\u5e76\u884c\u5ea6\u5fc5\u987b\u4e3a 4\uff0c\u6682\u4e0d\u652f\u6301\u7f51\u7edc\u4f7f\u7528 4 \u5361\u8bad\u7ec3\u4f46\u8bcd\u8868\u5e76\u884c\u5ea6\u4e3a 2 \u7684\u573a\u666f\u3002 store_options \u914d\u7f6e\u4e2d\u53c2\u6570 persistent_path \u6307\u5b9a\u5b58\u50a8\u7684\u8def\u5f84\u3002\u5728\u5e76\u884c\u573a\u666f\u4e2d\uff0c\u5b83\u65e2\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u8def\u5f84\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a list \u3002\u82e5\u914d\u7f6e\u4e3a\u4e00\u4e2a\u4ee3\u8868\u8def\u5f84\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u4ee3\u8868\u5206\u5e03\u5f0f\u5e76\u884c\u4e2d\u5404 rank \u4e0b\u7684\u6839\u76ee\u5f55\u3002OneFlow \u4f1a\u5728\u8fd9\u4e2a\u6839\u8def\u5f84\u4e0b\uff0c\u4f9d\u636e\u5404\u4e2a rank \u7684\u7f16\u53f7\u521b\u5efa\u5b58\u50a8\u8def\u5f84\uff0c\u540d\u79f0\u683c\u5f0f\u4e3a rank_id-num_rank \u3002\u82e5 persistent_path \u662f\u4e00\u4e2a list \uff0c\u5219\u4f1a\u4f9d\u636e\u5217\u8868\u4e2d\u7684\u6bcf\u9879\uff0c\u4e3a rank \u5355\u72ec\u914d\u7f6e\u3002 \u5728\u5e76\u884c\u573a\u666f\u4e2d\uff0c store_options \u914d\u7f6e\u4e2d\u7684 capacity \u4ee3\u8868\u8bcd\u8868\u603b\u5bb9\u91cf\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a rank \u7684\u5bb9\u91cf\u3002 cache_budget_mb \u4ee3\u8868\u6bcf\u4e2a GPU \u8bbe\u5907\u7684\u663e\u5b58\u3002","title":"\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"cookies/one_embedding.html#dlrm","text":"\u672c\u6587\u5c55\u793a\u4e86\u5982\u4f55\u5feb\u901f\u4e0a\u624b OneEmbedding\u3002 OneFlow \u6a21\u578b\u4ed3\u5e93\u4e2d\u51c6\u5907\u4e86\u5173\u4e8e OneEmbedding \u5728 DLRM \u4efb\u52a1\u7684\u5b9e\u9645\u4f8b\u5b50\uff0c\u53ef\u4f9b\u53c2\u8003\uff1a https://github.com/Oneflow-Inc/models/tree/main/RecommenderSystems/dlrm","title":"\u6269\u5c55\u9605\u8bfb\uff1aDLRM"},{"location":"cookies/oneflow2onnnx.html","text":"OneFlow \u4e0e ONNX \u4ea4\u4e92 \u00b6 \u672c\u6559\u7a0b\u4e3b\u8981\u4ecb\u7ecd OneFlow \u4e0e ONNX \u8fdb\u884c\u4ea4\u4e92\u7684\u7528\u6cd5\uff0c\u5305\u62ec ONNX \u7b80\u4ecb\u3001\u5982\u4f55\u5c06 OneFlow \u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528 ONNX \u6a21\u578b\u8fdb\u884c\u63a8\u7406\u3002 ONNX \u7b80\u4ecb \u00b6 ONNX \u7684\u5168\u79f0\u4e3a Open Neural Network Exchange (\u5f00\u653e\u795e\u7ecf\u7f51\u7edc\u4ea4\u6362)\uff0c\u662f\u4e00\u79cd\u9488\u5bf9\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6240\u8bbe\u8ba1\u7684\u5f00\u653e\u5f0f\u6587\u4ef6\u683c\u5f0f\u6807\u51c6\uff0c\u7528\u4e8e\u5b58\u50a8\u8bad\u7ec3\u597d\u7684\u7b97\u6cd5\u6a21\u578b\u3002\u8bb8\u591a\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08\u5982 OneFlow\u3001PyTorch\u3001TensorFlow\u3001MXNet\uff09\u90fd\u652f\u6301\u5c06\u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\u3002ONNX \u4f7f\u5f97\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u53ef\u4ee5\u4ee5\u4e00\u79cd\u7edf\u4e00\u7684\u683c\u5f0f\u5b58\u50a8\u6a21\u578b\u6570\u636e\u4ee5\u53ca\u8fdb\u884c\u4ea4\u4e92\u3002\u53e6\u5916\uff0cONNX \u6709\u76f8\u5e94\u7684\u8fd0\u884c\u65f6\uff08Runtime\uff09\u2014\u2014 ONNX Runtime \uff0c\u4fbf\u4e8e\u5728\u591a\u79cd\u5e73\u53f0\uff08Linux\u3001Windows\u3001Mac OS\u3001Android\u3001iOS\u7b49\uff09\u53ca\u591a\u79cd\u786c\u4ef6\uff08CPU\u3001GPU\u7b49\uff09\u4e0a\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u548c\u63a8\u7406\u3002 ONNX \u76f8\u5173\u5e93 \u00b6 ONNX \u5bf9\u5e94\u591a\u4e2a\u76f8\u5173\u5e93\uff0c\u5e38\u89c1\u7684\u51e0\u4e2a\u5e93\u7684\u529f\u80fd\u5982\u4e0b\u6240\u8ff0\u3002\u672c\u6559\u7a0b\u4e2d\u6d89\u53ca\u7684\u662f onnxruntime-gpu\uff0c\u53ef\u901a\u8fc7 pip install onnxruntime-gpu \u8fdb\u884c\u5b89\u88c5\u3002 onnx : ONNX \u6a21\u578b\u683c\u5f0f\u6807\u51c6 onnxruntime & onnxruntime-gpu : ONNX \u8fd0\u884c\u65f6\uff0c\u7528\u4e8e\u52a0\u8f7d ONNX \u6a21\u578b\u8fdb\u884c\u63a8\u7406\u3002onnxruntime \u548c onnxruntime-gpu \u5206\u522b\u652f\u6301 CPU \u63a8\u7406\u548c GPU\u63a8\u7406 onnx-simplifier : \u7528\u4e8e\u7b80\u5316 ONNX \u6a21\u578b\u7684\u7ed3\u6784\uff0c\u4f8b\u5982\u6d88\u9664\u7ed3\u679c\u6052\u4e3a\u5e38\u91cf\u7684\u7b97\u5b50 onnxoptimizer : \u7528\u4e8e\u901a\u8fc7\u56fe\u53d8\u6362\u7b49\u65b9\u5f0f\u4f18\u5316 ONNX \u6a21\u578b \u5c06 OneFlow \u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b \u00b6 oneflow-onnx \u662f OneFlow \u56e2\u961f\u63d0\u4f9b\u7684\u6a21\u578b\u8f6c\u6362\u5de5\u5177\uff0c\u652f\u6301\u5c06 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\u3002\u76ee\u524d oneflow-onnx \u652f\u6301 80 \u591a\u79cd OneFlow OP \u5bfc\u51fa\u4e3a ONNX OP\uff0c\u5177\u4f53\u53ef\u53c2\u89c1\uff1a OneFlow2ONNX \u652f\u6301\u7684OP\u5217\u8868 \u3002 \u5b89\u88c5 oneflow-onnx \u00b6 oneflow-onnx \u72ec\u7acb\u4e8e OneFlow\uff0c\u9700\u8981\u5355\u72ec\u901a\u8fc7 pip \u5b89\u88c5\uff1a pip install oneflow-onnx oneflow-onnx \u7684\u4f7f\u7528\u65b9\u6cd5 \u00b6 \u8981\u5c06 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\uff0c\u53ea\u9700\u8c03\u7528 export_onnx_model \u51fd\u6570\u3002 from oneflow_onnx.oneflow2onnx.util import export_onnx_model export_onnx_model ( graph , external_data = False , opset = None , flow_weight_dir = None , onnx_model_path = \"/tmp\" , dynamic_batch_size = False ) \u5404\u53c2\u6570\u7684\u542b\u4e49\u5982\u4e0b: graph: \u9700\u8981\u8f6c\u6362\u7684 graph ( Graph \u5bf9\u8c61) external_data: \u662f\u5426\u5c06\u6743\u91cd\u53e6\u5b58\u4e3a ONNX \u6a21\u578b\u7684\u5916\u90e8\u6570\u636e\uff0c\u4e3a True \u65f6\u901a\u5e38\u662f\u4e3a\u4e86\u907f\u514d protobuf \u7684 2GB \u6587\u4ef6\u5927\u5c0f\u9650\u5236 opset: \u6307\u5b9a\u8f6c\u6362\u6a21\u578b\u7684\u7248\u672c ( int\uff0c\u9ed8\u8ba4\u4e3a 10 ) flow_weight_dir: OneFlow \u6a21\u578b\u6743\u91cd\u7684\u4fdd\u5b58\u8def\u5f84 onnx_model_path: \u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u4fdd\u5b58\u8def\u5f84 dynamic_batch_size: \u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u662f\u5426\u652f\u6301\u52a8\u6001 batch\uff0c\u9ed8\u8ba4\u4e3aFalse \u53e6\u5916\uff0coneflow-onnx \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3a convert_to_onnx_and_check \u7684\u51fd\u6570\uff0c\u7528\u4e8e\u8f6c\u6362\u5e76\u68c0\u67e5\u8f6c\u6362\u51fa\u7684 ONNX \u6a21\u578b\u3002\u5176\u4e2d\u7684\u68c0\u67e5\u6307\u7684\u662f\u5c06\u540c\u6837\u7684\u8f93\u5165\u5206\u522b\u9001\u5165\u539f\u672c\u7684 OneFlow \u6a21\u578b\u548c\u8f6c\u6362\u540e\u7684 ONNX \u6a21\u578b\uff0c\u7136\u540e\u6bd4\u8f83\u4e24\u4e2a\u8f93\u51fa\u4e2d\u5bf9\u5e94\u7684\u6bcf\u4e2a\u6570\u503c\u4e4b\u5dee\u662f\u5426\u5728\u5408\u7406\u7684\u8bef\u5dee\u8303\u56f4\u5185\u3002 from oneflow_onnx.oneflow2onnx.util import convert_to_onnx_and_check convert_to_onnx_and_check ( ... ) convert_to_onnx_and_check \u51fd\u6570\u7684\u53c2\u6570\u662f export_onnx_model \u51fd\u6570\u7684\u53c2\u6570\u7684\u8d85\u96c6\uff0c\u53ef\u4ee5\u989d\u5916\u4f20\u5165 print_outlier=True \u6765\u8f93\u51fa\u68c0\u67e5\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u7684\u8d85\u51fa\u5408\u7406\u8bef\u5dee\u8303\u56f4\u5185\u7684\u5f02\u5e38\u503c\u3002 \u5bfc\u51fa\u6a21\u578b\u65f6\u7684\u6ce8\u610f\u70b9 \u00b6 \u5728\u5bfc\u51fa\u6a21\u578b\u4e4b\u524d\uff0c\u9700\u8981\u5c06\u6a21\u578b\u8bbe\u7f6e\u6210 eval \u6a21\u5f0f\uff0c\u56e0\u4e3a Dropout\u3001Batch Normalization \u7b49\u64cd\u4f5c\u5728\u8bad\u7ec3\u548c\u63a8\u7406\u6a21\u578b\u4e0b\u7684\u884c\u4e3a\u4e0d\u540c \u5728\u6784\u5efa\u9759\u6001\u56fe\u6a21\u578b\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u8f93\u5165\uff0c\u6b64\u8f93\u5165\u7684\u503c\u53ef\u4ee5\u662f\u968f\u673a\u7684\uff0c\u4f46\u8981\u4fdd\u8bc1\u5b83\u662f\u6b63\u786e\u7684\u6570\u636e\u7c7b\u578b\u548c\u5f62\u72b6 ONNX \u6a21\u578b\u63a5\u53d7\u7684\u8f93\u5165\u7684\u5f62\u72b6\u662f\u56fa\u5b9a\u7684\uff0cbatch \u7ef4\u5ea6\u7684\u5927\u5c0f\u53ef\u4ee5\u662f\u53d8\u5316\u7684\uff0c\u901a\u8fc7\u5c06 dynamic_batch_size \u53c2\u6570\u8bbe\u4e3a True \u53ef\u4ee5\u4f7f\u5f97\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u652f\u6301\u52a8\u6001 batch \u5927\u5c0f oneflow-onnx \u5fc5\u987b\u4f7f\u7528\u9759\u6001\u56fe\u6a21\u578b\uff08Graph \u6a21\u5f0f\uff09\u4f5c\u4e3a\u5bfc\u51fa\u51fd\u6570\u7684\u53c2\u6570\u3002\u5bf9\u4e8e\u52a8\u6001\u56fe\u6a21\u578b\uff08Eager \u6a21\u5f0f\uff09\uff0c\u9700\u8981\u5c06\u52a8\u6001\u56fe\u6a21\u578b\u6784\u5efa\u4e3a\u9759\u6001\u56fe\u6a21\u578b\uff0c\u53ef\u53c2\u89c1\u4e0b\u6587\u7684\u793a\u4f8b\u3002 \u7528\u6cd5\u793a\u4f8b \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u5c06\u4ee5\u5e38\u89c1\u7684 ResNet-34 \u6a21\u578b\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u5c06 OneFlow \u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\u5e76\u8fdb\u884c\u63a8\u7406\u7684\u6d41\u7a0b\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u5230\u4e86 FlowVision \uff0c\u5b83\u662f\u57fa\u4e8e OneFlow \u642d\u5efa\u7684\u3001\u4e13\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u4efb\u52a1\u7684\u5de5\u5177\u5e93\uff0c\u5305\u542b\u8bf8\u591a\u6a21\u578b\u3001\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3001\u6570\u636e\u53d8\u6362\u64cd\u4f5c\u3001\u6570\u636e\u96c6\u7b49\u3002\u6211\u4eec\u5728\u6b64\u76f4\u63a5\u4f7f\u7528 FlowVision \u5e93\u63d0\u4f9b\u7684 ResNet-34 \u6a21\u578b\uff0c\u5e76\u4f7f\u7528 FlowVision \u63d0\u4f9b\u7684\u5728 ImageNet \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5f97\u5230\u7684 ResNet-34 \u6743\u91cd\u3002 \u5bfc\u51fa\u4e3a ONNX \u6a21\u578b \u00b6 \u5bfc\u5165\u76f8\u5173\u4f9d\u8d56\uff0c\u4e3a\u65b9\u4fbf\u6f14\u793a\uff0c\u76f4\u63a5\u4f7f\u7528 resnet34 \u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff1a import oneflow as flow from oneflow import nn from flowvision.models import resnet34 from oneflow_onnx.oneflow2onnx.util import convert_to_onnx_and_check # \u6a21\u578b\u53c2\u6570\u5b58\u50a8\u76ee\u5f55 MODEL_PARAMS = 'checkpoints/resnet34' # \u4e0b\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u5e76\u4fdd\u5b58 model = resnet34 ( pretrained = True ) flow . save ( model . state_dict (), MODEL_PARAMS , save_as_external_data = True ) \u4f7f\u7528\u52a8\u6001\u56fe\u6a21\u578b\u6784\u5efa\u9759\u6001\u56fe\u6a21\u578b\uff0c\u8be6\u60c5\u8bf7\u53c2\u89c1\uff1a \u9759\u6001\u56fe\u6a21\u5757 nn.Graph class ResNet34Graph ( nn . Graph ): def __init__ ( self , eager_model ): super () . __init__ () self . model = eager_model def build ( self , x ): return self . model ( x ) \u5c06 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\uff1a params = flow . load ( MODEL_PARAMS ) model = resnet34 () model . load_state_dict ( params ) # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a eval \u6a21\u5f0f model . eval () resnet34_graph = ResNet34Graph ( model ) # \u6784\u5efa\u51fa\u9759\u6001\u56fe\u6a21\u578b resnet34_graph . _compile ( flow . randn ( 1 , 3 , 224 , 224 )) # \u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\u5e76\u8fdb\u884c\u68c0\u67e5 convert_to_onnx_and_check ( resnet34_graph , flow_weight_dir = MODEL_PARAMS , onnx_model_path = \"./\" , print_outlier = True , dynamic_batch_size = True ) \u8fd0\u884c\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u627e\u5230\u540d\u4e3a model.onnx \u7684\u6587\u4ef6\uff0c\u5373\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u3002 \u4f7f\u7528 ONNX \u6a21\u578b\u8fdb\u884c\u63a8\u7406 \u00b6 \u8fdb\u884c\u63a8\u7406\u4e4b\u524d\uff0c\u8981\u4fdd\u8bc1\u5df2\u7ecf\u5b89\u88c5\u4e86 ONNX Runtime, \u5373 onnxruntime \u6216 onnxruntime-gpu\u3002\u5728\u672c\u6559\u7a0b\u7684\u5b9e\u9a8c\u73af\u5883\u4e2d\uff0c\u5b89\u88c5\u7684\u662f onnxruntime-gpu \u4ee5\u8c03\u7528 GPU \u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u5982\u679c\u673a\u5668\u4e0a\u6ca1\u6709 GPU\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528 CPU \u8fdb\u884c\u8ba1\u7b97\uff0c\u8be6\u89c1\u4e0b\u6587\u3002 \u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u8fd9\u5f20\u56fe\u50cf\u4f5c\u4e3a\u6a21\u578b\u7684\u8f93\u5165\uff1a \u5bfc\u5165\u4f9d\u8d56\uff1a import numpy as np import cv2 from onnxruntime import InferenceSession \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u4e8e\u5c06\u56fe\u50cf\u9884\u5904\u7406\u4e3a ONNX \u6a21\u578b\u6240\u63a5\u53d7\u7684\u683c\u5f0f\u548c\u5c3a\u5bf8\uff1a def preprocess_image ( img , input_hw = ( 224 , 224 )): h , w , _ = img . shape # \u4f7f\u7528\u56fe\u50cf\u7684\u8f83\u957f\u8fb9\u786e\u5b9a\u7f29\u653e\u7cfb\u6570 is_wider = True if h <= w else False scale = input_hw [ 1 ] / w if is_wider else input_hw [ 0 ] / h # \u5bf9\u56fe\u50cf\u8fdb\u884c\u7b49\u6bd4\u4f8b\u7f29\u653e processed_img = cv2 . resize ( img , ( 0 , 0 ), fx = scale , fy = scale , interpolation = cv2 . INTER_LINEAR ) # \u5f52\u4e00\u5316 processed_img = np . array ( processed_img , dtype = np . float32 ) / 255 # \u5c06\u56fe\u50cf\u586b\u5145\u5230 ONNX \u6a21\u578b\u9884\u8bbe\u5c3a\u5bf8 temp_img = np . zeros (( input_hw [ 0 ], input_hw [ 1 ], 3 ), dtype = np . float32 ) temp_img [: processed_img . shape [ 0 ], : processed_img . shape [ 1 ], :] = processed_img processed_img = temp_img # \u8c03\u6574\u8f74\u7684\u987a\u5e8f\u5e76\u5728\u6700\u524d\u9762\u6dfb\u52a0 batch \u8f74 processed_img = np . expand_dims ( processed_img . transpose ( 2 , 0 , 1 ), axis = 0 ) return processed_img \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 ONNX \u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u4e3b\u8981\u6b65\u9aa4\u5305\u62ec\uff1a\u521b\u5efa\u4e00\u4e2a InferenceSession \u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u5176 run \u65b9\u6cd5\u8fdb\u884c\u63a8\u7406\u3002 \u5728 onnxruntime(-gpu) 1.9 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\uff0c\u521b\u5efa InferenceSession \u5bf9\u8c61\u65f6\u9700\u8981\u663e\u5f0f\u6307\u5b9a providers \u53c2\u6570\u6765\u9009\u62e9\u4f7f\u7528\u7684\u786c\u4ef6\u3002\u5bf9\u4e8e onnxruntime-gpu\uff0c\u53ef\u4ee5\u6307\u5b9a\u7684\u503c\u5305\u62ec TensorrtExecutionProvider \u3001 CUDAExecutionProvider \u3001 CPUExecutionProvider \u3002\u5982\u679c\u8fd0\u884c\u7684\u673a\u5668\u4e0a\u6ca1\u6709 GPU\uff0c\u53ef\u4ee5\u5c06 providers \u53c2\u6570\u6307\u5b9a\u4e3a ['CPUExecutionProvider'] \u6765\u4f7f\u7528 CPU \u8fdb\u884c\u8ba1\u7b97\u3002 ONNX \u6a21\u578b\u7684\u8f93\u5165\u6570\u636e\u7684\u7c7b\u578b\u662f\u4e00\u4e2a dict\uff0c\u5176 keys \u4e3a\u5bfc\u51fa ONNX \u6a21\u578b\u65f6\u7684\u8f93\u5165\u540d\u79f0 \"input names\"\uff0cvalues \u4e3a NumPy \u6570\u7ec4\u7c7b\u578b\u7684\u5b9e\u9645\u8f93\u5165\u6570\u636e\u3002\u53ef\u4ee5\u901a\u8fc7 InferenceSession \u5bf9\u8c61\u7684 get_inputs \u65b9\u6cd5\u83b7\u53d6\"input names\"\uff0c\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u662f onnxruntime.NodeArg \u7c7b\u578b\u7684\u5bf9\u8c61\u7ec4\u6210\u7684 list\uff0c\u5bf9\u4e8e NodeArg \u5bf9\u8c61\uff0c\u53ef\u4f7f\u7528\u5176 name \u5c5e\u6027\u83b7\u53d6 str \u7c7b\u578b\u7684\u540d\u79f0\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u8f93\u5165\u53ea\u6709\u56fe\u50cf\u6570\u636e\u672c\u8eab\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u5728 InferenceSession \u5bf9\u8c61\u4e0a\u8c03\u7528 .get_inputs()[0].name \uff0c\u83b7\u53d6\u8f93\u5165\u5bf9\u5e94\u7684 \"input names\"\uff0c\u5176\u503c\u4e3a _ResNet34Graph_0-input_0/out \uff0c\u5c06\u6b64\u503c\u4f5c\u4e3a key \u6784\u9020\u8f93\u5165 ONNX \u6a21\u578b\u7684 dict\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u9884\u5148\u6307\u5b9a\uff0c\u800c\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u83b7\u53d6\u3002 # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6 ImageNet \u6570\u636e\u96c6\u7684\u7c7b\u522b\u540d\u79f0 with open ( 'ImageNet-Class-Names.txt' ) as f : CLASS_NAMES = f . readlines () # \u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\u5e76\u4f7f\u7528 `preprocess_image` \u51fd\u6570\u8fdb\u884c\u9884\u5904\u7406 img = cv2 . imread ( 'cat.jpg' , cv2 . IMREAD_COLOR ) img = preprocess_image ( img ) # \u521b\u5efa\u4e00\u4e2a InferenceSession \u5bf9\u8c61 ort_sess = InferenceSession ( 'model.onnx' , providers = [ 'TensorrtExecutionProvider' , 'CUDAExecutionProvider' , 'CPUExecutionProvider' ]) # \u8c03\u7528 InferenceSession \u5bf9\u8c61\u7684 `run` \u65b9\u6cd5\u8fdb\u884c\u63a8\u7406 results = ort_sess . run ( None , { \"_ResNet34Graph_0-input_0/out\" : img }) # \u8f93\u51fa\u63a8\u7406\u7ed3\u679c print ( CLASS_NAMES [ np . argmax ( results [ 0 ])]) InferenceSession \u5bf9\u8c61\u7684 run \u65b9\u6cd5\u7684\u8f93\u51fa\u662f NumPy \u6570\u7ec4\u6784\u6210\u7684 list\uff0c\u6bcf\u4e2a NumPy \u6570\u7ec4\u5bf9\u5e94\u4e00\u7ec4\u8f93\u51fa\u3002\u56e0\u4e3a\u53ea\u6709\u4e00\u7ec4\u8f93\u5165\uff0c\u6240\u4ee5\u53d6\u51fa\u7d22\u5f15\u4e3a 0 \u7684\u5143\u7d20\u4f5c\u4e3a\u8f93\u51fa\uff0c\u6b64\u5143\u7d20\u7684\u5f62\u72b6\u662f (1, 1000) \uff0c\u5bf9\u5e94\u4e8e 1000 \u4e2a\u7c7b\u522b\u7684\u6982\u7387 (\u5982\u679c\u5c06 n \u5f20\u56fe\u50cf\u4f5c\u4e3a\u4e00\u4e2a batch \u8f93\u5165\uff0c\u6b64\u5143\u7d20\u7684\u5f62\u72b6\u5c06\u662f (n, 1000) )\u3002\u901a\u8fc7 np.argmax \u83b7\u53d6\u6982\u7387\u6700\u5927\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7d22\u5f15\u540e\uff0c\u5c06\u7d22\u5f15\u6620\u5c04\u4e3a\u7c7b\u522b\u540d\u79f0\u3002 \u8fd0\u884c\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5f97\u5230\uff1a (base) root@training-notebook-654c6f-654c6f-jupyter-master-0:/workspace# python infer.py 285: 'Egyptian cat', \u4ee5\u4e0a\u662f\u5728 Python \u73af\u5883\u4e2d\u4f7f\u7528 GPU \u6216 CPU \u8fdb\u884c\u63a8\u7406\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u53ef\u4ee5\u6839\u636e\u90e8\u7f72\u73af\u5883\u9009\u62e9\u4e0d\u540c\u7684 ONNX Runtime \u6765\u4f7f\u7528\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u3002","title":"OneFlow \u4e0e ONNX \u4ea4\u4e92"},{"location":"cookies/oneflow2onnnx.html#oneflow-onnx","text":"\u672c\u6559\u7a0b\u4e3b\u8981\u4ecb\u7ecd OneFlow \u4e0e ONNX \u8fdb\u884c\u4ea4\u4e92\u7684\u7528\u6cd5\uff0c\u5305\u62ec ONNX \u7b80\u4ecb\u3001\u5982\u4f55\u5c06 OneFlow \u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528 ONNX \u6a21\u578b\u8fdb\u884c\u63a8\u7406\u3002","title":"OneFlow \u4e0e ONNX \u4ea4\u4e92"},{"location":"cookies/oneflow2onnnx.html#onnx","text":"ONNX \u7684\u5168\u79f0\u4e3a Open Neural Network Exchange (\u5f00\u653e\u795e\u7ecf\u7f51\u7edc\u4ea4\u6362)\uff0c\u662f\u4e00\u79cd\u9488\u5bf9\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6240\u8bbe\u8ba1\u7684\u5f00\u653e\u5f0f\u6587\u4ef6\u683c\u5f0f\u6807\u51c6\uff0c\u7528\u4e8e\u5b58\u50a8\u8bad\u7ec3\u597d\u7684\u7b97\u6cd5\u6a21\u578b\u3002\u8bb8\u591a\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff08\u5982 OneFlow\u3001PyTorch\u3001TensorFlow\u3001MXNet\uff09\u90fd\u652f\u6301\u5c06\u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\u3002ONNX \u4f7f\u5f97\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u53ef\u4ee5\u4ee5\u4e00\u79cd\u7edf\u4e00\u7684\u683c\u5f0f\u5b58\u50a8\u6a21\u578b\u6570\u636e\u4ee5\u53ca\u8fdb\u884c\u4ea4\u4e92\u3002\u53e6\u5916\uff0cONNX \u6709\u76f8\u5e94\u7684\u8fd0\u884c\u65f6\uff08Runtime\uff09\u2014\u2014 ONNX Runtime \uff0c\u4fbf\u4e8e\u5728\u591a\u79cd\u5e73\u53f0\uff08Linux\u3001Windows\u3001Mac OS\u3001Android\u3001iOS\u7b49\uff09\u53ca\u591a\u79cd\u786c\u4ef6\uff08CPU\u3001GPU\u7b49\uff09\u4e0a\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u548c\u63a8\u7406\u3002","title":"ONNX \u7b80\u4ecb"},{"location":"cookies/oneflow2onnnx.html#onnx_1","text":"ONNX \u5bf9\u5e94\u591a\u4e2a\u76f8\u5173\u5e93\uff0c\u5e38\u89c1\u7684\u51e0\u4e2a\u5e93\u7684\u529f\u80fd\u5982\u4e0b\u6240\u8ff0\u3002\u672c\u6559\u7a0b\u4e2d\u6d89\u53ca\u7684\u662f onnxruntime-gpu\uff0c\u53ef\u901a\u8fc7 pip install onnxruntime-gpu \u8fdb\u884c\u5b89\u88c5\u3002 onnx : ONNX \u6a21\u578b\u683c\u5f0f\u6807\u51c6 onnxruntime & onnxruntime-gpu : ONNX \u8fd0\u884c\u65f6\uff0c\u7528\u4e8e\u52a0\u8f7d ONNX \u6a21\u578b\u8fdb\u884c\u63a8\u7406\u3002onnxruntime \u548c onnxruntime-gpu \u5206\u522b\u652f\u6301 CPU \u63a8\u7406\u548c GPU\u63a8\u7406 onnx-simplifier : \u7528\u4e8e\u7b80\u5316 ONNX \u6a21\u578b\u7684\u7ed3\u6784\uff0c\u4f8b\u5982\u6d88\u9664\u7ed3\u679c\u6052\u4e3a\u5e38\u91cf\u7684\u7b97\u5b50 onnxoptimizer : \u7528\u4e8e\u901a\u8fc7\u56fe\u53d8\u6362\u7b49\u65b9\u5f0f\u4f18\u5316 ONNX \u6a21\u578b","title":"ONNX \u76f8\u5173\u5e93"},{"location":"cookies/oneflow2onnnx.html#oneflow-onnx_1","text":"oneflow-onnx \u662f OneFlow \u56e2\u961f\u63d0\u4f9b\u7684\u6a21\u578b\u8f6c\u6362\u5de5\u5177\uff0c\u652f\u6301\u5c06 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\u3002\u76ee\u524d oneflow-onnx \u652f\u6301 80 \u591a\u79cd OneFlow OP \u5bfc\u51fa\u4e3a ONNX OP\uff0c\u5177\u4f53\u53ef\u53c2\u89c1\uff1a OneFlow2ONNX \u652f\u6301\u7684OP\u5217\u8868 \u3002","title":"\u5c06 OneFlow \u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b"},{"location":"cookies/oneflow2onnnx.html#oneflow-onnx_2","text":"oneflow-onnx \u72ec\u7acb\u4e8e OneFlow\uff0c\u9700\u8981\u5355\u72ec\u901a\u8fc7 pip \u5b89\u88c5\uff1a pip install oneflow-onnx","title":"\u5b89\u88c5 oneflow-onnx"},{"location":"cookies/oneflow2onnnx.html#oneflow-onnx_3","text":"\u8981\u5c06 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\uff0c\u53ea\u9700\u8c03\u7528 export_onnx_model \u51fd\u6570\u3002 from oneflow_onnx.oneflow2onnx.util import export_onnx_model export_onnx_model ( graph , external_data = False , opset = None , flow_weight_dir = None , onnx_model_path = \"/tmp\" , dynamic_batch_size = False ) \u5404\u53c2\u6570\u7684\u542b\u4e49\u5982\u4e0b: graph: \u9700\u8981\u8f6c\u6362\u7684 graph ( Graph \u5bf9\u8c61) external_data: \u662f\u5426\u5c06\u6743\u91cd\u53e6\u5b58\u4e3a ONNX \u6a21\u578b\u7684\u5916\u90e8\u6570\u636e\uff0c\u4e3a True \u65f6\u901a\u5e38\u662f\u4e3a\u4e86\u907f\u514d protobuf \u7684 2GB \u6587\u4ef6\u5927\u5c0f\u9650\u5236 opset: \u6307\u5b9a\u8f6c\u6362\u6a21\u578b\u7684\u7248\u672c ( int\uff0c\u9ed8\u8ba4\u4e3a 10 ) flow_weight_dir: OneFlow \u6a21\u578b\u6743\u91cd\u7684\u4fdd\u5b58\u8def\u5f84 onnx_model_path: \u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u4fdd\u5b58\u8def\u5f84 dynamic_batch_size: \u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u662f\u5426\u652f\u6301\u52a8\u6001 batch\uff0c\u9ed8\u8ba4\u4e3aFalse \u53e6\u5916\uff0coneflow-onnx \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540d\u4e3a convert_to_onnx_and_check \u7684\u51fd\u6570\uff0c\u7528\u4e8e\u8f6c\u6362\u5e76\u68c0\u67e5\u8f6c\u6362\u51fa\u7684 ONNX \u6a21\u578b\u3002\u5176\u4e2d\u7684\u68c0\u67e5\u6307\u7684\u662f\u5c06\u540c\u6837\u7684\u8f93\u5165\u5206\u522b\u9001\u5165\u539f\u672c\u7684 OneFlow \u6a21\u578b\u548c\u8f6c\u6362\u540e\u7684 ONNX \u6a21\u578b\uff0c\u7136\u540e\u6bd4\u8f83\u4e24\u4e2a\u8f93\u51fa\u4e2d\u5bf9\u5e94\u7684\u6bcf\u4e2a\u6570\u503c\u4e4b\u5dee\u662f\u5426\u5728\u5408\u7406\u7684\u8bef\u5dee\u8303\u56f4\u5185\u3002 from oneflow_onnx.oneflow2onnx.util import convert_to_onnx_and_check convert_to_onnx_and_check ( ... ) convert_to_onnx_and_check \u51fd\u6570\u7684\u53c2\u6570\u662f export_onnx_model \u51fd\u6570\u7684\u53c2\u6570\u7684\u8d85\u96c6\uff0c\u53ef\u4ee5\u989d\u5916\u4f20\u5165 print_outlier=True \u6765\u8f93\u51fa\u68c0\u67e5\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u7684\u8d85\u51fa\u5408\u7406\u8bef\u5dee\u8303\u56f4\u5185\u7684\u5f02\u5e38\u503c\u3002","title":"oneflow-onnx \u7684\u4f7f\u7528\u65b9\u6cd5"},{"location":"cookies/oneflow2onnnx.html#_1","text":"\u5728\u5bfc\u51fa\u6a21\u578b\u4e4b\u524d\uff0c\u9700\u8981\u5c06\u6a21\u578b\u8bbe\u7f6e\u6210 eval \u6a21\u5f0f\uff0c\u56e0\u4e3a Dropout\u3001Batch Normalization \u7b49\u64cd\u4f5c\u5728\u8bad\u7ec3\u548c\u63a8\u7406\u6a21\u578b\u4e0b\u7684\u884c\u4e3a\u4e0d\u540c \u5728\u6784\u5efa\u9759\u6001\u56fe\u6a21\u578b\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u8f93\u5165\uff0c\u6b64\u8f93\u5165\u7684\u503c\u53ef\u4ee5\u662f\u968f\u673a\u7684\uff0c\u4f46\u8981\u4fdd\u8bc1\u5b83\u662f\u6b63\u786e\u7684\u6570\u636e\u7c7b\u578b\u548c\u5f62\u72b6 ONNX \u6a21\u578b\u63a5\u53d7\u7684\u8f93\u5165\u7684\u5f62\u72b6\u662f\u56fa\u5b9a\u7684\uff0cbatch \u7ef4\u5ea6\u7684\u5927\u5c0f\u53ef\u4ee5\u662f\u53d8\u5316\u7684\uff0c\u901a\u8fc7\u5c06 dynamic_batch_size \u53c2\u6570\u8bbe\u4e3a True \u53ef\u4ee5\u4f7f\u5f97\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u652f\u6301\u52a8\u6001 batch \u5927\u5c0f oneflow-onnx \u5fc5\u987b\u4f7f\u7528\u9759\u6001\u56fe\u6a21\u578b\uff08Graph \u6a21\u5f0f\uff09\u4f5c\u4e3a\u5bfc\u51fa\u51fd\u6570\u7684\u53c2\u6570\u3002\u5bf9\u4e8e\u52a8\u6001\u56fe\u6a21\u578b\uff08Eager \u6a21\u5f0f\uff09\uff0c\u9700\u8981\u5c06\u52a8\u6001\u56fe\u6a21\u578b\u6784\u5efa\u4e3a\u9759\u6001\u56fe\u6a21\u578b\uff0c\u53ef\u53c2\u89c1\u4e0b\u6587\u7684\u793a\u4f8b\u3002","title":"\u5bfc\u51fa\u6a21\u578b\u65f6\u7684\u6ce8\u610f\u70b9"},{"location":"cookies/oneflow2onnnx.html#_2","text":"\u5728\u672c\u8282\u4e2d\uff0c\u5c06\u4ee5\u5e38\u89c1\u7684 ResNet-34 \u6a21\u578b\u4e3a\u4f8b\uff0c\u4ecb\u7ecd\u5c06 OneFlow \u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\u5e76\u8fdb\u884c\u63a8\u7406\u7684\u6d41\u7a0b\u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u5230\u4e86 FlowVision \uff0c\u5b83\u662f\u57fa\u4e8e OneFlow \u642d\u5efa\u7684\u3001\u4e13\u7528\u4e8e\u8ba1\u7b97\u673a\u89c6\u89c9\u4efb\u52a1\u7684\u5de5\u5177\u5e93\uff0c\u5305\u542b\u8bf8\u591a\u6a21\u578b\u3001\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3001\u6570\u636e\u53d8\u6362\u64cd\u4f5c\u3001\u6570\u636e\u96c6\u7b49\u3002\u6211\u4eec\u5728\u6b64\u76f4\u63a5\u4f7f\u7528 FlowVision \u5e93\u63d0\u4f9b\u7684 ResNet-34 \u6a21\u578b\uff0c\u5e76\u4f7f\u7528 FlowVision \u63d0\u4f9b\u7684\u5728 ImageNet \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5f97\u5230\u7684 ResNet-34 \u6743\u91cd\u3002","title":"\u7528\u6cd5\u793a\u4f8b"},{"location":"cookies/oneflow2onnnx.html#onnx_2","text":"\u5bfc\u5165\u76f8\u5173\u4f9d\u8d56\uff0c\u4e3a\u65b9\u4fbf\u6f14\u793a\uff0c\u76f4\u63a5\u4f7f\u7528 resnet34 \u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff1a import oneflow as flow from oneflow import nn from flowvision.models import resnet34 from oneflow_onnx.oneflow2onnx.util import convert_to_onnx_and_check # \u6a21\u578b\u53c2\u6570\u5b58\u50a8\u76ee\u5f55 MODEL_PARAMS = 'checkpoints/resnet34' # \u4e0b\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b\u5e76\u4fdd\u5b58 model = resnet34 ( pretrained = True ) flow . save ( model . state_dict (), MODEL_PARAMS , save_as_external_data = True ) \u4f7f\u7528\u52a8\u6001\u56fe\u6a21\u578b\u6784\u5efa\u9759\u6001\u56fe\u6a21\u578b\uff0c\u8be6\u60c5\u8bf7\u53c2\u89c1\uff1a \u9759\u6001\u56fe\u6a21\u5757 nn.Graph class ResNet34Graph ( nn . Graph ): def __init__ ( self , eager_model ): super () . __init__ () self . model = eager_model def build ( self , x ): return self . model ( x ) \u5c06 OneFlow \u9759\u6001\u56fe\u6a21\u578b\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\uff1a params = flow . load ( MODEL_PARAMS ) model = resnet34 () model . load_state_dict ( params ) # \u5c06\u6a21\u578b\u8bbe\u7f6e\u4e3a eval \u6a21\u5f0f model . eval () resnet34_graph = ResNet34Graph ( model ) # \u6784\u5efa\u51fa\u9759\u6001\u56fe\u6a21\u578b resnet34_graph . _compile ( flow . randn ( 1 , 3 , 224 , 224 )) # \u5bfc\u51fa\u4e3a ONNX \u6a21\u578b\u5e76\u8fdb\u884c\u68c0\u67e5 convert_to_onnx_and_check ( resnet34_graph , flow_weight_dir = MODEL_PARAMS , onnx_model_path = \"./\" , print_outlier = True , dynamic_batch_size = True ) \u8fd0\u884c\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u5728\u5f53\u524d\u76ee\u5f55\u4e2d\u627e\u5230\u540d\u4e3a model.onnx \u7684\u6587\u4ef6\uff0c\u5373\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u3002","title":"\u5bfc\u51fa\u4e3a ONNX \u6a21\u578b"},{"location":"cookies/oneflow2onnnx.html#onnx_3","text":"\u8fdb\u884c\u63a8\u7406\u4e4b\u524d\uff0c\u8981\u4fdd\u8bc1\u5df2\u7ecf\u5b89\u88c5\u4e86 ONNX Runtime, \u5373 onnxruntime \u6216 onnxruntime-gpu\u3002\u5728\u672c\u6559\u7a0b\u7684\u5b9e\u9a8c\u73af\u5883\u4e2d\uff0c\u5b89\u88c5\u7684\u662f onnxruntime-gpu \u4ee5\u8c03\u7528 GPU \u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46\u5982\u679c\u673a\u5668\u4e0a\u6ca1\u6709 GPU\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528 CPU \u8fdb\u884c\u8ba1\u7b97\uff0c\u8be6\u89c1\u4e0b\u6587\u3002 \u6211\u4eec\u4f7f\u7528\u4e0b\u9762\u8fd9\u5f20\u56fe\u50cf\u4f5c\u4e3a\u6a21\u578b\u7684\u8f93\u5165\uff1a \u5bfc\u5165\u4f9d\u8d56\uff1a import numpy as np import cv2 from onnxruntime import InferenceSession \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u4e8e\u5c06\u56fe\u50cf\u9884\u5904\u7406\u4e3a ONNX \u6a21\u578b\u6240\u63a5\u53d7\u7684\u683c\u5f0f\u548c\u5c3a\u5bf8\uff1a def preprocess_image ( img , input_hw = ( 224 , 224 )): h , w , _ = img . shape # \u4f7f\u7528\u56fe\u50cf\u7684\u8f83\u957f\u8fb9\u786e\u5b9a\u7f29\u653e\u7cfb\u6570 is_wider = True if h <= w else False scale = input_hw [ 1 ] / w if is_wider else input_hw [ 0 ] / h # \u5bf9\u56fe\u50cf\u8fdb\u884c\u7b49\u6bd4\u4f8b\u7f29\u653e processed_img = cv2 . resize ( img , ( 0 , 0 ), fx = scale , fy = scale , interpolation = cv2 . INTER_LINEAR ) # \u5f52\u4e00\u5316 processed_img = np . array ( processed_img , dtype = np . float32 ) / 255 # \u5c06\u56fe\u50cf\u586b\u5145\u5230 ONNX \u6a21\u578b\u9884\u8bbe\u5c3a\u5bf8 temp_img = np . zeros (( input_hw [ 0 ], input_hw [ 1 ], 3 ), dtype = np . float32 ) temp_img [: processed_img . shape [ 0 ], : processed_img . shape [ 1 ], :] = processed_img processed_img = temp_img # \u8c03\u6574\u8f74\u7684\u987a\u5e8f\u5e76\u5728\u6700\u524d\u9762\u6dfb\u52a0 batch \u8f74 processed_img = np . expand_dims ( processed_img . transpose ( 2 , 0 , 1 ), axis = 0 ) return processed_img \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 ONNX \u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u4e3b\u8981\u6b65\u9aa4\u5305\u62ec\uff1a\u521b\u5efa\u4e00\u4e2a InferenceSession \u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528\u5176 run \u65b9\u6cd5\u8fdb\u884c\u63a8\u7406\u3002 \u5728 onnxruntime(-gpu) 1.9 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\uff0c\u521b\u5efa InferenceSession \u5bf9\u8c61\u65f6\u9700\u8981\u663e\u5f0f\u6307\u5b9a providers \u53c2\u6570\u6765\u9009\u62e9\u4f7f\u7528\u7684\u786c\u4ef6\u3002\u5bf9\u4e8e onnxruntime-gpu\uff0c\u53ef\u4ee5\u6307\u5b9a\u7684\u503c\u5305\u62ec TensorrtExecutionProvider \u3001 CUDAExecutionProvider \u3001 CPUExecutionProvider \u3002\u5982\u679c\u8fd0\u884c\u7684\u673a\u5668\u4e0a\u6ca1\u6709 GPU\uff0c\u53ef\u4ee5\u5c06 providers \u53c2\u6570\u6307\u5b9a\u4e3a ['CPUExecutionProvider'] \u6765\u4f7f\u7528 CPU \u8fdb\u884c\u8ba1\u7b97\u3002 ONNX \u6a21\u578b\u7684\u8f93\u5165\u6570\u636e\u7684\u7c7b\u578b\u662f\u4e00\u4e2a dict\uff0c\u5176 keys \u4e3a\u5bfc\u51fa ONNX \u6a21\u578b\u65f6\u7684\u8f93\u5165\u540d\u79f0 \"input names\"\uff0cvalues \u4e3a NumPy \u6570\u7ec4\u7c7b\u578b\u7684\u5b9e\u9645\u8f93\u5165\u6570\u636e\u3002\u53ef\u4ee5\u901a\u8fc7 InferenceSession \u5bf9\u8c61\u7684 get_inputs \u65b9\u6cd5\u83b7\u53d6\"input names\"\uff0c\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u662f onnxruntime.NodeArg \u7c7b\u578b\u7684\u5bf9\u8c61\u7ec4\u6210\u7684 list\uff0c\u5bf9\u4e8e NodeArg \u5bf9\u8c61\uff0c\u53ef\u4f7f\u7528\u5176 name \u5c5e\u6027\u83b7\u53d6 str \u7c7b\u578b\u7684\u540d\u79f0\u3002\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u8f93\u5165\u53ea\u6709\u56fe\u50cf\u6570\u636e\u672c\u8eab\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u5728 InferenceSession \u5bf9\u8c61\u4e0a\u8c03\u7528 .get_inputs()[0].name \uff0c\u83b7\u53d6\u8f93\u5165\u5bf9\u5e94\u7684 \"input names\"\uff0c\u5176\u503c\u4e3a _ResNet34Graph_0-input_0/out \uff0c\u5c06\u6b64\u503c\u4f5c\u4e3a key \u6784\u9020\u8f93\u5165 ONNX \u6a21\u578b\u7684 dict\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u9884\u5148\u6307\u5b9a\uff0c\u800c\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u83b7\u53d6\u3002 # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6 ImageNet \u6570\u636e\u96c6\u7684\u7c7b\u522b\u540d\u79f0 with open ( 'ImageNet-Class-Names.txt' ) as f : CLASS_NAMES = f . readlines () # \u8bfb\u53d6\u56fe\u50cf\u6587\u4ef6\u5e76\u4f7f\u7528 `preprocess_image` \u51fd\u6570\u8fdb\u884c\u9884\u5904\u7406 img = cv2 . imread ( 'cat.jpg' , cv2 . IMREAD_COLOR ) img = preprocess_image ( img ) # \u521b\u5efa\u4e00\u4e2a InferenceSession \u5bf9\u8c61 ort_sess = InferenceSession ( 'model.onnx' , providers = [ 'TensorrtExecutionProvider' , 'CUDAExecutionProvider' , 'CPUExecutionProvider' ]) # \u8c03\u7528 InferenceSession \u5bf9\u8c61\u7684 `run` \u65b9\u6cd5\u8fdb\u884c\u63a8\u7406 results = ort_sess . run ( None , { \"_ResNet34Graph_0-input_0/out\" : img }) # \u8f93\u51fa\u63a8\u7406\u7ed3\u679c print ( CLASS_NAMES [ np . argmax ( results [ 0 ])]) InferenceSession \u5bf9\u8c61\u7684 run \u65b9\u6cd5\u7684\u8f93\u51fa\u662f NumPy \u6570\u7ec4\u6784\u6210\u7684 list\uff0c\u6bcf\u4e2a NumPy \u6570\u7ec4\u5bf9\u5e94\u4e00\u7ec4\u8f93\u51fa\u3002\u56e0\u4e3a\u53ea\u6709\u4e00\u7ec4\u8f93\u5165\uff0c\u6240\u4ee5\u53d6\u51fa\u7d22\u5f15\u4e3a 0 \u7684\u5143\u7d20\u4f5c\u4e3a\u8f93\u51fa\uff0c\u6b64\u5143\u7d20\u7684\u5f62\u72b6\u662f (1, 1000) \uff0c\u5bf9\u5e94\u4e8e 1000 \u4e2a\u7c7b\u522b\u7684\u6982\u7387 (\u5982\u679c\u5c06 n \u5f20\u56fe\u50cf\u4f5c\u4e3a\u4e00\u4e2a batch \u8f93\u5165\uff0c\u6b64\u5143\u7d20\u7684\u5f62\u72b6\u5c06\u662f (n, 1000) )\u3002\u901a\u8fc7 np.argmax \u83b7\u53d6\u6982\u7387\u6700\u5927\u7684\u7c7b\u522b\u5bf9\u5e94\u7684\u7d22\u5f15\u540e\uff0c\u5c06\u7d22\u5f15\u6620\u5c04\u4e3a\u7c7b\u522b\u540d\u79f0\u3002 \u8fd0\u884c\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5f97\u5230\uff1a (base) root@training-notebook-654c6f-654c6f-jupyter-master-0:/workspace# python infer.py 285: 'Egyptian cat', \u4ee5\u4e0a\u662f\u5728 Python \u73af\u5883\u4e2d\u4f7f\u7528 GPU \u6216 CPU \u8fdb\u884c\u63a8\u7406\uff0c\u5b9e\u9645\u4f7f\u7528\u65f6\u53ef\u4ee5\u6839\u636e\u90e8\u7f72\u73af\u5883\u9009\u62e9\u4e0d\u540c\u7684 ONNX Runtime \u6765\u4f7f\u7528\u5bfc\u51fa\u7684 ONNX \u6a21\u578b\u3002","title":"\u4f7f\u7528 ONNX \u6a21\u578b\u8fdb\u884c\u63a8\u7406"},{"location":"cookies/oneflow_torch.html","text":"OneFlow \u6a21\u62df PyTorch \u00b6 OneFlow \u7684 API \u4e0e PyTorch \u5bf9\u9f50\uff0c\u7528\u6237\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5c06 PyTorch \u6a21\u578b\u8fc1\u79fb\u5230 OneFlow\u3002\u672c\u6587\u4ecb\u7ecd\u4e09\u79cd\u65b9\u6cd5\uff0c\u5c06\u4f7f\u7528 PyTorch \u8fd0\u884c\u7684\u4ee3\u7801\u8fc1\u79fb\u5230 OneFlow\u3002 1. import oneflow as torch \u00b6 \u5c06\u539f\u6709\u7684 import torch \u7684\u4ee3\u7801\u6539\u4e3a import oneflow as torch \u5c31\u53ef\u4ee5\u4f7f\u7528 OneFlow \u8bad\u7ec3\u539f\u6709\u6a21\u578b\uff1b\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u624b\u52a8\u4fee\u6539\u6240\u6709 import torch \u7684\u6587\u4ef6\uff0c\u5982\u679c\u7b2c\u4e09\u65b9\u5e93\u4f7f\u7528\u4e86 torch \uff0c\u8fd8\u9700\u8981\u66f4\u6539\u7b2c\u4e09\u65b9\u5e93\u7684\u6e90\u7801\u3002 2. \u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177 \u00b6 OneFlow \u63d0\u4f9b\u4e86\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5728 OneFlow \u7684 Python Package \u5185\u6a21\u62df\u4e86 PyTorch \u73af\u5883\uff0c\u5e76\u5c06\u5bf9\u8be5\u6a21\u5757\u7684\u5f15\u7528\u90fd\u8f6c\u53d1\u5230\u5b9e\u9645\u7684 OneFlow \u6a21\u5757\u4e2d\u3002\u5177\u4f53\u7684\u7528\u6cd5\u5982\u4e0b \u5f00\u542f\u6a21\u62df PyTorch eval $( oneflow-mock-torch ) \u6216 eval $( python3 -m oneflow.mock_torch ) \u8fd0\u884c\u4e0a\u8ff0\u547d\u4ee4\u540e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u793a\u4f8b\u89c2\u5bdf\u6548\u679c import torch print ( torch . __file__ ) import oneflow as flow x = torch . zeros ( 2 , 3 ) print ( isinstance ( x , flow . Tensor )) \u5173\u95ed\u6a21\u62df PyTorch eval $( oneflow-mock-torch disable ) \u6216 eval $( python3 -m oneflow.mock_torch disable ) 3. \u4f7f\u7528 OneFlow \u7684\u5185\u7f6e\u51fd\u6570 \u00b6 \u6211\u4eec\u63d0\u4f9b\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684 mock \u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u63a7\u5236\u67d0\u6bb5\u4ee3\u7801\u662f\u5426\u542f\u7528 mock \u529f\u80fd\u3002 \u5982\u4e0b\u7684 with \u8bed\u53e5\u4e2d\uff0c\u5bfc\u5165\u7684 PyTorch \u6a21\u5757\u5b9e\u9645\u4e0a\u662f OneFlow import oneflow.mock_torch as mock with mock . enable (): import torch print ( torch . __file__ ) import oneflow as flow x = torch . zeros ( 2 , 3 ) print ( isinstance ( x , flow . Tensor )) \u5f53\u4f60\u9700\u8981\u4f7f\u7528\u771f\u6b63\u7684 torch \u6a21\u5757\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837\u5173\u95ed mock \u529f\u80fd with mock . disable (): import torch print ( torch . __file__ ) mock.enable \u548c mock.disable \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u4f7f\u7528\uff0c\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e00\u6bb5\u7528\u6237\u60f3\u8981\u7528 OneFlow \u8fdb\u884c\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u800c\u8be5\u6a21\u578b\u9700\u8981 PyTorch \u6765\u52a0\u8f7d\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528 mock . enable () ... with mock . disable () module = torch . load_module ( ... ) # train the module with oneflow enable \u6a21\u5f0f\u548c disable \u6a21\u5f0f\u5404\u81ea\u4fdd\u5b58\u4e86\u4e00\u4efd\u503c\u4e3a\u6a21\u5757\u7684\u5b57\u5178\uff0c\u5728\u5f00\u5173enable/disable\u65f6\u4f1a\u66ff\u6362 sys.modules \u548c\u5f53\u524d\u6240\u5c5e\u6a21\u5757\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u6545\u7528\u6237\u9700\u8981\u5728 enable \u6a21\u5f0f\u548c disable \u6a21\u5f0f\u65f6\u81ea\u884c import \u9700\u8981\u7684\u6a21\u5757\uff0c\u5982\u4e0b\u4ee3\u7801\u4f1a\u5728 disable \u7684 with \u8bed\u53e5\u91cc\u62a5 name 'torch' is not defined \u7684\u9519 with mock . enable (): import torch with mock . disable (): torch . ones ( 2 , 3 ) \u603b\u7ed3 \u00b6 \u7531\u4e8e OneFlow \u7684 API \u4e0e PyTorch \u5bf9\u9f50\uff0c\u7528\u6237\u80fd\u591f\u5c06 PyTorch \u4ee3\u7801\u5f88\u65b9\u4fbf\u5730\u8fc1\u79fb\u5230 OneFlow\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u4e86\u4e09\u79cd\u4f7f\u7528 OneFlow \u6765\u8bad\u7ec3 PyTorch \u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u5e0c\u671b\u7528\u6237\u80fd\u591f\u4f53\u9a8c\u5230 OneFlow \u6781\u81f4\u7684\u6027\u80fd\u3002","title":"OneFlow \u6a21\u62df PyTorch"},{"location":"cookies/oneflow_torch.html#oneflow-pytorch","text":"OneFlow \u7684 API \u4e0e PyTorch \u5bf9\u9f50\uff0c\u7528\u6237\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5c06 PyTorch \u6a21\u578b\u8fc1\u79fb\u5230 OneFlow\u3002\u672c\u6587\u4ecb\u7ecd\u4e09\u79cd\u65b9\u6cd5\uff0c\u5c06\u4f7f\u7528 PyTorch \u8fd0\u884c\u7684\u4ee3\u7801\u8fc1\u79fb\u5230 OneFlow\u3002","title":"OneFlow \u6a21\u62df PyTorch"},{"location":"cookies/oneflow_torch.html#1-import-oneflow-as-torch","text":"\u5c06\u539f\u6709\u7684 import torch \u7684\u4ee3\u7801\u6539\u4e3a import oneflow as torch \u5c31\u53ef\u4ee5\u4f7f\u7528 OneFlow \u8bad\u7ec3\u539f\u6709\u6a21\u578b\uff1b\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u9700\u8981\u624b\u52a8\u4fee\u6539\u6240\u6709 import torch \u7684\u6587\u4ef6\uff0c\u5982\u679c\u7b2c\u4e09\u65b9\u5e93\u4f7f\u7528\u4e86 torch \uff0c\u8fd8\u9700\u8981\u66f4\u6539\u7b2c\u4e09\u65b9\u5e93\u7684\u6e90\u7801\u3002","title":"1. import oneflow as torch"},{"location":"cookies/oneflow_torch.html#2","text":"OneFlow \u63d0\u4f9b\u4e86\u4e00\u4e2a\u547d\u4ee4\u884c\u5de5\u5177\uff0c\u5728 OneFlow \u7684 Python Package \u5185\u6a21\u62df\u4e86 PyTorch \u73af\u5883\uff0c\u5e76\u5c06\u5bf9\u8be5\u6a21\u5757\u7684\u5f15\u7528\u90fd\u8f6c\u53d1\u5230\u5b9e\u9645\u7684 OneFlow \u6a21\u5757\u4e2d\u3002\u5177\u4f53\u7684\u7528\u6cd5\u5982\u4e0b \u5f00\u542f\u6a21\u62df PyTorch eval $( oneflow-mock-torch ) \u6216 eval $( python3 -m oneflow.mock_torch ) \u8fd0\u884c\u4e0a\u8ff0\u547d\u4ee4\u540e\uff0c\u901a\u8fc7\u4ee5\u4e0b\u793a\u4f8b\u89c2\u5bdf\u6548\u679c import torch print ( torch . __file__ ) import oneflow as flow x = torch . zeros ( 2 , 3 ) print ( isinstance ( x , flow . Tensor )) \u5173\u95ed\u6a21\u62df PyTorch eval $( oneflow-mock-torch disable ) \u6216 eval $( python3 -m oneflow.mock_torch disable )","title":"2. \u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u5177"},{"location":"cookies/oneflow_torch.html#3-oneflow","text":"\u6211\u4eec\u63d0\u4f9b\u4e86\u66f4\u7ec6\u7c92\u5ea6\u7684 mock \u529f\u80fd\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u884c\u63a7\u5236\u67d0\u6bb5\u4ee3\u7801\u662f\u5426\u542f\u7528 mock \u529f\u80fd\u3002 \u5982\u4e0b\u7684 with \u8bed\u53e5\u4e2d\uff0c\u5bfc\u5165\u7684 PyTorch \u6a21\u5757\u5b9e\u9645\u4e0a\u662f OneFlow import oneflow.mock_torch as mock with mock . enable (): import torch print ( torch . __file__ ) import oneflow as flow x = torch . zeros ( 2 , 3 ) print ( isinstance ( x , flow . Tensor )) \u5f53\u4f60\u9700\u8981\u4f7f\u7528\u771f\u6b63\u7684 torch \u6a21\u5757\u65f6\uff0c\u53ef\u4ee5\u8fd9\u6837\u5173\u95ed mock \u529f\u80fd with mock . disable (): import torch print ( torch . __file__ ) mock.enable \u548c mock.disable \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u4f7f\u7528\uff0c\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e00\u6bb5\u7528\u6237\u60f3\u8981\u7528 OneFlow \u8fdb\u884c\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u800c\u8be5\u6a21\u578b\u9700\u8981 PyTorch \u6765\u52a0\u8f7d\uff0c\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528 mock . enable () ... with mock . disable () module = torch . load_module ( ... ) # train the module with oneflow enable \u6a21\u5f0f\u548c disable \u6a21\u5f0f\u5404\u81ea\u4fdd\u5b58\u4e86\u4e00\u4efd\u503c\u4e3a\u6a21\u5757\u7684\u5b57\u5178\uff0c\u5728\u5f00\u5173enable/disable\u65f6\u4f1a\u66ff\u6362 sys.modules \u548c\u5f53\u524d\u6240\u5c5e\u6a21\u5757\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u6545\u7528\u6237\u9700\u8981\u5728 enable \u6a21\u5f0f\u548c disable \u6a21\u5f0f\u65f6\u81ea\u884c import \u9700\u8981\u7684\u6a21\u5757\uff0c\u5982\u4e0b\u4ee3\u7801\u4f1a\u5728 disable \u7684 with \u8bed\u53e5\u91cc\u62a5 name 'torch' is not defined \u7684\u9519 with mock . enable (): import torch with mock . disable (): torch . ones ( 2 , 3 )","title":"3. \u4f7f\u7528 OneFlow \u7684\u5185\u7f6e\u51fd\u6570"},{"location":"cookies/oneflow_torch.html#_1","text":"\u7531\u4e8e OneFlow \u7684 API \u4e0e PyTorch \u5bf9\u9f50\uff0c\u7528\u6237\u80fd\u591f\u5c06 PyTorch \u4ee3\u7801\u5f88\u65b9\u4fbf\u5730\u8fc1\u79fb\u5230 OneFlow\u3002\u4ee5\u4e0a\u4ecb\u7ecd\u4e86\u4e09\u79cd\u4f7f\u7528 OneFlow \u6765\u8bad\u7ec3 PyTorch \u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u5e0c\u671b\u7528\u6237\u80fd\u591f\u4f53\u9a8c\u5230 OneFlow \u6781\u81f4\u7684\u6027\u80fd\u3002","title":"\u603b\u7ed3"},{"location":"cookies/save_load.html","text":"OneFlow \u7684\u5927\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d \u00b6 By Li Xiang , Xu Xiaoyu , Zuo Yihao , Zhang Jianhao \u5927\u89c4\u6a21\u6a21\u578b\u5206\u7247\u5b58\u50a8\u7b80\u4ecb \u00b6 \u5728\u6a21\u578b\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u6bd4\u5982 100G \u4ee5\u4e0b\uff0c\u8fd8\u6709\u53ef\u80fd\u91c7\u7528\u5355\u673a\u5b58\u50a8\u3002\u5f53\u6a21\u578b\u53c2\u6570\u91cf\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u8981\u6c42\u7684\u6837\u672c\u6570\u4e5f\u66f4\u5927\uff0c\u8bad\u7ec3\u540e dump \u51fa\u6765\u7684\u6a21\u578b\u4e5f\u4f1a\u5f88\u5927\uff0c\u5355\u673a\u5f88\u96be\u653e\u4e0b\u3002\u6bd4\u5982\uff0c\u7531 DeepSpeed \u548c Megatron \u9a71\u52a8\u7684 Megatron \u56fe\u7075\u81ea\u7136\u8bed\u8a00\u751f\u6210\u6a21\u578b\uff08MT-NLG\uff09\u5177\u6709 5300 \u4ebf\u4e2a\u53c2\u6570\uff0c\u662f\u8fc4\u4eca\u4e3a\u6b62\u8bad\u7ec3\u8fc7\u7684\u6700\u5927\u548c\u6700\u5f3a\u5927\u7684\u5355\u7247 Transformer \u8bed\u8a00\u6a21\u578b\uff0c\u652f\u6301\u8fd9\u6837\u7684\u5927\u89c4\u6a21\u8bed\u8a00\u6a21\u578b\u9700\u8981\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\uff0c\u4e0d\u4f1a\u4f7f\u7528\u5355\u673a\u5185\u5b58\u3002\u6b64\u5916\uff0c\u5728\u5176\u4ed6 CV\u3001\u641c\u7d22\u3001\u63a8\u8350\u548c\u5e7f\u544a\u7c7b\u7b49\u573a\u666f\u4e0b\uff0c\u8bfb\u53d6\u6837\u672c\u91cf\u589e\u591a\u548c\u6a21\u578b\u590d\u6742\u5ea6\u589e\u52a0\u90fd\u4f1a\u5e26\u6765\u6a21\u578b\u5b58\u50a8\u4e0a\u7684\u96be\u9898\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd OneFlow \u7684\u5927\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u3001\u52a0\u8f7d\u7b56\u7565\u4ee5\u53ca\u4f7f\u7528\u65b9\u6cd5\u3002 OneFlow \u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d \u00b6 OneFlow \u7684\u5927\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\u5b9e\u73b0\u57fa\u4e8e\u5168\u5c40\u89c6\u89d2\uff08 Global View \uff09\u7684\u6982\u5ff5\uff0c\u5373\u5229\u7528 Placement \u4e0e SBP \u5b8c\u6210\u6a21\u578b\u6587\u4ef6\uff08\u4e0b\u6587\u90fd\u7528 state dict \u8868\u793a\uff09\u5728\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u5207\u5206\uff0c\u9002\u7528\u4e8e\u56e0\u4e3a\u5355\u4e2a\u8bbe\u5907\u7684\u5185\u5b58\u6216\u8005\u663e\u5b58\u7684\u9650\u5236\uff0c\u65e0\u6cd5\u5bb9\u7eb3\u5927\u6a21\u578b\u7684\u573a\u666f\u3002 flow.utils.global_view.to_global() \u63a5\u53e3\u4ecb\u7ecd \u00b6 \u4e3a\u4e86\u66f4\u597d\u7406\u89e3\u4e0b\u6587\u4fdd\u5b58\u6a21\u578b\u548c\u52a0\u8f7d\u6a21\u578b\u4e24\u4e2a\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u9996\u5148\u5bf9 flow.utils.global_view.to_global() \u63a5\u53e3\u548c\u5176\u5b9e\u73b0\u601d\u8def\u8fdb\u884c\u5206\u6790\u3002\u533a\u522b\u4e8e Tensor.to_global() \u6a21\u5f0f\uff08\u53ef\u4ee5\u5904\u7406\u666e\u901a\u7684 Tensor\uff09\uff0c flow.utils.global_view.to_global() \u63d0\u4f9b\u4e86\u591a\u79cd\u7c7b\u578b\u7684\u8f93\u5165\u652f\u6301\uff0c\u5305\u62ec None\u3001Tensor\u3001List\u3001Tuple\u3001nn.Module \u7684 state dict \u3001nn.Graph \u7684 state dict \u548c\u51e0\u79cd\u7c7b\u578b\u7684\u4efb\u610f\u7ec4\u5408\uff0c\u5373\u5c06 List/Tuple/Dict \u4e2d\u7684\u8f93\u5165 Tensor \u8f6c\u6362\u4e3a Global Tensor\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5176\u4f20\u5165\u53c2\u6570\u4e2d\u7684 SBP \u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u4e00\u4e2a (x, tensor) -> sbp \u7684\u51fd\u6570\u6765\u89e3\u51b3\u4e0d\u540c Tensor \u5bf9\u5e94\u4e0d\u540c SBP \u7684\u9700\u6c42\u3002 \u5e76\u4e14\uff0c\u4e0e to_global() \u5bf9\u5e94\u7684\u8fd8\u6709 flow.utils.global_view.to_local() \u63a5\u53e3\u3002\u53ef\u4ee5\u53c2\u8003 API \u6587\u6863\u4e2d\u5173\u4e8e to_global() \u548c to_local() \u66f4 \u8be6\u7ec6\u7684\u4ecb\u7ecd \u3002\u5728 flow.utils.global_view.to_global() \u7684 \u5b9e\u73b0 \u4e2d\uff0c\u652f\u6301\u4e86\u591a\u79cd\u8f93\u5165\u7c7b\u578b\u9002\u7528\u4e8e\u73b0\u6709\u7684 Tensor.to_global() \u63a5\u53e3\u3002\u5b9e\u73b0\u7684\u6574\u4f53\u601d\u8def\u5927\u81f4\u4e3a\u68c0\u67e5\u8f93\u5165\u3001\u5e7f\u64ad\uff08\u7a7a\uff09\u7ed3\u6784\uff0c\u904d\u5386\u8282\u70b9\u3001\u8c03\u7528\u56de\u8c03\u51fd\u6570\u548c\u8fd4\u56de to_global() \u540e\u7684\u7ed3\u679c\u3002 \u518d\u56de\u5230\u6211\u4eec\u5173\u6ce8\u7684\u5730\u65b9\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5982\u4f55\u505a\u5230\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\uff1f\u6bd4\u5982\u5bf9\u4e8e\u6a21\u578b\u5e76\u884c/\u6d41\u6c34\u5e76\u884c\uff0c\u6a21\u578b\u7684\u53c2\u6570\u5206\u6563\u5728\u591a\u4e2a Rank \u4e0a\uff0c\u5728\u4fdd\u5b58\u6a21\u578b\u524d\u901a\u8fc7 flow.utils.global_view.to_global() \u5c06 state dict \u91cc\u7684\u6bcf\u4e2a Tensor \u5728\u6307\u5b9a Placement \u4e0a\u8f6c\u4e3a Global Tensor\uff0cSBP \u7684\u7c7b\u578b\u4e3a flow.sbp.split \uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5728\u7279\u5b9a\u7ef4\u5ea6\u4e0a\u7684\u5207\u5206\u3002\u540c\u6837\u7684\uff0c\u6a21\u578b\u4e5f\u53ef\u4ee5\u6309 Split \u88ab\u52a0\u8f7d\u3002\u5f53\u7136\uff0cSBP \u4e5f\u53ef\u4ee5\u4e3a broadcast\uff0c\u652f\u6301\u4e0d\u540c\u7684 SBP \u548c Placement \u7ec4\u5408\u3002\u8fd9\u6837\uff0c\u8d85\u5927\u89c4\u6a21\u6a21\u578b\u5206\u7247\u5b58\u50a8\u7684\u95ee\u9898\u5c31\u88ab\u975e\u5e38\u597d\u7684\u89e3\u51b3\u4e86\u3002 \u4fdd\u5b58\u6a21\u578b \u00b6 \u5927\u81f4\u4e86\u89e3 flow.utils.global_view.to_global() \u63a5\u53e3\u540e\uff0c\u5728\u8fd9\u4e00\u90e8\u5206\u6f14\u793a\u4e86\u5982\u4f55\u5206\u7247\u4fdd\u5b58\u6a21\u578b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a # \u81ea\u5b9a\u4e49 get_sbp \u51fd\u6570\u3002 def get_sbp ( state_dict , tensor ): if tensor is state_dict [ \"System-Train-TrainStep\" ]: return flow . sbp . broadcast if tensor is state_dict [ \"module_pipeline\" ][ \"m_stage3.linear.weight\" ]: return flow . sbp . split ( 1 ) if tensor is state_dict [ \"module_pipeline\" ][ \"m_stage3.linear.bias\" ]: return flow . sbp . broadcast return flow . sbp . split ( 0 ) model_file_state_dict = flow . utils . global_view . to_global ( state_dict , placement = model_file_placement , sbp = get_sbp , ) # \u4f7f\u7528 sbp=get_sbp \u5904\u7406\u7279\u6b8a\u7684\u952e\uff0c\u4e5f\u652f\u6301\u6307\u5b9a\u666e\u901a\u7684 SBP\u3002 rank_id = flow . env . get_rank () # \u4fdd\u5b58\u6a21\u578b\u5206\u7247\u7684\u8def\u5f84\uff0c\u4e00\u4e2a rank \u5bf9\u5e94\u4e00\u4e2a\u8def\u5f84\u3002 state_dict_dir = \"./graph_save_load_global_\" + str ( rank_id ) if flow . env . get_rank () in model_file_placement . ranks : flow . save ( flow . utils . global_view . to_local ( model_file_state_dict ), state_dict_dir , ) \u9996\u5148\uff0c\u5c06\u539f\u6a21\u578b\uff08state_dict\uff09\u8f6c\u5316\u5230\u6a21\u578b\u6587\u4ef6\u7684 Placement \u548c SBP \u4e0a\uff0cmodel_file_placement \u4e3a\u8981\u5206\u7247\u4fdd\u5b58\u6a21\u578b\u7684\u8bbe\u5907\u9635\u5217\uff0c\u4e5f\u5c31\u662f\u5c06 state dict \u6309 split(0) \u5206\u7247\u5230 model_file_placement \u4e0a\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u81ea\u5b9a\u4e49 get_sbp \u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u4f20\u8fdb\u6765\u4e00\u4e2a (x, tensor) -> sbp \u7684\u51fd\u6570\u6765\u89e3\u51b3\u7279\u6b8a Tensor \u5bf9\u5e94\u4e0d\u540c SBP \u7684\u9700\u6c42\u3002\u4e3e\u4e2a\u4f8b\u5b50(\u5f53\u524d\u4f8b\u5b50\u57fa\u4e8e Graph \u6a21\u5f0f)\uff0c\u5bf9\u4e8e state_dict[\"System-Train-TrainStep\"] \u8fd9\u79cd shape \u4e3a [1] \u7684 Tensor\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u6309 split(0) \u5206\u7247\u4e86\uff0cSBP \u53ef\u4ee5\u9009\u7528 broadcast\u3002\u800c state_dict[\"module_pipeline\"][\"m_stage3.linear.weight\"] \u53ea\u80fd\u5728\u7b2c 1 \u7ef4\u5ea6\u5207\u5206\uff0c\u5bf9\u4e8e state_dict[\"module_pipeline\"][\"m_stage3.linear.bias\"] \u8fd9\u79cd\u4e0d\u53ef\u5207\u5206\u7684\u5c0f Tensor(s)\uff0cSBP \u53ef\u4ee5\u9009\u7528 broadcast\u3002\u8fd9\u6837\u652f\u6301\u7528\u6237 DIY SBP \u7684\u5904\u7406\uff0c\u66f4\u52a0\u7075\u6d3b\u3002 \u5728\u540e\u9762\u7684\u5904\u7406\u4e2d\uff0c\u4f7f\u7528 flow.utils.global_view.to_local() \u63a5\u53e3\u5f97\u5230 model_file_state_dict \u7684\u672c\u5730\u5206\u91cf\uff0c\u5e76\u8c03\u7528 oneflow.save \u4fdd\u5b58\u6a21\u578b\u3002\u5176\u4e2d\uff0cstate_dict_dir \u662f\u5e26\u6709\u8bbe\u5907 id \u7684\u76ee\u5f55\uff0c\u9700\u8981\u533a\u5206\u4e0d\u540c\u8bbe\u5907\uff0c\u63a8\u8350\u4e00\u4e2a rank \u5bf9\u5e94\u4e00\u4e2a\u8def\u5f84\uff0c\u8def\u5f84\u540d\u7528 rank id \u7684\u65b9\u5f0f\u3002 \u52a0\u8f7d\u6a21\u578b \u00b6 \u5728\u6307\u5b9a\u8bbe\u5907\u4e0a\u5206\u7247\u4fdd\u5b58\u6a21\u578b\u540e\uff0c\u52a0\u8f7d\u6a21\u578b\u7684\u4ee3\u7801\u5982\u4e0b\uff1a if cur_rank in model_file_placement . ranks : local_state_dict = flow . load ( state_dict_dir ) else : local_state_dict = None global_state_dict = flow . utils . global_view . to_global ( local_state_dict , placement = model_file_placement , sbp = get_sbp , ) graph_model . load_state_dict ( global_state_dict ) \u9996\u5148\uff0c\u7528 load() \u65b9\u6cd5\u5728\u6bcf\u4e2a\u4fdd\u5b58\u5207\u7247\u7684\u8bbe\u5907\u4e0a\u52a0\u8f7d state dict\u3002\u5bf9\u5e94\u7684\uff0c\u9700\u8981\u628a local rank \u4e0a\u7684 state dict \u8f6c\u6362\u5230\u6a21\u578b\u6587\u4ef6\u7684 placement \u548c sbp \u4e0a\uff0c\u5f97\u5230\u4e86 global_state_dict\u3002\u8fd9\u4e00\u6b65\u548c\u4fdd\u5b58\u6a21\u578b\u5e94\u8be5\u662f\u5bf9\u5e94\u7684\uff0cSBP \u548c Placement \u4e5f\u662f\u4e00\u81f4\u7684\u3002\u6700\u540e\uff0cglobal_state_dict \u53ef\u4ee5\u6210\u529f\u52a0\u8f7d\u5230 graph_model\uff08nn.Graph\uff09 \u4e2d\u3002\u5f53\u7136\uff0cnn.Module \u548c nn.Graph \u5904\u7406\u65b9\u6cd5\u662f\u4e00\u81f4\u7684\u3002 \u5c06 state dict \u52a0\u8f7d\u5230 nn.Module \u4e2d \u00b6 \u9664\u4e86\u4ee5\u4e0a\u4e24\u4e2a\u7279\u5f81\u5916\uff0c\u5728\u5c06 state dict \u52a0\u8f7d\u5230 nn.Module \u65f6\uff0cOneFlow \u63d0\u4f9b\u4e86 SBP \u548c Placement \u7684\u81ea\u52a8\u8f6c\u6362\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u9996\u5148\u6784\u9020\u4e00\u4e2a m\uff08nn.Module\uff09\u5bf9\u8c61\uff0c\u518d\u5c06 global_state_dict \u7684 SBP \u8bbe\u7f6e\u4e3a split(0)\uff0c\u800c m \u7684 SBP \u4e3a broadcast\u3002\u540c\u65f6 placement \u4e5f\u653e\u751f\u4e86\u53d8\u5316\uff0c\u4ece placement(\"cpu\", ranks=[0, 1]) \u5230 flow.placement(\"cpu\", ranks=[0]) \u3002\u8fd9\u65f6\u7528\u6237\u4e0d\u9700\u8981\u5176\u4ed6\u64cd\u4f5c\uff0cOneFlow \u4f1a\u81ea\u52a8\u505a SBP \u548c placement \u7684\u8f6c\u6362\u8fc7\u7a0b\u3002 import oneflow as flow m = flow . nn . Linear ( 2 , 6 ) model_file_placement = flow . placement ( \"cpu\" , ranks = [ 0 , 1 ]) state_dict = { \"weight\" : flow . ones ( 3 , 2 ), \"bias\" : flow . zeros ( 3 )} global_state_dict = flow . utils . global_view . to_global ( state_dict , placement = model_file_placement , sbp = flow . sbp . split ( 0 ), ) m . to_global ( placement = flow . placement ( \"cpu\" , ranks = [ 0 ]), sbp = flow . sbp . broadcast ) m . load_state_dict ( global_state_dict ) print ( m . state_dict ()) \u4f7f\u7528 2 \u5361\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u5178\u4e2d\u7684\u5168\u5c40\u5f20\u91cf\uff0c\u5df2\u7ecf\u88ab\u52a0\u8f7d\u5230 m Module \u4e2d\u3002\u6b64\u5916\uff0c\u8f93\u51fa OrderedDict \u7684 tensor \u7684 SBP \u5df2\u7ecf\u4ece split(0) \u81ea\u52a8\u8f6c\u6362\u4e3a broadcast\uff0c'weight' \u5bf9\u5e94 tensor \u7684\u5f62\u72b6\u4e5f\u662f\u6211\u4eec\u671f\u5f85\u7684 [6, 2] \uff0c'bias' \u5f62\u72b6\u4e3a [6] \u3002 OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.], [1., 1.], [1., 1.], [1., 1.]], placement=oneflow.placement(type=\"cpu\", ranks=[0]), sbp=(oneflow.sbp.broadcast,), dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0., 0., 0., 0.], placement=oneflow.placement(type=\"cpu\", ranks=[0]), sbp=(oneflow.sbp.broadcast,), dtype=oneflow.float32, requires_grad=True))]) \u4e00\u4e2a\u5b8c\u6574\u793a\u4f8b \u00b6 \u4e0a\u9762\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u5982\u4f55\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u6a21\u578b\u3002\u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u63d0\u4f9b\u4e00\u4efd\u5b8c\u6574\u7684\u4ee3\u7801\u53c2\u8003\uff0c\u4e0b\u9762\u7684\u4f8b\u5b50\u4e3a 4 \u4e2a ranks \u4e0a\u7684\u6d41\u6c34\u5e76\u884c\uff0c\u6a21\u62df\u4e86\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\u8fc7\u7a0b\u3002 import os import numpy as np import oneflow.nn as nn import oneflow as flow model_tensor_placement = flow . placement ( \"cuda\" , ranks = [ 0 , 1 , 2 , 3 ]) # model_file_placement \u4e3a\u5b58\u50a8\u6a21\u578b\u5206\u7247\u7684\u8bbe\u5907\u7684 placement\uff0c\u8868\u793a\u5728 Rank 2 \u548c Rank 3 \u4e0a\u53ef\u4e3a None\u3002 model_file_placement = flow . placement ( \"cpu\" , ranks = [ 0 , 1 ]) P0 = flow . placement ( model_tensor_placement . type , ranks = [ 0 ]) P1 = flow . placement ( model_tensor_placement . type , ranks = [ 1 ]) P2 = flow . placement ( model_tensor_placement . type , ranks = [ 2 ]) P3 = flow . placement ( model_tensor_placement . type , ranks = [ 3 ]) def get_sbp ( state_dict , tensor ): if tensor is state_dict [ \"System-Train-TrainStep\" ]: return flow . sbp . broadcast if tensor is state_dict [ \"module_pipeline\" ][ \"m_stage3.linear.weight\" ]: return flow . sbp . split ( 1 ) if tensor is state_dict [ \"module_pipeline\" ][ \"m_stage3.linear.bias\" ]: return flow . sbp . broadcast return flow . sbp . split ( 0 ) class Stage0Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear = flow . nn . Linear ( 16 , 8 ) self . relu = flow . nn . ReLU () def forward ( self , x ): return self . relu ( self . linear ( x )) class Stage1Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear = flow . nn . Linear ( 8 , 4 ) self . relu = flow . nn . ReLU () def forward ( self , x ): return self . relu ( self . linear ( x )) class Stage2Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear = flow . nn . Linear ( 4 , 2 ) self . relu = flow . nn . ReLU () def forward ( self , x ): return self . relu ( self . linear ( x )) class Stage3Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear = flow . nn . Linear ( 2 , 1 ) def forward ( self , x ): return self . linear ( x ) # \u6a21\u62df 4 \u4e2a ranks \u4e0a\u7684\u6d41\u6c34\u5e76\u884c class PipelineModule ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . m_stage0 = Stage0Module () self . m_stage1 = Stage1Module () self . m_stage2 = Stage2Module () self . m_stage3 = Stage3Module () self . m_stage0 . to_global ( placement = P0 , sbp = flow . sbp . broadcast ) self . m_stage1 . to_global ( placement = P1 , sbp = flow . sbp . broadcast ) self . m_stage2 . to_global ( placement = P2 , sbp = flow . sbp . broadcast ) self . m_stage3 . to_global ( placement = P3 , sbp = flow . sbp . broadcast ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = flow . sbp . broadcast ) out_stage1 = self . m_stage1 ( in_stage1 ) in_stage2 = out_stage1 . to_global ( placement = P2 , sbp = flow . sbp . broadcast ) out_stage2 = self . m_stage2 ( in_stage2 ) in_stage3 = out_stage2 . to_global ( placement = P3 , sbp = flow . sbp . broadcast ) out_stage3 = self . m_stage3 ( in_stage3 ) return out_stage3 class PipelineGraph ( flow . nn . Graph ): def __init__ ( self , module_pipeline ): super () . __init__ () self . module_pipeline = module_pipeline self . module_pipeline . m_stage0 . to ( nn . graph . GraphModule ) . set_stage ( 0 , P0 ) self . module_pipeline . m_stage1 . to ( nn . graph . GraphModule ) . set_stage ( 1 , P1 ) self . module_pipeline . m_stage2 . to ( nn . graph . GraphModule ) . set_stage ( 2 , P2 ) self . module_pipeline . m_stage3 . to ( nn . graph . GraphModule ) . set_stage ( 3 , P3 ) self . config . set_gradient_accumulation_steps ( 2 ) self . add_optimizer ( flow . optim . SGD ( self . module_pipeline . parameters (), lr = 0.001 ) ) def build ( self , x ): out = self . module_pipeline ( x ) out = out . sum () out . backward () return out def train_with_graph ( call_cnt = 0 , state_dict_dir = None , last_state_dict = None ): # \u5f62\u72b6\u4e3a [2, 16] \u7684\u56fa\u5b9a\u8f93\u5165\u5f20\u91cf x = flow . tensor ( [ [ 0.4286 , 0.7402 , 0.4161 , 0.6103 , 0.7394 , 1.1330 , - 0.2311 , - 0.1013 , 0.8537 , 0.9757 , - 0.9842 , 0.3839 , - 0.5551 , - 0.8832 , 0.7820 , 0.7421 , ], [ - 0.1581 , - 1.0319 , 1.8430 , 0.3576 , 0.7288 , - 0.6912 , 0.9966 , 1.0840 , - 1.1760 , 1.5683 , - 0.2098 , - 1.6439 , - 2.7049 , 0.1949 , 1.6377 , 0.0745 , ], ], dtype = flow . float32 , placement = P0 , sbp = flow . sbp . broadcast , ) module_pipeline = PipelineModule () graph_model = PipelineGraph ( module_pipeline ) cur_rank = flow . env . get_rank () if call_cnt == 1 : if cur_rank in model_file_placement . ranks : local_state_dict = flow . load ( state_dict_dir ) else : local_state_dict = None # \u4f7f\u7528 sbp=get_sbp \u5904\u7406\u7279\u6b8a\u7684\u952e global_state_dict = flow . utils . global_view . to_global ( local_state_dict , placement = model_file_placement , sbp = get_sbp , ) graph_model . load_state_dict ( global_state_dict ) graph_model ( x ) state_dict = graph_model . state_dict () if call_cnt == 0 : model_file_state_dict = flow . utils . global_view . to_global ( state_dict , placement = model_file_placement , sbp = get_sbp , ) if flow . env . get_rank () in model_file_placement . ranks : flow . save ( flow . utils . global_view . to_local ( model_file_state_dict ), state_dict_dir , ) if __name__ == \"__main__\" : rank_id = flow . env . get_rank () # \u4fdd\u5b58\u8def\u5f84\uff0c\u4e00\u4e2a rank \u5bf9\u5e94\u4e00\u4e2a\u8def\u5f84\u3002 state_dict_dir = \"./graph_save_load_global_\" + str ( rank_id ) # \u4fdd\u5b58\u6a21\u578b train_with_graph ( 0 , state_dict_dir ) # \u52a0\u8f7d\u6a21\u578b train_with_graph ( 1 , state_dict_dir ) \u7ed3\u8bed \u00b6 \u4e0a\u6587\u4ecb\u7ecd\u4e86\uff1a \u5927\u89c4\u6a21\u6a21\u578b\u5206\u7247\u5b58\u50a8\u7684\u5fc5\u8981\u6027\uff1b OneFlow \u63d0\u4f9b\u7684\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u63a5\u53e3\u4ecb\u7ecd\uff1b \u4e00\u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u4f8b\u5b50\u6f14\u793a\u5982\u4f55\u5b8c\u6210\u5927\u6a21\u578b\u5206\u7247\u5b58\u50a8\uff1b \u672c\u6587\u4ece\u7b80\u5355\u4ecb\u7ecd\u5927\u89c4\u6a21\u6a21\u578b\u5206\u7247\u5b58\u50a8\u5f00\u59cb\uff0c\u6700\u7ec8\u6f14\u793a\u4e86 OneFlow \u7684\u5982\u4f55\u505a\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\u8fc7\u7a0b\uff0c\u540e\u7eed OneFlow \u7684\u5927\u6a21\u578b\u5206\u7247\u5b58\u50a8\u7684\u63a5\u53e3\u8fd8\u4f1a\u4e0d\u65ad\u5b8c\u5584\u3002","title":"\u5927\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d"},{"location":"cookies/save_load.html#oneflow","text":"By Li Xiang , Xu Xiaoyu , Zuo Yihao , Zhang Jianhao","title":"OneFlow \u7684\u5927\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d"},{"location":"cookies/save_load.html#_1","text":"\u5728\u6a21\u578b\u6bd4\u8f83\u5c0f\u7684\u65f6\u5019\uff0c\u6bd4\u5982 100G \u4ee5\u4e0b\uff0c\u8fd8\u6709\u53ef\u80fd\u91c7\u7528\u5355\u673a\u5b58\u50a8\u3002\u5f53\u6a21\u578b\u53c2\u6570\u91cf\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u8981\u6c42\u7684\u6837\u672c\u6570\u4e5f\u66f4\u5927\uff0c\u8bad\u7ec3\u540e dump \u51fa\u6765\u7684\u6a21\u578b\u4e5f\u4f1a\u5f88\u5927\uff0c\u5355\u673a\u5f88\u96be\u653e\u4e0b\u3002\u6bd4\u5982\uff0c\u7531 DeepSpeed \u548c Megatron \u9a71\u52a8\u7684 Megatron \u56fe\u7075\u81ea\u7136\u8bed\u8a00\u751f\u6210\u6a21\u578b\uff08MT-NLG\uff09\u5177\u6709 5300 \u4ebf\u4e2a\u53c2\u6570\uff0c\u662f\u8fc4\u4eca\u4e3a\u6b62\u8bad\u7ec3\u8fc7\u7684\u6700\u5927\u548c\u6700\u5f3a\u5927\u7684\u5355\u7247 Transformer \u8bed\u8a00\u6a21\u578b\uff0c\u652f\u6301\u8fd9\u6837\u7684\u5927\u89c4\u6a21\u8bed\u8a00\u6a21\u578b\u9700\u8981\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\uff0c\u4e0d\u4f1a\u4f7f\u7528\u5355\u673a\u5185\u5b58\u3002\u6b64\u5916\uff0c\u5728\u5176\u4ed6 CV\u3001\u641c\u7d22\u3001\u63a8\u8350\u548c\u5e7f\u544a\u7c7b\u7b49\u573a\u666f\u4e0b\uff0c\u8bfb\u53d6\u6837\u672c\u91cf\u589e\u591a\u548c\u6a21\u578b\u590d\u6742\u5ea6\u589e\u52a0\u90fd\u4f1a\u5e26\u6765\u6a21\u578b\u5b58\u50a8\u4e0a\u7684\u96be\u9898\u3002 \u672c\u6587\u5c06\u4ecb\u7ecd OneFlow \u7684\u5927\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u3001\u52a0\u8f7d\u7b56\u7565\u4ee5\u53ca\u4f7f\u7528\u65b9\u6cd5\u3002","title":"\u5927\u89c4\u6a21\u6a21\u578b\u5206\u7247\u5b58\u50a8\u7b80\u4ecb"},{"location":"cookies/save_load.html#oneflow_1","text":"OneFlow \u7684\u5927\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\u5b9e\u73b0\u57fa\u4e8e\u5168\u5c40\u89c6\u89d2\uff08 Global View \uff09\u7684\u6982\u5ff5\uff0c\u5373\u5229\u7528 Placement \u4e0e SBP \u5b8c\u6210\u6a21\u578b\u6587\u4ef6\uff08\u4e0b\u6587\u90fd\u7528 state dict \u8868\u793a\uff09\u5728\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u5207\u5206\uff0c\u9002\u7528\u4e8e\u56e0\u4e3a\u5355\u4e2a\u8bbe\u5907\u7684\u5185\u5b58\u6216\u8005\u663e\u5b58\u7684\u9650\u5236\uff0c\u65e0\u6cd5\u5bb9\u7eb3\u5927\u6a21\u578b\u7684\u573a\u666f\u3002","title":"OneFlow \u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d"},{"location":"cookies/save_load.html#flowutilsglobal_viewto_global","text":"\u4e3a\u4e86\u66f4\u597d\u7406\u89e3\u4e0b\u6587\u4fdd\u5b58\u6a21\u578b\u548c\u52a0\u8f7d\u6a21\u578b\u4e24\u4e2a\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u9996\u5148\u5bf9 flow.utils.global_view.to_global() \u63a5\u53e3\u548c\u5176\u5b9e\u73b0\u601d\u8def\u8fdb\u884c\u5206\u6790\u3002\u533a\u522b\u4e8e Tensor.to_global() \u6a21\u5f0f\uff08\u53ef\u4ee5\u5904\u7406\u666e\u901a\u7684 Tensor\uff09\uff0c flow.utils.global_view.to_global() \u63d0\u4f9b\u4e86\u591a\u79cd\u7c7b\u578b\u7684\u8f93\u5165\u652f\u6301\uff0c\u5305\u62ec None\u3001Tensor\u3001List\u3001Tuple\u3001nn.Module \u7684 state dict \u3001nn.Graph \u7684 state dict \u548c\u51e0\u79cd\u7c7b\u578b\u7684\u4efb\u610f\u7ec4\u5408\uff0c\u5373\u5c06 List/Tuple/Dict \u4e2d\u7684\u8f93\u5165 Tensor \u8f6c\u6362\u4e3a Global Tensor\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5176\u4f20\u5165\u53c2\u6570\u4e2d\u7684 SBP \u652f\u6301\u7528\u6237\u81ea\u5b9a\u4e49\u4e00\u4e2a (x, tensor) -> sbp \u7684\u51fd\u6570\u6765\u89e3\u51b3\u4e0d\u540c Tensor \u5bf9\u5e94\u4e0d\u540c SBP \u7684\u9700\u6c42\u3002 \u5e76\u4e14\uff0c\u4e0e to_global() \u5bf9\u5e94\u7684\u8fd8\u6709 flow.utils.global_view.to_local() \u63a5\u53e3\u3002\u53ef\u4ee5\u53c2\u8003 API \u6587\u6863\u4e2d\u5173\u4e8e to_global() \u548c to_local() \u66f4 \u8be6\u7ec6\u7684\u4ecb\u7ecd \u3002\u5728 flow.utils.global_view.to_global() \u7684 \u5b9e\u73b0 \u4e2d\uff0c\u652f\u6301\u4e86\u591a\u79cd\u8f93\u5165\u7c7b\u578b\u9002\u7528\u4e8e\u73b0\u6709\u7684 Tensor.to_global() \u63a5\u53e3\u3002\u5b9e\u73b0\u7684\u6574\u4f53\u601d\u8def\u5927\u81f4\u4e3a\u68c0\u67e5\u8f93\u5165\u3001\u5e7f\u64ad\uff08\u7a7a\uff09\u7ed3\u6784\uff0c\u904d\u5386\u8282\u70b9\u3001\u8c03\u7528\u56de\u8c03\u51fd\u6570\u548c\u8fd4\u56de to_global() \u540e\u7684\u7ed3\u679c\u3002 \u518d\u56de\u5230\u6211\u4eec\u5173\u6ce8\u7684\u5730\u65b9\uff0c\u8fd9\u4e2a\u63a5\u53e3\u5982\u4f55\u505a\u5230\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\uff1f\u6bd4\u5982\u5bf9\u4e8e\u6a21\u578b\u5e76\u884c/\u6d41\u6c34\u5e76\u884c\uff0c\u6a21\u578b\u7684\u53c2\u6570\u5206\u6563\u5728\u591a\u4e2a Rank \u4e0a\uff0c\u5728\u4fdd\u5b58\u6a21\u578b\u524d\u901a\u8fc7 flow.utils.global_view.to_global() \u5c06 state dict \u91cc\u7684\u6bcf\u4e2a Tensor \u5728\u6307\u5b9a Placement \u4e0a\u8f6c\u4e3a Global Tensor\uff0cSBP \u7684\u7c7b\u578b\u4e3a flow.sbp.split \uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5728\u7279\u5b9a\u7ef4\u5ea6\u4e0a\u7684\u5207\u5206\u3002\u540c\u6837\u7684\uff0c\u6a21\u578b\u4e5f\u53ef\u4ee5\u6309 Split \u88ab\u52a0\u8f7d\u3002\u5f53\u7136\uff0cSBP \u4e5f\u53ef\u4ee5\u4e3a broadcast\uff0c\u652f\u6301\u4e0d\u540c\u7684 SBP \u548c Placement \u7ec4\u5408\u3002\u8fd9\u6837\uff0c\u8d85\u5927\u89c4\u6a21\u6a21\u578b\u5206\u7247\u5b58\u50a8\u7684\u95ee\u9898\u5c31\u88ab\u975e\u5e38\u597d\u7684\u89e3\u51b3\u4e86\u3002","title":"flow.utils.global_view.to_global() \u63a5\u53e3\u4ecb\u7ecd"},{"location":"cookies/save_load.html#_2","text":"\u5927\u81f4\u4e86\u89e3 flow.utils.global_view.to_global() \u63a5\u53e3\u540e\uff0c\u5728\u8fd9\u4e00\u90e8\u5206\u6f14\u793a\u4e86\u5982\u4f55\u5206\u7247\u4fdd\u5b58\u6a21\u578b\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a # \u81ea\u5b9a\u4e49 get_sbp \u51fd\u6570\u3002 def get_sbp ( state_dict , tensor ): if tensor is state_dict [ \"System-Train-TrainStep\" ]: return flow . sbp . broadcast if tensor is state_dict [ \"module_pipeline\" ][ \"m_stage3.linear.weight\" ]: return flow . sbp . split ( 1 ) if tensor is state_dict [ \"module_pipeline\" ][ \"m_stage3.linear.bias\" ]: return flow . sbp . broadcast return flow . sbp . split ( 0 ) model_file_state_dict = flow . utils . global_view . to_global ( state_dict , placement = model_file_placement , sbp = get_sbp , ) # \u4f7f\u7528 sbp=get_sbp \u5904\u7406\u7279\u6b8a\u7684\u952e\uff0c\u4e5f\u652f\u6301\u6307\u5b9a\u666e\u901a\u7684 SBP\u3002 rank_id = flow . env . get_rank () # \u4fdd\u5b58\u6a21\u578b\u5206\u7247\u7684\u8def\u5f84\uff0c\u4e00\u4e2a rank \u5bf9\u5e94\u4e00\u4e2a\u8def\u5f84\u3002 state_dict_dir = \"./graph_save_load_global_\" + str ( rank_id ) if flow . env . get_rank () in model_file_placement . ranks : flow . save ( flow . utils . global_view . to_local ( model_file_state_dict ), state_dict_dir , ) \u9996\u5148\uff0c\u5c06\u539f\u6a21\u578b\uff08state_dict\uff09\u8f6c\u5316\u5230\u6a21\u578b\u6587\u4ef6\u7684 Placement \u548c SBP \u4e0a\uff0cmodel_file_placement \u4e3a\u8981\u5206\u7247\u4fdd\u5b58\u6a21\u578b\u7684\u8bbe\u5907\u9635\u5217\uff0c\u4e5f\u5c31\u662f\u5c06 state dict \u6309 split(0) \u5206\u7247\u5230 model_file_placement \u4e0a\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u81ea\u5b9a\u4e49 get_sbp \u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u7528\u6237\u53ef\u4ee5\u4f20\u8fdb\u6765\u4e00\u4e2a (x, tensor) -> sbp \u7684\u51fd\u6570\u6765\u89e3\u51b3\u7279\u6b8a Tensor \u5bf9\u5e94\u4e0d\u540c SBP \u7684\u9700\u6c42\u3002\u4e3e\u4e2a\u4f8b\u5b50(\u5f53\u524d\u4f8b\u5b50\u57fa\u4e8e Graph \u6a21\u5f0f)\uff0c\u5bf9\u4e8e state_dict[\"System-Train-TrainStep\"] \u8fd9\u79cd shape \u4e3a [1] \u7684 Tensor\uff0c\u6211\u4eec\u5c31\u4e0d\u80fd\u6309 split(0) \u5206\u7247\u4e86\uff0cSBP \u53ef\u4ee5\u9009\u7528 broadcast\u3002\u800c state_dict[\"module_pipeline\"][\"m_stage3.linear.weight\"] \u53ea\u80fd\u5728\u7b2c 1 \u7ef4\u5ea6\u5207\u5206\uff0c\u5bf9\u4e8e state_dict[\"module_pipeline\"][\"m_stage3.linear.bias\"] \u8fd9\u79cd\u4e0d\u53ef\u5207\u5206\u7684\u5c0f Tensor(s)\uff0cSBP \u53ef\u4ee5\u9009\u7528 broadcast\u3002\u8fd9\u6837\u652f\u6301\u7528\u6237 DIY SBP \u7684\u5904\u7406\uff0c\u66f4\u52a0\u7075\u6d3b\u3002 \u5728\u540e\u9762\u7684\u5904\u7406\u4e2d\uff0c\u4f7f\u7528 flow.utils.global_view.to_local() \u63a5\u53e3\u5f97\u5230 model_file_state_dict \u7684\u672c\u5730\u5206\u91cf\uff0c\u5e76\u8c03\u7528 oneflow.save \u4fdd\u5b58\u6a21\u578b\u3002\u5176\u4e2d\uff0cstate_dict_dir \u662f\u5e26\u6709\u8bbe\u5907 id \u7684\u76ee\u5f55\uff0c\u9700\u8981\u533a\u5206\u4e0d\u540c\u8bbe\u5907\uff0c\u63a8\u8350\u4e00\u4e2a rank \u5bf9\u5e94\u4e00\u4e2a\u8def\u5f84\uff0c\u8def\u5f84\u540d\u7528 rank id \u7684\u65b9\u5f0f\u3002","title":"\u4fdd\u5b58\u6a21\u578b"},{"location":"cookies/save_load.html#_3","text":"\u5728\u6307\u5b9a\u8bbe\u5907\u4e0a\u5206\u7247\u4fdd\u5b58\u6a21\u578b\u540e\uff0c\u52a0\u8f7d\u6a21\u578b\u7684\u4ee3\u7801\u5982\u4e0b\uff1a if cur_rank in model_file_placement . ranks : local_state_dict = flow . load ( state_dict_dir ) else : local_state_dict = None global_state_dict = flow . utils . global_view . to_global ( local_state_dict , placement = model_file_placement , sbp = get_sbp , ) graph_model . load_state_dict ( global_state_dict ) \u9996\u5148\uff0c\u7528 load() \u65b9\u6cd5\u5728\u6bcf\u4e2a\u4fdd\u5b58\u5207\u7247\u7684\u8bbe\u5907\u4e0a\u52a0\u8f7d state dict\u3002\u5bf9\u5e94\u7684\uff0c\u9700\u8981\u628a local rank \u4e0a\u7684 state dict \u8f6c\u6362\u5230\u6a21\u578b\u6587\u4ef6\u7684 placement \u548c sbp \u4e0a\uff0c\u5f97\u5230\u4e86 global_state_dict\u3002\u8fd9\u4e00\u6b65\u548c\u4fdd\u5b58\u6a21\u578b\u5e94\u8be5\u662f\u5bf9\u5e94\u7684\uff0cSBP \u548c Placement \u4e5f\u662f\u4e00\u81f4\u7684\u3002\u6700\u540e\uff0cglobal_state_dict \u53ef\u4ee5\u6210\u529f\u52a0\u8f7d\u5230 graph_model\uff08nn.Graph\uff09 \u4e2d\u3002\u5f53\u7136\uff0cnn.Module \u548c nn.Graph \u5904\u7406\u65b9\u6cd5\u662f\u4e00\u81f4\u7684\u3002","title":"\u52a0\u8f7d\u6a21\u578b"},{"location":"cookies/save_load.html#state-dict-nnmodule","text":"\u9664\u4e86\u4ee5\u4e0a\u4e24\u4e2a\u7279\u5f81\u5916\uff0c\u5728\u5c06 state dict \u52a0\u8f7d\u5230 nn.Module \u65f6\uff0cOneFlow \u63d0\u4f9b\u4e86 SBP \u548c Placement \u7684\u81ea\u52a8\u8f6c\u6362\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u9996\u5148\u6784\u9020\u4e00\u4e2a m\uff08nn.Module\uff09\u5bf9\u8c61\uff0c\u518d\u5c06 global_state_dict \u7684 SBP \u8bbe\u7f6e\u4e3a split(0)\uff0c\u800c m \u7684 SBP \u4e3a broadcast\u3002\u540c\u65f6 placement \u4e5f\u653e\u751f\u4e86\u53d8\u5316\uff0c\u4ece placement(\"cpu\", ranks=[0, 1]) \u5230 flow.placement(\"cpu\", ranks=[0]) \u3002\u8fd9\u65f6\u7528\u6237\u4e0d\u9700\u8981\u5176\u4ed6\u64cd\u4f5c\uff0cOneFlow \u4f1a\u81ea\u52a8\u505a SBP \u548c placement \u7684\u8f6c\u6362\u8fc7\u7a0b\u3002 import oneflow as flow m = flow . nn . Linear ( 2 , 6 ) model_file_placement = flow . placement ( \"cpu\" , ranks = [ 0 , 1 ]) state_dict = { \"weight\" : flow . ones ( 3 , 2 ), \"bias\" : flow . zeros ( 3 )} global_state_dict = flow . utils . global_view . to_global ( state_dict , placement = model_file_placement , sbp = flow . sbp . split ( 0 ), ) m . to_global ( placement = flow . placement ( \"cpu\" , ranks = [ 0 ]), sbp = flow . sbp . broadcast ) m . load_state_dict ( global_state_dict ) print ( m . state_dict ()) \u4f7f\u7528 2 \u5361\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u5178\u4e2d\u7684\u5168\u5c40\u5f20\u91cf\uff0c\u5df2\u7ecf\u88ab\u52a0\u8f7d\u5230 m Module \u4e2d\u3002\u6b64\u5916\uff0c\u8f93\u51fa OrderedDict \u7684 tensor \u7684 SBP \u5df2\u7ecf\u4ece split(0) \u81ea\u52a8\u8f6c\u6362\u4e3a broadcast\uff0c'weight' \u5bf9\u5e94 tensor \u7684\u5f62\u72b6\u4e5f\u662f\u6211\u4eec\u671f\u5f85\u7684 [6, 2] \uff0c'bias' \u5f62\u72b6\u4e3a [6] \u3002 OrderedDict([('weight', tensor([[1., 1.], [1., 1.], [1., 1.], [1., 1.], [1., 1.], [1., 1.]], placement=oneflow.placement(type=\"cpu\", ranks=[0]), sbp=(oneflow.sbp.broadcast,), dtype=oneflow.float32, requires_grad=True)), ('bias', tensor([0., 0., 0., 0., 0., 0.], placement=oneflow.placement(type=\"cpu\", ranks=[0]), sbp=(oneflow.sbp.broadcast,), dtype=oneflow.float32, requires_grad=True))])","title":"\u5c06 state dict \u52a0\u8f7d\u5230 nn.Module \u4e2d"},{"location":"cookies/save_load.html#_4","text":"\u4e0a\u9762\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u5982\u4f55\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u6a21\u578b\u3002\u5728\u8fd9\u4e00\u90e8\u5206\uff0c\u63d0\u4f9b\u4e00\u4efd\u5b8c\u6574\u7684\u4ee3\u7801\u53c2\u8003\uff0c\u4e0b\u9762\u7684\u4f8b\u5b50\u4e3a 4 \u4e2a ranks \u4e0a\u7684\u6d41\u6c34\u5e76\u884c\uff0c\u6a21\u62df\u4e86\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\u8fc7\u7a0b\u3002 import os import numpy as np import oneflow.nn as nn import oneflow as flow model_tensor_placement = flow . placement ( \"cuda\" , ranks = [ 0 , 1 , 2 , 3 ]) # model_file_placement \u4e3a\u5b58\u50a8\u6a21\u578b\u5206\u7247\u7684\u8bbe\u5907\u7684 placement\uff0c\u8868\u793a\u5728 Rank 2 \u548c Rank 3 \u4e0a\u53ef\u4e3a None\u3002 model_file_placement = flow . placement ( \"cpu\" , ranks = [ 0 , 1 ]) P0 = flow . placement ( model_tensor_placement . type , ranks = [ 0 ]) P1 = flow . placement ( model_tensor_placement . type , ranks = [ 1 ]) P2 = flow . placement ( model_tensor_placement . type , ranks = [ 2 ]) P3 = flow . placement ( model_tensor_placement . type , ranks = [ 3 ]) def get_sbp ( state_dict , tensor ): if tensor is state_dict [ \"System-Train-TrainStep\" ]: return flow . sbp . broadcast if tensor is state_dict [ \"module_pipeline\" ][ \"m_stage3.linear.weight\" ]: return flow . sbp . split ( 1 ) if tensor is state_dict [ \"module_pipeline\" ][ \"m_stage3.linear.bias\" ]: return flow . sbp . broadcast return flow . sbp . split ( 0 ) class Stage0Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear = flow . nn . Linear ( 16 , 8 ) self . relu = flow . nn . ReLU () def forward ( self , x ): return self . relu ( self . linear ( x )) class Stage1Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear = flow . nn . Linear ( 8 , 4 ) self . relu = flow . nn . ReLU () def forward ( self , x ): return self . relu ( self . linear ( x )) class Stage2Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear = flow . nn . Linear ( 4 , 2 ) self . relu = flow . nn . ReLU () def forward ( self , x ): return self . relu ( self . linear ( x )) class Stage3Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear = flow . nn . Linear ( 2 , 1 ) def forward ( self , x ): return self . linear ( x ) # \u6a21\u62df 4 \u4e2a ranks \u4e0a\u7684\u6d41\u6c34\u5e76\u884c class PipelineModule ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . m_stage0 = Stage0Module () self . m_stage1 = Stage1Module () self . m_stage2 = Stage2Module () self . m_stage3 = Stage3Module () self . m_stage0 . to_global ( placement = P0 , sbp = flow . sbp . broadcast ) self . m_stage1 . to_global ( placement = P1 , sbp = flow . sbp . broadcast ) self . m_stage2 . to_global ( placement = P2 , sbp = flow . sbp . broadcast ) self . m_stage3 . to_global ( placement = P3 , sbp = flow . sbp . broadcast ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = flow . sbp . broadcast ) out_stage1 = self . m_stage1 ( in_stage1 ) in_stage2 = out_stage1 . to_global ( placement = P2 , sbp = flow . sbp . broadcast ) out_stage2 = self . m_stage2 ( in_stage2 ) in_stage3 = out_stage2 . to_global ( placement = P3 , sbp = flow . sbp . broadcast ) out_stage3 = self . m_stage3 ( in_stage3 ) return out_stage3 class PipelineGraph ( flow . nn . Graph ): def __init__ ( self , module_pipeline ): super () . __init__ () self . module_pipeline = module_pipeline self . module_pipeline . m_stage0 . to ( nn . graph . GraphModule ) . set_stage ( 0 , P0 ) self . module_pipeline . m_stage1 . to ( nn . graph . GraphModule ) . set_stage ( 1 , P1 ) self . module_pipeline . m_stage2 . to ( nn . graph . GraphModule ) . set_stage ( 2 , P2 ) self . module_pipeline . m_stage3 . to ( nn . graph . GraphModule ) . set_stage ( 3 , P3 ) self . config . set_gradient_accumulation_steps ( 2 ) self . add_optimizer ( flow . optim . SGD ( self . module_pipeline . parameters (), lr = 0.001 ) ) def build ( self , x ): out = self . module_pipeline ( x ) out = out . sum () out . backward () return out def train_with_graph ( call_cnt = 0 , state_dict_dir = None , last_state_dict = None ): # \u5f62\u72b6\u4e3a [2, 16] \u7684\u56fa\u5b9a\u8f93\u5165\u5f20\u91cf x = flow . tensor ( [ [ 0.4286 , 0.7402 , 0.4161 , 0.6103 , 0.7394 , 1.1330 , - 0.2311 , - 0.1013 , 0.8537 , 0.9757 , - 0.9842 , 0.3839 , - 0.5551 , - 0.8832 , 0.7820 , 0.7421 , ], [ - 0.1581 , - 1.0319 , 1.8430 , 0.3576 , 0.7288 , - 0.6912 , 0.9966 , 1.0840 , - 1.1760 , 1.5683 , - 0.2098 , - 1.6439 , - 2.7049 , 0.1949 , 1.6377 , 0.0745 , ], ], dtype = flow . float32 , placement = P0 , sbp = flow . sbp . broadcast , ) module_pipeline = PipelineModule () graph_model = PipelineGraph ( module_pipeline ) cur_rank = flow . env . get_rank () if call_cnt == 1 : if cur_rank in model_file_placement . ranks : local_state_dict = flow . load ( state_dict_dir ) else : local_state_dict = None # \u4f7f\u7528 sbp=get_sbp \u5904\u7406\u7279\u6b8a\u7684\u952e global_state_dict = flow . utils . global_view . to_global ( local_state_dict , placement = model_file_placement , sbp = get_sbp , ) graph_model . load_state_dict ( global_state_dict ) graph_model ( x ) state_dict = graph_model . state_dict () if call_cnt == 0 : model_file_state_dict = flow . utils . global_view . to_global ( state_dict , placement = model_file_placement , sbp = get_sbp , ) if flow . env . get_rank () in model_file_placement . ranks : flow . save ( flow . utils . global_view . to_local ( model_file_state_dict ), state_dict_dir , ) if __name__ == \"__main__\" : rank_id = flow . env . get_rank () # \u4fdd\u5b58\u8def\u5f84\uff0c\u4e00\u4e2a rank \u5bf9\u5e94\u4e00\u4e2a\u8def\u5f84\u3002 state_dict_dir = \"./graph_save_load_global_\" + str ( rank_id ) # \u4fdd\u5b58\u6a21\u578b train_with_graph ( 0 , state_dict_dir ) # \u52a0\u8f7d\u6a21\u578b train_with_graph ( 1 , state_dict_dir )","title":"\u4e00\u4e2a\u5b8c\u6574\u793a\u4f8b"},{"location":"cookies/save_load.html#_5","text":"\u4e0a\u6587\u4ecb\u7ecd\u4e86\uff1a \u5927\u89c4\u6a21\u6a21\u578b\u5206\u7247\u5b58\u50a8\u7684\u5fc5\u8981\u6027\uff1b OneFlow \u63d0\u4f9b\u7684\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u63a5\u53e3\u4ecb\u7ecd\uff1b \u4e00\u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u4f8b\u5b50\u6f14\u793a\u5982\u4f55\u5b8c\u6210\u5927\u6a21\u578b\u5206\u7247\u5b58\u50a8\uff1b \u672c\u6587\u4ece\u7b80\u5355\u4ecb\u7ecd\u5927\u89c4\u6a21\u6a21\u578b\u5206\u7247\u5b58\u50a8\u5f00\u59cb\uff0c\u6700\u7ec8\u6f14\u793a\u4e86 OneFlow \u7684\u5982\u4f55\u505a\u6a21\u578b\u5206\u7247\u4fdd\u5b58\u548c\u52a0\u8f7d\u7684\u8fc7\u7a0b\uff0c\u540e\u7eed OneFlow \u7684\u5927\u6a21\u578b\u5206\u7247\u5b58\u50a8\u7684\u63a5\u53e3\u8fd8\u4f1a\u4e0d\u65ad\u5b8c\u5584\u3002","title":"\u7ed3\u8bed"},{"location":"cookies/serving.html","text":"\u6a21\u578b\u90e8\u7f72 \u00b6 \u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u9700\u8981\u7ecf\u8fc7\u201c\u6a21\u578b\u90e8\u7f72\u201d\u624d\u80fd\u591f\u96c6\u6210\u5230\u4ea7\u54c1\u4e2d\u5e76\u4e0a\u7ebf\u3002\u56e0\u4e3a\u4ea7\u54c1\u4e0a\u7ebf\u65f6\u7684\u8f6f\u786c\u4ef6\u73af\u5883\u3001\u6a21\u578b\u4e0e\u4e1a\u52a1\u6a21\u5757\u7684\u5bf9\u63a5\u65b9\u5f0f\u90fd\u53ef\u80fd\u53d8\u5316\uff0c\u6240\u4ee5\u90e8\u7f72\u7684\u89e3\u51b3\u65b9\u6848\u4e5f\u591a\u79cd\u591a\u6837\u3002\u6bd4\u5982\u67d0\u4e9b\u65b9\u6848\u4f1a\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8f6c\u4e3a\u5176\u4ed6\u683c\u5f0f\uff08\u5982 ONNX\uff09\u540e\uff0c\u518d\u4f9d\u8d56\u7279\u5b9a\u7684 runtime \u90e8\u7f72\uff1b\u67d0\u4e9b\u65b9\u6848\u4f1a\u76f4\u63a5\u4f7f\u7528 C/C++ \u7b49\u80fd\u751f\u6210 native code \u7684\u8bed\u8a00\u91cd\u65b0\u5b9e\u73b0\u6a21\u578b\uff0c\u5e76\u5f15\u5165\u6c47\u7f16\u7ea7\u4f18\u5316\uff0c\u4ee5\u8ffd\u6c42\u786c\u4ef6\u9002\u914d\u6216\u90e8\u7f72\u6027\u80fd\u3002 OneFlow \u901a\u8fc7\u5bf9\u63a5\u4e86 Triton Inference Server \uff0c\u4e3a\u6a21\u578b\u63d0\u4f9b\u670d\u52a1\u3002 OneFlow \u7528\u6237\u8bad\u7ec3\u597d\u6a21\u578b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 Triton \u90e8\u7f72\u6a21\u578b\uff0c\u5e76\u501f\u52a9 Triton \u4e30\u5bcc\u7684\u7279\u6027\uff0c\u5982 Dynamic batching\u3001Model Pipelines\u3001HTTP/gRPC \u63a5\u53e3\u7b49\uff0c\u5e76\u5feb\u901f\u9ad8\u6548\u5730\u96c6\u6210\u5230\u7ebf\u4e0a\u4ea7\u54c1\u4e2d\u3002 \u672c\u6587\u5185\u5bb9\u7ec4\u7ec7\u5982\u4e0b\uff1a OneFlow \u90e8\u7f72\u5feb\u901f\u4e0a\u624b OneFlow Serving \u67b6\u6784\u4ecb\u7ecd OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u6d41\u7a0b\u89e3\u6790 OneFlow \u90e8\u7f72\u5feb\u901f\u4e0a\u624b \u00b6 OneFlow Cloud \u4e0a\u51c6\u5907\u4e86\u4e00\u4e2a OneFlow Serving: Neural Style Transfer \u9879\u76ee\uff0c\u53c2\u7167\u9879\u76ee\u8bf4\u660e\u7528\u6237\u53ef\u4ee5\u4e00\u952e\u90e8\u7f72\u9879\u76ee\uff0c\u5e76\u4e14\u67e5\u770b\u9879\u76ee\u8fd0\u884c\u6548\u679c\u3002 \u5206\u6790\u9879\u76ee\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5173\u952e\u5904\uff1a run_cloud.sh \u4e2d\u542f\u52a8\u4e86 Triton \u670d\u52a1\u5668\u4e0e WEB \u5e94\u7528\u670d\u52a1\u5668\uff1a /opt/tritonserver/bin/tritonserver --model-store $( pwd ) /model_repo > 1 .txt & python3 server.py server.py \u4e2d\u53ea\u662f\u7b80\u5355\u548c\u666e\u901a\u7684 URL \u8def\u7531\uff0c\u771f\u6b63\u505a\u63a8\u7406\u5de5\u4f5c\u662f\u7531 infer.py \u4e2d\u7684 stylize \u5b8c\u6210\u7684\u3002 stylize \u51fd\u6570\u5185\u90e8\uff0c\u901a\u8fc7 HTTP \u4e0e Triton \u670d\u52a1\u5668\u4ea4\u4e92\u5f97\u5230\u63a8\u7406\u7ed3\u679c\u3002 def stylize ( content_path , output_path , style = 'udnie' ): triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) ... inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) ... outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) ... \u9884\u8bad\u7ec3\u6a21\u578b\u653e\u7f6e\u5728 model_repo \u4e0b\uff0c\u5b83\u6309\u7167 Triton \u7684\u7ea6\u5b9a\u7ec4\u7ec7\u683c\u5f0f \u8fd9\u4e2a\u7b80\u5355\u7684\u5728\u7ebf\u793a\u4f8b\u5c55\u793a\u4e86 OneFlow \u6a21\u578b\u5982\u4f55\u901a\u8fc7 Triton \u90e8\u7f72\uff0c\u540c\u65f6\u4e5f\u5c55\u793a\u4e1a\u52a1\u6a21\u5757\u5982\u4f55\u4e0e Triton \u670d\u52a1\u7aef\u4ea4\u4e92\u83b7\u53d6\u63a8\u7406\u7ed3\u679c\u3002 \u5982\u679c\u4f60\u60f3\u5728\u672c\u5730\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d demo.zip \uff0c\u89e3\u538b\u540e\u8fd0\u884c\u5176\u4e2d\u7684 run.sh \u6587\u4ef6\u3002 bash run.sh \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u7684\u8be6\u7ec6\u6d41\u7a0b\u3002 OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u6d41\u7a0b\u89e3\u6790 \u00b6 \u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e0b\u56fe\u603b\u4f53\u4e86\u89e3 OneFlow \u4e0e Triton \u7684\u5173\u7cfb\u3002 \u4ece\u4e0a\u56fe\u53ef\u4ee5\u77e5\u6653\uff0cTriton \u5904\u4e8e\u8054\u63a5\u5ba2\u6237\u7aef\u4e0e OneFlow \u7684\u4f4d\u7f6e\uff1aTriton \u63d0\u4f9b\u4e86 HTTP\u3001gRPC \u4ee5\u53ca C \u63a5\u53e3\uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u7075\u6d3b\u5730\u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\u5e76\u5f97\u5230\u7ed3\u679c\u3002 \u5728 Triton \u7684\u67b6\u6784\u4e2d\uff0cOneFlow \u4e0e Model Repository \u4e00\u8d77\uff0c\u4e3a Triton \u63d0\u4f9b\u540e\u7aef\u63a8\u7406\u80fd\u529b\u3002Triton \u5bf9 Model Repository \u7684\u7ec4\u7ec7\u683c\u5f0f\u6709\u9884\u8bbe\u7684\u8981\u6c42\uff0cOneFlow \u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u63a5\u53e3\uff0c\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5bfc\u51fa\u4e3a Triton \u8981\u6c42\u7684\u7ec4\u7ec7\u683c\u5f0f\u3002 \u6b64\u5916\uff0cTriton \u5185\u90e8\u8fd8\u63d0\u4f9b\u4e86\u4efb\u52a1\u8c03\u5ea6\u7b49\u7684\u5185\u7f6e\u529f\u80fd\uff0c\u4f7f\u5f97\u6027\u80fd\u6709\u4fdd\u8bc1\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 Triton \u7684\u5b98\u65b9\u6587\u6863 \u3002 \u4e86\u89e3\u8fd9\u4e9b\u57fa\u672c\u6982\u5ff5\u540e\uff0c\u8ba9\u6211\u4eec\u8be6\u7ec6\u89e3\u6790 OneFlow \u4ece\u6a21\u578b\u8bad\u7ec3\u5230\u90e8\u7f72\u7684\u6d41\u7a0b\uff1a \u6a21\u578b\u4fdd\u5b58 \u6a21\u578b\u914d\u7f6e \u542f\u52a8\u670d\u52a1 \u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42 \u6a21\u578b\u4fdd\u5b58 \u00b6 \u5982\u679c\u662f Graph \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 oneflow.save \u5bfc\u51fa\u4e3a\u90e8\u7f72\u6240\u9700\u683c\u5f0f\uff1b\u5982\u679c\u662f Eager \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff0c\u7b80\u5355\u8f6c\u6362\u540e\uff0c\u53ef\u4ee5\u5bfc\u51fa\u4e3a\u6240\u9700\u683c\u5f0f\u3002\u5177\u4f53\u64cd\u4f5c\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605 Graph \u4e0e\u90e8\u7f72 \u76f8\u5173\u5185\u5bb9\u3002 \u6a21\u578b\u914d\u7f6e \u00b6 Triton \u5bf9\u6a21\u578b\u7684\u76ee\u5f55\u7ec4\u7ec7\u7ed3\u6784\u6709\u4e00\u5b9a\u8981\u6c42\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167 Triton \u7684\u7ea6\u5b9a \u7ec4\u7ec7\u6a21\u578b\u76ee\u5f55\u7ed3\u6784\uff0c\u5e76\u4e14\u7f16\u5199\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\u3002 \u76ee\u5f55\u7ec4\u7ec7\u7ed3\u6784 \u5728\u672c\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6a21\u578b\u6587\u4ef6\u653e\u7f6e\u5728 model_repository \u76ee\u5f55\u4e0b\uff0c\u5b83\u7684\u7ec4\u7ec7\u7ed3\u6784\u7b26\u5408 Triton \u7684\u7ea6\u5b9a\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5176\u7ec4\u7ec7\u65b9\u5f0f\u5e76\u89e3\u91ca\uff1a $ tree -L 3 model_repository/ model_repository/ \u2514\u2500\u2500 fast_neural_style \u251c\u2500\u2500 1 \u2502 \u2514\u2500\u2500 model \u2514\u2500\u2500 config.pbtxt model_repository \u662f\u6a21\u578b\u4ed3\u5e93\u6839\u76ee\u5f55\uff0c\u5728 triton \u542f\u52a8\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 --model-repository \u9009\u9879\u6307\u5b9a\u6a21\u578b\u4ed3\u5e93\u6839\u76ee\u5f55 fast_neural_style \u662f\u6a21\u578b\u4ed3\u5e93\u4e2d\u7684\u4e00\u4e2a\u6a21\u578b\u3002\u4e00\u4e2a\u6a21\u578b\u4ed3\u5e93\u4e0b\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u6a21\u578b\uff0c\u6bcf\u4e2a\u4e00\u7ea7\u5b50\u76ee\u5f55\u5c31\u662f\u4e00\u4e2a\u6a21\u578b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u51c6\u5907\u4e86 fast_neural_style \u8fd9\u4e00\u4e2a\u6a21\u578b \u5176\u4e2d\u7684 1/model \u76ee\u5f55\uff0c\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u901a\u8fc7 flow.save(graph, \"1/model\") \u4fdd\u5b58\u7684\u6a21\u578b\u3002\u5176\u4e2d\u7684 1 \u4e3a\u7248\u672c\u53f7\uff0cTriton \u4e2d\u7ea6\u5b9a\uff0c\u4e00\u4e2a\u6a21\u578b\u76ee\u5f55\u4e0b\u53ef\u4ee5\u6709\u591a\u4e2a\u6a21\u578b\u7248\u672c\uff0c\u6a21\u578b\u7248\u672c\u7684\u6587\u4ef6\u5939\u540d\u5fc5\u987b\u4e3a \u7eaf\u6570\u5b57 \u3002\u5728\u6a21\u578b\u7248\u672c\u6587\u4ef6\u5939\u4e0b\uff0c\u9700\u8981\u653e\u7f6e\u540d\u4e3a model \u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u4fdd\u5b58\u6709\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe config.pbtxt \u662f\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u7528\u4e8e\u914d\u7f6e\u8be5\u6a21\u578b\u4ed3\u5e93\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u8be6\u7ec6\u4ecb\u7ecd \u6a21\u578b\u4ed3\u5e93\u914d\u7f6e config.pbtxt \uff0c\u5b83\u662f\u4e00\u4e2a protobuf \u6587\u672c\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u901a\u8fc7\u7f16\u5199\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u914d\u7f6e\u6a21\u578b\u670d\u52a1\u7684\u4fe1\u606f\uff0c\u5982\u6307\u5b9a\u786c\u4ef6\u3001\u8f93\u5165\u8f93\u51fa\u7b49\u4fe1\u606f\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u5185\u5bb9\u5982\u4e0b\uff1a name: \"fast_neural_style\" backend: \"oneflow\" max_batch_size: 1 input [ { name: \"INPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] output [ { name: \"OUTPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] instance_group [ { count: 1 kind: KIND_GPU gpus: [ 0 ] } ] \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f9d\u6b21\u89e3\u91ca\u5176\u4e2d\u7684\u914d\u7f6e\u9879\u3002 name : \"fast_neural_style\" name \u5b57\u6bb5\u7528\u4e8e\u6307\u5b9a\u6a21\u578b\u3002\u8fd9\u884c\u8bf4\u660e\u4f7f\u7528 fast_neural_style \u8fd9\u4e2a\u6a21\u578b\uff0c\u6a21\u578b\u540d\u5b57\u9700\u8981\u548c\u4e0a\u6587\u4ecb\u7ecd\u7684\u6a21\u578b\u6587\u4ef6\u5939\u540d\u4e00\u81f4\u3002 backend: \"oneflow\" backend \u7528\u4e8e\u6307\u5b9a Triton \u540e\u7aef\uff0c\u7528 OneFlow \u90e8\u7f72\uff0c\u6b64\u5b57\u6bb5\u5fc5\u987b\u6307\u5b9a\u4e3a oneflow \u3002 \u63a5\u7740\uff0c\u9700\u8981\u5b9a\u4e49\u6a21\u578b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5f62\u72b6\u3002\u4e0b\u9762\u7684\u8f93\u5165\u8f93\u51fa\u540d\u5b57\u5b57\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167\u6a21\u578b\u7684\u8f93\u5165\u8f93\u51fa\u987a\u5e8f\u586b\u5199\uff0c\u5e76\u4e14\u547d\u540d\u683c\u5f0f\u662f INPUT_<index> \u548c OUTPUT_<index> \uff0c\u7528 <index> \u8868\u793a\u6a21\u578b\u8f93\u5165\u7684\u987a\u5e8f\uff0c\u9ed8\u8ba4\u4ece 0 \u5f00\u59cb\u3002 data_type \u5b57\u6bb5\u5b9a\u4e49\u4e86\u6570\u636e\u7c7b\u578b\uff0c dims \u5b57\u6bb5\u5b9a\u4e49\u4e86\u5f20\u91cf\u7684\u5f62\u72b6\u3002 input [ { name: \"INPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] output [ { name: \"OUTPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] \u4ee5\u4e0a\u7684\u6a21\u578b\u540d\u5b57\u3001\u63a8\u7406\u540e\u7aef\u3001\u8f93\u5165\u8f93\u51fa\u914d\u7f6e\u662f\u6700\u57fa\u7840\u7684\u914d\u7f6e\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5df2\u7ecf\u53ef\u4ee5\u5f00\u59cb\u5de5\u4f5c\u3002 \u4e4b\u540e\u7684 instance_group \u7528\u4e8e\u914d\u7f6e\u786c\u4ef6\u4fe1\u606f\u3002 instance_group [ { count: 1 kind: KIND_GPU gpus: [ 0 ] } ] \u5b83\u610f\u5473\u7740\u6211\u4eec\u5b9e\u4f8b\u5316 1 \u4e2a\u6a21\u578b\uff0c\u5e76\u5c06\u5b83\u653e\u7f6e\u5728 0 \u53f7 GPU \u8bbe\u5907\u4e0a\u3002\u66f4\u591a\u7075\u6d3b\u8c03\u914d\u7684\u9009\u9879\uff0c\u8bf7\u53c2\u8003 Triton Inference Server \u7684\u6a21\u578b\u914d\u7f6e\u6587\u6863 \u3002 \u542f\u52a8\u670d\u52a1 \u00b6 OneFlow Serving \u63d0\u4f9b\u4e86 Docker \u955c\u50cf\uff0c\u4f7f\u7528 Docker \u542f\u52a8\u6a21\u578b\u670d\u52a1\u3002\u6309\u7167\u4e0a\u9762\u7684\u76ee\u5f55\u7ed3\u6784\u7ec4\u7ec7\u597d\u6587\u4ef6\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6620\u5c04\u8def\u5f84\u5230\u5bb9\u5668\u4e2d\uff0c\u542f\u52a8\u670d\u52a1\u3002 docker run --rm --runtime=nvidia --network=host -v$(pwd)/model_repository:/models \\ oneflowinc/oneflow-serving /opt/tritonserver/bin/tritonserver --model-store /models \u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u53ef\u4ee5\u68c0\u67e5\u6a21\u578b\u670d\u52a1\u662f\u5426\u542f\u52a8\u3002\u770b\u5230 http 200 \u72b6\u6001\u7801\uff0c\u90a3\u4e48\u6a21\u578b\u670d\u52a1\u5df2\u7ecf\u542f\u52a8\u3002 curl -v localhost:8000/v2/health/ready \u5411 Triton Server \u53d1\u9001\u8bf7\u6c42 \u00b6 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 tritonclient \u4e0e Triton Server \u4ea4\u4e92\u3002\u9700\u8981\u5148\u5b89\u88c5\u4e00\u4e2a python \u5305\u3002 pip3 install tritonclient[all] \u5b9e\u9645\u4e0a\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7 HTTP\u3001gRPC \u6216\u8005 C API \u7b49\u591a\u79cd\u65b9\u5f0f \u4e0e Triton Server \u4ea4\u4e92\uff0c\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u53c2\u9605\u4ee5\u4e0a\u6587\u6863\u3002 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u662f\u56fe\u7247\u8fdb\u884c\u98ce\u683c\u5316\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u53ef\u4ee5\u5c06\u547d\u4ee4\u884c\u4f20\u9012\u6765\u7684\u56fe\u7247\u6587\u4ef6\uff0c\u8fdb\u884c\u98ce\u683c\u5316\u3002\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u5728 \u4e91\u5e73\u53f0 \u4e0a\u67e5\u770b\uff0c\u6216\u8005\u4e0b\u8f7d demo.zip #... import tritonclient.http as httpclient if __name__ == '__main__' : parser = argparse . ArgumentParser () parser . add_argument ( '--image' , required = True , help = 'the image to transfer style' ) FLAGS = parser . parse_args () triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) image , w , h = load_image ( FLAGS . image , 256 , 256 ) inputs = [] inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) inputs [ 0 ] . set_data_from_numpy ( image , binary_data = True ) outputs = [] outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) results = triton_client . infer ( 'fast_neural_style' , inputs = inputs , outputs = outputs ) output0_data = results . as_numpy ( 'OUTPUT_0' ) image = recover_image ( output0_data , h , w ) cv2 . imwrite ( 'result.jpg' , image ) \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a triton_client \uff0c\u5176\u4e2d\u7684 127.0.0.1:8000 \u662f Triton \u670d\u52a1\u7684\u9ed8\u8ba4\u7aef\u53e3 triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) \u7136\u540e\uff0c\u901a\u8fc7 triton_client.infer \u63a5\u53e3\uff0c\u53ef\u4ee5\u5411 Triton Server \u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\u5e76\u83b7\u53d6\u8f93\u51fa\u3002 \u4e00\u6761 Tirton \u63a8\u7406\u8bf7\u6c42\uff0c\u9700\u8981\u6307\u5b9a\u6a21\u578b\u3001\u8f93\u5165\u548c\u8f93\u51fa\u90e8\u5206\u3002 \u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e3b\u8981\u662f\u5728\u6784\u9020\u8f93\u5165\u3001\u8f93\u51fa\u5bf9\u8c61\uff0c\u5b83\u4eec\u7684\u914d\u7f6e\u4e0e\u5148\u524d\u5728 config.pbtxt \u4e2d\u7684\u914d\u7f6e\u4e00\u81f4\u3002\u5e76\u6700\u7ec8\u901a\u8fc7 triton_client.infer('fast_neural_style', inputs=inputs, outputs=outputs) \u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\uff0c\u5176\u4e2d\u7684 fast_neural_style \u4e5f\u4e0e config.pbtxt \u4e2d\u7684\u914d\u7f6e\u4e00\u81f4\u3002 inputs = [] inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) inputs [ 0 ] . set_data_from_numpy ( image , binary_data = True ) outputs = [] outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) results = triton_client . infer ( 'fast_neural_style' , inputs = inputs , outputs = outputs ) \u83b7\u53d6\u5230\u7684\u63a8\u7406\u7ed3\u679c\uff0c\u8f6c\u6362\u683c\u5f0f\u5e76\u4fdd\u5b58\u4e3a\u8f93\u51fa\u56fe\u7247\uff1a output0_data = results . as_numpy ( 'OUTPUT_0' ) image = recover_image ( output0_data , h , w ) cv2 . imwrite ( 'result.jpg' , image ) \u6211\u4eec\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5bf9\u6307\u5b9a\u7684\u56fe\u7247\u8fdb\u884c\u63a8\u7406\u98ce\u683c\u5316\uff0c\u7ed3\u679c\u5c06\u4f1a\u4fdd\u5b58\u5728 result.jpg \u4e0b\u9762\u3002 $ curl -o cat.jpg https://images.pexels.com/photos/156934/pexels-photo-156934.jpeg $ python infer.py --image cat.jpg","title":"\u6a21\u578b\u90e8\u7f72"},{"location":"cookies/serving.html#_1","text":"\u6a21\u578b\u8bad\u7ec3\u597d\u540e\uff0c\u9700\u8981\u7ecf\u8fc7\u201c\u6a21\u578b\u90e8\u7f72\u201d\u624d\u80fd\u591f\u96c6\u6210\u5230\u4ea7\u54c1\u4e2d\u5e76\u4e0a\u7ebf\u3002\u56e0\u4e3a\u4ea7\u54c1\u4e0a\u7ebf\u65f6\u7684\u8f6f\u786c\u4ef6\u73af\u5883\u3001\u6a21\u578b\u4e0e\u4e1a\u52a1\u6a21\u5757\u7684\u5bf9\u63a5\u65b9\u5f0f\u90fd\u53ef\u80fd\u53d8\u5316\uff0c\u6240\u4ee5\u90e8\u7f72\u7684\u89e3\u51b3\u65b9\u6848\u4e5f\u591a\u79cd\u591a\u6837\u3002\u6bd4\u5982\u67d0\u4e9b\u65b9\u6848\u4f1a\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8f6c\u4e3a\u5176\u4ed6\u683c\u5f0f\uff08\u5982 ONNX\uff09\u540e\uff0c\u518d\u4f9d\u8d56\u7279\u5b9a\u7684 runtime \u90e8\u7f72\uff1b\u67d0\u4e9b\u65b9\u6848\u4f1a\u76f4\u63a5\u4f7f\u7528 C/C++ \u7b49\u80fd\u751f\u6210 native code \u7684\u8bed\u8a00\u91cd\u65b0\u5b9e\u73b0\u6a21\u578b\uff0c\u5e76\u5f15\u5165\u6c47\u7f16\u7ea7\u4f18\u5316\uff0c\u4ee5\u8ffd\u6c42\u786c\u4ef6\u9002\u914d\u6216\u90e8\u7f72\u6027\u80fd\u3002 OneFlow \u901a\u8fc7\u5bf9\u63a5\u4e86 Triton Inference Server \uff0c\u4e3a\u6a21\u578b\u63d0\u4f9b\u670d\u52a1\u3002 OneFlow \u7528\u6237\u8bad\u7ec3\u597d\u6a21\u578b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 Triton \u90e8\u7f72\u6a21\u578b\uff0c\u5e76\u501f\u52a9 Triton \u4e30\u5bcc\u7684\u7279\u6027\uff0c\u5982 Dynamic batching\u3001Model Pipelines\u3001HTTP/gRPC \u63a5\u53e3\u7b49\uff0c\u5e76\u5feb\u901f\u9ad8\u6548\u5730\u96c6\u6210\u5230\u7ebf\u4e0a\u4ea7\u54c1\u4e2d\u3002 \u672c\u6587\u5185\u5bb9\u7ec4\u7ec7\u5982\u4e0b\uff1a OneFlow \u90e8\u7f72\u5feb\u901f\u4e0a\u624b OneFlow Serving \u67b6\u6784\u4ecb\u7ecd OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u6d41\u7a0b\u89e3\u6790","title":"\u6a21\u578b\u90e8\u7f72"},{"location":"cookies/serving.html#oneflow","text":"OneFlow Cloud \u4e0a\u51c6\u5907\u4e86\u4e00\u4e2a OneFlow Serving: Neural Style Transfer \u9879\u76ee\uff0c\u53c2\u7167\u9879\u76ee\u8bf4\u660e\u7528\u6237\u53ef\u4ee5\u4e00\u952e\u90e8\u7f72\u9879\u76ee\uff0c\u5e76\u4e14\u67e5\u770b\u9879\u76ee\u8fd0\u884c\u6548\u679c\u3002 \u5206\u6790\u9879\u76ee\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5173\u952e\u5904\uff1a run_cloud.sh \u4e2d\u542f\u52a8\u4e86 Triton \u670d\u52a1\u5668\u4e0e WEB \u5e94\u7528\u670d\u52a1\u5668\uff1a /opt/tritonserver/bin/tritonserver --model-store $( pwd ) /model_repo > 1 .txt & python3 server.py server.py \u4e2d\u53ea\u662f\u7b80\u5355\u548c\u666e\u901a\u7684 URL \u8def\u7531\uff0c\u771f\u6b63\u505a\u63a8\u7406\u5de5\u4f5c\u662f\u7531 infer.py \u4e2d\u7684 stylize \u5b8c\u6210\u7684\u3002 stylize \u51fd\u6570\u5185\u90e8\uff0c\u901a\u8fc7 HTTP \u4e0e Triton \u670d\u52a1\u5668\u4ea4\u4e92\u5f97\u5230\u63a8\u7406\u7ed3\u679c\u3002 def stylize ( content_path , output_path , style = 'udnie' ): triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) ... inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) ... outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) ... \u9884\u8bad\u7ec3\u6a21\u578b\u653e\u7f6e\u5728 model_repo \u4e0b\uff0c\u5b83\u6309\u7167 Triton \u7684\u7ea6\u5b9a\u7ec4\u7ec7\u683c\u5f0f \u8fd9\u4e2a\u7b80\u5355\u7684\u5728\u7ebf\u793a\u4f8b\u5c55\u793a\u4e86 OneFlow \u6a21\u578b\u5982\u4f55\u901a\u8fc7 Triton \u90e8\u7f72\uff0c\u540c\u65f6\u4e5f\u5c55\u793a\u4e1a\u52a1\u6a21\u5757\u5982\u4f55\u4e0e Triton \u670d\u52a1\u7aef\u4ea4\u4e92\u83b7\u53d6\u63a8\u7406\u7ed3\u679c\u3002 \u5982\u679c\u4f60\u60f3\u5728\u672c\u5730\u8fd0\u884c\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4e5f\u53ef\u4ee5\u4e0b\u8f7d demo.zip \uff0c\u89e3\u538b\u540e\u8fd0\u884c\u5176\u4e2d\u7684 run.sh \u6587\u4ef6\u3002 bash run.sh \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u7684\u8be6\u7ec6\u6d41\u7a0b\u3002","title":"OneFlow \u90e8\u7f72\u5feb\u901f\u4e0a\u624b"},{"location":"cookies/serving.html#oneflow_1","text":"\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e0b\u56fe\u603b\u4f53\u4e86\u89e3 OneFlow \u4e0e Triton \u7684\u5173\u7cfb\u3002 \u4ece\u4e0a\u56fe\u53ef\u4ee5\u77e5\u6653\uff0cTriton \u5904\u4e8e\u8054\u63a5\u5ba2\u6237\u7aef\u4e0e OneFlow \u7684\u4f4d\u7f6e\uff1aTriton \u63d0\u4f9b\u4e86 HTTP\u3001gRPC \u4ee5\u53ca C \u63a5\u53e3\uff0c\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u7075\u6d3b\u5730\u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\u5e76\u5f97\u5230\u7ed3\u679c\u3002 \u5728 Triton \u7684\u67b6\u6784\u4e2d\uff0cOneFlow \u4e0e Model Repository \u4e00\u8d77\uff0c\u4e3a Triton \u63d0\u4f9b\u540e\u7aef\u63a8\u7406\u80fd\u529b\u3002Triton \u5bf9 Model Repository \u7684\u7ec4\u7ec7\u683c\u5f0f\u6709\u9884\u8bbe\u7684\u8981\u6c42\uff0cOneFlow \u63d0\u4f9b\u4e86\u5bf9\u5e94\u7684\u63a5\u53e3\uff0c\u5c06\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u5bfc\u51fa\u4e3a Triton \u8981\u6c42\u7684\u7ec4\u7ec7\u683c\u5f0f\u3002 \u6b64\u5916\uff0cTriton \u5185\u90e8\u8fd8\u63d0\u4f9b\u4e86\u4efb\u52a1\u8c03\u5ea6\u7b49\u7684\u5185\u7f6e\u529f\u80fd\uff0c\u4f7f\u5f97\u6027\u80fd\u6709\u4fdd\u8bc1\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 Triton \u7684\u5b98\u65b9\u6587\u6863 \u3002 \u4e86\u89e3\u8fd9\u4e9b\u57fa\u672c\u6982\u5ff5\u540e\uff0c\u8ba9\u6211\u4eec\u8be6\u7ec6\u89e3\u6790 OneFlow \u4ece\u6a21\u578b\u8bad\u7ec3\u5230\u90e8\u7f72\u7684\u6d41\u7a0b\uff1a \u6a21\u578b\u4fdd\u5b58 \u6a21\u578b\u914d\u7f6e \u542f\u52a8\u670d\u52a1 \u5ba2\u6237\u7aef\u53d1\u9001\u8bf7\u6c42","title":"OneFlow \u4ece\u8bad\u7ec3\u5230\u90e8\u7f72\u6d41\u7a0b\u89e3\u6790"},{"location":"cookies/serving.html#_2","text":"\u5982\u679c\u662f Graph \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 oneflow.save \u5bfc\u51fa\u4e3a\u90e8\u7f72\u6240\u9700\u683c\u5f0f\uff1b\u5982\u679c\u662f Eager \u6a21\u5f0f\u4e0b\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\uff0c\u7b80\u5355\u8f6c\u6362\u540e\uff0c\u53ef\u4ee5\u5bfc\u51fa\u4e3a\u6240\u9700\u683c\u5f0f\u3002\u5177\u4f53\u64cd\u4f5c\u65b9\u6cd5\uff0c\u8bf7\u53c2\u9605 Graph \u4e0e\u90e8\u7f72 \u76f8\u5173\u5185\u5bb9\u3002","title":"\u6a21\u578b\u4fdd\u5b58"},{"location":"cookies/serving.html#_3","text":"Triton \u5bf9\u6a21\u578b\u7684\u76ee\u5f55\u7ec4\u7ec7\u7ed3\u6784\u6709\u4e00\u5b9a\u8981\u6c42\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167 Triton \u7684\u7ea6\u5b9a \u7ec4\u7ec7\u6a21\u578b\u76ee\u5f55\u7ed3\u6784\uff0c\u5e76\u4e14\u7f16\u5199\u76f8\u5173\u914d\u7f6e\u6587\u4ef6\u3002 \u76ee\u5f55\u7ec4\u7ec7\u7ed3\u6784 \u5728\u672c\u793a\u4f8b\u7a0b\u5e8f\u4e2d\uff0c\u6a21\u578b\u6587\u4ef6\u653e\u7f6e\u5728 model_repository \u76ee\u5f55\u4e0b\uff0c\u5b83\u7684\u7ec4\u7ec7\u7ed3\u6784\u7b26\u5408 Triton \u7684\u7ea6\u5b9a\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5176\u7ec4\u7ec7\u65b9\u5f0f\u5e76\u89e3\u91ca\uff1a $ tree -L 3 model_repository/ model_repository/ \u2514\u2500\u2500 fast_neural_style \u251c\u2500\u2500 1 \u2502 \u2514\u2500\u2500 model \u2514\u2500\u2500 config.pbtxt model_repository \u662f\u6a21\u578b\u4ed3\u5e93\u6839\u76ee\u5f55\uff0c\u5728 triton \u542f\u52a8\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 --model-repository \u9009\u9879\u6307\u5b9a\u6a21\u578b\u4ed3\u5e93\u6839\u76ee\u5f55 fast_neural_style \u662f\u6a21\u578b\u4ed3\u5e93\u4e2d\u7684\u4e00\u4e2a\u6a21\u578b\u3002\u4e00\u4e2a\u6a21\u578b\u4ed3\u5e93\u4e0b\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u6a21\u578b\uff0c\u6bcf\u4e2a\u4e00\u7ea7\u5b50\u76ee\u5f55\u5c31\u662f\u4e00\u4e2a\u6a21\u578b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u51c6\u5907\u4e86 fast_neural_style \u8fd9\u4e00\u4e2a\u6a21\u578b \u5176\u4e2d\u7684 1/model \u76ee\u5f55\uff0c\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u901a\u8fc7 flow.save(graph, \"1/model\") \u4fdd\u5b58\u7684\u6a21\u578b\u3002\u5176\u4e2d\u7684 1 \u4e3a\u7248\u672c\u53f7\uff0cTriton \u4e2d\u7ea6\u5b9a\uff0c\u4e00\u4e2a\u6a21\u578b\u76ee\u5f55\u4e0b\u53ef\u4ee5\u6709\u591a\u4e2a\u6a21\u578b\u7248\u672c\uff0c\u6a21\u578b\u7248\u672c\u7684\u6587\u4ef6\u5939\u540d\u5fc5\u987b\u4e3a \u7eaf\u6570\u5b57 \u3002\u5728\u6a21\u578b\u7248\u672c\u6587\u4ef6\u5939\u4e0b\uff0c\u9700\u8981\u653e\u7f6e\u540d\u4e3a model \u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u4fdd\u5b58\u6709\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u56fe config.pbtxt \u662f\u4e00\u4e2a\u7eaf\u6587\u672c\u6587\u4ef6\uff0c\u7528\u4e8e\u914d\u7f6e\u8be5\u6a21\u578b\u4ed3\u5e93\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u8be6\u7ec6\u4ecb\u7ecd \u6a21\u578b\u4ed3\u5e93\u914d\u7f6e config.pbtxt \uff0c\u5b83\u662f\u4e00\u4e2a protobuf \u6587\u672c\u683c\u5f0f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u901a\u8fc7\u7f16\u5199\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u914d\u7f6e\u6a21\u578b\u670d\u52a1\u7684\u4fe1\u606f\uff0c\u5982\u6307\u5b9a\u786c\u4ef6\u3001\u8f93\u5165\u8f93\u51fa\u7b49\u4fe1\u606f\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u5185\u5bb9\u5982\u4e0b\uff1a name: \"fast_neural_style\" backend: \"oneflow\" max_batch_size: 1 input [ { name: \"INPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] output [ { name: \"OUTPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] instance_group [ { count: 1 kind: KIND_GPU gpus: [ 0 ] } ] \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f9d\u6b21\u89e3\u91ca\u5176\u4e2d\u7684\u914d\u7f6e\u9879\u3002 name : \"fast_neural_style\" name \u5b57\u6bb5\u7528\u4e8e\u6307\u5b9a\u6a21\u578b\u3002\u8fd9\u884c\u8bf4\u660e\u4f7f\u7528 fast_neural_style \u8fd9\u4e2a\u6a21\u578b\uff0c\u6a21\u578b\u540d\u5b57\u9700\u8981\u548c\u4e0a\u6587\u4ecb\u7ecd\u7684\u6a21\u578b\u6587\u4ef6\u5939\u540d\u4e00\u81f4\u3002 backend: \"oneflow\" backend \u7528\u4e8e\u6307\u5b9a Triton \u540e\u7aef\uff0c\u7528 OneFlow \u90e8\u7f72\uff0c\u6b64\u5b57\u6bb5\u5fc5\u987b\u6307\u5b9a\u4e3a oneflow \u3002 \u63a5\u7740\uff0c\u9700\u8981\u5b9a\u4e49\u6a21\u578b\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5f62\u72b6\u3002\u4e0b\u9762\u7684\u8f93\u5165\u8f93\u51fa\u540d\u5b57\u5b57\u6bb5\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167\u6a21\u578b\u7684\u8f93\u5165\u8f93\u51fa\u987a\u5e8f\u586b\u5199\uff0c\u5e76\u4e14\u547d\u540d\u683c\u5f0f\u662f INPUT_<index> \u548c OUTPUT_<index> \uff0c\u7528 <index> \u8868\u793a\u6a21\u578b\u8f93\u5165\u7684\u987a\u5e8f\uff0c\u9ed8\u8ba4\u4ece 0 \u5f00\u59cb\u3002 data_type \u5b57\u6bb5\u5b9a\u4e49\u4e86\u6570\u636e\u7c7b\u578b\uff0c dims \u5b57\u6bb5\u5b9a\u4e49\u4e86\u5f20\u91cf\u7684\u5f62\u72b6\u3002 input [ { name: \"INPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] output [ { name: \"OUTPUT_0\" data_type: TYPE_FP32 dims: [ 3, 256, 256 ] } ] \u4ee5\u4e0a\u7684\u6a21\u578b\u540d\u5b57\u3001\u63a8\u7406\u540e\u7aef\u3001\u8f93\u5165\u8f93\u51fa\u914d\u7f6e\u662f\u6700\u57fa\u7840\u7684\u914d\u7f6e\uff0c\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5df2\u7ecf\u53ef\u4ee5\u5f00\u59cb\u5de5\u4f5c\u3002 \u4e4b\u540e\u7684 instance_group \u7528\u4e8e\u914d\u7f6e\u786c\u4ef6\u4fe1\u606f\u3002 instance_group [ { count: 1 kind: KIND_GPU gpus: [ 0 ] } ] \u5b83\u610f\u5473\u7740\u6211\u4eec\u5b9e\u4f8b\u5316 1 \u4e2a\u6a21\u578b\uff0c\u5e76\u5c06\u5b83\u653e\u7f6e\u5728 0 \u53f7 GPU \u8bbe\u5907\u4e0a\u3002\u66f4\u591a\u7075\u6d3b\u8c03\u914d\u7684\u9009\u9879\uff0c\u8bf7\u53c2\u8003 Triton Inference Server \u7684\u6a21\u578b\u914d\u7f6e\u6587\u6863 \u3002","title":"\u6a21\u578b\u914d\u7f6e"},{"location":"cookies/serving.html#_4","text":"OneFlow Serving \u63d0\u4f9b\u4e86 Docker \u955c\u50cf\uff0c\u4f7f\u7528 Docker \u542f\u52a8\u6a21\u578b\u670d\u52a1\u3002\u6309\u7167\u4e0a\u9762\u7684\u76ee\u5f55\u7ed3\u6784\u7ec4\u7ec7\u597d\u6587\u4ef6\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u6620\u5c04\u8def\u5f84\u5230\u5bb9\u5668\u4e2d\uff0c\u542f\u52a8\u670d\u52a1\u3002 docker run --rm --runtime=nvidia --network=host -v$(pwd)/model_repository:/models \\ oneflowinc/oneflow-serving /opt/tritonserver/bin/tritonserver --model-store /models \u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u53ef\u4ee5\u68c0\u67e5\u6a21\u578b\u670d\u52a1\u662f\u5426\u542f\u52a8\u3002\u770b\u5230 http 200 \u72b6\u6001\u7801\uff0c\u90a3\u4e48\u6a21\u578b\u670d\u52a1\u5df2\u7ecf\u542f\u52a8\u3002 curl -v localhost:8000/v2/health/ready","title":"\u542f\u52a8\u670d\u52a1"},{"location":"cookies/serving.html#triton-server","text":"\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 tritonclient \u4e0e Triton Server \u4ea4\u4e92\u3002\u9700\u8981\u5148\u5b89\u88c5\u4e00\u4e2a python \u5305\u3002 pip3 install tritonclient[all] \u5b9e\u9645\u4e0a\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u901a\u8fc7 HTTP\u3001gRPC \u6216\u8005 C API \u7b49\u591a\u79cd\u65b9\u5f0f \u4e0e Triton Server \u4ea4\u4e92\uff0c\u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u53c2\u9605\u4ee5\u4e0a\u6587\u6863\u3002 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u662f\u56fe\u7247\u8fdb\u884c\u98ce\u683c\u5316\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u53ef\u4ee5\u5c06\u547d\u4ee4\u884c\u4f20\u9012\u6765\u7684\u56fe\u7247\u6587\u4ef6\uff0c\u8fdb\u884c\u98ce\u683c\u5316\u3002\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u5728 \u4e91\u5e73\u53f0 \u4e0a\u67e5\u770b\uff0c\u6216\u8005\u4e0b\u8f7d demo.zip #... import tritonclient.http as httpclient if __name__ == '__main__' : parser = argparse . ArgumentParser () parser . add_argument ( '--image' , required = True , help = 'the image to transfer style' ) FLAGS = parser . parse_args () triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) image , w , h = load_image ( FLAGS . image , 256 , 256 ) inputs = [] inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) inputs [ 0 ] . set_data_from_numpy ( image , binary_data = True ) outputs = [] outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) results = triton_client . infer ( 'fast_neural_style' , inputs = inputs , outputs = outputs ) output0_data = results . as_numpy ( 'OUTPUT_0' ) image = recover_image ( output0_data , h , w ) cv2 . imwrite ( 'result.jpg' , image ) \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a triton_client \uff0c\u5176\u4e2d\u7684 127.0.0.1:8000 \u662f Triton \u670d\u52a1\u7684\u9ed8\u8ba4\u7aef\u53e3 triton_client = httpclient . InferenceServerClient ( url = '127.0.0.1:8000' ) \u7136\u540e\uff0c\u901a\u8fc7 triton_client.infer \u63a5\u53e3\uff0c\u53ef\u4ee5\u5411 Triton Server \u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\u5e76\u83b7\u53d6\u8f93\u51fa\u3002 \u4e00\u6761 Tirton \u63a8\u7406\u8bf7\u6c42\uff0c\u9700\u8981\u6307\u5b9a\u6a21\u578b\u3001\u8f93\u5165\u548c\u8f93\u51fa\u90e8\u5206\u3002 \u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e3b\u8981\u662f\u5728\u6784\u9020\u8f93\u5165\u3001\u8f93\u51fa\u5bf9\u8c61\uff0c\u5b83\u4eec\u7684\u914d\u7f6e\u4e0e\u5148\u524d\u5728 config.pbtxt \u4e2d\u7684\u914d\u7f6e\u4e00\u81f4\u3002\u5e76\u6700\u7ec8\u901a\u8fc7 triton_client.infer('fast_neural_style', inputs=inputs, outputs=outputs) \u53d1\u8d77\u63a8\u7406\u8bf7\u6c42\uff0c\u5176\u4e2d\u7684 fast_neural_style \u4e5f\u4e0e config.pbtxt \u4e2d\u7684\u914d\u7f6e\u4e00\u81f4\u3002 inputs = [] inputs . append ( httpclient . InferInput ( 'INPUT_0' , image . shape , 'FP32' )) inputs [ 0 ] . set_data_from_numpy ( image , binary_data = True ) outputs = [] outputs . append ( httpclient . InferRequestedOutput ( 'OUTPUT_0' , binary_data = True )) results = triton_client . infer ( 'fast_neural_style' , inputs = inputs , outputs = outputs ) \u83b7\u53d6\u5230\u7684\u63a8\u7406\u7ed3\u679c\uff0c\u8f6c\u6362\u683c\u5f0f\u5e76\u4fdd\u5b58\u4e3a\u8f93\u51fa\u56fe\u7247\uff1a output0_data = results . as_numpy ( 'OUTPUT_0' ) image = recover_image ( output0_data , h , w ) cv2 . imwrite ( 'result.jpg' , image ) \u6211\u4eec\u7528\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u5bf9\u6307\u5b9a\u7684\u56fe\u7247\u8fdb\u884c\u63a8\u7406\u98ce\u683c\u5316\uff0c\u7ed3\u679c\u5c06\u4f1a\u4fdd\u5b58\u5728 result.jpg \u4e0b\u9762\u3002 $ curl -o cat.jpg https://images.pexels.com/photos/156934/pexels-photo-156934.jpeg $ python infer.py --image cat.jpg","title":"\u5411 Triton Server \u53d1\u9001\u8bf7\u6c42"},{"location":"cookies/torch2flow.html","text":"\u5c06 PyTorch \u9884\u8bad\u7ec3\u6a21\u578b\u8f6c\u4e3a OneFlow \u683c\u5f0f \u00b6 \u5f53\u9700\u8981\u4f7f\u7528 PyTorch \u7684\u9884\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 OneFlow \u4e0e PyTorch \u6a21\u578b\u63a5\u53e3\u5bf9\u9f50\u7684\u7279\u70b9\uff0c\u5c06 PyTorch \u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u8f6c\u5b58\u4e3a OneFlow \u6a21\u578b\u3002 \u8f6c\u6362\u793a\u4f8b \u00b6 \u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a PyTorch \u6a21\u578b\u5e76\u4fdd\u5b58\uff0c\u7136\u540e\u5c55\u793a\u5982\u4f55\u5c06\u5176\u8f6c\u6362\u6210 OneFlow \u6a21\u578b\u3002 import torch import torch.nn as nn save_file = 'model.pth' model_torch = nn . Sequential ( nn . Linear ( 128 , 2 ), nn . Softmax () ) torch . save ( model_torch , save_file ) \u8fd0\u884c\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06\u5f97\u5230 PyTorch \u6a21\u578b\u6587\u4ef6 model.pth \u3002\u5c06\u5b83\u8f6c\u4e3a OneFlow \u7248\u672c\u7684\u6a21\u578b\u5305\u62ec\u4e24\u4e2a\u4e3b\u8981\u6b65\u9aa4\uff1a \u5b9a\u4e49\u4e00\u4e2a\u5177\u6709 \u76f8\u540c\u7ed3\u6784 \u7684 OneFlow \u6a21\u578b \u52a0\u8f7d PyTorch \u5b58\u50a8\u7684\u6a21\u578b\u6587\u4ef6 model.pth \uff0c\u5e76\u5c06\u6a21\u578b\u53c2\u6570\u521d\u59cb\u5316\u5230 OneFlow \u7248\u672c\u7684\u6a21\u578b\u4e2d \u8f6c\u6362\u4ee3\u7801\u5982\u4e0b\uff1a import oneflow as flow import oneflow.nn as nn import torch model_flow = nn . Sequential ( nn . Linear ( 128 , 2 ), nn . Softmax () ) parameters = torch . load ( save_file ) . state_dict () for key , value in parameters . items (): val = value . detach () . cpu () . numpy () parameters [ key ] = val model_flow . load_state_dict ( parameters ) \u901a\u8fc7 .state_dict() \u83b7\u53d6\u5230\u4ee5 key-value \u5f62\u5f0f\u5b58\u50a8\u7684\u6a21\u578b\u53c2\u6570\u540e\uff0c .detach().cpu().numpy() \u5c06\u68af\u5ea6\u963b\u65ad\u540e\u7684\u53c2\u6570\u503c\u8f6c\u6362\u6210 Numpy \u7c7b\u578b\uff0c\u6700\u540e .load_state_dict(parameters) \u5c06\u6a21\u578b\u53c2\u6570\u4f20\u9012\u5230 OneFlow \u6a21\u578b\u4e2d\u3002 \u901a\u8fc7\u4e0a\u8ff0\u7b80\u5355\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5c06 PyTorch \u5b58\u50a8\u7684\u6570\u636e\uff08\u65e0\u8bba\u662f\u6a21\u578b\u8fd8\u662f\u53d8\u91cf\u7b49\u7b49\uff09\u8f6c\u6362\u6210 OneFlow \u7684\u601d\u8def\u662f \u4f7f\u7528 Numpy \u4f5c\u4e3a\u4e8c\u8005\u7684\u5a92\u4ecb \u3002\u53ea\u8981\u786e\u4fdd PyTorch \u548c OneFlow \u5b9a\u4e49\u7684\u6a21\u578b\u662f\u4e00\u81f4\u7684\uff0c\u90a3\u4e48\u65e0\u8bba\u591a\u4e48\u590d\u6742\u7684\u6a21\u578b\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u5f0f\u8f6c\u6362\u3002 \u62d3\u5c55 \u00b6 flowvision \u4e0e torchvision \u76f8\u540c\uff0c\u63d0\u4f9b\u4e86\u8bb8\u591a\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u540c\u65f6 flowvision \u5404\u4e2a\u6a21\u578b\u80fd\u591f\u505a\u5230\u4e0e torchvision \u5bf9\u9f50\u3002\u6211\u4eec\u4f7f\u7528 flowvision\uff0c\u4ee5\u7ecf\u5178\u7684 AlexNet \u4e3a\u4f8b\uff0c\u770b\u770b\u5982\u4f55\u5c06 PyTorch \u4e2d \u590d\u6742\u7684\u9884\u8bad\u7ec3\u6a21\u578b \u8f6c\u6362\u6210 OneFlow \u7248\u672c\u3002\u8f6c\u6362\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a import torchvision.models as models_torch import flowvision.models as models_flow alexnet_torch = models_torch . alexnet ( pretrained = True ) alexnet_flow = models_flow . alexnet () parameters = alexnet_torch . state_dict () for key , value in parameters . items (): val = value . detach () . cpu () . numpy () parameters [ key ] = val alexnet_flow . load_state_dict ( parameters ) flowvision \u4e5f\u914d\u5907\u4e86\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u8bbe\u7f6e pretrained=True \u5373\u53ef\uff1a alexnet_flow = models_flow . alexnet ( pretrained = True ) \u5173\u4e8e flowvision \u7684\u8be6\u7ec6\u4f7f\u7528\uff0c\u6b22\u8fce\u8bbf\u95ee flowvision documentation \u3002","title":"\u5c06 PyTorch \u9884\u8bad\u7ec3\u6a21\u578b\u8f6c\u4e3a OneFlow \u683c\u5f0f"},{"location":"cookies/torch2flow.html#pytorch-oneflow","text":"\u5f53\u9700\u8981\u4f7f\u7528 PyTorch \u7684\u9884\u8bad\u7ec3\u6a21\u578b\u65f6\uff0c\u53ef\u4ee5\u5229\u7528 OneFlow \u4e0e PyTorch \u6a21\u578b\u63a5\u53e3\u5bf9\u9f50\u7684\u7279\u70b9\uff0c\u5c06 PyTorch \u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u8f6c\u5b58\u4e3a OneFlow \u6a21\u578b\u3002","title":"\u5c06 PyTorch \u9884\u8bad\u7ec3\u6a21\u578b\u8f6c\u4e3a OneFlow \u683c\u5f0f"},{"location":"cookies/torch2flow.html#_1","text":"\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a PyTorch \u6a21\u578b\u5e76\u4fdd\u5b58\uff0c\u7136\u540e\u5c55\u793a\u5982\u4f55\u5c06\u5176\u8f6c\u6362\u6210 OneFlow \u6a21\u578b\u3002 import torch import torch.nn as nn save_file = 'model.pth' model_torch = nn . Sequential ( nn . Linear ( 128 , 2 ), nn . Softmax () ) torch . save ( model_torch , save_file ) \u8fd0\u884c\u4ee5\u4e0a\u4ee3\u7801\uff0c\u5c06\u5f97\u5230 PyTorch \u6a21\u578b\u6587\u4ef6 model.pth \u3002\u5c06\u5b83\u8f6c\u4e3a OneFlow \u7248\u672c\u7684\u6a21\u578b\u5305\u62ec\u4e24\u4e2a\u4e3b\u8981\u6b65\u9aa4\uff1a \u5b9a\u4e49\u4e00\u4e2a\u5177\u6709 \u76f8\u540c\u7ed3\u6784 \u7684 OneFlow \u6a21\u578b \u52a0\u8f7d PyTorch \u5b58\u50a8\u7684\u6a21\u578b\u6587\u4ef6 model.pth \uff0c\u5e76\u5c06\u6a21\u578b\u53c2\u6570\u521d\u59cb\u5316\u5230 OneFlow \u7248\u672c\u7684\u6a21\u578b\u4e2d \u8f6c\u6362\u4ee3\u7801\u5982\u4e0b\uff1a import oneflow as flow import oneflow.nn as nn import torch model_flow = nn . Sequential ( nn . Linear ( 128 , 2 ), nn . Softmax () ) parameters = torch . load ( save_file ) . state_dict () for key , value in parameters . items (): val = value . detach () . cpu () . numpy () parameters [ key ] = val model_flow . load_state_dict ( parameters ) \u901a\u8fc7 .state_dict() \u83b7\u53d6\u5230\u4ee5 key-value \u5f62\u5f0f\u5b58\u50a8\u7684\u6a21\u578b\u53c2\u6570\u540e\uff0c .detach().cpu().numpy() \u5c06\u68af\u5ea6\u963b\u65ad\u540e\u7684\u53c2\u6570\u503c\u8f6c\u6362\u6210 Numpy \u7c7b\u578b\uff0c\u6700\u540e .load_state_dict(parameters) \u5c06\u6a21\u578b\u53c2\u6570\u4f20\u9012\u5230 OneFlow \u6a21\u578b\u4e2d\u3002 \u901a\u8fc7\u4e0a\u8ff0\u7b80\u5355\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5c06 PyTorch \u5b58\u50a8\u7684\u6570\u636e\uff08\u65e0\u8bba\u662f\u6a21\u578b\u8fd8\u662f\u53d8\u91cf\u7b49\u7b49\uff09\u8f6c\u6362\u6210 OneFlow \u7684\u601d\u8def\u662f \u4f7f\u7528 Numpy \u4f5c\u4e3a\u4e8c\u8005\u7684\u5a92\u4ecb \u3002\u53ea\u8981\u786e\u4fdd PyTorch \u548c OneFlow \u5b9a\u4e49\u7684\u6a21\u578b\u662f\u4e00\u81f4\u7684\uff0c\u90a3\u4e48\u65e0\u8bba\u591a\u4e48\u590d\u6742\u7684\u6a21\u578b\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u5f0f\u8f6c\u6362\u3002","title":"\u8f6c\u6362\u793a\u4f8b"},{"location":"cookies/torch2flow.html#_2","text":"flowvision \u4e0e torchvision \u76f8\u540c\uff0c\u63d0\u4f9b\u4e86\u8bb8\u591a\u9884\u8bad\u7ec3\u597d\u7684\u6a21\u578b\uff0c\u540c\u65f6 flowvision \u5404\u4e2a\u6a21\u578b\u80fd\u591f\u505a\u5230\u4e0e torchvision \u5bf9\u9f50\u3002\u6211\u4eec\u4f7f\u7528 flowvision\uff0c\u4ee5\u7ecf\u5178\u7684 AlexNet \u4e3a\u4f8b\uff0c\u770b\u770b\u5982\u4f55\u5c06 PyTorch \u4e2d \u590d\u6742\u7684\u9884\u8bad\u7ec3\u6a21\u578b \u8f6c\u6362\u6210 OneFlow \u7248\u672c\u3002\u8f6c\u6362\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a import torchvision.models as models_torch import flowvision.models as models_flow alexnet_torch = models_torch . alexnet ( pretrained = True ) alexnet_flow = models_flow . alexnet () parameters = alexnet_torch . state_dict () for key , value in parameters . items (): val = value . detach () . cpu () . numpy () parameters [ key ] = val alexnet_flow . load_state_dict ( parameters ) flowvision \u4e5f\u914d\u5907\u4e86\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u8bbe\u7f6e pretrained=True \u5373\u53ef\uff1a alexnet_flow = models_flow . alexnet ( pretrained = True ) \u5173\u4e8e flowvision \u7684\u8be6\u7ec6\u4f7f\u7528\uff0c\u6b22\u8fce\u8bbf\u95ee flowvision documentation \u3002","title":"\u62d3\u5c55"},{"location":"cookies/transfer_learning.html","text":"\u8ba1\u7b97\u673a\u89c6\u89c9\u8fc1\u79fb\u5b66\u4e60 \u00b6 \u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u8fc1\u79fb\u5b66\u4e60\u7684\u57fa\u672c\u539f\u7406\uff0c\u5e76\u5c55\u793a\u4e00\u4e2a\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u4e2d\u7684\u8fc1\u79fb\u5b66\u4e60\u7684\u4f7f\u7528\u793a\u4f8b\u3002 \u539f\u7406\u7b80\u4ecb \u00b6 \u8fc1\u79fb\u5b66\u4e60 (Transfer Learning) \u662f\u4e00\u79cd\u5c06\u4ece\u6e90\u6570\u636e\u96c6\u5b66\u5230\u7684\u77e5\u8bc6\u8fc1\u79fb\u5230\u76ee\u6807\u6570\u636e\u96c6\u7684\u65b9\u6cd5\u3002 \u4f17\u6240\u5468\u77e5\uff0c\u6709\u76d1\u7763\u5b66\u4e60\u662f\u4e00\u79cd\u76f8\u5f53\u5e38\u89c1\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u8bad\u7ec3\u65b9\u5f0f\uff0c\u4f46\u5b83\u9700\u8981\u5927\u91cf\u5e26\u6807\u6ce8\u7684\u6570\u636e\u624d\u80fd\u8fbe\u5230\u8f83\u597d\u7684\u6548\u679c\uff0c\u5f53\u6211\u4eec\u60f3\u5c06\u67d0\u4e2a\u6a21\u578b\u5e94\u7528\u4e8e\u67d0\u4e2a\u7279\u5b9a\u7684\u4efb\u52a1\u4e0a\u65f6\uff0c\u901a\u5e38\u53d7\u5236\u4e8e\u6210\u672c\u800c\u65e0\u6cd5\u83b7\u5f97\u5927\u91cf\u5e26\u6807\u6ce8\u7684\u6570\u636e\uff0c\u5982\u679c\u76f4\u63a5\u5728\u8fd9\u6837\u7684\u5c0f\u89c4\u6a21\u6570\u636e\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u5f88\u5bb9\u6613\u9020\u6210\u8fc7\u62df\u5408\u3002\u800c\u8fc1\u79fb\u5b66\u4e60\u662f\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002 \u4ee5\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u4e2d\u5e38\u89c1\u7684\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u4e3a\u4f8b\uff0c\u4e00\u822c\u7684\u56fe\u50cf\u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u7279\u5f81\u63d0\u53d6\u5668\uff08\u6216\u79f0\u4e3a\u9aa8\u5e72\u7f51\u7edc\uff09\u548c\u5206\u7c7b\u5668\uff08\u6216\u79f0\u4e3a\u8f93\u51fa\u5c42\uff09\u3002\u7279\u5f81\u63d0\u53d6\u5668\u4e00\u822c\u662f\u8bf8\u5982\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u591a\u5c42\u7f51\u7edc\uff0c\u5206\u7c7b\u5668\u4e00\u822c\u662f\u8bf8\u5982\u5168\u8fde\u63a5\u5c42\u7684\u5355\u5c42\u7f51\u7edc\u3002\u7531\u4e8e\u4e0d\u540c\u5206\u7c7b\u4efb\u52a1\u7684\u7c7b\u522b\u4e00\u822c\u4e0d\u540c\uff0c\u5206\u7c7b\u5668\u901a\u5e38\u65e0\u6cd5\u590d\u7528\uff0c\u800c\u7279\u5f81\u63d0\u53d6\u5668\u901a\u5e38\u53ef\u4ee5\u590d\u7528\uff0c\u867d\u7136\u6e90\u6570\u636e\u96c6\u4e2d\u7684\u7269\u4f53\u53ef\u80fd\u4e0e\u76ee\u6807\u6570\u636e\u96c6\u5927\u76f8\u5f84\u5ead\uff0c\u751a\u81f3\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\uff0c\u4f46\u5728\u5927\u89c4\u6a21\u6570\u636e\u4e0a\u9884\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u53ef\u80fd\u5177\u5907\u63d0\u53d6\u66f4\u5e38\u89c4\u7684\u56fe\u50cf\u7279\u5f81\uff08\u4f8b\u5982\u8fb9\u7f18\u3001\u5f62\u72b6\u548c\u7eb9\u7406\uff09\u7684\u80fd\u529b\uff0c\u4ece\u800c\u6709\u52a9\u4e8e\u6709\u6548\u5730\u8bc6\u522b\u76ee\u6807\u6570\u636e\u96c6\u4e2d\u7684\u7269\u4f53\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u6709\u4e00\u4e2a\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5927\u81f4\u6709\u4e09\u79cd\u4f7f\u7528\u65b9\u5f0f\uff1a \u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u53c2\u6570\u5bf9\u7279\u5f81\u63d0\u53d6\u5668\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u5bf9\u6574\u4e2a\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002 \u5bf9\u4e8e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u6765\u8bf4\uff0c\u53c2\u6570\u521d\u59cb\u5316\u7684\u65b9\u6cd5\u5bf9\u4fdd\u6301\u6570\u503c\u7a33\u5b9a\u6027\u76f8\u5f53\u91cd\u8981\uff0c\u4e0d\u5f53\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u8bad\u7ec3\u65f6\u51fa\u73b0\u68af\u5ea6\u7206\u70b8\u6216\u68af\u5ea6\u6d88\u5931\u7684\u95ee\u9898\u3002\u5982\u679c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4fdd\u8bc1\u6a21\u578b\u53c2\u6570\u521d\u59cb\u503c\u7684\u5408\u7406\u6027\uff0c\u8ba9\u6a21\u578b\u201c\u8d62\u5728\u8d77\u8dd1\u7ebf\u4e0a\u201d\u3002 \u5bf9\u6574\u4e2a\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u4f46\u5bf9\u7279\u5f81\u63d0\u53d6\u5668\u4f7f\u7528\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\uff0c\u5bf9\u5206\u7c7b\u5668\u4f7f\u7528\u8f83\u5927\u7684\u5b66\u4e60\u7387\u3002 \u9884\u8bad\u7ec3\u5f97\u5230\u7684\u7279\u5f81\u63d0\u53d6\u5668\u5df2\u7ecf\u5f97\u5230\u4e86\u5145\u5206\u7684\u8bad\u7ec3\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\uff1b\u800c\u5206\u7c7b\u5668\u7684\u53c2\u6570\u901a\u5e38\u662f\u968f\u673a\u521d\u59cb\u5316\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\uff0c\u56e0\u6b64\u9700\u8981\u8f83\u5927\u7684\u5b66\u4e60\u7387\u3002 \u56fa\u5b9a\u7279\u5f81\u63d0\u53d6\u5668\u7684\u53c2\u6570\uff0c\u53ea\u8bad\u7ec3\u5206\u7c7b\u5668\u3002 \u5982\u679c\u76ee\u6807\u6570\u636e\u96c6\u7684\u7c7b\u522b\u6070\u597d\u662f\u6e90\u6570\u636e\u96c6\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u65b9\u5f0f\u4e00\u822c\u4f1a\u5f88\u6709\u6548\u4e14\u5feb\u901f\u3002 \u8fc1\u79fb\u5b66\u4e60\u793a\u4f8b \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 ResNet-18 \u4f5c\u4e3a\u7279\u5f81\u63d0\u53d6\u5668\u5728 CIFAR-10 \u6570\u636e\u96c6 \u4e0a\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u3002 ResNet-18 \u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff08\u5728 ImageNet \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5f97\u5230\uff09\u548c CIFAR-10 \u6570\u636e\u96c6\u90fd\u53ef\u4ee5\u901a\u8fc7 FlowVision \u65b9\u4fbf\u5730\u83b7\u53d6\u3002 \u9996\u5148\u5bfc\u5165\u6240\u9700\u7684\u4f9d\u8d56\uff1a import oneflow as flow from oneflow import nn from oneflow.utils.data import DataLoader from flowvision.models import resnet18 from flowvision.datasets import CIFAR10 import flowvision.transforms as transforms \u5b9a\u4e49 epoch, batch size, \u4ee5\u53ca\u4f7f\u7528\u7684\u8ba1\u7b97\u8bbe\u5907\uff1a NUM_EPOCHS = 3 BATCH_SIZE = 64 DEVICE = 'cuda' if flow . cuda . is_available () else 'cpu' \u6570\u636e\u52a0\u8f7d\u53ca\u9884\u5904\u7406 \u00b6 \u5b9a\u4e49 Dataset \u548c DataLoader: train_transform = transforms . Compose ([ transforms . RandomHorizontalFlip (), transforms . RandomVerticalFlip (), transforms . Resize ( 224 ), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) test_transform = transforms . Compose ([ transforms . Resize ( 224 ), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) train_dataset = CIFAR10 ( root = './data' , train = True , transform = train_transform , download = True ) test_dataset = CIFAR10 ( root = './data' , train = False , transform = test_transform , download = True ) train_data_loader = DataLoader ( train_dataset , batch_size = BATCH_SIZE , shuffle = True , num_workers = 4 ) test_data_loader = DataLoader ( test_dataset , batch_size = BATCH_SIZE , shuffle = False , num_workers = 4 ) \u5b9a\u4e49\u6a21\u578b \u00b6 model = resnet18 ( pretrained = True ) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u5c06 pretrained \u53c2\u6570\u8bbe\u7f6e\u4e3a True \u6765\u83b7\u53d6\u52a0\u8f7d\u4e86\u9884\u8bad\u7ec3\u6743\u91cd\u7684 ResNet-18 \u6a21\u578b\u3002\u5982\u679c\u8f93\u51fa model.fc \uff0c\u5c06\u4f1a\u5f97\u5230 \"Linear(in_features=512, out_features=1000, bias=True)\"\uff0c\u53ef\u4ee5\u770b\u51fa\u6b64\u5206\u7c7b\u5668\u6709 1000 \u4e2a\u8f93\u51fa\u795e\u7ecf\u5143\uff0c\u5bf9\u5e94\u4e8e ImageNet \u7684 1000 \u4e2a\u7c7b\u522b\u3002CIFAR-10 \u6570\u636e\u96c6\u662f 10 \u4e2a\u7c7b\u522b\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u66ff\u6362\u6389\u8fd9\u4e2a\u5168\u8fde\u63a5\u5c42\u5206\u7c7b\u5668\uff1a model . fc = nn . Linear ( model . fc . in_features , 10 ) \u7136\u540e\u5c06\u6a21\u578b\u52a0\u8f7d\u5230\u8ba1\u7b97\u8bbe\u5907\uff1a model = model . to ( DEVICE ) \u8bad\u7ec3\u6a21\u578b \u00b6 \u5b9a\u4e49\u8bad\u7ec3\u51fd\u6570\uff1a def train_model ( model , train_data_loader , test_data_loader , loss_func , optimizer ): dataset_size = len ( train_data_loader . dataset ) model . train () for epoch in range ( NUM_EPOCHS ): for batch , ( images , labels ) in enumerate ( train_data_loader ): images , labels = images . to ( DEVICE ), labels . to ( DEVICE ) preds = model ( images ) loss = loss_func ( preds , labels ) optimizer . zero_grad () loss . backward () optimizer . step () if batch % 100 == 0 : print ( f 'loss: { loss : >7f } [epoch: { epoch } { batch * BATCH_SIZE : >5d } / { dataset_size : >5d } ]' ) evaluate ( model , test_data_loader ) \u5b9a\u4e49\u8bc4\u4f30\u51fd\u6570\uff0c\u4f7f\u7528\u51c6\u786e\u7387\u4f5c\u4e3a\u8bc4\u4f30\u6307\u6807\uff1a def evaluate ( model , data_loader ): dataset_size = len ( data_loader . dataset ) model . eval () num_corrects = 0 for images , labels in data_loader : images , labels = images . to ( DEVICE ), labels . to ( DEVICE ) preds = model ( images ) num_corrects += flow . sum ( flow . argmax ( preds , dim = 1 ) == labels ) print ( 'Accuracy: ' , num_corrects . item () / dataset_size ) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9\u4f18\u5316\u5668\u4f20\u5165\u76f8\u5e94\u7684\u9700\u8981\u4f18\u5316\u7684\u53c2\u6570\uff0c\u6765\u5b9e\u73b0\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u4e09\u79cd\u65b9\u5f0f\u3002 \u7b2c 1 \u79cd\u65b9\u5f0f\uff0c\u5bf9\u6574\u4e2a\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff1a optimizer = flow . optim . SGD ( model . parameters (), lr = 0.001 , momentum = 0.9 , weight_decay = 5e-4 ) \u7b2c 2 \u79cd\u65b9\u5f0f\uff0c\u5bf9\u7279\u5f81\u63d0\u53d6\u5668\u4f7f\u7528\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\uff0c\u5bf9\u5206\u7c7b\u5668\u4f7f\u7528\u8f83\u5927\u7684\u5b66\u4e60\u7387\uff1a fc_params = list ( map ( id , model . fc . parameters ())) backbone_params = filter ( lambda p : id ( p ) not in fc_params , model . parameters ()) optimizer = flow . optim . SGD ([{ 'params' : backbone_params , 'lr' : 0.0001 }, { 'params' : model . fc . parameters (), 'lr' : 0.001 }], momentum = 0.9 , weight_decay = 5e-4 ) \u7b2c 3 \u79cd\u65b9\u5f0f\uff0c\u56fa\u5b9a\u7279\u5f81\u63d0\u53d6\u5668\u7684\u53c2\u6570\uff0c\u53ea\u8bad\u7ec3\u5206\u7c7b\u5668\uff1a optimizer = flow . optim . SGD ( model . fc . parameters (), lr = 0.001 , momentum = 0.9 , weight_decay = 5e-4 ) \u5f00\u59cb\u8bad\u7ec3\uff1a loss_func = nn . CrossEntropyLoss () train_model ( model , train_data_loader , test_data_loader , loss_func , optimizer ) \u7ed3\u679c\u5bf9\u6bd4 \u00b6 \u5728\u4f7f\u7528\u8fc1\u79fb\u5b66\u4e60\u7684\u60c5\u51b5\u4e0b\uff08\u8fd9\u91cc\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\uff09\uff0c\u6a21\u578b\u5728\u7ecf\u8fc7 3 \u4e2a epoch \u7684\u8bad\u7ec3\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u8fbe\u5230\u4e86 0.9017 ; \u5982\u679c\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\u3001\u4e0d\u4f7f\u7528\u8fc1\u79fb\u5b66\u4e60\uff0c\u540c\u6837\u7ecf\u8fc7 3 \u4e2a epoch \u7684\u8bad\u7ec3\u540e\uff0c\u51c6\u786e\u7387\u4ec5\u4e3a 0.4957 \u3002\u8fd9\u8868\u660e\u8fc1\u79fb\u5b66\u4e60\u786e\u5b9e\u80fd\u8d77\u5230\u663e\u8457\u7684\u4f5c\u7528\u3002","title":"\u8ba1\u7b97\u673a\u89c6\u89c9\u8fc1\u79fb\u5b66\u4e60"},{"location":"cookies/transfer_learning.html#_1","text":"\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u8fc1\u79fb\u5b66\u4e60\u7684\u57fa\u672c\u539f\u7406\uff0c\u5e76\u5c55\u793a\u4e00\u4e2a\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u4e2d\u7684\u8fc1\u79fb\u5b66\u4e60\u7684\u4f7f\u7528\u793a\u4f8b\u3002","title":"\u8ba1\u7b97\u673a\u89c6\u89c9\u8fc1\u79fb\u5b66\u4e60"},{"location":"cookies/transfer_learning.html#_2","text":"\u8fc1\u79fb\u5b66\u4e60 (Transfer Learning) \u662f\u4e00\u79cd\u5c06\u4ece\u6e90\u6570\u636e\u96c6\u5b66\u5230\u7684\u77e5\u8bc6\u8fc1\u79fb\u5230\u76ee\u6807\u6570\u636e\u96c6\u7684\u65b9\u6cd5\u3002 \u4f17\u6240\u5468\u77e5\uff0c\u6709\u76d1\u7763\u5b66\u4e60\u662f\u4e00\u79cd\u76f8\u5f53\u5e38\u89c1\u7684\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u7684\u8bad\u7ec3\u65b9\u5f0f\uff0c\u4f46\u5b83\u9700\u8981\u5927\u91cf\u5e26\u6807\u6ce8\u7684\u6570\u636e\u624d\u80fd\u8fbe\u5230\u8f83\u597d\u7684\u6548\u679c\uff0c\u5f53\u6211\u4eec\u60f3\u5c06\u67d0\u4e2a\u6a21\u578b\u5e94\u7528\u4e8e\u67d0\u4e2a\u7279\u5b9a\u7684\u4efb\u52a1\u4e0a\u65f6\uff0c\u901a\u5e38\u53d7\u5236\u4e8e\u6210\u672c\u800c\u65e0\u6cd5\u83b7\u5f97\u5927\u91cf\u5e26\u6807\u6ce8\u7684\u6570\u636e\uff0c\u5982\u679c\u76f4\u63a5\u5728\u8fd9\u6837\u7684\u5c0f\u89c4\u6a21\u6570\u636e\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u5f88\u5bb9\u6613\u9020\u6210\u8fc7\u62df\u5408\u3002\u800c\u8fc1\u79fb\u5b66\u4e60\u662f\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002 \u4ee5\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u4e2d\u5e38\u89c1\u7684\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u4e3a\u4f8b\uff0c\u4e00\u822c\u7684\u56fe\u50cf\u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff1a\u7279\u5f81\u63d0\u53d6\u5668\uff08\u6216\u79f0\u4e3a\u9aa8\u5e72\u7f51\u7edc\uff09\u548c\u5206\u7c7b\u5668\uff08\u6216\u79f0\u4e3a\u8f93\u51fa\u5c42\uff09\u3002\u7279\u5f81\u63d0\u53d6\u5668\u4e00\u822c\u662f\u8bf8\u5982\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u591a\u5c42\u7f51\u7edc\uff0c\u5206\u7c7b\u5668\u4e00\u822c\u662f\u8bf8\u5982\u5168\u8fde\u63a5\u5c42\u7684\u5355\u5c42\u7f51\u7edc\u3002\u7531\u4e8e\u4e0d\u540c\u5206\u7c7b\u4efb\u52a1\u7684\u7c7b\u522b\u4e00\u822c\u4e0d\u540c\uff0c\u5206\u7c7b\u5668\u901a\u5e38\u65e0\u6cd5\u590d\u7528\uff0c\u800c\u7279\u5f81\u63d0\u53d6\u5668\u901a\u5e38\u53ef\u4ee5\u590d\u7528\uff0c\u867d\u7136\u6e90\u6570\u636e\u96c6\u4e2d\u7684\u7269\u4f53\u53ef\u80fd\u4e0e\u76ee\u6807\u6570\u636e\u96c6\u5927\u76f8\u5f84\u5ead\uff0c\u751a\u81f3\u5b8c\u5168\u6ca1\u6709\u4ea4\u96c6\uff0c\u4f46\u5728\u5927\u89c4\u6a21\u6570\u636e\u4e0a\u9884\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u53ef\u80fd\u5177\u5907\u63d0\u53d6\u66f4\u5e38\u89c4\u7684\u56fe\u50cf\u7279\u5f81\uff08\u4f8b\u5982\u8fb9\u7f18\u3001\u5f62\u72b6\u548c\u7eb9\u7406\uff09\u7684\u80fd\u529b\uff0c\u4ece\u800c\u6709\u52a9\u4e8e\u6709\u6548\u5730\u8bc6\u522b\u76ee\u6807\u6570\u636e\u96c6\u4e2d\u7684\u7269\u4f53\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u6709\u4e00\u4e2a\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u5927\u81f4\u6709\u4e09\u79cd\u4f7f\u7528\u65b9\u5f0f\uff1a \u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u53c2\u6570\u5bf9\u7279\u5f81\u63d0\u53d6\u5668\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u7136\u540e\u5bf9\u6574\u4e2a\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002 \u5bf9\u4e8e\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u6765\u8bf4\uff0c\u53c2\u6570\u521d\u59cb\u5316\u7684\u65b9\u6cd5\u5bf9\u4fdd\u6301\u6570\u503c\u7a33\u5b9a\u6027\u76f8\u5f53\u91cd\u8981\uff0c\u4e0d\u5f53\u7684\u521d\u59cb\u5316\u65b9\u6cd5\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u8bad\u7ec3\u65f6\u51fa\u73b0\u68af\u5ea6\u7206\u70b8\u6216\u68af\u5ea6\u6d88\u5931\u7684\u95ee\u9898\u3002\u5982\u679c\u4f7f\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4fdd\u8bc1\u6a21\u578b\u53c2\u6570\u521d\u59cb\u503c\u7684\u5408\u7406\u6027\uff0c\u8ba9\u6a21\u578b\u201c\u8d62\u5728\u8d77\u8dd1\u7ebf\u4e0a\u201d\u3002 \u5bf9\u6574\u4e2a\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff0c\u4f46\u5bf9\u7279\u5f81\u63d0\u53d6\u5668\u4f7f\u7528\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\uff0c\u5bf9\u5206\u7c7b\u5668\u4f7f\u7528\u8f83\u5927\u7684\u5b66\u4e60\u7387\u3002 \u9884\u8bad\u7ec3\u5f97\u5230\u7684\u7279\u5f81\u63d0\u53d6\u5668\u5df2\u7ecf\u5f97\u5230\u4e86\u5145\u5206\u7684\u8bad\u7ec3\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\uff1b\u800c\u5206\u7c7b\u5668\u7684\u53c2\u6570\u901a\u5e38\u662f\u968f\u673a\u521d\u59cb\u5316\u7684\uff0c\u6240\u4ee5\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\uff0c\u56e0\u6b64\u9700\u8981\u8f83\u5927\u7684\u5b66\u4e60\u7387\u3002 \u56fa\u5b9a\u7279\u5f81\u63d0\u53d6\u5668\u7684\u53c2\u6570\uff0c\u53ea\u8bad\u7ec3\u5206\u7c7b\u5668\u3002 \u5982\u679c\u76ee\u6807\u6570\u636e\u96c6\u7684\u7c7b\u522b\u6070\u597d\u662f\u6e90\u6570\u636e\u96c6\u7684\u5b50\u96c6\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u65b9\u5f0f\u4e00\u822c\u4f1a\u5f88\u6709\u6548\u4e14\u5feb\u901f\u3002","title":"\u539f\u7406\u7b80\u4ecb"},{"location":"cookies/transfer_learning.html#_3","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 ResNet-18 \u4f5c\u4e3a\u7279\u5f81\u63d0\u53d6\u5668\u5728 CIFAR-10 \u6570\u636e\u96c6 \u4e0a\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b\u4efb\u52a1\u3002 ResNet-18 \u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff08\u5728 ImageNet \u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u5f97\u5230\uff09\u548c CIFAR-10 \u6570\u636e\u96c6\u90fd\u53ef\u4ee5\u901a\u8fc7 FlowVision \u65b9\u4fbf\u5730\u83b7\u53d6\u3002 \u9996\u5148\u5bfc\u5165\u6240\u9700\u7684\u4f9d\u8d56\uff1a import oneflow as flow from oneflow import nn from oneflow.utils.data import DataLoader from flowvision.models import resnet18 from flowvision.datasets import CIFAR10 import flowvision.transforms as transforms \u5b9a\u4e49 epoch, batch size, \u4ee5\u53ca\u4f7f\u7528\u7684\u8ba1\u7b97\u8bbe\u5907\uff1a NUM_EPOCHS = 3 BATCH_SIZE = 64 DEVICE = 'cuda' if flow . cuda . is_available () else 'cpu'","title":"\u8fc1\u79fb\u5b66\u4e60\u793a\u4f8b"},{"location":"cookies/transfer_learning.html#_4","text":"\u5b9a\u4e49 Dataset \u548c DataLoader: train_transform = transforms . Compose ([ transforms . RandomHorizontalFlip (), transforms . RandomVerticalFlip (), transforms . Resize ( 224 ), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) test_transform = transforms . Compose ([ transforms . Resize ( 224 ), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) train_dataset = CIFAR10 ( root = './data' , train = True , transform = train_transform , download = True ) test_dataset = CIFAR10 ( root = './data' , train = False , transform = test_transform , download = True ) train_data_loader = DataLoader ( train_dataset , batch_size = BATCH_SIZE , shuffle = True , num_workers = 4 ) test_data_loader = DataLoader ( test_dataset , batch_size = BATCH_SIZE , shuffle = False , num_workers = 4 )","title":"\u6570\u636e\u52a0\u8f7d\u53ca\u9884\u5904\u7406"},{"location":"cookies/transfer_learning.html#_5","text":"model = resnet18 ( pretrained = True ) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u901a\u8fc7\u5c06 pretrained \u53c2\u6570\u8bbe\u7f6e\u4e3a True \u6765\u83b7\u53d6\u52a0\u8f7d\u4e86\u9884\u8bad\u7ec3\u6743\u91cd\u7684 ResNet-18 \u6a21\u578b\u3002\u5982\u679c\u8f93\u51fa model.fc \uff0c\u5c06\u4f1a\u5f97\u5230 \"Linear(in_features=512, out_features=1000, bias=True)\"\uff0c\u53ef\u4ee5\u770b\u51fa\u6b64\u5206\u7c7b\u5668\u6709 1000 \u4e2a\u8f93\u51fa\u795e\u7ecf\u5143\uff0c\u5bf9\u5e94\u4e8e ImageNet \u7684 1000 \u4e2a\u7c7b\u522b\u3002CIFAR-10 \u6570\u636e\u96c6\u662f 10 \u4e2a\u7c7b\u522b\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u66ff\u6362\u6389\u8fd9\u4e2a\u5168\u8fde\u63a5\u5c42\u5206\u7c7b\u5668\uff1a model . fc = nn . Linear ( model . fc . in_features , 10 ) \u7136\u540e\u5c06\u6a21\u578b\u52a0\u8f7d\u5230\u8ba1\u7b97\u8bbe\u5907\uff1a model = model . to ( DEVICE )","title":"\u5b9a\u4e49\u6a21\u578b"},{"location":"cookies/transfer_learning.html#_6","text":"\u5b9a\u4e49\u8bad\u7ec3\u51fd\u6570\uff1a def train_model ( model , train_data_loader , test_data_loader , loss_func , optimizer ): dataset_size = len ( train_data_loader . dataset ) model . train () for epoch in range ( NUM_EPOCHS ): for batch , ( images , labels ) in enumerate ( train_data_loader ): images , labels = images . to ( DEVICE ), labels . to ( DEVICE ) preds = model ( images ) loss = loss_func ( preds , labels ) optimizer . zero_grad () loss . backward () optimizer . step () if batch % 100 == 0 : print ( f 'loss: { loss : >7f } [epoch: { epoch } { batch * BATCH_SIZE : >5d } / { dataset_size : >5d } ]' ) evaluate ( model , test_data_loader ) \u5b9a\u4e49\u8bc4\u4f30\u51fd\u6570\uff0c\u4f7f\u7528\u51c6\u786e\u7387\u4f5c\u4e3a\u8bc4\u4f30\u6307\u6807\uff1a def evaluate ( model , data_loader ): dataset_size = len ( data_loader . dataset ) model . eval () num_corrects = 0 for images , labels in data_loader : images , labels = images . to ( DEVICE ), labels . to ( DEVICE ) preds = model ( images ) num_corrects += flow . sum ( flow . argmax ( preds , dim = 1 ) == labels ) print ( 'Accuracy: ' , num_corrects . item () / dataset_size ) \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ed9\u4f18\u5316\u5668\u4f20\u5165\u76f8\u5e94\u7684\u9700\u8981\u4f18\u5316\u7684\u53c2\u6570\uff0c\u6765\u5b9e\u73b0\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u4e09\u79cd\u65b9\u5f0f\u3002 \u7b2c 1 \u79cd\u65b9\u5f0f\uff0c\u5bf9\u6574\u4e2a\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\uff1a optimizer = flow . optim . SGD ( model . parameters (), lr = 0.001 , momentum = 0.9 , weight_decay = 5e-4 ) \u7b2c 2 \u79cd\u65b9\u5f0f\uff0c\u5bf9\u7279\u5f81\u63d0\u53d6\u5668\u4f7f\u7528\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\uff0c\u5bf9\u5206\u7c7b\u5668\u4f7f\u7528\u8f83\u5927\u7684\u5b66\u4e60\u7387\uff1a fc_params = list ( map ( id , model . fc . parameters ())) backbone_params = filter ( lambda p : id ( p ) not in fc_params , model . parameters ()) optimizer = flow . optim . SGD ([{ 'params' : backbone_params , 'lr' : 0.0001 }, { 'params' : model . fc . parameters (), 'lr' : 0.001 }], momentum = 0.9 , weight_decay = 5e-4 ) \u7b2c 3 \u79cd\u65b9\u5f0f\uff0c\u56fa\u5b9a\u7279\u5f81\u63d0\u53d6\u5668\u7684\u53c2\u6570\uff0c\u53ea\u8bad\u7ec3\u5206\u7c7b\u5668\uff1a optimizer = flow . optim . SGD ( model . fc . parameters (), lr = 0.001 , momentum = 0.9 , weight_decay = 5e-4 ) \u5f00\u59cb\u8bad\u7ec3\uff1a loss_func = nn . CrossEntropyLoss () train_model ( model , train_data_loader , test_data_loader , loss_func , optimizer )","title":"\u8bad\u7ec3\u6a21\u578b"},{"location":"cookies/transfer_learning.html#_7","text":"\u5728\u4f7f\u7528\u8fc1\u79fb\u5b66\u4e60\u7684\u60c5\u51b5\u4e0b\uff08\u8fd9\u91cc\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\uff09\uff0c\u6a21\u578b\u5728\u7ecf\u8fc7 3 \u4e2a epoch \u7684\u8bad\u7ec3\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u8fbe\u5230\u4e86 0.9017 ; \u5982\u679c\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\u3001\u4e0d\u4f7f\u7528\u8fc1\u79fb\u5b66\u4e60\uff0c\u540c\u6837\u7ecf\u8fc7 3 \u4e2a epoch \u7684\u8bad\u7ec3\u540e\uff0c\u51c6\u786e\u7387\u4ec5\u4e3a 0.4957 \u3002\u8fd9\u8868\u660e\u8fc1\u79fb\u5b66\u4e60\u786e\u5b9e\u80fd\u8d77\u5230\u663e\u8457\u7684\u4f5c\u7528\u3002","title":"\u7ed3\u679c\u5bf9\u6bd4"},{"location":"cookies/zero.html","text":"Zero Redundancy Optimizer (ZeRO) \u00b6 ZeRO \u7b80\u4ecb \u00b6 Zero Redundancy Optimizer (ZeRO) \u662f\u8bba\u6587 ZeRO: Memory Optimization Towards Training A Trillion Parameter Models \u63d0\u51fa\u7684\u4e00\u79cd\u7528\u4e8e\u51cf\u5c11\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e0b\u7684\u663e\u5b58\u5360\u7528\u7684\u65b9\u6cd5\u3002 \u5728\u666e\u901a\u7684\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e2d\uff0c\u6bcf\u4e2a GPU \u90fd\u72ec\u7acb\u5730\u7ef4\u62a4\u4e00\u7ec4\u5b8c\u6574\u7684\u6a21\u578b\u53c2\u6570\uff0c\u8ba1\u7b97\u4e0e\u901a\u4fe1\u6548\u7387\u8f83\u9ad8\uff0c\u4f46\u5185\u5b58\u6548\u7387\u8f83\u5dee\u3002\u8fd9\u4e2a\u95ee\u9898\u5728\u8bad\u7ec3\u5927\u578b\u6a21\u578b\u65f6\u5c24\u4e3a\u7a81\u51fa\u3002ZeRO \u7531 ZeRO-DP \u548c ZeRO-R \u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u51cf\u5c11\u663e\u5b58\u6d88\u8017\u91cf\uff0c\u8fd9\u610f\u5473\u7740\u5728\u540c\u6837\u7684\u663e\u5b58\u4e0b\uff0c\u53ef\u4ee5\u8bad\u7ec3\u66f4\u5927\u7684\u6a21\u578b\uff0c\u4e5f\u610f\u5473\u7740\u5bf9\u4e8e\u4ee5\u5f80\u53ea\u80fd\u901a\u8fc7\u6a21\u578b\u5e76\u884c\u7b56\u7565\u624d\u80fd\u8bad\u7ec3\u7684\u5927\u6a21\u578b\u4e5f\u6709\u53ef\u80fd\u4f7f\u7528\u6570\u636e\u5e76\u884c\u3002 \u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u65f6\u7684\u663e\u5b58\u6d88\u8017\u53ef\u4ee5\u5206\u4e3a\u4e24\u5927\u90e8\u5206\uff1a \u6a21\u578b\u72b6\u6001(model states) \u3002\u5bf9\u4e8e\u5927\u578b\u6a21\u578b\u6765\u8bf4\uff0c\u5927\u90e8\u5206\u663e\u5b58\u6d88\u8017\u90fd\u662f\u88ab\u6a21\u578b\u72b6\u6001\u5360\u7528\u7684\uff0c\u4e3b\u8981\u5305\u62ec\u4e09\u90e8\u5206\uff1a\u4f18\u5316\u5668\u7684\u72b6\u6001(Optimizer States)\u3001\u68af\u5ea6(Gradients)\u3001\u53c2\u6570(Parameters)\u3002\u4e09\u8005\u7b80\u79f0\u4e3a OPG \u3002 \u6b8b\u4f59\u72b6\u6001(residual states) \u3002\u5305\u62ec\u6fc0\u6d3b\u51fd\u6570\u3001\u4e34\u65f6\u7f13\u51b2\u533a\u548c\u4e0d\u53ef\u7528\u7684\u5185\u5b58\u788e\u7247\u3002 ZeRO-DP \u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff0c\u901a\u8fc7\u5bf9 OPG \u72b6\u6001\u8fdb\u884c\u5206\u533a\u800c\u4e0d\u662f\u76f4\u63a5\u590d\u5236\u6765\u6d88\u9664\u5185\u5b58\u5197\u4f59\uff0c\u6bcf\u4e2a GPU \u4ec5\u4fdd\u5b58\u90e8\u5206 OPG\u3002\u5177\u4f53\u6765\u8bf4\uff0cZeRO-DP \u6709\u4e09\u4e2a\u4e3b\u8981\u7684\u4f18\u5316\u9636\u6bb5\uff0c\u5206\u522b\u5bf9\u5e94 O\u3001P \u548c G\u3002\u4e09\u4e2a\u9636\u6bb5\u9010\u7ea7\u9012\u52a0\uff1a \u9636\u6bb51\uff0c\u4f18\u5316\u5668\u72b6\u6001\u5206\u533a\uff08P os \uff09\uff1a\u663e\u5b58\u6d88\u8017\u51cf\u5c11 4 \u500d\uff0c\u901a\u4fe1\u91cf\u4e0e\u6570\u636e\u5e76\u884c\u76f8\u540c\u3002 \u9636\u6bb52\uff0c\u6dfb\u52a0\u68af\u5ea6\u5206\u533a\u4f18\u5316\uff08P os+g \uff09\uff1a\u663e\u5b58\u6d88\u8017\u51cf\u5c11 8 \u500d\uff0c\u901a\u4fe1\u91cf\u4e0e\u6570\u636e\u5e76\u884c\u76f8\u540c\u3002 \u9636\u6bb53\uff0c\u6dfb\u52a0\u53c2\u6570\u5206\u533a\u4f18\u5316\uff08P os+g+p \uff09\uff1a\u6a21\u578b\u5360\u7528\u7684\u663e\u5b58\u88ab\u5e73\u5747\u5206\u914d\u5230\u6bcf\u4e2a GPU \u4e2d\uff0c\u663e\u5b58\u6d88\u8017\u91cf\u4e0e\u6570\u636e\u5e76\u884c\u7684\u5e76\u884c\u5ea6\u6210\u7ebf\u6027\u53cd\u6bd4\u5173\u7cfb\uff0c\u4f46\u901a\u4fe1\u91cf\u4f1a\u6709\u4e9b\u8bb8\u589e\u52a0\u3002 \u4e09\u4e2a\u9636\u6bb5\u7684\u663e\u5b58\u6d88\u8017\u7684\u5206\u5e03\u60c5\u51b5\u53ef\u4ee5\u53c2\u89c1\u4e0b\u56fe\uff08\u6765\u81ea ZeRO \u539f\u8bba\u6587 Figure 1\uff09\uff1a ZeRO \u4f7f\u7528\u793a\u4f8b \u00b6 \u9996\u5148\u5bfc\u5165 OneFlow\uff1a import oneflow as flow from oneflow import nn \u5b9a\u4e49\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u6d41\u7a0b \u00b6 \u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e0b\u7684\u8bad\u7ec3\u6d41\u7a0b\uff0c\u4e0e \u901a\u8fc7\u8bbe\u7f6e SBP \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u4e2d\u6240\u4ecb\u7ecd\u7684\u662f\u7c7b\u4f3c\u7684\u3002 Note \u53ea\u8981\u5b58\u5728\u6570\u636e\u5e76\u884c\u7ec4\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528ZeRO\u6765\u505a\u5185\u5b58\u4f18\u5316\u3002\u6bd4\u59822D/3D\u5e76\u884c\u4e2d\uff0c\u53ea\u8981\u5b58\u5728\u6570\u636e\u5e76\u884c\u7ec4\uff0c\u90fd\u53ef\u4ee5\u6253\u5f00ZeRO\u3002 \u5b9a\u4e49\u4e4b\u540e\u8981\u4f7f\u7528\u5230 placement\u3001SBP \u7b49\uff1a P = flow . placement ( \"cuda\" , ranks = [ 0 , 1 ]) B = flow . sbp . broadcast S0 = flow . sbp . split ( 0 ) DEVICE = \"cuda\" \u4e3a\u4e86\u4fbf\u4e8e\u6f14\u793a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\uff0c\u7136\u540e\u5e7f\u64ad\u5230\u96c6\u7fa4\u4e0a\uff1a model = nn . Sequential ( nn . Linear ( 256 , 128 ), nn . ReLU (), nn . Linear ( 128 , 10 )) model = model . to ( DEVICE ) model . train () model = model . to_global ( placement = P , sbp = B ) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) ZeRO \u662f\u5728 nn.Graph \u7684\u56fe\u7f16\u8bd1\u5668\u4e2d\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u52a8\u6001\u56fe\u6a21\u578b\u8f6c\u6362\u4e3a nn.Graph\uff1a class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model self . loss_fn = loss_fn self . add_optimizer ( optimizer ) # TODO: \u8bbe\u7f6e ZeRO def build ( self , x , y ): preds = self . model ( x ) loss = self . loss_fn ( preds , y ) loss . backward () return preds \u5b9a\u4e49\u8bad\u7ec3\u6d41\u7a0b\uff1a graph_model = CustomGraph () for _ in range ( 100 ): x = flow . randn ( 128 , 256 ) . to ( DEVICE ) y = flow . ones ( 128 , 1 , dtype = flow . int64 ) . to ( DEVICE ) global_x = x . to_global ( placement = P , sbp = S0 ) global_y = y . to_global ( placement = P , sbp = S0 ) graph_model ( global_x , global_y ) \u7136\u540e\u901a\u8fc7 launch \u6a21\u5757 \u542f\u52a8\u8bad\u7ec3\u5373\u53ef\u3002 \u5728 nn.Graph \u4e2d\u5f00\u542f ZeRO \u00b6 \u901a\u8fc7 config.enable_zero \u63a5\u53e3\u53ef\u4ee5\u5f00\u542fZeRO\u4f18\u5316\u3002 \u5f00\u542f\u9636\u6bb51\u4f18\u5316 \u00b6 class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () ... # \u8bbe\u7f6e ZeRO \u5f00\u542f stage 1 self . config . enable_zero ( True , stage = 1 ) ... Note \u5f53\u4f7f\u7528\u6a21\u578b\u8fde\u7eed\u8fdb\u884c\u8bad\u7ec3\u548c\u548c\u9884\u6d4b\u65f6\uff1a\u8bad\u7ec3\u6267\u884c\u4e00\u6b21\u540e\uff0cZeRO \u4f1a\u81ea\u52a8\u628a\u6a21\u578b\u7684 SBP \u53c2\u6570\u4ece Broadcast \u6539\u53d8\u4e3a Split\uff1b\u5728\u6267\u884c\u9884\u6d4b\u65f6\uff0c\u5c06\u4f1a\u4f7f\u7528 Split \u81ea\u52a8\u63a8\u7406\uff0c\u65e0\u9700\u914d\u7f6e ZeRO\u3002 \u5f00\u542f\u9636\u6bb5 2 \u4f18\u5316 \u00b6 class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () ... # \u8bbe\u7f6e ZeRO \u5f00\u542f stage 2 self . config . enable_zero ( True , stage = 2 ) ... \u4e00\u822c\u9636\u6bb5 2 \u7684\u4f18\u5316\u7684\u663e\u5b58\u4f18\u5316\u5927\u3001\u901f\u5ea6\u5f71\u54cd\u5c0f\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528\u9636\u6bb5 2 \u4f18\u5316\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u5f00\u59cb\u9636\u6bb5 2 \u4f18\u5316\uff1a class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () ... # \u8bbe\u7f6e ZeRO \u5f00\u542f stage 2 self . config . enable_zero () ... \u5f00\u542f\u9636\u6bb5 3 \u4f18\u5316 \u00b6 class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () ... # \u8bbe\u7f6e ZeRO \u5f00\u542f stage 3 self . config . enable_zero ( True , stage = 3 ) ... \u867d\u7136\u5f00\u542f\u7b2c\u4e09\u9636\u6bb5\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u663e\u5b58\u6d88\u8017\uff0c\u4f46\u8fd9\u4f1a\u589e\u52a0\u901a\u4fe1\u6210\u672c\uff0c\u6267\u884c\u901f\u5ea6\u4f1a\u964d\u4f4e\u3002","title":"Zero Redundancy Optimizer (ZeRO)"},{"location":"cookies/zero.html#zero-redundancy-optimizer-zero","text":"","title":"Zero Redundancy Optimizer (ZeRO)"},{"location":"cookies/zero.html#zero","text":"Zero Redundancy Optimizer (ZeRO) \u662f\u8bba\u6587 ZeRO: Memory Optimization Towards Training A Trillion Parameter Models \u63d0\u51fa\u7684\u4e00\u79cd\u7528\u4e8e\u51cf\u5c11\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e0b\u7684\u663e\u5b58\u5360\u7528\u7684\u65b9\u6cd5\u3002 \u5728\u666e\u901a\u7684\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e2d\uff0c\u6bcf\u4e2a GPU \u90fd\u72ec\u7acb\u5730\u7ef4\u62a4\u4e00\u7ec4\u5b8c\u6574\u7684\u6a21\u578b\u53c2\u6570\uff0c\u8ba1\u7b97\u4e0e\u901a\u4fe1\u6548\u7387\u8f83\u9ad8\uff0c\u4f46\u5185\u5b58\u6548\u7387\u8f83\u5dee\u3002\u8fd9\u4e2a\u95ee\u9898\u5728\u8bad\u7ec3\u5927\u578b\u6a21\u578b\u65f6\u5c24\u4e3a\u7a81\u51fa\u3002ZeRO \u7531 ZeRO-DP \u548c ZeRO-R \u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u51cf\u5c11\u663e\u5b58\u6d88\u8017\u91cf\uff0c\u8fd9\u610f\u5473\u7740\u5728\u540c\u6837\u7684\u663e\u5b58\u4e0b\uff0c\u53ef\u4ee5\u8bad\u7ec3\u66f4\u5927\u7684\u6a21\u578b\uff0c\u4e5f\u610f\u5473\u7740\u5bf9\u4e8e\u4ee5\u5f80\u53ea\u80fd\u901a\u8fc7\u6a21\u578b\u5e76\u884c\u7b56\u7565\u624d\u80fd\u8bad\u7ec3\u7684\u5927\u6a21\u578b\u4e5f\u6709\u53ef\u80fd\u4f7f\u7528\u6570\u636e\u5e76\u884c\u3002 \u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u65f6\u7684\u663e\u5b58\u6d88\u8017\u53ef\u4ee5\u5206\u4e3a\u4e24\u5927\u90e8\u5206\uff1a \u6a21\u578b\u72b6\u6001(model states) \u3002\u5bf9\u4e8e\u5927\u578b\u6a21\u578b\u6765\u8bf4\uff0c\u5927\u90e8\u5206\u663e\u5b58\u6d88\u8017\u90fd\u662f\u88ab\u6a21\u578b\u72b6\u6001\u5360\u7528\u7684\uff0c\u4e3b\u8981\u5305\u62ec\u4e09\u90e8\u5206\uff1a\u4f18\u5316\u5668\u7684\u72b6\u6001(Optimizer States)\u3001\u68af\u5ea6(Gradients)\u3001\u53c2\u6570(Parameters)\u3002\u4e09\u8005\u7b80\u79f0\u4e3a OPG \u3002 \u6b8b\u4f59\u72b6\u6001(residual states) \u3002\u5305\u62ec\u6fc0\u6d3b\u51fd\u6570\u3001\u4e34\u65f6\u7f13\u51b2\u533a\u548c\u4e0d\u53ef\u7528\u7684\u5185\u5b58\u788e\u7247\u3002 ZeRO-DP \u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff0c\u901a\u8fc7\u5bf9 OPG \u72b6\u6001\u8fdb\u884c\u5206\u533a\u800c\u4e0d\u662f\u76f4\u63a5\u590d\u5236\u6765\u6d88\u9664\u5185\u5b58\u5197\u4f59\uff0c\u6bcf\u4e2a GPU \u4ec5\u4fdd\u5b58\u90e8\u5206 OPG\u3002\u5177\u4f53\u6765\u8bf4\uff0cZeRO-DP \u6709\u4e09\u4e2a\u4e3b\u8981\u7684\u4f18\u5316\u9636\u6bb5\uff0c\u5206\u522b\u5bf9\u5e94 O\u3001P \u548c G\u3002\u4e09\u4e2a\u9636\u6bb5\u9010\u7ea7\u9012\u52a0\uff1a \u9636\u6bb51\uff0c\u4f18\u5316\u5668\u72b6\u6001\u5206\u533a\uff08P os \uff09\uff1a\u663e\u5b58\u6d88\u8017\u51cf\u5c11 4 \u500d\uff0c\u901a\u4fe1\u91cf\u4e0e\u6570\u636e\u5e76\u884c\u76f8\u540c\u3002 \u9636\u6bb52\uff0c\u6dfb\u52a0\u68af\u5ea6\u5206\u533a\u4f18\u5316\uff08P os+g \uff09\uff1a\u663e\u5b58\u6d88\u8017\u51cf\u5c11 8 \u500d\uff0c\u901a\u4fe1\u91cf\u4e0e\u6570\u636e\u5e76\u884c\u76f8\u540c\u3002 \u9636\u6bb53\uff0c\u6dfb\u52a0\u53c2\u6570\u5206\u533a\u4f18\u5316\uff08P os+g+p \uff09\uff1a\u6a21\u578b\u5360\u7528\u7684\u663e\u5b58\u88ab\u5e73\u5747\u5206\u914d\u5230\u6bcf\u4e2a GPU \u4e2d\uff0c\u663e\u5b58\u6d88\u8017\u91cf\u4e0e\u6570\u636e\u5e76\u884c\u7684\u5e76\u884c\u5ea6\u6210\u7ebf\u6027\u53cd\u6bd4\u5173\u7cfb\uff0c\u4f46\u901a\u4fe1\u91cf\u4f1a\u6709\u4e9b\u8bb8\u589e\u52a0\u3002 \u4e09\u4e2a\u9636\u6bb5\u7684\u663e\u5b58\u6d88\u8017\u7684\u5206\u5e03\u60c5\u51b5\u53ef\u4ee5\u53c2\u89c1\u4e0b\u56fe\uff08\u6765\u81ea ZeRO \u539f\u8bba\u6587 Figure 1\uff09\uff1a","title":"ZeRO \u7b80\u4ecb"},{"location":"cookies/zero.html#zero_1","text":"\u9996\u5148\u5bfc\u5165 OneFlow\uff1a import oneflow as flow from oneflow import nn","title":"ZeRO \u4f7f\u7528\u793a\u4f8b"},{"location":"cookies/zero.html#_1","text":"\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e0b\u7684\u8bad\u7ec3\u6d41\u7a0b\uff0c\u4e0e \u901a\u8fc7\u8bbe\u7f6e SBP \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u4e2d\u6240\u4ecb\u7ecd\u7684\u662f\u7c7b\u4f3c\u7684\u3002 Note \u53ea\u8981\u5b58\u5728\u6570\u636e\u5e76\u884c\u7ec4\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528ZeRO\u6765\u505a\u5185\u5b58\u4f18\u5316\u3002\u6bd4\u59822D/3D\u5e76\u884c\u4e2d\uff0c\u53ea\u8981\u5b58\u5728\u6570\u636e\u5e76\u884c\u7ec4\uff0c\u90fd\u53ef\u4ee5\u6253\u5f00ZeRO\u3002 \u5b9a\u4e49\u4e4b\u540e\u8981\u4f7f\u7528\u5230 placement\u3001SBP \u7b49\uff1a P = flow . placement ( \"cuda\" , ranks = [ 0 , 1 ]) B = flow . sbp . broadcast S0 = flow . sbp . split ( 0 ) DEVICE = \"cuda\" \u4e3a\u4e86\u4fbf\u4e8e\u6f14\u793a\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u578b\uff0c\u7136\u540e\u5e7f\u64ad\u5230\u96c6\u7fa4\u4e0a\uff1a model = nn . Sequential ( nn . Linear ( 256 , 128 ), nn . ReLU (), nn . Linear ( 128 , 10 )) model = model . to ( DEVICE ) model . train () model = model . to_global ( placement = P , sbp = B ) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) ZeRO \u662f\u5728 nn.Graph \u7684\u56fe\u7f16\u8bd1\u5668\u4e2d\u5b9e\u73b0\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u52a8\u6001\u56fe\u6a21\u578b\u8f6c\u6362\u4e3a nn.Graph\uff1a class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . model = model self . loss_fn = loss_fn self . add_optimizer ( optimizer ) # TODO: \u8bbe\u7f6e ZeRO def build ( self , x , y ): preds = self . model ( x ) loss = self . loss_fn ( preds , y ) loss . backward () return preds \u5b9a\u4e49\u8bad\u7ec3\u6d41\u7a0b\uff1a graph_model = CustomGraph () for _ in range ( 100 ): x = flow . randn ( 128 , 256 ) . to ( DEVICE ) y = flow . ones ( 128 , 1 , dtype = flow . int64 ) . to ( DEVICE ) global_x = x . to_global ( placement = P , sbp = S0 ) global_y = y . to_global ( placement = P , sbp = S0 ) graph_model ( global_x , global_y ) \u7136\u540e\u901a\u8fc7 launch \u6a21\u5757 \u542f\u52a8\u8bad\u7ec3\u5373\u53ef\u3002","title":"\u5b9a\u4e49\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u6d41\u7a0b"},{"location":"cookies/zero.html#nngraph-zero","text":"\u901a\u8fc7 config.enable_zero \u63a5\u53e3\u53ef\u4ee5\u5f00\u542fZeRO\u4f18\u5316\u3002","title":"\u5728 nn.Graph \u4e2d\u5f00\u542f ZeRO"},{"location":"cookies/zero.html#1","text":"class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () ... # \u8bbe\u7f6e ZeRO \u5f00\u542f stage 1 self . config . enable_zero ( True , stage = 1 ) ... Note \u5f53\u4f7f\u7528\u6a21\u578b\u8fde\u7eed\u8fdb\u884c\u8bad\u7ec3\u548c\u548c\u9884\u6d4b\u65f6\uff1a\u8bad\u7ec3\u6267\u884c\u4e00\u6b21\u540e\uff0cZeRO \u4f1a\u81ea\u52a8\u628a\u6a21\u578b\u7684 SBP \u53c2\u6570\u4ece Broadcast \u6539\u53d8\u4e3a Split\uff1b\u5728\u6267\u884c\u9884\u6d4b\u65f6\uff0c\u5c06\u4f1a\u4f7f\u7528 Split \u81ea\u52a8\u63a8\u7406\uff0c\u65e0\u9700\u914d\u7f6e ZeRO\u3002","title":"\u5f00\u542f\u9636\u6bb51\u4f18\u5316"},{"location":"cookies/zero.html#2","text":"class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () ... # \u8bbe\u7f6e ZeRO \u5f00\u542f stage 2 self . config . enable_zero ( True , stage = 2 ) ... \u4e00\u822c\u9636\u6bb5 2 \u7684\u4f18\u5316\u7684\u663e\u5b58\u4f18\u5316\u5927\u3001\u901f\u5ea6\u5f71\u54cd\u5c0f\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528\u9636\u6bb5 2 \u4f18\u5316\u3002\u53ef\u4ee5\u7b80\u5355\u7684\u5f00\u59cb\u9636\u6bb5 2 \u4f18\u5316\uff1a class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () ... # \u8bbe\u7f6e ZeRO \u5f00\u542f stage 2 self . config . enable_zero () ...","title":"\u5f00\u542f\u9636\u6bb5 2 \u4f18\u5316"},{"location":"cookies/zero.html#3","text":"class CustomGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () ... # \u8bbe\u7f6e ZeRO \u5f00\u542f stage 3 self . config . enable_zero ( True , stage = 3 ) ... \u867d\u7136\u5f00\u542f\u7b2c\u4e09\u9636\u6bb5\u53ef\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u663e\u5b58\u6d88\u8017\uff0c\u4f46\u8fd9\u4f1a\u589e\u52a0\u901a\u4fe1\u6210\u672c\uff0c\u6267\u884c\u901f\u5ea6\u4f1a\u964d\u4f4e\u3002","title":"\u5f00\u542f\u9636\u6bb5 3 \u4f18\u5316"},{"location":"parallelism/01_introduction.html","text":"\u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u00b6 \u4e3a\u4ec0\u4e48\u5206\u5e03\u5f0f\u8bad\u7ec3\u8d8a\u6765\u8d8a\u6d41\u884c \u00b6 \u8fd1\u5e74\u6765\uff0c\u6df1\u5ea6\u5b66\u4e60\u88ab\u5e7f\u6cdb\u5e94\u7528\u5230\u5404\u4e2a\u9886\u57df\uff0c\u5305\u62ec\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u8bed\u8a00\u7406\u89e3\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u5e7f\u544a\u63a8\u8350\u7b49\u3002\u5728\u8fd9\u4e9b\u4e0d\u540c\u7684\u9886\u57df\u4e2d\uff0c\u4e00\u4e2a\u5171\u540c\u7684\u7279\u70b9\u5c31\u662f\u6a21\u578b\u89c4\u6a21\u8d8a\u6765\u8d8a\u5927\uff0c\u6bd4\u5982 GPT-3 \u6a21\u578b\u7684\u53c2\u6570\u91cf\u8fbe\u52301750\u4ebf\u3002\u5373\u4f7f\u75281024\u5f20 80 GB \u7684 A100\uff0c\u90a3\u4e48\u5b8c\u6574\u8bad\u7ec3 GPT-3 \u7684\u65f6\u957f\u90fd\u9700\u89811\u4e2a\u6708\u3002 \u6a21\u578b\u89c4\u6a21\u7684\u6269\u5927\uff0c\u5bf9\u786c\u4ef6\uff08\u7b97\u529b\u3001\u5185\u5b58\uff09\u7684\u53d1\u5c55\u63d0\u51fa\u8981\u6c42\u3002\u7136\u800c\uff0c\u56e0\u4e3a \u5185\u5b58\u5899 \u7684\u5b58\u5728\uff0c\u5355\u4e00\u8bbe\u5907\u7684\u7b97\u529b\u53ca\u5bb9\u91cf\uff0c\u53d7\u9650\u4e8e\u7269\u7406\u5b9a\u5f8b\uff0c\u6301\u7eed\u63d0\u9ad8\u82af\u7247\u7684\u96c6\u6210\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u96be\u4ee5\u8ddf\u4e0a\u6a21\u578b\u6269\u5927\u7684\u9700\u6c42\u3002 \u4e3a\u4e86\u89e3\u51b3\u7b97\u529b\u589e\u901f\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u4eba\u4eec\u8003\u8651\u7528\u591a\u8282\u70b9\u96c6\u7fa4\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u4ee5\u63d0\u5347\u7b97\u529b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u52bf\u5728\u5fc5\u884c\u3002 \u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565 \u00b6 \u7b80\u5355\u7684\u673a\u5668\u5806\u53e0\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5e26\u6765\u7b97\u529b\u7684\u589e\u957f\u3002\u56e0\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u5e76\u4e0d\u662f\u5355\u7eaf\u7684\u201c\u628a\u539f\u6765\u4e00\u4e2a\u8bbe\u5907\u505a\u7684\u4e8b\u60c5\uff0c\u73b0\u5728\u5206\u7ed9\u591a\u4e2a\u8bbe\u5907\u5404\u81ea\u505a\u201d\uff0c\u5b83\u4e0d\u4ec5\u9700\u8981\u591a\u4e2a\u8bbe\u5907\u8fdb\u884c\u8ba1\u7b97\uff0c\u8fd8\u6d89\u53ca\u5230\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u53ea\u6709\u534f\u8c03\u597d\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u4e0e\u901a\u4fe1\uff0c\u624d\u80fd\u505a\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u6211\u4eec\u5c06\u4ee5\u77e9\u9635\u4e58\u6cd5\u7684\u4f8b\u5b50\uff0c\u89e3\u91ca\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u7684\u533a\u522b\u3002 \u5148\u4e86\u89e3\u4ee5\u4e0b\u903b\u8f91\u4e0a\u7684\u77e9\u9635\u4e58\u6cd5\u4f8b\u5b50: \u5047\u8bbe\u795e\u7ecf\u7f51\u7edc\u4e2d\u67d0\u4e00\u5c42\u662f\u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u5176\u4e2d\u7684\u8f93\u5165 \\(x\\) \u7684\u5f62\u72b6\u4e3a \\(4\\times5\\) \uff0c\u6a21\u578b\u53c2\u6570 \\(w\\) \u7684\u5f62\u72b6\u4e3a \\(5\\times8\\) \uff0c\u90a3\u4e48\uff0c\u77e9\u9635\u4e58\u6cd5\u8f93\u51fa\u5f62\u72b6\u4e3a \\(4\\times8\\) \u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u4e2d\uff0c\u4ee5\u4e0a\u77e9\u9635\u4e58\u6cd5\uff0c\u5148\u8ba1\u7b97\u5f97\u5230 \\(out\\) \uff0c\u5e76\u5c06 \\(out\\) \u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42\uff0c\u5e76\u6700\u7ec8\u8ba1\u7b97\u5f97\u5230 \\(loss\\) \uff0c\u7136\u540e\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5f97\u5230 \\(\\frac{\\partial loss}{\\partial w}\\) \uff0c\u7528\u4e8e\u66f4\u65b0 \\(w\\) \u3002 \u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\uff0c\u4f9d\u636e\u662f\u5207\u5206 \\(x\\) \u8fd8\u662f \\(w\\) \u7684\u4e0d\u540c\uff0c\u5206\u4e3a\u201c\u6570\u636e\u5e76\u884c\u201d\u548c\u201c\u6a21\u578b\u5e76\u884c\u201d\u7b56\u7565\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecb\u7ecd\u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565\u3002 \u6570\u636e\u5e76\u884c \u00b6 \u6240\u8c13\u7684\u6570\u636e\u5e76\u884c\uff0c\u5c31\u662f\u5c06\u6570\u636e \\(x\\) \u8fdb\u884c\u5207\u5206\uff0c\u800c\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b \\(w\\) \u662f\u5b8c\u6574\u7684\u3001\u4e00\u81f4\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(x\\) \u88ab\u6309\u7167\u7b2c0\u7ef4\u5ea6\u5e73\u5747\u5207\u5206\u52302\u4e2a\u8bbe\u5907\u4e0a\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u90fd\u6709\u5b8c\u6574\u7684 \\(w\\) \u3002 \u8fd9\u6837\uff0c\u5728\u4e24\u53f0\u8bbe\u5907\u4e0a\uff0c\u5206\u522b\u5f97\u5230\u7684\u8f93\u51fa\uff0c\u90fd\u53ea\u662f\u903b\u8f91\u4e0a\u8f93\u51fa\u7684\u4e00\u534a\uff08\u5f62\u72b6\u4e3a \\(2\\times8\\) \uff09\uff0c\u5c06\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u8f93\u51fa\u62fc\u63a5\u5230\u4e00\u8d77\uff0c\u624d\u80fd\u5f97\u5230\u903b\u8f91\u4e0a\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a\u6570\u636e\u88ab\u5206\u53d1\u5230\u4e862\u4e2a\u8bbe\u5907\u4e0a\uff0c\u56e0\u6b64\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\uff0c\u5404\u81ea\u8bbe\u5907\u4e0a\u5f97\u5230\u7684 \\(\\frac{\\partial loss}{\\partial w}\\) \u4f1a\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u68af\u5ea6\u66f4\u65b0\u5404\u81ea\u7684\u6a21\u578b\uff0c\u4f1a\u9020\u62102\u4e2a\u8bbe\u5907\u4e0a\u7684 \u6a21\u578b\u4e0d\u4e00\u81f4 \uff0c\u8bad\u7ec3\u5c31\u5931\u53bb\u4e86\u610f\u4e49\uff08\u5230\u5e95\u7528\u54ea\u4e2a\u6a21\u578b\u597d\u5462\uff1f\uff09\u3002 \u56e0\u6b64\uff0c\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e0b\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5bf9\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u68af\u5ea6\u8fdb\u884c AllReduce \uff0c\u4ee5\u786e\u4fdd\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002 \u5f53\u6570\u636e\u96c6\u8f83\u5927\uff0c\u6a21\u578b\u8f83\u5c0f\u65f6\uff0c\u7531\u4e8e\u53cd\u5411\u8fc7\u7a0b\u4e2d\u4e3a\u540c\u6b65\u68af\u5ea6\u4ea7\u751f\u7684\u901a\u4fe1\u4ee3\u4ef7\u8f83\u5c0f\uff0c\u6b64\u65f6\u9009\u62e9\u6570\u636e\u5e76\u884c\u4e00\u822c\u6bd4\u8f83\u6709\u4f18\u52bf\uff0c\u5e38\u89c1\u7684\u89c6\u89c9\u5206\u7c7b\u6a21\u578b\uff0c\u5982 ResNet50\uff0c\u6bd4\u8f83\u9002\u5408\u91c7\u7528\u6570\u636e\u5e76\u884c\u3002 \u6a21\u578b\u5e76\u884c \u00b6 \u5f53\u795e\u7ecf\u7f51\u7edc\u975e\u5e38\u5de8\u5927\uff0c\u6570\u636e\u5e76\u884c\u540c\u6b65\u68af\u5ea6\u7684\u4ee3\u4ef7\u5c31\u4f1a\u5f88\u5927\uff0c\u751a\u81f3\u7f51\u7edc\u53ef\u80fd\u5de8\u5927\u5230\u65e0\u6cd5\u5b58\u653e\u5230\u5355\u4e00\u8ba1\u7b97\u8bbe\u5907\u4e2d\uff0c\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u6a21\u578b\u5e76\u884c\u7b56\u7565\u89e3\u51b3\u95ee\u9898\u3002 \u6240\u8c13\u7684\u6a21\u578b\u5e76\u884c\uff0c\u5c31\u662f\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u662f\u5b8c\u6574\u7684\u3001\u4e00\u81f4\u7684\uff0c\u800c\u6a21\u578b \\(w\\) \u88ab\u5207\u5206\u5230\u4e86\u5404\u4e2a\u8bbe\u5907\u4e0a\uff0c\u6bcf\u4e2a\u8bbe\u5907\u53ea\u62e5\u6709\u6a21\u578b\u7684\u4e00\u90e8\u5206\uff0c\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u62fc\u5728\u4e00\u8d77\uff0c\u624d\u662f\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(w\\) \u88ab\u6309\u7167\u7b2c1\u7ef4\u5ea6\u5e73\u5747\u5207\u5206\u52302\u4e2a\u8bbe\u5907\u4e0a\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u90fd\u6709\u5b8c\u6574\u7684 \\(x\\) \u3002\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u8f93\u51fa\u4e5f\u9700\u8981\u901a\u8fc7\u62fc\u63a5\u624d\u80fd\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u8f93\u51fa\u3002 \u6a21\u578b\u5e76\u884c\u7684\u597d\u5904\u662f\uff0c\u7701\u53bb\u4e86\u591a\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u68af\u5ea6 AllReduce\uff1b\u4f46\u662f\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8bbe\u5907\u90fd\u9700\u8981\u5b8c\u6574\u7684\u6570\u636e\u8f93\u5165\uff0c\u56e0\u6b64\uff0c\u6570\u636e\u4f1a\u5728\u591a\u4e2a\u8bbe\u5907\u4e4b\u95f4\u8fdb\u884c\u5e7f\u64ad\uff0c\u4ea7\u751f\u901a\u4fe1\u4ee3\u4ef7\u3002\u6bd4\u5982\uff0c\u4e0a\u56fe\u4e2d\u7684\u6700\u7ec8\u5f97\u5230\u7684 \\(out~(4\\times8)\\) \uff0c\u5982\u679c\u5b83\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u90a3\u4e48\u5b83\u5c31\u9700\u8981\u88ab\u5e7f\u64ad\u53d1\u9001\u5230\u4e24\u4e2a\u8bbe\u5907\u4e0a\u3002 \u8bed\u8a00\u6a21\u578b\uff0c\u5982 BERT\uff0c\u5e38\u91c7\u7528\u6a21\u578b\u5e76\u884c\u3002 \u6d41\u6c34\u5e76\u884c \u00b6 \u5f53\u795e\u7ecf\u7f51\u7edc\u8fc7\u4e8e\u5de8\u5927\uff0c\u65e0\u6cd5\u5728\u4e00\u4e2a\u8bbe\u5907\u4e0a\u5b58\u653e\u65f6\uff0c\u9664\u4e86\u4e0a\u8ff0\u7684\u6a21\u578b\u5e76\u884c\u7684\u7b56\u7565\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u6d41\u6c34\u5e76\u884c\u3002 \u6d41\u6c34\u5e76\u884c\u6307\u5c06\u7f51\u7edc\u5207\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5e76\u5206\u53d1\u5230\u4e0d\u540c\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e4b\u95f4\u4ee5\u201c\u63a5\u529b\u201d\u7684\u65b9\u5f0f\u5b8c\u6210\u8bad\u7ec3\u3002 \u5982\u4e0b\u56fe\uff0c\u5c55\u793a\u4e86\u4e00\u4e2a\u903b\u8f91\u4e0a\u76844\u5c42\u7f51\u7edc\uff08 T1 \u81f3 T4 )\u662f\u5982\u4f55\u505a\u6d41\u6c34\u5e76\u884c\u7684\u3002 4\u5c42\u7f51\u7edc\u88ab\u5207\u5206\u52302\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5176\u4e2d GPU0 \u4e0a\u8fdb\u884c T1 \u4e0e T2 \u7684\u8fd0\u7b97\uff0c GPU1 \u4e0a\u8fdb\u884c T3 \u4e0e T4 \u7684\u8ba1\u7b97\u3002 GPU0 \u4e0a\u5b8c\u6210\u524d\u4e24\u5c42\u7684\u8ba1\u7b97\u540e\uff0c\u5b83\u7684\u8f93\u51fa\u88ab\u5f53\u4f5c GPU1 \u7684\u8f93\u5165\uff0c\u7ee7\u7eed\u8fdb\u884c\u540e\u4e24\u5c42\u7684\u8ba1\u7b97\u3002 \u6df7\u5408\u5e76\u884c \u00b6 \u7f51\u7edc\u7684\u8bad\u7ec3\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5c06\u591a\u79cd\u5e76\u884c\u7b56\u7565\u6df7\u7528\uff0c\u4ee5 GPT-3 \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u662f\u5b83\u8bad\u7ec3\u65f6\u7684\u8bbe\u5907\u5e76\u884c\u65b9\u6848\uff1a \u5b83\u9996\u5148\u88ab\u5206\u4e3a 64 \u4e2a\u9636\u6bb5\uff0c\u8fdb\u884c\u6d41\u6c34\u5e76\u884c\u3002\u6bcf\u4e2a\u9636\u6bb5\u90fd\u8fd0\u884c\u5728 6 \u53f0 DGX-A100 \u4e3b\u673a\u4e0a\u3002\u57286\u53f0\u4e3b\u673a\u4e4b\u95f4\uff0c\u8fdb\u884c\u7684\u662f\u6570\u636e\u5e76\u884c\u8bad\u7ec3\uff1b\u6bcf\u53f0\u4e3b\u673a\u6709 8 \u5f20 GPU \u663e\u5361\uff0c\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u76848\u5f20 GPU \u663e\u5361\u4e4b\u95f4\u662f\u8fdb\u884c\u6a21\u578b\u5e76\u884c\u8bad\u7ec3\u3002 \u5e76\u884c\u7b56\u7565\u7684\u9009\u62e9\u5f71\u54cd\u7740\u8bad\u7ec3\u6548\u7387\uff0c\u6846\u67b6\u5bf9\u5e76\u884c\u8bad\u7ec3\u7684\u63a5\u53e3\u652f\u6301\u7a0b\u5ea6\uff0c\u51b3\u5b9a\u4e86\u7b97\u6cd5\u5de5\u7a0b\u5e08\u7684\u5f00\u53d1\u6548\u7387\u3002OneFlow \u9488\u5bf9\u5206\u5e03\u5f0f\u8bad\u7ec3\u6240\u505a\u7684\u7cfb\u7edf\u7ea7\u8bbe\u8ba1\u548c\u521b\u65b0\uff0c\u4e3a\u7528\u6237\u8f7b\u677e\u4e0a\u624b\u5206\u5e03\u5f0f\u8bad\u7ec3\u505a\u8db3\u4e86\u94fa\u57ab\u3002\u6211\u4eec\u5c06\u5728\u672c\u4e13\u9898\u7684\u5176\u5b83\u6587\u7ae0\u4e2d\u770b\u5230\u76f8\u5173\u793a\u4f8b\u3002","title":"\u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565"},{"location":"parallelism/01_introduction.html#_1","text":"","title":"\u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565"},{"location":"parallelism/01_introduction.html#_2","text":"\u8fd1\u5e74\u6765\uff0c\u6df1\u5ea6\u5b66\u4e60\u88ab\u5e7f\u6cdb\u5e94\u7528\u5230\u5404\u4e2a\u9886\u57df\uff0c\u5305\u62ec\u8ba1\u7b97\u673a\u89c6\u89c9\u3001\u8bed\u8a00\u7406\u89e3\u3001\u8bed\u97f3\u8bc6\u522b\u3001\u5e7f\u544a\u63a8\u8350\u7b49\u3002\u5728\u8fd9\u4e9b\u4e0d\u540c\u7684\u9886\u57df\u4e2d\uff0c\u4e00\u4e2a\u5171\u540c\u7684\u7279\u70b9\u5c31\u662f\u6a21\u578b\u89c4\u6a21\u8d8a\u6765\u8d8a\u5927\uff0c\u6bd4\u5982 GPT-3 \u6a21\u578b\u7684\u53c2\u6570\u91cf\u8fbe\u52301750\u4ebf\u3002\u5373\u4f7f\u75281024\u5f20 80 GB \u7684 A100\uff0c\u90a3\u4e48\u5b8c\u6574\u8bad\u7ec3 GPT-3 \u7684\u65f6\u957f\u90fd\u9700\u89811\u4e2a\u6708\u3002 \u6a21\u578b\u89c4\u6a21\u7684\u6269\u5927\uff0c\u5bf9\u786c\u4ef6\uff08\u7b97\u529b\u3001\u5185\u5b58\uff09\u7684\u53d1\u5c55\u63d0\u51fa\u8981\u6c42\u3002\u7136\u800c\uff0c\u56e0\u4e3a \u5185\u5b58\u5899 \u7684\u5b58\u5728\uff0c\u5355\u4e00\u8bbe\u5907\u7684\u7b97\u529b\u53ca\u5bb9\u91cf\uff0c\u53d7\u9650\u4e8e\u7269\u7406\u5b9a\u5f8b\uff0c\u6301\u7eed\u63d0\u9ad8\u82af\u7247\u7684\u96c6\u6210\u8d8a\u6765\u8d8a\u56f0\u96be\uff0c\u96be\u4ee5\u8ddf\u4e0a\u6a21\u578b\u6269\u5927\u7684\u9700\u6c42\u3002 \u4e3a\u4e86\u89e3\u51b3\u7b97\u529b\u589e\u901f\u4e0d\u8db3\u7684\u95ee\u9898\uff0c\u4eba\u4eec\u8003\u8651\u7528\u591a\u8282\u70b9\u96c6\u7fa4\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u4ee5\u63d0\u5347\u7b97\u529b\uff0c\u5206\u5e03\u5f0f\u8bad\u7ec3\u52bf\u5728\u5fc5\u884c\u3002","title":"\u4e3a\u4ec0\u4e48\u5206\u5e03\u5f0f\u8bad\u7ec3\u8d8a\u6765\u8d8a\u6d41\u884c"},{"location":"parallelism/01_introduction.html#_3","text":"\u7b80\u5355\u7684\u673a\u5668\u5806\u53e0\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5e26\u6765\u7b97\u529b\u7684\u589e\u957f\u3002\u56e0\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u5e76\u4e0d\u662f\u5355\u7eaf\u7684\u201c\u628a\u539f\u6765\u4e00\u4e2a\u8bbe\u5907\u505a\u7684\u4e8b\u60c5\uff0c\u73b0\u5728\u5206\u7ed9\u591a\u4e2a\u8bbe\u5907\u5404\u81ea\u505a\u201d\uff0c\u5b83\u4e0d\u4ec5\u9700\u8981\u591a\u4e2a\u8bbe\u5907\u8fdb\u884c\u8ba1\u7b97\uff0c\u8fd8\u6d89\u53ca\u5230\u8bbe\u5907\u4e4b\u95f4\u7684\u6570\u636e\u4f20\u8f93\uff0c\u53ea\u6709\u534f\u8c03\u597d\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u4e0e\u901a\u4fe1\uff0c\u624d\u80fd\u505a\u9ad8\u6548\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u6211\u4eec\u5c06\u4ee5\u77e9\u9635\u4e58\u6cd5\u7684\u4f8b\u5b50\uff0c\u89e3\u91ca\u6570\u636e\u5e76\u884c\u3001\u6a21\u578b\u5e76\u884c\u7684\u533a\u522b\u3002 \u5148\u4e86\u89e3\u4ee5\u4e0b\u903b\u8f91\u4e0a\u7684\u77e9\u9635\u4e58\u6cd5\u4f8b\u5b50: \u5047\u8bbe\u795e\u7ecf\u7f51\u7edc\u4e2d\u67d0\u4e00\u5c42\u662f\u505a\u77e9\u9635\u4e58\u6cd5\uff0c\u5176\u4e2d\u7684\u8f93\u5165 \\(x\\) \u7684\u5f62\u72b6\u4e3a \\(4\\times5\\) \uff0c\u6a21\u578b\u53c2\u6570 \\(w\\) \u7684\u5f62\u72b6\u4e3a \\(5\\times8\\) \uff0c\u90a3\u4e48\uff0c\u77e9\u9635\u4e58\u6cd5\u8f93\u51fa\u5f62\u72b6\u4e3a \\(4\\times8\\) \u3002\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u4e2d\uff0c\u4ee5\u4e0a\u77e9\u9635\u4e58\u6cd5\uff0c\u5148\u8ba1\u7b97\u5f97\u5230 \\(out\\) \uff0c\u5e76\u5c06 \\(out\\) \u4f20\u9012\u7ed9\u4e0b\u4e00\u5c42\uff0c\u5e76\u6700\u7ec8\u8ba1\u7b97\u5f97\u5230 \\(loss\\) \uff0c\u7136\u540e\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5f97\u5230 \\(\\frac{\\partial loss}{\\partial w}\\) \uff0c\u7528\u4e8e\u66f4\u65b0 \\(w\\) \u3002 \u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\uff0c\u4f9d\u636e\u662f\u5207\u5206 \\(x\\) \u8fd8\u662f \\(w\\) \u7684\u4e0d\u540c\uff0c\u5206\u4e3a\u201c\u6570\u636e\u5e76\u884c\u201d\u548c\u201c\u6a21\u578b\u5e76\u884c\u201d\u7b56\u7565\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ecb\u7ecd\u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565\u3002","title":"\u5e38\u89c1\u7684\u5e76\u884c\u7b56\u7565"},{"location":"parallelism/01_introduction.html#_4","text":"\u6240\u8c13\u7684\u6570\u636e\u5e76\u884c\uff0c\u5c31\u662f\u5c06\u6570\u636e \\(x\\) \u8fdb\u884c\u5207\u5206\uff0c\u800c\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b \\(w\\) \u662f\u5b8c\u6574\u7684\u3001\u4e00\u81f4\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(x\\) \u88ab\u6309\u7167\u7b2c0\u7ef4\u5ea6\u5e73\u5747\u5207\u5206\u52302\u4e2a\u8bbe\u5907\u4e0a\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u90fd\u6709\u5b8c\u6574\u7684 \\(w\\) \u3002 \u8fd9\u6837\uff0c\u5728\u4e24\u53f0\u8bbe\u5907\u4e0a\uff0c\u5206\u522b\u5f97\u5230\u7684\u8f93\u51fa\uff0c\u90fd\u53ea\u662f\u903b\u8f91\u4e0a\u8f93\u51fa\u7684\u4e00\u534a\uff08\u5f62\u72b6\u4e3a \\(2\\times8\\) \uff09\uff0c\u5c06\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u8f93\u51fa\u62fc\u63a5\u5230\u4e00\u8d77\uff0c\u624d\u80fd\u5f97\u5230\u903b\u8f91\u4e0a\u5b8c\u6574\u7684\u8f93\u51fa\u3002 \u6ce8\u610f\uff0c\u56e0\u4e3a\u6570\u636e\u88ab\u5206\u53d1\u5230\u4e862\u4e2a\u8bbe\u5907\u4e0a\uff0c\u56e0\u6b64\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\uff0c\u5404\u81ea\u8bbe\u5907\u4e0a\u5f97\u5230\u7684 \\(\\frac{\\partial loss}{\\partial w}\\) \u4f1a\u4e0d\u4e00\u6837\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u68af\u5ea6\u66f4\u65b0\u5404\u81ea\u7684\u6a21\u578b\uff0c\u4f1a\u9020\u62102\u4e2a\u8bbe\u5907\u4e0a\u7684 \u6a21\u578b\u4e0d\u4e00\u81f4 \uff0c\u8bad\u7ec3\u5c31\u5931\u53bb\u4e86\u610f\u4e49\uff08\u5230\u5e95\u7528\u54ea\u4e2a\u6a21\u578b\u597d\u5462\uff1f\uff09\u3002 \u56e0\u6b64\uff0c\u6570\u636e\u5e76\u884c\u7b56\u7565\u4e0b\uff0c\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u5bf9\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u68af\u5ea6\u8fdb\u884c AllReduce \uff0c\u4ee5\u786e\u4fdd\u5404\u4e2a\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002 \u5f53\u6570\u636e\u96c6\u8f83\u5927\uff0c\u6a21\u578b\u8f83\u5c0f\u65f6\uff0c\u7531\u4e8e\u53cd\u5411\u8fc7\u7a0b\u4e2d\u4e3a\u540c\u6b65\u68af\u5ea6\u4ea7\u751f\u7684\u901a\u4fe1\u4ee3\u4ef7\u8f83\u5c0f\uff0c\u6b64\u65f6\u9009\u62e9\u6570\u636e\u5e76\u884c\u4e00\u822c\u6bd4\u8f83\u6709\u4f18\u52bf\uff0c\u5e38\u89c1\u7684\u89c6\u89c9\u5206\u7c7b\u6a21\u578b\uff0c\u5982 ResNet50\uff0c\u6bd4\u8f83\u9002\u5408\u91c7\u7528\u6570\u636e\u5e76\u884c\u3002","title":"\u6570\u636e\u5e76\u884c"},{"location":"parallelism/01_introduction.html#_5","text":"\u5f53\u795e\u7ecf\u7f51\u7edc\u975e\u5e38\u5de8\u5927\uff0c\u6570\u636e\u5e76\u884c\u540c\u6b65\u68af\u5ea6\u7684\u4ee3\u4ef7\u5c31\u4f1a\u5f88\u5927\uff0c\u751a\u81f3\u7f51\u7edc\u53ef\u80fd\u5de8\u5927\u5230\u65e0\u6cd5\u5b58\u653e\u5230\u5355\u4e00\u8ba1\u7b97\u8bbe\u5907\u4e2d\uff0c\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u6a21\u578b\u5e76\u884c\u7b56\u7565\u89e3\u51b3\u95ee\u9898\u3002 \u6240\u8c13\u7684\u6a21\u578b\u5e76\u884c\uff0c\u5c31\u662f\u6bcf\u4e2a\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u662f\u5b8c\u6574\u7684\u3001\u4e00\u81f4\u7684\uff0c\u800c\u6a21\u578b \\(w\\) \u88ab\u5207\u5206\u5230\u4e86\u5404\u4e2a\u8bbe\u5907\u4e0a\uff0c\u6bcf\u4e2a\u8bbe\u5907\u53ea\u62e5\u6709\u6a21\u578b\u7684\u4e00\u90e8\u5206\uff0c\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u4e0a\u7684\u6a21\u578b\u62fc\u5728\u4e00\u8d77\uff0c\u624d\u662f\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c \\(w\\) \u88ab\u6309\u7167\u7b2c1\u7ef4\u5ea6\u5e73\u5747\u5207\u5206\u52302\u4e2a\u8bbe\u5907\u4e0a\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e0a\u90fd\u6709\u5b8c\u6574\u7684 \\(x\\) \u3002\u4e24\u4e2a\u8bbe\u5907\u4e0a\u7684\u8f93\u51fa\u4e5f\u9700\u8981\u901a\u8fc7\u62fc\u63a5\u624d\u80fd\u5f97\u5230\u903b\u8f91\u4e0a\u7684\u8f93\u51fa\u3002 \u6a21\u578b\u5e76\u884c\u7684\u597d\u5904\u662f\uff0c\u7701\u53bb\u4e86\u591a\u4e2a\u8bbe\u5907\u4e4b\u95f4\u7684\u68af\u5ea6 AllReduce\uff1b\u4f46\u662f\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8bbe\u5907\u90fd\u9700\u8981\u5b8c\u6574\u7684\u6570\u636e\u8f93\u5165\uff0c\u56e0\u6b64\uff0c\u6570\u636e\u4f1a\u5728\u591a\u4e2a\u8bbe\u5907\u4e4b\u95f4\u8fdb\u884c\u5e7f\u64ad\uff0c\u4ea7\u751f\u901a\u4fe1\u4ee3\u4ef7\u3002\u6bd4\u5982\uff0c\u4e0a\u56fe\u4e2d\u7684\u6700\u7ec8\u5f97\u5230\u7684 \\(out~(4\\times8)\\) \uff0c\u5982\u679c\u5b83\u4f5c\u4e3a\u4e0b\u4e00\u5c42\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u90a3\u4e48\u5b83\u5c31\u9700\u8981\u88ab\u5e7f\u64ad\u53d1\u9001\u5230\u4e24\u4e2a\u8bbe\u5907\u4e0a\u3002 \u8bed\u8a00\u6a21\u578b\uff0c\u5982 BERT\uff0c\u5e38\u91c7\u7528\u6a21\u578b\u5e76\u884c\u3002","title":"\u6a21\u578b\u5e76\u884c"},{"location":"parallelism/01_introduction.html#_6","text":"\u5f53\u795e\u7ecf\u7f51\u7edc\u8fc7\u4e8e\u5de8\u5927\uff0c\u65e0\u6cd5\u5728\u4e00\u4e2a\u8bbe\u5907\u4e0a\u5b58\u653e\u65f6\uff0c\u9664\u4e86\u4e0a\u8ff0\u7684\u6a21\u578b\u5e76\u884c\u7684\u7b56\u7565\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u6d41\u6c34\u5e76\u884c\u3002 \u6d41\u6c34\u5e76\u884c\u6307\u5c06\u7f51\u7edc\u5207\u4e3a\u591a\u4e2a\u9636\u6bb5\uff0c\u5e76\u5206\u53d1\u5230\u4e0d\u540c\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e4b\u95f4\u4ee5\u201c\u63a5\u529b\u201d\u7684\u65b9\u5f0f\u5b8c\u6210\u8bad\u7ec3\u3002 \u5982\u4e0b\u56fe\uff0c\u5c55\u793a\u4e86\u4e00\u4e2a\u903b\u8f91\u4e0a\u76844\u5c42\u7f51\u7edc\uff08 T1 \u81f3 T4 )\u662f\u5982\u4f55\u505a\u6d41\u6c34\u5e76\u884c\u7684\u3002 4\u5c42\u7f51\u7edc\u88ab\u5207\u5206\u52302\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e0a\uff0c\u5176\u4e2d GPU0 \u4e0a\u8fdb\u884c T1 \u4e0e T2 \u7684\u8fd0\u7b97\uff0c GPU1 \u4e0a\u8fdb\u884c T3 \u4e0e T4 \u7684\u8ba1\u7b97\u3002 GPU0 \u4e0a\u5b8c\u6210\u524d\u4e24\u5c42\u7684\u8ba1\u7b97\u540e\uff0c\u5b83\u7684\u8f93\u51fa\u88ab\u5f53\u4f5c GPU1 \u7684\u8f93\u5165\uff0c\u7ee7\u7eed\u8fdb\u884c\u540e\u4e24\u5c42\u7684\u8ba1\u7b97\u3002","title":"\u6d41\u6c34\u5e76\u884c"},{"location":"parallelism/01_introduction.html#_7","text":"\u7f51\u7edc\u7684\u8bad\u7ec3\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5c06\u591a\u79cd\u5e76\u884c\u7b56\u7565\u6df7\u7528\uff0c\u4ee5 GPT-3 \u4e3a\u4f8b\uff0c\u4ee5\u4e0b\u662f\u5b83\u8bad\u7ec3\u65f6\u7684\u8bbe\u5907\u5e76\u884c\u65b9\u6848\uff1a \u5b83\u9996\u5148\u88ab\u5206\u4e3a 64 \u4e2a\u9636\u6bb5\uff0c\u8fdb\u884c\u6d41\u6c34\u5e76\u884c\u3002\u6bcf\u4e2a\u9636\u6bb5\u90fd\u8fd0\u884c\u5728 6 \u53f0 DGX-A100 \u4e3b\u673a\u4e0a\u3002\u57286\u53f0\u4e3b\u673a\u4e4b\u95f4\uff0c\u8fdb\u884c\u7684\u662f\u6570\u636e\u5e76\u884c\u8bad\u7ec3\uff1b\u6bcf\u53f0\u4e3b\u673a\u6709 8 \u5f20 GPU \u663e\u5361\uff0c\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u76848\u5f20 GPU \u663e\u5361\u4e4b\u95f4\u662f\u8fdb\u884c\u6a21\u578b\u5e76\u884c\u8bad\u7ec3\u3002 \u5e76\u884c\u7b56\u7565\u7684\u9009\u62e9\u5f71\u54cd\u7740\u8bad\u7ec3\u6548\u7387\uff0c\u6846\u67b6\u5bf9\u5e76\u884c\u8bad\u7ec3\u7684\u63a5\u53e3\u652f\u6301\u7a0b\u5ea6\uff0c\u51b3\u5b9a\u4e86\u7b97\u6cd5\u5de5\u7a0b\u5e08\u7684\u5f00\u53d1\u6548\u7387\u3002OneFlow \u9488\u5bf9\u5206\u5e03\u5f0f\u8bad\u7ec3\u6240\u505a\u7684\u7cfb\u7edf\u7ea7\u8bbe\u8ba1\u548c\u521b\u65b0\uff0c\u4e3a\u7528\u6237\u8f7b\u677e\u4e0a\u624b\u5206\u5e03\u5f0f\u8bad\u7ec3\u505a\u8db3\u4e86\u94fa\u57ab\u3002\u6211\u4eec\u5c06\u5728\u672c\u4e13\u9898\u7684\u5176\u5b83\u6587\u7ae0\u4e2d\u770b\u5230\u76f8\u5173\u793a\u4f8b\u3002","title":"\u6df7\u5408\u5e76\u884c"},{"location":"parallelism/02_sbp.html","text":"\u96c6\u7fa4\u7684\u5168\u5c40\u89c6\u89d2 \u00b6 OneFlow \u63d0\u51fa\u4e86 \u5168\u5c40\u89c6\u89d2\uff08Global View\uff09 \u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u7b80\u5316\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u7b80\u5355\u800c\u8a00\uff0c\u5728 OneFlow \u7684\u5168\u5c40\u89c6\u89d2\u4e0b\uff0c\u96c6\u7fa4\u88ab\u62bd\u8c61\u4e3a\u4e00\u53f0\u201c\u8d85\u7ea7\u8ba1\u7b97\u8bbe\u5907\u201d\u3002 \u7528\u6237\u4e0d\u7528\u5173\u5fc3\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u3001\u901a\u4fe1\u7684\u7ec6\u8282\uff0c\u53ea\u9700\u5173\u5fc3\u903b\u8f91\u4e0a\u7684\u6570\u636e\u4e0e\u8ba1\u7b97\uff0c\u4f9d\u7136\u50cf\u5355\u673a\u5355\u5361\u90a3\u6837\u601d\u8003\u3001\u7f16\u7a0b\uff0c\u5c31\u80fd\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 OneFlow \u7684\u5168\u5c40\u89c6\u89d2\uff0c\u4f9d\u8d56\u51e0\u4e2a\u91cd\u8981\u6982\u5ff5\uff1aPlacement\u3001SBP \u4e0e SBP Signature\u3002 Placement \u00b6 OneFlow \u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor \u6709 placement \u5c5e\u6027\uff0c\u901a\u8fc7 placement \u5c5e\u6027\u53ef\u4ee5\u6307\u5b9a\u8be5 Tensor \u5b58\u653e\u5728\u54ea\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u3002 OneFlow \u4f1a\u81ea\u52a8\u4e3a\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u8bbe\u5907\u7f16\u53f7\u3002\u6bd4\u5982\uff0c\u5982\u679c\u96c6\u7fa4\u4e2d\u6709 4 \u53f0\u4e3b\u673a\uff0c\u6bcf\u53f0\u4e3b\u673a\u4e0a\u6709 8 \u5f20\u663e\u5361\uff0c\u4e00\u5171 32 \u5f20\u663e\u5361\uff0c\u90a3\u4e48 OneFlow \u4f1a\u5c06\u8fd9 32 \u5f20\u663e\u5361\u81ea\u52a8\u7f16\u53f7\u4e3a 0~31\u3002 \u5982\u679c\u60f3\u5c06 Tensor \u653e\u7f6e\u5728\u7b2c 0 \u53f0\u673a\u5668\u7684\u524d 4 \u5f20\u663e\u5361\u4e0a\uff0c\u53ea\u9700\u8981\u914d\u7f6e\uff1a placement(\"cuda\", [0, 1, 2, 3]) \u3002 \u5982\u679c\u60f3\u5c06 Tensor \u653e\u7f6e\u5728\u7b2c 0 \u53f0\u673a\u5668\u7684\u540e 4 \u5f20\u663e\u5361\u4e0a\uff0c\u53ea\u9700\u8981\u914d\u7f6e\uff1a placement(\"cuda\", [4, 5, 6, 7]) \u3002 placement \u4f7f\u5f97 OneFlow \u5f88\u5bb9\u6613\u652f\u6301\u6d41\u6c34\u5e76\u884c\uff0c\u6211\u4eec\u5c06\u5728\u672c\u4e13\u9898\u7684\u5176\u5b83\u6587\u7ae0\u4e2d\u770b\u5230\u4e0e placement \u6709\u5173\u7684\u5b9e\u9645\u4f8b\u5b50\u3002 SBP \u00b6 SBP \u662f OneFlow \u53d1\u660e\u7684\u6982\u5ff5\uff0c\u63cf\u8ff0\u4e86\u201c\u8d85\u7ea7\u8ba1\u7b97\u8bbe\u5907\u201d\u5168\u5c40\u89c6\u89d2\u4e0b\u7684\u6570\u636e\u4e0e\u96c6\u7fa4\u4e2d\u771f\u5b9e\u7684\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5b83\u7531 split , broadcast , partial \u7684\u9996\u5b57\u6bcd\u7ec4\u5408\u800c\u6210\u3002 \u8be6\u7ec6\u800c\u8a00\uff1a split \u8868\u793a\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor\uff0c\u662f\u5c06\u5168\u5c40\u89c6\u89d2\u7684 Tensor \u5207\u5206\u5f97\u5230\u7684\u3002\u5207\u5206\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u5207\u5206\u7684\u7ef4\u5ea6\u3002\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor \uff0c\u7ecf\u8fc7\u62fc\u63a5\uff0c\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u7684 Tensor \u3002 broadcast \u8868\u793a\u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor\uff0c\u4f1a\u590d\u5236\u5e76\u5e7f\u64ad\u5230\u6240\u6709\u7684\u7269\u7406\u8bbe\u5907\u4e0a\u3002 partial \u8868\u793a\u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor \u4e0e\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor \u7684 \u5f62\u72b6\u76f8\u540c \uff0c\u4f46\u662f\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u503c\uff0c\u53ea\u662f\u5168\u5c40\u89c6\u89d2\u4e0b Tensor \u7684 \u4e00\u90e8\u5206 \u3002\u4ee5 partial sum \u4e3a\u4f8b\uff0c\u5982\u679c\u6211\u4eec\u5c06\u96c6\u7fa4\u4e2d\u6240\u6709\u8bbe\u5907\u7684\u5f20\u91cf\u6309\u4f4d\u7f6e\u76f8\u52a0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u7684 Tensor\u3002\u9664\u4e86 sum \u5916\uff0c min \u3001 max \u7b49\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e partial \u3002 \u4e0b\u56fe\u4e2d\u5206\u522b\u5c55\u793a\u4e86 SBP \u7684\u60c5\u51b5\uff0c\u5206\u522b\u662f split(0) \u3001 split(1) \u3001 broadcast \u548c partial sum \u3002 \u5728\u521b\u5efa Global Tensor \u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a Tensor \u7684 SBP\uff0c\u5b9e\u9645\u7684\u4ee3\u7801\u4f8b\u5b50\u5c06\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0 Global Tensor \u4e2d\u770b\u5230\u3002 SBP Signature \u00b6 SBP \u63cf\u8ff0\u4e86\u5168\u5c40\u89c6\u89d2\u4e0b\u7684\u6570\u636e\u4e0e\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5f53\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0cOneFlow \u6839\u636e\u6570\u636e\u7684 SBP \u5c5e\u6027\uff0c\u5c06\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5b64\u7acb\u7684 Tensor\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684 SBP \u5c5e\u6027\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7684\u7b97\u5b50\uff0c\u6211\u4eec\u5374\u4e0d\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u3002\u8fd9\u662f\u56e0\u4e3a\u968f\u610f\u8bbe\u7f6e\u4e00\u4e2a\u7b97\u5b50\u8f93\u5165\u8f93\u51fa\u7684 SBP \u5c5e\u6027\uff0c\u53ef\u80fd\u4e0d\u7b26\u5408\u5168\u5c40\u89c6\u89d2\u4e0b\u7b97\u5b50\u7684\u8fd0\u7b97\u6cd5\u5219\u3002 \u8ba9\u6211\u4eec\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u770b\u770b\u5728\u67092\u4e2a\u8bbe\u5907\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u8981\u5982\u4f55\u7ec4\u5408\u624d\u5408\u6cd5\uff0c\u5982\u4f55\u7ec4\u5408\u4e0d\u5408\u6cd5\u3002 \u5047\u8bbe\u5168\u5c40\u89c6\u89d2\u4e0b\u8981\uff0c\u4e00\u4e2a\u5f62\u72b6\u4e3a \\((m, k)\\) \u7684\u77e9\u9635 \\(A\\) \u4e0e\u5f62\u72b6\u4e3a \\((k, n)\\) \u7684\u77e9\u9635 \\(B\\) \u76f8\u4e58\u5f97\u5230 \\(Y\\) \uff0c \\(Y\\) \u7684\u5f62\u72b6\u5fc5\u7136\u4e3a \\((m, n)\\) \u3002 \u4f9d\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u89c4\u5f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635 \\(A\\) \u6309\u7b2c0\u7ef4\u8fdb\u884c\u5207\u5206\uff0c\u5207\u5206\u4e3a\u5f62\u72b6\u5206\u522b\u4e3a \\((m_0, k)\\) \u3001 \\((m_1, k)\\) \u7684\u4e24\u4e2a\u77e9\u9635\uff1a \\(A_0\\) \u548c \\(A_1\\) \uff0c\u7136\u540e\u57282\u4e2a\u8bbe\u5907\u4e0a\u5206\u522b\u8ba1\u7b97\uff1a \u8bbe\u5907\u4e00\uff1a \\[ \\begin{matrix} A_0 \\times B = Y_0 \\\\ (m_0, k) (k, n) (m_0, n) \\end{matrix} \\] \u8bbe\u5907\u4e8c\uff1a \\[ \\begin{matrix} A_1 \\times B = Y_1 \\\\ (m_1, k) (k, n) (m_1, n) \\end{matrix} \\] \u6211\u4eec\u5bb9\u6613\u5f97\u5230\u7269\u7406\u8bbe\u5907\u4e0a\u7684 \\(A_0\\) \u3001 \\(A_1\\) \u4e0e\u5168\u5c40\u89c6\u89d2 \\(A\\) \u7684\u5173\u7cfb\uff0c\u4ee5\u53ca \\(Y_0\\) \u3001 \\(Y_1\\) \u4e0e\u5168\u5c40\u89c6\u89d2\u6570\u636e \\(Y\\) \u7684\u5173\u7cfb\uff1a \\[ \\begin{matrix} A &= concat&(A_0 ,& A_1) \\\\ (m,k) & & (m_0, k) & (m_1, k) \\end{matrix} \\] \\[ \\begin{matrix} Y &= concat&(Y_0 ,& Y_1) \\\\ (m,n) & & (m_0, n) & (m_1, n) \\end{matrix} \\] \u6ce8\u610f\uff1a\u4ee5\u4e0a\u7684 concat \u8868\u793a\u62fc\u63a5\u64cd\u4f5c\u3002 \u53ef\u89c1\uff0c\u6309\u7167\u4ee5\u4e0a\u7684\u65b9\u5f0f\uff0c\u5c06\u5168\u5c40\u89c6\u89d2\u7684\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u662f\u80fd\u591f\u5b8c\u6210\u8fd0\u7b97\uff0c\u5e76\u4e14\u6700\u7ec8\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u4e0a\u7684\u6b63\u786e\u7ed3\u679c\u7684\u3002\u4ee5\u4e0a\u8f83\u957f\u7684\u7bc7\u5e45\uff0c\u82e5 \u4f7f\u7528 SBP \u6765\u63cf\u8ff0\uff0c\u4f1a\u53d8\u5f97\u5f02\u5e38\u7b80\u5355 \uff1a \\(A\\) \u4e3a split(0) \uff0c \\(B\\) \u4e3a broadcast \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a split(0) \u3002 \u53ef\u89c1\uff0c\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684 SBP\uff0c\u6309\u4ee5\u4e0a\u65b9\u5f0f\u7ec4\u5408\uff0c\u662f\u5408\u6cd5\u7684\u3002\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c \u5408\u6cd5\u7684 SBP \u7ec4\u5408\u4e0d\u6b62\u4e00\u79cd \uff0c\u6bd4\u5982\u8fd8\u53ef\u4ee5\u662f\uff1a \\(A\\) \u4e3a broadcast \uff0c \\(B\\) \u4e3a split(1) \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a split(1) \u3002 \u6216\u8005\uff1a \\(A\\) \u4e3a split(1) \uff0c \\(B\\) \u4e3a split(0) \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a partial sum \u3002 \u867d\u7136\u5c55\u793a\u4e86\u591a\u4e2a\u5408\u6cd5\u7684 SBP \u7ec4\u5408\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4efb\u610f\u7684 SBP \u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6bd4\u5982\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\uff0c\u5982\u679c \\(A\\) \u3001 \\(B\\) \u5747\u4e3a split(0) \uff0c\u90a3\u4e48\uff1a \\[ \\begin{matrix} A &= concat&(A_0 ,& A_1) \\\\ (m,k) & & (m_0, k) & (m_1, k) \\end{matrix} \\] \\[ \\begin{matrix} B &= concat&(B_0 ,& B_1) \\\\ (k,n) & & (k_0, n) & (k_1, n) \\end{matrix} \\] \u90a3\u4e48\u5728\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u56e0\u4e3a \\(A_0\\) \u4e0e \\(B_0\\) \u7684\u5f62\u72b6\uff0c\u5e76\u4e0d\u6ee1\u8db3\u77e9\u9635\u4e58\u6cd5\u7684\u8981\u6c42\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5728\u7269\u7406\u8bbe\u5907\u4e0a\u5b8c\u6210\u77e9\u9635\u4e58\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c \\(A\\) \u4e3a split(0) \uff0c \\(B\\) \u4e3a split(0) \u7684 SBP \u7ec4\u5408\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u6211\u4eec\u5c06\u4e0a\u6587\u51fa\u73b0\u7684\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u7b97\u5b50\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684\u4e00\u4e2a \u7279\u5b9a\u7684\u3001\u5408\u6cd5\u7684 SBP \u7ec4\u5408 \uff0c\u79f0\u4e3a\u8fd9\u4e2a\u7b97\u5b50\u7684\u4e00\u4e2a SBP Signature \u3002 SBP Signature \u81ea\u52a8\u63a8\u5bfc \u00b6 \u6709\u4e86 SBP Signature \u7684\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u63d0\u51fa\u51e0\u4e2a\u95ee\u9898\uff1a \u7528\u6237\u662f\u5426\u8981\u77e5\u9053\u7b97\u5b50\u7684\u6240\u6709 SBP Signature\uff0c\u624d\u80fd\u7528 OneFlow \u505a\u597d\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1f \u4f5c\u4e3a\u7b97\u6cd5\u5de5\u7a0b\u5e08\uff0c\u7528\u6237\u662f\u5426\u8981\u4e3a\u6bcf\u5c42\u7f51\u7edc\u90fd\u8bbe\u7f6e\u8f93\u5165\u7684 SBP\uff1f \u5bf9\u4e8e\u524d\u4e00\u4e2a\u95ee\u9898\uff0c\u7528\u6237\u5f53\u7136\u4e0d\u9700\u8981\u77e5\u6653\u7b97\u5b50\u6240\u6709\u7684 SBP Signature\u3002\u7f57\u5217\u67d0\u4e2a\u7b97\u5b50\u6240\u6709\u53ef\u80fd\u7684 SBP Signature \u7684\u5de5\u4f5c\uff0c\u662f \u7b97\u5b50\u4f5c\u8005 \u7684\u8d23\u4efb\u3002\u7b97\u5b50\u4f5c\u8005\u6839\u636e\u7b97\u5b50\u7684\u8fd0\u7b97\u6cd5\u5219\uff0c\u5728\u5f00\u53d1\u7b97\u5b50\u65f6\uff0c\u5c31\u5df2\u7ecf\u7f57\u5217\u5e76\u9884\u8bbe\u597d\u8be5\u7b97\u5b50\u6240\u6709\u53ef\u80fd\u7684 SBP Signature\u3002 \u8fd9\u987a\u4fbf\u5c31\u89e3\u7b54\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u56e0\u4e3a\u6709\u9884\u8bbe\u597d\u7684 SBP Signature\uff0c\u6240\u4ee5\uff0c\u67d0\u4e00\u5c42\u7b97\u5b50\u53ea\u8981\u6709\u8f93\u5165\u7684 SBP\uff0cOneFlow \u5c31\u53ef\u4ee5\u6839\u636e SBP Signature \u63a8\u5bfc\u51fa\u8be5\u5c42\u7b97\u5b50\u8f93\u51fa\u7684 SBP\u3002\u800c\u4e0a\u6e38\u7b97\u5b50\u7684\u8f93\u51fa\uff0c\u53c8\u662f\u4e0b\u6e38\u7b97\u5b50\u7684\u8f93\u5165\uff0c\u8fd9\u6837\uff0c\u5c31\u786e\u5b9a\u4e86\u4e0b\u6e38\u7b97\u5b50\u8f93\u5165\u7684 SBP\uff0c\u7136\u540e\u53c8\u53ef\u4ee5\u6839\u636e SBP Signature \u786e\u5b9a\u66f4\u4e0b\u6e38\u8f93\u51fa\u7684 SBP\u2026\u2026 \u8fd9\u6837\u4e0d\u65ad\u63a8\u5bfc\u3001\u4f20\u64ad\u3002\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u662f\u4e0d\u9700\u8981\u4e3a\u6bcf\u5c42\u7f51\u7edc\u90fd\u8bbe\u7f6e\u8f93\u5165\u7684 SBP\u3002\u800c\u53ea\u6709\u6700\u521d\u8f93\u5165\u5c42\uff0c\u6216\u8005\u9700\u8981\u5f3a\u5236\u6307\u5b9a\u67d0\u5c42\u7684 SBP \u65f6\uff0c\u624d\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u3002 \u7528\u6237\u8fd8\u53ef\u80fd\u4f1a\u6709\u65b0\u7684\u95ee\u9898\uff1a \u4e00\u4e2a\u7b97\u5b50\u7684\u5408\u6cd5 SBP Signature \u5e38\u5e38\u6709\u591a\u4e2a\uff0cOneFlow \u8fd0\u884c\u65f6\u5230\u5e95\u4f1a\u9009\u62e9\u54ea\u4e00\u4e2a\u5462\uff0c\u5b83\u662f\u4f9d\u636e\u4ec0\u4e48\u505a\u51fa\u9009\u62e9\u7684\uff1f \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u4e86\u89e3 OneFlow \u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc \u673a\u5236\u3002\u6240\u8c13\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\uff0c\u6307\u7684\u662f\uff1a\u5728\u7ed9\u5b9a\u6240\u6709\u7b97\u5b50\u7684\u6240\u6709\u5408\u6cd5\u7684 SBP Signature \u7684\u524d\u63d0\u4e0b\uff0cOneFlow \u6709\u4e00\u5957\u7b97\u6cd5\uff0c\u4f1a\u57fa\u4e8e\u4f20\u8f93\u4ee3\u4ef7\u4e3a\u6bcf\u79cd\u5408\u6cd5\u7684 SBP Signature \u8fdb\u884c\u6253\u5206\uff0c\u5e76\u9009\u62e9\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\u7684\u90a3\u4e2a SBP Signature\u3002\u8fd9\u6837\u4f7f\u5f97\u7cfb\u7edf\u7684\u541e\u5410\u6548\u7387\u6700\u9ad8\u3002 Boxing \u673a\u5236 \u00b6 \u4e25\u683c\u5730\u8bf4\uff0cOneFlow \u7684 Boxing \u673a\u5236\u5bf9\u4e8e\u7528\u6237\u5176\u5b9e\u662f\u900f\u660e\u7684\uff0c\u7528\u6237\u4f7f\u7528 OneFlow \u505a\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u4e0d\u7528\u77e5\u6653\u5b83\u4e5f\u611f\u77e5\u4e0d\u5230\u5b83\u3002 \u4f46\u662f\uff0c\u9274\u4e8e\u67d0\u4e9b\u6df1\u5165\u601d\u8003\u7684\u7528\u6237\uff0c\u53ef\u80fd\u4e86\u89e3 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u540e\uff0c\u4f1a\u81ea\u7136\u63d0\u51fa\u4ee5\u4e0b\u95ee\u9898\uff1a \u5982\u679c OneFlow \u81ea\u52a8\u9009\u62e9\u7684 SBP Signature\uff0c\u4e0a\u4e00\u5c42\u7b97\u5b50\u7684\u8f93\u51fa\u4e0e\u4e0b\u4e00\u5c42\u7b97\u5b50\u7684\u8f93\u5165\u7684 SBP \u5c5e\u6027\u4e0d\u5339\u914d\u65f6\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f \u4e3e\u4e2a\u5177\u4f53\u4f8b\u5b50\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u4e0a\u4e00\u5c42\u7b97\u5b50 matmul \u7684\u8f93\u51fa SBP \u672c\u6765\u662f split(0) \uff0c\u4f46\u662f\u4e0b\u4e00\u5c42\u7b97\u5b50 matmul \u7684\u8f93\u5165\uff0c\u88ab\u8f6c\u6210\u4e86 broadcast \u3002\u6b64\u65f6\uff0c\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\u4e0e\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\uff0c\u5b83\u4eec\u7684 SBP \u5176\u5b9e\u5c31\u4e0d\u4e00\u81f4\u4e86\u3002 import oneflow as flow P0 = flow . placement ( \"cuda\" , ranks = [ 0 , 1 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 2 , 3 ]) a0_sbp = flow . sbp . split ( 0 ) b0_sbp = flow . sbp . broadcast y0_sbp = flow . sbp . broadcast b1_sbp = flow . sbp . split ( 1 ) A0 = flow . randn ( 4 , 5 , placement = P0 , sbp = a0_sbp ) B0 = flow . randn ( 5 , 8 , placement = P0 , sbp = b0_sbp ) Y0 = flow . matmul ( A0 , B0 ) Y0 = Y0 . to_global ( placement = P1 , sbp = y0_sbp ) B1 = flow . randn ( 8 , 6 , placement = P1 , sbp = b1_sbp ) Y2 = flow . matmul ( Y0 , B1 ) \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cOneFlow \u5176\u5b9e\u4f1a\u68c0\u6d4b\u5230\u8fd9\u79cd\u4e0d\u4e00\u81f4\uff0c\u5e76\u4e14\u5728\u4e0a\u6e38\u7684\u8f93\u51fa\u548c\u4e0b\u6e38\u7684\u8f93\u5165\u95f4\u63d2\u5165\u4e00\u4e2a\u7b97\u5b50\uff0c\u505a\u76f8\u5173\u7684\u8f6c\u6362\u5de5\u4f5c\u3002\u8fd9\u7c7b\u81ea\u52a8\u52a0\u5165\u505a\u8f6c\u6362\u7684\u7b97\u5b50\uff0c\u5c31\u79f0\u4e3a Boxing \u7b97\u5b50 \u3002 \u4ee5\u4e0a\u4ee3\u7801\u7684\u903b\u8f91\u56fe\u548c\u7269\u7406\u6267\u884c\u56fe\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a \u603b\u7ed3 \u00b6 placement \u4e0e SBP \u3001 SBP Signature \u662f OneFlow \u5206\u5e03\u5f0f\u5168\u5c40\u89c6\u89d2\u7684\u91cd\u8981\u4fdd\u8bc1\uff0cOneFlow \u7684\u5168\u5c40\u89c6\u89d2\u4f7f\u5f97 OneFlow \u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e0e\u5355\u673a\u5355\u5361\u4e00\u6837\u7b80\u5355\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ea\u9700\u8981\u5728\u8d77\u59cb\u7f51\u7edc\u5c42\u8bbe\u7f6e SBP \uff0c\u7531\u6b64\u53ef\u4ee5\u7701\u7565\u4f20\u7edf\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u624b\u5199\u901a\u4fe1\u64cd\u4f5c\u7684\u9ebb\u70e6\u3002\u66f4\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86\u672c\u6587\u4ecb\u7ecd\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u673a\u5236\u5916\uff0cOneFlow \u56e2\u961f\u6b63\u5728\u7814\u53d1\u4e00\u79cd\u5bfb\u6c42\u5168\u5c40\u6700\u4f18\u89e3\u7684\u81ea\u52a8\u5e76\u884c\u65b9\u6cd5\uff0c\u6b63\u5728\u5185\u6d4b\uff0c\u7b49\u5b83\u4e0a\u7ebf\u540e\uff0c\u7528\u6237\u53ef\u4ee5\u4e0d\u505a\u4efb\u4f55 SBP \u914d\u7f6e\u5c31\u5f97\u5230\u5f88\u597d\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u6548\u679c\uff0c\u656c\u8bf7\u671f\u5f85\u3002 \u5728\u4e0b\u4e00\u7bc7 Global Tensor \u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5168\u5c40\u89c6\u89d2\u7684\u7f16\u7a0b\u4f8b\u5b50\u3002","title":"\u96c6\u7fa4\u7684\u5168\u5c40\u89c6\u89d2"},{"location":"parallelism/02_sbp.html#_1","text":"OneFlow \u63d0\u51fa\u4e86 \u5168\u5c40\u89c6\u89d2\uff08Global View\uff09 \u7684\u6982\u5ff5\uff0c\u7528\u4e8e\u7b80\u5316\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u7b80\u5355\u800c\u8a00\uff0c\u5728 OneFlow \u7684\u5168\u5c40\u89c6\u89d2\u4e0b\uff0c\u96c6\u7fa4\u88ab\u62bd\u8c61\u4e3a\u4e00\u53f0\u201c\u8d85\u7ea7\u8ba1\u7b97\u8bbe\u5907\u201d\u3002 \u7528\u6237\u4e0d\u7528\u5173\u5fc3\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u3001\u901a\u4fe1\u7684\u7ec6\u8282\uff0c\u53ea\u9700\u5173\u5fc3\u903b\u8f91\u4e0a\u7684\u6570\u636e\u4e0e\u8ba1\u7b97\uff0c\u4f9d\u7136\u50cf\u5355\u673a\u5355\u5361\u90a3\u6837\u601d\u8003\u3001\u7f16\u7a0b\uff0c\u5c31\u80fd\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 OneFlow \u7684\u5168\u5c40\u89c6\u89d2\uff0c\u4f9d\u8d56\u51e0\u4e2a\u91cd\u8981\u6982\u5ff5\uff1aPlacement\u3001SBP \u4e0e SBP Signature\u3002","title":"\u96c6\u7fa4\u7684\u5168\u5c40\u89c6\u89d2"},{"location":"parallelism/02_sbp.html#placement","text":"OneFlow \u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor \u6709 placement \u5c5e\u6027\uff0c\u901a\u8fc7 placement \u5c5e\u6027\u53ef\u4ee5\u6307\u5b9a\u8be5 Tensor \u5b58\u653e\u5728\u54ea\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\u3002 OneFlow \u4f1a\u81ea\u52a8\u4e3a\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u8bbe\u5907\u7f16\u53f7\u3002\u6bd4\u5982\uff0c\u5982\u679c\u96c6\u7fa4\u4e2d\u6709 4 \u53f0\u4e3b\u673a\uff0c\u6bcf\u53f0\u4e3b\u673a\u4e0a\u6709 8 \u5f20\u663e\u5361\uff0c\u4e00\u5171 32 \u5f20\u663e\u5361\uff0c\u90a3\u4e48 OneFlow \u4f1a\u5c06\u8fd9 32 \u5f20\u663e\u5361\u81ea\u52a8\u7f16\u53f7\u4e3a 0~31\u3002 \u5982\u679c\u60f3\u5c06 Tensor \u653e\u7f6e\u5728\u7b2c 0 \u53f0\u673a\u5668\u7684\u524d 4 \u5f20\u663e\u5361\u4e0a\uff0c\u53ea\u9700\u8981\u914d\u7f6e\uff1a placement(\"cuda\", [0, 1, 2, 3]) \u3002 \u5982\u679c\u60f3\u5c06 Tensor \u653e\u7f6e\u5728\u7b2c 0 \u53f0\u673a\u5668\u7684\u540e 4 \u5f20\u663e\u5361\u4e0a\uff0c\u53ea\u9700\u8981\u914d\u7f6e\uff1a placement(\"cuda\", [4, 5, 6, 7]) \u3002 placement \u4f7f\u5f97 OneFlow \u5f88\u5bb9\u6613\u652f\u6301\u6d41\u6c34\u5e76\u884c\uff0c\u6211\u4eec\u5c06\u5728\u672c\u4e13\u9898\u7684\u5176\u5b83\u6587\u7ae0\u4e2d\u770b\u5230\u4e0e placement \u6709\u5173\u7684\u5b9e\u9645\u4f8b\u5b50\u3002","title":"Placement"},{"location":"parallelism/02_sbp.html#sbp","text":"SBP \u662f OneFlow \u53d1\u660e\u7684\u6982\u5ff5\uff0c\u63cf\u8ff0\u4e86\u201c\u8d85\u7ea7\u8ba1\u7b97\u8bbe\u5907\u201d\u5168\u5c40\u89c6\u89d2\u4e0b\u7684\u6570\u636e\u4e0e\u96c6\u7fa4\u4e2d\u771f\u5b9e\u7684\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5b83\u7531 split , broadcast , partial \u7684\u9996\u5b57\u6bcd\u7ec4\u5408\u800c\u6210\u3002 \u8be6\u7ec6\u800c\u8a00\uff1a split \u8868\u793a\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor\uff0c\u662f\u5c06\u5168\u5c40\u89c6\u89d2\u7684 Tensor \u5207\u5206\u5f97\u5230\u7684\u3002\u5207\u5206\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u5207\u5206\u7684\u7ef4\u5ea6\u3002\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor \uff0c\u7ecf\u8fc7\u62fc\u63a5\uff0c\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u7684 Tensor \u3002 broadcast \u8868\u793a\u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor\uff0c\u4f1a\u590d\u5236\u5e76\u5e7f\u64ad\u5230\u6240\u6709\u7684\u7269\u7406\u8bbe\u5907\u4e0a\u3002 partial \u8868\u793a\u5168\u5c40\u89c6\u89d2\u4e0b\u7684 Tensor \u4e0e\u7269\u7406\u8bbe\u5907\u4e0a\u7684 Tensor \u7684 \u5f62\u72b6\u76f8\u540c \uff0c\u4f46\u662f\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u503c\uff0c\u53ea\u662f\u5168\u5c40\u89c6\u89d2\u4e0b Tensor \u7684 \u4e00\u90e8\u5206 \u3002\u4ee5 partial sum \u4e3a\u4f8b\uff0c\u5982\u679c\u6211\u4eec\u5c06\u96c6\u7fa4\u4e2d\u6240\u6709\u8bbe\u5907\u7684\u5f20\u91cf\u6309\u4f4d\u7f6e\u76f8\u52a0\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u8fd8\u539f\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u7684 Tensor\u3002\u9664\u4e86 sum \u5916\uff0c min \u3001 max \u7b49\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e partial \u3002 \u4e0b\u56fe\u4e2d\u5206\u522b\u5c55\u793a\u4e86 SBP \u7684\u60c5\u51b5\uff0c\u5206\u522b\u662f split(0) \u3001 split(1) \u3001 broadcast \u548c partial sum \u3002 \u5728\u521b\u5efa Global Tensor \u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a Tensor \u7684 SBP\uff0c\u5b9e\u9645\u7684\u4ee3\u7801\u4f8b\u5b50\u5c06\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0 Global Tensor \u4e2d\u770b\u5230\u3002","title":"SBP"},{"location":"parallelism/02_sbp.html#sbp-signature","text":"SBP \u63cf\u8ff0\u4e86\u5168\u5c40\u89c6\u89d2\u4e0b\u7684\u6570\u636e\u4e0e\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5f53\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0cOneFlow \u6839\u636e\u6570\u636e\u7684 SBP \u5c5e\u6027\uff0c\u5c06\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\uff0c\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5b64\u7acb\u7684 Tensor\uff0c\u6211\u4eec\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684 SBP \u5c5e\u6027\u3002 \u4f46\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u6709\u8f93\u5165\u3001\u8f93\u51fa\u6570\u636e\u7684\u7b97\u5b50\uff0c\u6211\u4eec\u5374\u4e0d\u53ef\u4ee5\u968f\u610f\u8bbe\u7f6e\u5b83\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u5c5e\u6027\u3002\u8fd9\u662f\u56e0\u4e3a\u968f\u610f\u8bbe\u7f6e\u4e00\u4e2a\u7b97\u5b50\u8f93\u5165\u8f93\u51fa\u7684 SBP \u5c5e\u6027\uff0c\u53ef\u80fd\u4e0d\u7b26\u5408\u5168\u5c40\u89c6\u89d2\u4e0b\u7b97\u5b50\u7684\u8fd0\u7b97\u6cd5\u5219\u3002 \u8ba9\u6211\u4eec\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002\u770b\u770b\u5728\u67092\u4e2a\u8bbe\u5907\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u77e9\u9635\u4e58\u6cd5\u7684\u8f93\u5165\u3001\u8f93\u51fa\u7684 SBP \u8981\u5982\u4f55\u7ec4\u5408\u624d\u5408\u6cd5\uff0c\u5982\u4f55\u7ec4\u5408\u4e0d\u5408\u6cd5\u3002 \u5047\u8bbe\u5168\u5c40\u89c6\u89d2\u4e0b\u8981\uff0c\u4e00\u4e2a\u5f62\u72b6\u4e3a \\((m, k)\\) \u7684\u77e9\u9635 \\(A\\) \u4e0e\u5f62\u72b6\u4e3a \\((k, n)\\) \u7684\u77e9\u9635 \\(B\\) \u76f8\u4e58\u5f97\u5230 \\(Y\\) \uff0c \\(Y\\) \u7684\u5f62\u72b6\u5fc5\u7136\u4e3a \\((m, n)\\) \u3002 \u4f9d\u636e\u77e9\u9635\u4e58\u6cd5\u7684\u89c4\u5f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u77e9\u9635 \\(A\\) \u6309\u7b2c0\u7ef4\u8fdb\u884c\u5207\u5206\uff0c\u5207\u5206\u4e3a\u5f62\u72b6\u5206\u522b\u4e3a \\((m_0, k)\\) \u3001 \\((m_1, k)\\) \u7684\u4e24\u4e2a\u77e9\u9635\uff1a \\(A_0\\) \u548c \\(A_1\\) \uff0c\u7136\u540e\u57282\u4e2a\u8bbe\u5907\u4e0a\u5206\u522b\u8ba1\u7b97\uff1a \u8bbe\u5907\u4e00\uff1a \\[ \\begin{matrix} A_0 \\times B = Y_0 \\\\ (m_0, k) (k, n) (m_0, n) \\end{matrix} \\] \u8bbe\u5907\u4e8c\uff1a \\[ \\begin{matrix} A_1 \\times B = Y_1 \\\\ (m_1, k) (k, n) (m_1, n) \\end{matrix} \\] \u6211\u4eec\u5bb9\u6613\u5f97\u5230\u7269\u7406\u8bbe\u5907\u4e0a\u7684 \\(A_0\\) \u3001 \\(A_1\\) \u4e0e\u5168\u5c40\u89c6\u89d2 \\(A\\) \u7684\u5173\u7cfb\uff0c\u4ee5\u53ca \\(Y_0\\) \u3001 \\(Y_1\\) \u4e0e\u5168\u5c40\u89c6\u89d2\u6570\u636e \\(Y\\) \u7684\u5173\u7cfb\uff1a \\[ \\begin{matrix} A &= concat&(A_0 ,& A_1) \\\\ (m,k) & & (m_0, k) & (m_1, k) \\end{matrix} \\] \\[ \\begin{matrix} Y &= concat&(Y_0 ,& Y_1) \\\\ (m,n) & & (m_0, n) & (m_1, n) \\end{matrix} \\] \u6ce8\u610f\uff1a\u4ee5\u4e0a\u7684 concat \u8868\u793a\u62fc\u63a5\u64cd\u4f5c\u3002 \u53ef\u89c1\uff0c\u6309\u7167\u4ee5\u4e0a\u7684\u65b9\u5f0f\uff0c\u5c06\u5168\u5c40\u89c6\u89d2\u7684\u6570\u636e\u5206\u53d1\u5230\u5404\u4e2a\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u662f\u80fd\u591f\u5b8c\u6210\u8fd0\u7b97\uff0c\u5e76\u4e14\u6700\u7ec8\u5f97\u5230\u5168\u5c40\u89c6\u89d2\u4e0a\u7684\u6b63\u786e\u7ed3\u679c\u7684\u3002\u4ee5\u4e0a\u8f83\u957f\u7684\u7bc7\u5e45\uff0c\u82e5 \u4f7f\u7528 SBP \u6765\u63cf\u8ff0\uff0c\u4f1a\u53d8\u5f97\u5f02\u5e38\u7b80\u5355 \uff1a \\(A\\) \u4e3a split(0) \uff0c \\(B\\) \u4e3a broadcast \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a split(0) \u3002 \u53ef\u89c1\uff0c\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684 SBP\uff0c\u6309\u4ee5\u4e0a\u65b9\u5f0f\u7ec4\u5408\uff0c\u662f\u5408\u6cd5\u7684\u3002\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\u800c\u8a00\uff0c \u5408\u6cd5\u7684 SBP \u7ec4\u5408\u4e0d\u6b62\u4e00\u79cd \uff0c\u6bd4\u5982\u8fd8\u53ef\u4ee5\u662f\uff1a \\(A\\) \u4e3a broadcast \uff0c \\(B\\) \u4e3a split(1) \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a split(1) \u3002 \u6216\u8005\uff1a \\(A\\) \u4e3a split(1) \uff0c \\(B\\) \u4e3a split(0) \uff0c\u8fd0\u7b97\u7ed3\u679c \\(Y\\) \u4e3a partial sum \u3002 \u867d\u7136\u5c55\u793a\u4e86\u591a\u4e2a\u5408\u6cd5\u7684 SBP \u7ec4\u5408\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4efb\u610f\u7684 SBP \u7ec4\u5408\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u6bd4\u5982\u5bf9\u4e8e\u77e9\u9635\u4e58\u6cd5\uff0c\u5982\u679c \\(A\\) \u3001 \\(B\\) \u5747\u4e3a split(0) \uff0c\u90a3\u4e48\uff1a \\[ \\begin{matrix} A &= concat&(A_0 ,& A_1) \\\\ (m,k) & & (m_0, k) & (m_1, k) \\end{matrix} \\] \\[ \\begin{matrix} B &= concat&(B_0 ,& B_1) \\\\ (k,n) & & (k_0, n) & (k_1, n) \\end{matrix} \\] \u90a3\u4e48\u5728\u7269\u7406\u8bbe\u5907\u4e0a\uff0c\u56e0\u4e3a \\(A_0\\) \u4e0e \\(B_0\\) \u7684\u5f62\u72b6\uff0c\u5e76\u4e0d\u6ee1\u8db3\u77e9\u9635\u4e58\u6cd5\u7684\u8981\u6c42\uff0c\u4e5f\u5c31\u65e0\u6cd5\u5728\u7269\u7406\u8bbe\u5907\u4e0a\u5b8c\u6210\u77e9\u9635\u4e58\u6cd5\u3002\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c \\(A\\) \u4e3a split(0) \uff0c \\(B\\) \u4e3a split(0) \u7684 SBP \u7ec4\u5408\u662f\u4e0d\u5408\u6cd5\u7684\u3002 \u6211\u4eec\u5c06\u4e0a\u6587\u51fa\u73b0\u7684\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u7b97\u5b50\uff0c\u5176\u8f93\u5165\u8f93\u51fa\u7684\u4e00\u4e2a \u7279\u5b9a\u7684\u3001\u5408\u6cd5\u7684 SBP \u7ec4\u5408 \uff0c\u79f0\u4e3a\u8fd9\u4e2a\u7b97\u5b50\u7684\u4e00\u4e2a SBP Signature \u3002","title":"SBP Signature"},{"location":"parallelism/02_sbp.html#sbp-signature_1","text":"\u6709\u4e86 SBP Signature \u7684\u6982\u5ff5\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u63d0\u51fa\u51e0\u4e2a\u95ee\u9898\uff1a \u7528\u6237\u662f\u5426\u8981\u77e5\u9053\u7b97\u5b50\u7684\u6240\u6709 SBP Signature\uff0c\u624d\u80fd\u7528 OneFlow \u505a\u597d\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1f \u4f5c\u4e3a\u7b97\u6cd5\u5de5\u7a0b\u5e08\uff0c\u7528\u6237\u662f\u5426\u8981\u4e3a\u6bcf\u5c42\u7f51\u7edc\u90fd\u8bbe\u7f6e\u8f93\u5165\u7684 SBP\uff1f \u5bf9\u4e8e\u524d\u4e00\u4e2a\u95ee\u9898\uff0c\u7528\u6237\u5f53\u7136\u4e0d\u9700\u8981\u77e5\u6653\u7b97\u5b50\u6240\u6709\u7684 SBP Signature\u3002\u7f57\u5217\u67d0\u4e2a\u7b97\u5b50\u6240\u6709\u53ef\u80fd\u7684 SBP Signature \u7684\u5de5\u4f5c\uff0c\u662f \u7b97\u5b50\u4f5c\u8005 \u7684\u8d23\u4efb\u3002\u7b97\u5b50\u4f5c\u8005\u6839\u636e\u7b97\u5b50\u7684\u8fd0\u7b97\u6cd5\u5219\uff0c\u5728\u5f00\u53d1\u7b97\u5b50\u65f6\uff0c\u5c31\u5df2\u7ecf\u7f57\u5217\u5e76\u9884\u8bbe\u597d\u8be5\u7b97\u5b50\u6240\u6709\u53ef\u80fd\u7684 SBP Signature\u3002 \u8fd9\u987a\u4fbf\u5c31\u89e3\u7b54\u4e86\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u56e0\u4e3a\u6709\u9884\u8bbe\u597d\u7684 SBP Signature\uff0c\u6240\u4ee5\uff0c\u67d0\u4e00\u5c42\u7b97\u5b50\u53ea\u8981\u6709\u8f93\u5165\u7684 SBP\uff0cOneFlow \u5c31\u53ef\u4ee5\u6839\u636e SBP Signature \u63a8\u5bfc\u51fa\u8be5\u5c42\u7b97\u5b50\u8f93\u51fa\u7684 SBP\u3002\u800c\u4e0a\u6e38\u7b97\u5b50\u7684\u8f93\u51fa\uff0c\u53c8\u662f\u4e0b\u6e38\u7b97\u5b50\u7684\u8f93\u5165\uff0c\u8fd9\u6837\uff0c\u5c31\u786e\u5b9a\u4e86\u4e0b\u6e38\u7b97\u5b50\u8f93\u5165\u7684 SBP\uff0c\u7136\u540e\u53c8\u53ef\u4ee5\u6839\u636e SBP Signature \u786e\u5b9a\u66f4\u4e0b\u6e38\u8f93\u51fa\u7684 SBP\u2026\u2026 \u8fd9\u6837\u4e0d\u65ad\u63a8\u5bfc\u3001\u4f20\u64ad\u3002\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u662f\u4e0d\u9700\u8981\u4e3a\u6bcf\u5c42\u7f51\u7edc\u90fd\u8bbe\u7f6e\u8f93\u5165\u7684 SBP\u3002\u800c\u53ea\u6709\u6700\u521d\u8f93\u5165\u5c42\uff0c\u6216\u8005\u9700\u8981\u5f3a\u5236\u6307\u5b9a\u67d0\u5c42\u7684 SBP \u65f6\uff0c\u624d\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u3002 \u7528\u6237\u8fd8\u53ef\u80fd\u4f1a\u6709\u65b0\u7684\u95ee\u9898\uff1a \u4e00\u4e2a\u7b97\u5b50\u7684\u5408\u6cd5 SBP Signature \u5e38\u5e38\u6709\u591a\u4e2a\uff0cOneFlow \u8fd0\u884c\u65f6\u5230\u5e95\u4f1a\u9009\u62e9\u54ea\u4e00\u4e2a\u5462\uff0c\u5b83\u662f\u4f9d\u636e\u4ec0\u4e48\u505a\u51fa\u9009\u62e9\u7684\uff1f \u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u4e86\u89e3 OneFlow \u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc \u673a\u5236\u3002\u6240\u8c13\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\uff0c\u6307\u7684\u662f\uff1a\u5728\u7ed9\u5b9a\u6240\u6709\u7b97\u5b50\u7684\u6240\u6709\u5408\u6cd5\u7684 SBP Signature \u7684\u524d\u63d0\u4e0b\uff0cOneFlow \u6709\u4e00\u5957\u7b97\u6cd5\uff0c\u4f1a\u57fa\u4e8e\u4f20\u8f93\u4ee3\u4ef7\u4e3a\u6bcf\u79cd\u5408\u6cd5\u7684 SBP Signature \u8fdb\u884c\u6253\u5206\uff0c\u5e76\u9009\u62e9\u4f20\u8f93\u4ee3\u4ef7\u6700\u5c0f\u7684\u90a3\u4e2a SBP Signature\u3002\u8fd9\u6837\u4f7f\u5f97\u7cfb\u7edf\u7684\u541e\u5410\u6548\u7387\u6700\u9ad8\u3002","title":"SBP Signature \u81ea\u52a8\u63a8\u5bfc"},{"location":"parallelism/02_sbp.html#boxing","text":"\u4e25\u683c\u5730\u8bf4\uff0cOneFlow \u7684 Boxing \u673a\u5236\u5bf9\u4e8e\u7528\u6237\u5176\u5b9e\u662f\u900f\u660e\u7684\uff0c\u7528\u6237\u4f7f\u7528 OneFlow \u505a\u5206\u5e03\u5f0f\u8bad\u7ec3\u65f6\uff0c\u4e0d\u7528\u77e5\u6653\u5b83\u4e5f\u611f\u77e5\u4e0d\u5230\u5b83\u3002 \u4f46\u662f\uff0c\u9274\u4e8e\u67d0\u4e9b\u6df1\u5165\u601d\u8003\u7684\u7528\u6237\uff0c\u53ef\u80fd\u4e86\u89e3 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u540e\uff0c\u4f1a\u81ea\u7136\u63d0\u51fa\u4ee5\u4e0b\u95ee\u9898\uff1a \u5982\u679c OneFlow \u81ea\u52a8\u9009\u62e9\u7684 SBP Signature\uff0c\u4e0a\u4e00\u5c42\u7b97\u5b50\u7684\u8f93\u51fa\u4e0e\u4e0b\u4e00\u5c42\u7b97\u5b50\u7684\u8f93\u5165\u7684 SBP \u5c5e\u6027\u4e0d\u5339\u914d\u65f6\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f \u4e3e\u4e2a\u5177\u4f53\u4f8b\u5b50\uff0c\u6bd4\u5982\u4ee5\u4e0b\u4ee3\u7801\u4e2d\uff0c\u4e0a\u4e00\u5c42\u7b97\u5b50 matmul \u7684\u8f93\u51fa SBP \u672c\u6765\u662f split(0) \uff0c\u4f46\u662f\u4e0b\u4e00\u5c42\u7b97\u5b50 matmul \u7684\u8f93\u5165\uff0c\u88ab\u8f6c\u6210\u4e86 broadcast \u3002\u6b64\u65f6\uff0c\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\u4e0e\u4e0b\u4e00\u5c42\u7684\u8f93\u5165\uff0c\u5b83\u4eec\u7684 SBP \u5176\u5b9e\u5c31\u4e0d\u4e00\u81f4\u4e86\u3002 import oneflow as flow P0 = flow . placement ( \"cuda\" , ranks = [ 0 , 1 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 2 , 3 ]) a0_sbp = flow . sbp . split ( 0 ) b0_sbp = flow . sbp . broadcast y0_sbp = flow . sbp . broadcast b1_sbp = flow . sbp . split ( 1 ) A0 = flow . randn ( 4 , 5 , placement = P0 , sbp = a0_sbp ) B0 = flow . randn ( 5 , 8 , placement = P0 , sbp = b0_sbp ) Y0 = flow . matmul ( A0 , B0 ) Y0 = Y0 . to_global ( placement = P1 , sbp = y0_sbp ) B1 = flow . randn ( 8 , 6 , placement = P1 , sbp = b1_sbp ) Y2 = flow . matmul ( Y0 , B1 ) \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cOneFlow \u5176\u5b9e\u4f1a\u68c0\u6d4b\u5230\u8fd9\u79cd\u4e0d\u4e00\u81f4\uff0c\u5e76\u4e14\u5728\u4e0a\u6e38\u7684\u8f93\u51fa\u548c\u4e0b\u6e38\u7684\u8f93\u5165\u95f4\u63d2\u5165\u4e00\u4e2a\u7b97\u5b50\uff0c\u505a\u76f8\u5173\u7684\u8f6c\u6362\u5de5\u4f5c\u3002\u8fd9\u7c7b\u81ea\u52a8\u52a0\u5165\u505a\u8f6c\u6362\u7684\u7b97\u5b50\uff0c\u5c31\u79f0\u4e3a Boxing \u7b97\u5b50 \u3002 \u4ee5\u4e0a\u4ee3\u7801\u7684\u903b\u8f91\u56fe\u548c\u7269\u7406\u6267\u884c\u56fe\u7684\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a","title":"Boxing \u673a\u5236"},{"location":"parallelism/02_sbp.html#_2","text":"placement \u4e0e SBP \u3001 SBP Signature \u662f OneFlow \u5206\u5e03\u5f0f\u5168\u5c40\u89c6\u89d2\u7684\u91cd\u8981\u4fdd\u8bc1\uff0cOneFlow \u7684\u5168\u5c40\u89c6\u89d2\u4f7f\u5f97 OneFlow \u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e0e\u5355\u673a\u5355\u5361\u4e00\u6837\u7b80\u5355\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u53ea\u9700\u8981\u5728\u8d77\u59cb\u7f51\u7edc\u5c42\u8bbe\u7f6e SBP \uff0c\u7531\u6b64\u53ef\u4ee5\u7701\u7565\u4f20\u7edf\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u624b\u5199\u901a\u4fe1\u64cd\u4f5c\u7684\u9ebb\u70e6\u3002\u66f4\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u9664\u4e86\u672c\u6587\u4ecb\u7ecd\u7684 SBP Signature \u81ea\u52a8\u63a8\u5bfc\u673a\u5236\u5916\uff0cOneFlow \u56e2\u961f\u6b63\u5728\u7814\u53d1\u4e00\u79cd\u5bfb\u6c42\u5168\u5c40\u6700\u4f18\u89e3\u7684\u81ea\u52a8\u5e76\u884c\u65b9\u6cd5\uff0c\u6b63\u5728\u5185\u6d4b\uff0c\u7b49\u5b83\u4e0a\u7ebf\u540e\uff0c\u7528\u6237\u53ef\u4ee5\u4e0d\u505a\u4efb\u4f55 SBP \u914d\u7f6e\u5c31\u5f97\u5230\u5f88\u597d\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u6548\u679c\uff0c\u656c\u8bf7\u671f\u5f85\u3002 \u5728\u4e0b\u4e00\u7bc7 Global Tensor \u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u5168\u5c40\u89c6\u89d2\u7684\u7f16\u7a0b\u4f8b\u5b50\u3002","title":"\u603b\u7ed3"},{"location":"parallelism/03_consistent_tensor.html","text":"Global Tensor \u00b6 \u5168\u5c40\u89c6\u89d2\u4e0e\u7269\u7406\u89c6\u89d2\u7684\u6620\u5c04 \u00b6 \u521b\u5efa Global Tensor \u00b6 \u8981\u5728\u67092\u5f20 GPU \u663e\u5361\u7684\u4e3b\u673a\u4e0a\u4ea4\u4e92\u5f0f\u4f53\u9a8c global tensor\uff0c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u57282\u4e2a\u63a7\u5236\u53f0\u5206\u522b\u542f\u52a8 python\u3002 Note \u5206\u522b \u70b9\u51fb \u4ee5\u4e0b Terminal 0 \u6216 Terminal 1 \u6807\u7b7e\uff0c\u67e5\u770b2\u4e2a\u63a7\u5236\u53f0\u7684\u547d\u4ee4/\u4ee3\u7801 Terminal 0 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 0 LOCAL_RANK = 0 python3 Terminal 1 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 1 LOCAL_RANK = 1 python3 \u4ee5\u4e0a\u7684\u73af\u5883\u53d8\u91cf\u7684\u8bbe\u7f6e\u662f\u505a\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\uff0c\u8be6\u7ec6\u89e3\u91ca\u53ca\u501f\u52a9\u5de5\u5177\u542f\u52a8\u5206\u5e03\u5f0f\uff0c\u8bf7\u53c2\u8003\u6587\u672b\u7684 \u6269\u5c55\u9605\u8bfb \u76f4\u63a5\u521b\u5efa global tensor \u00b6 \u5728\u4e24\u4e2a\u63a7\u5236\u53f0\uff0c\u5206\u522b\u5bfc\u5165 oneflow \uff0c\u5e76\u521b\u5efa x \u3002 \u5176\u4e2d flow.placement(\"cuda\", [0,1]) \u6307\u5b9a\u4e86 global tensor \u5728\u96c6\u7fa4\u7684\u8303\u56f4\u3002 \"cuda\" \u8868\u793a\u5728 GPU \u8bbe\u5907\u4e0a\u3002 placement \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a list \uff0c\u96c6\u7fa4\u4e2d\u7684\u8bbe\u5907\u4f1a\u88ab\u81ea\u52a8\u7f16\u53f7\uff0c\u901a\u8fc7\u6570\u5b57\u6307\u5b9a\u4f7f\u7528\u54ea\u4e9b\u8bbe\u5907\u3002 [0,1] \u8868\u793a global tensor \u4f7f\u7528\u7b2c 0\u30011 \u5f20\u663e\u5361\u4e0a\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) x . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) x . shape \u8f93\u51fa\uff1a Terminal 0 oneflow.Size([4, 5]) Terminal 1 oneflow.Size([4, 5]) \u7531 global tensor \u5f97\u5230 local tensor \u00b6 \u901a\u8fc7 to_local \u65b9\u6cd5\u53ef\u4ee5\u67e5\u770b\u7269\u7406\u8bbe\u5907\u4e0a\u7684 local tensor\uff1a Terminal 0 x . to_local () tensor ([[ 2.9186e-01 , - 3.9442e-01 , 4.7072e-04 , - 3.2216e-01 , 1.7788e-01 ], [ - 4.5284e-01 , 1.2361e-01 , - 3.5962e-01 , 2.6651e-01 , 1.2951e+00 ]], device = 'cuda:0' , dtype = oneflow . float32 ) Terminal 1 x . to_local () tensor ([[ - 0.4363 , 0.9985 , - 2.5387 , 0.3003 , 0.3803 ], [ 0.0556 , - 0.8077 , 1.1191 , - 2.1278 , 0.1468 ]], device = 'cuda:1' , dtype = oneflow . float32 ) \u7531 local tensor \u8f6c\u6362\u5f97\u5230 global tensor \u00b6 \u53ef\u4ee5\u5148\u521b\u5efa local tensor\uff0c\u518d\u5229\u7528 Tensor.to_global \u65b9\u6cd5\uff0c\u5c06 local tensor \u8f6c\u4e3a global tensor\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u57282\u53f0\u8bbe\u5907\u4e0a\u5206\u522b\u521b\u5efa\u4e86 shape=(2,5) \u76842\u4e2a local tensor\u3002 \u6ce8\u610f\u7ecf\u8fc7 to_global \u65b9\u6cd5\u540e\uff0c\u5f97\u5230\u7684 global tensor \u7684 shape \u4e3a (4,5) \u3002 \u8fd9\u662f\u56e0\u4e3a\u9009\u62e9\u7684 sbp=flow.sbp.split(0) \uff0c2\u4e2a\u5f62\u72b6\u4e3a (2,5) \u7684 local tensor\uff0c\u9700\u8981\u5728\u7b2c0\u7ef4\u62fc\u63a5\uff0c\u5f97\u5230 (4,5) \u7684 global tensor\u3002 Terminal 0 import oneflow as flow x = flow . randn ( 2 , 5 ) placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) x_global . shape Terminal 1 import oneflow as flow x = flow . randn ( 2 , 5 ) placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) x_global . shape \u5b9e\u8df5 SBP Signature \u7684\u4f5c\u7528 \u00b6 \u6570\u636e\u5e76\u884c \u00b6 \u4ee5\u4e0b\u7684\u4ee3\u7801\u5bf9\u5e94\u4e86 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u7b56\u7565 \u7684\u6570\u636e\u5e76\u884c\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) y . sbp y . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) y . sbp y . shape \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c flow.matmul \u6839\u636e\u8f93\u5165 x \u4e0e w \u7684 SBP \u5206\u522b\u4e3a split(0) \u3001 broadcast \u3002OneFlow \u81ea\u52a8\u63a8\u5bfc\u51fa\u8f93\u51fa y \u7684 SBP \u5e94\u8be5\u4e3a split(0) \uff0c\u5b8c\u6210\u8ba1\u7b97\uff0c\u5f97\u5230 shape=(4,8) \u7684\u77e9\u9635\u3002\u8f93\u51fa\uff1a Terminal 0 (oneflow.sbp.split(dim=0),) oneflow.Size([4, 8]) Terminal 1 (oneflow.sbp.split(dim=0),) oneflow.Size([4, 8]) \u6a21\u578b\u5e76\u884c \u00b6 \u4ee5\u4e0b\u7684\u4ee3\u7801\u5bf9\u5e94\u4e86 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u7b56\u7565 \u7684\u6a21\u578b\u5e76\u884c\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( 1 )) y = flow . matmul ( x , w ) y . sbp y . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( 1 )) y = flow . matmul ( x , w ) y . sbp y . shape \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c flow.matmul \u6839\u636e\u8f93\u5165 x \u4e0e w \u7684 SBP \u5206\u522b\u4e3a broadcast \u3001 split(1) \u3002OneFlow \u81ea\u52a8\u63a8\u5bfc\u51fa\u8f93\u51fa y \u7684 SBP \u5e94\u8be5\u4e3a split(1) \uff0c\u5b8c\u6210\u8ba1\u7b97\uff0c\u5f97\u5230 shape=(4,8) \u7684\u77e9\u9635\u3002\u8f93\u51fa\uff1a Terminal 0 (oneflow.sbp.split(dim=1),) oneflow.Size([4, 8]) Terminal 1 (oneflow.sbp.split(dim=1),) oneflow.Size([4, 8]) \u6269\u5c55\u9605\u8bfb \u00b6 \u591a\u673a\u8bad\u7ec3\u65f6\u7684\u73af\u5883\u53d8\u91cf \u00b6 \u672c\u6587\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5728\u4ea4\u4e92\u5f0f Python \u73af\u5883\u4e0b\u65b9\u4fbf\u67e5\u770b\u5b9e\u9a8c\u6548\u679c\u3002 \u5982\u679c\u4e0d\u662f\u5b66\u4e60\u3001\u8bd5\u9a8c\u76ee\u7684\uff0c\u800c\u662f\u751f\u4ea7\u9700\u6c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 oneflow.distributed.launch \u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u8be5\u6a21\u5757\u5185\u90e8\u6839\u636e\u547d\u4ee4\u884c\u53c2\u6570\u81ea\u52a8\u8bbe\u7f6e\u4e86\u5fc5\u8981\u7684\u73af\u5883\u53d8\u91cf\u3002 MASTER_ADDR \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c0\u53f7\u673a\u5668\u7684 IP MASTER_PORT \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c0\u53f7\u673a\u5668\u7684\u76d1\u542c\u7aef\u53e3\uff0c\u4e0d\u4e0e\u5df2\u7ecf\u5360\u7528\u7684\u7aef\u53e3\u51b2\u7a81\u5373\u53ef WORLD_SIZE \uff1a\u6574\u4e2a\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff0c\u56e0\u4e3a\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u5404\u4e2a\u673a\u5668\u4e0a\u663e\u5361\u6570\u76ee\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64 WORLD_SIZE \u7684\u6570\u76ee\u5b9e\u9645\u4e0a\u662f \\(\u673a\u5668\u6570\u76ee \\times \u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u663e\u5361\u6570\u76ee\\) \u3002\u5982\u6211\u4eec\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u662f\u5355\u673a2\u5361\u7684\u60c5\u51b5\uff0c\u56e0\u6b64 WORLD_SIZE=2 RANK \u548c LOCAL_RANK \u90fd\u662f\u5bf9\u8ba1\u7b97\u8bbe\u5907\u7684\u7f16\u53f7\uff0c\u4e0d\u540c\u7684\u662f RANK \u662f\u201c\u5168\u5c40\u89c6\u89d2\u201d\u7684\u7f16\u53f7\uff0c LOCAL_RANK \u67d0\u4e2a\u7279\u5b9a\u673a\u5668\u4e0a\u7684\u201c\u5c40\u90e8\u89c6\u89d2\u201d\u7684\u7f16\u53f7\u3002\u5f53\u662f\u5355\u673a\u8bad\u7ec3\uff08\u5355\u673a\u5355\u5361\u6216\u5355\u673a\u591a\u5361\uff09\u65f6\uff0c\u4e24\u8005\u662f\u6ca1\u6709\u533a\u522b\u7684\u3002\u4ee5\u4e0a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6709\u4e24\u4e2a\u663e\u5361\uff0c\u5206\u522b\u662f0\u53f7\u548c1\u53f7\u3002 \u5f53\u662f\u591a\u673a\u8bad\u7ec3\u65f6\uff0c\u6bcf\u53f0\u673a\u5668\u4e0a\u7684 LOCAL_RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff1b RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6240\u6709\u673a\u5668\u4e0a\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u7684\u603b\u548c\uff0c\u5b83\u4eec\u7684\u7f16\u53f7\u5747\u4ece0\u5f00\u59cb\u3002\uff08\u56e0\u4e3a\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u6240\u4ee5\u4e0d\u5305\u542b\u4e0a\u9650\uff09 \u4ee5\u4e24\u53f0\u673a\u5668\u3001\u6bcf\u53f0\u673a\u5668\u4e0a\u6709\u4e24\u5f20\u663e\u5361\u4e3a\u4f8b\uff0c\u53ef\u4ee5\u6574\u7406\u51fa\u6bcf\u5f20\u663e\u5361\u7684 LOCAL_RANK \u4e0e RANK \u5bf9\u5e94\u60c5\u51b5\uff1a RANK LOCAL_RANK \u673a\u56680\u7684\u7b2c0\u5f20\u663e\u5361 0 0 \u673a\u56680\u7684\u7b2c1\u5f20\u663e\u5361 1 1 \u673a\u56681\u7684\u7b2c0\u5f20\u663e\u5361 2 0 \u673a\u56681\u7684\u7b2c1\u5f20\u663e\u5361 3 1 Boxing\uff08\u81ea\u52a8\u8f6c\u6362 SBP\uff09 \u00b6 \u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\u7684\u4f8b\u5b50\uff0c\u77e5\u9053\u4e00\u4e2a\u7b97\u5b50\u4f1a\u6839\u636e\u8f93\u5165 tensor \u7684 SBP \u5c5e\u6027\u4ee5\u53ca\u7b97\u5b50\u5185\u7f6e\u7684 SBP Signature\uff0c\u81ea\u52a8\u8bbe\u7f6e\u8f93\u51fa tensor \u7684 SBP\u3002 \u4f46\u662f\uff0c\u7ec6\u5fc3\u7684\u7528\u6237\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u601d\u8003\uff0c\u5982\u679c\u4e0a\u6e38\u7b97\u5b50\u8f93\u51fa tensor \u7684 SBP\uff0c\u4e0e\u4e0b\u6e38\u7b97\u5b50\u8f93\u5165\u7684\u9700\u8981\u4e0d\u4e00\u81f4\u65f6\uff0c\u600e\u4e48\u529e\u5462\uff1f \u6bd4\u5982\uff0c\u5047\u8bbe\u5728\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u67092\u5c42\u77e9\u9635\u4e58\u6cd5\uff0c\u5728\u7b2c\u4e00\u5c42\u548c\u548c\u7b2c\u4e8c\u5c42\u90fd\u505a\u6a21\u578b\u5e76\u884c\u3002 \u56e0\u4e3a\u7b2c\u4e00\u5c42\u7684\u8f93\u51fa\u7684 SBP\uff08 split(1) \uff09\uff0c\u5e76\u4e0d\u662f\u7b2c\u4e8c\u5c42\u8f93\u5165\u6240\u671f\u5f85\u7684\uff08 broadcast \uff09\uff0c\u8fd9\u65f6\u5019\uff0cOneFlow \u4f1a\u81ea\u52a8\u5728\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\u548c\u4e0b\u4e00\u5c42\u7684\u8f93\u51fa\u4e4b\u95f4\uff0c\u63d2\u5165 Boxing \u64cd\u4f5c\uff0c\u5229\u7528\u96c6\u5408\u901a\u4fe1\u8fdb\u884c\u5fc5\u8981\u7684\u6570\u636e\u8f6c\u6362\u3002 \u4ece split(1) \u8f6c\u6362\u4e3a broadcast \uff0c\u76f8\u5f53\u4e8e\u505a\u4e86\u4e00\u6b21 AllGather \u64cd\u4f5c\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u56e0\u4e3a\u6709 Boxing \u673a\u5236\u7684\u5b58\u5728\uff0c\u4f7f\u5f97\u7528\u6237\u53ea\u7528\u5173\u5fc3\u5c11\u6570\u5173\u952e\u5730\u65b9\uff08\u5982 source \u7b97\u5b50\uff09\u7684 SBP \u8bbe\u7f6e\uff0c\u5269\u4e0b\u7684\u5168\u90e8\u90fd\u53ef\u4ee5\u4ea4\u7ed9 OneFlow \u6846\u67b6\u3002","title":"Global Tensor"},{"location":"parallelism/03_consistent_tensor.html#global-tensor","text":"","title":"Global Tensor"},{"location":"parallelism/03_consistent_tensor.html#_1","text":"","title":"\u5168\u5c40\u89c6\u89d2\u4e0e\u7269\u7406\u89c6\u89d2\u7684\u6620\u5c04"},{"location":"parallelism/03_consistent_tensor.html#global-tensor_1","text":"\u8981\u5728\u67092\u5f20 GPU \u663e\u5361\u7684\u4e3b\u673a\u4e0a\u4ea4\u4e92\u5f0f\u4f53\u9a8c global tensor\uff0c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u65b9\u5f0f\u57282\u4e2a\u63a7\u5236\u53f0\u5206\u522b\u542f\u52a8 python\u3002 Note \u5206\u522b \u70b9\u51fb \u4ee5\u4e0b Terminal 0 \u6216 Terminal 1 \u6807\u7b7e\uff0c\u67e5\u770b2\u4e2a\u63a7\u5236\u53f0\u7684\u547d\u4ee4/\u4ee3\u7801 Terminal 0 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 0 LOCAL_RANK = 0 python3 Terminal 1 export MASTER_ADDR = 127 .0.0.1 MASTER_PORT = 17789 WORLD_SIZE = 2 RANK = 1 LOCAL_RANK = 1 python3 \u4ee5\u4e0a\u7684\u73af\u5883\u53d8\u91cf\u7684\u8bbe\u7f6e\u662f\u505a\u5206\u5e03\u5f0f\u7684\u914d\u7f6e\uff0c\u8be6\u7ec6\u89e3\u91ca\u53ca\u501f\u52a9\u5de5\u5177\u542f\u52a8\u5206\u5e03\u5f0f\uff0c\u8bf7\u53c2\u8003\u6587\u672b\u7684 \u6269\u5c55\u9605\u8bfb","title":"\u521b\u5efa Global Tensor"},{"location":"parallelism/03_consistent_tensor.html#global-tensor_2","text":"\u5728\u4e24\u4e2a\u63a7\u5236\u53f0\uff0c\u5206\u522b\u5bfc\u5165 oneflow \uff0c\u5e76\u521b\u5efa x \u3002 \u5176\u4e2d flow.placement(\"cuda\", [0,1]) \u6307\u5b9a\u4e86 global tensor \u5728\u96c6\u7fa4\u7684\u8303\u56f4\u3002 \"cuda\" \u8868\u793a\u5728 GPU \u8bbe\u5907\u4e0a\u3002 placement \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a list \uff0c\u96c6\u7fa4\u4e2d\u7684\u8bbe\u5907\u4f1a\u88ab\u81ea\u52a8\u7f16\u53f7\uff0c\u901a\u8fc7\u6570\u5b57\u6307\u5b9a\u4f7f\u7528\u54ea\u4e9b\u8bbe\u5907\u3002 [0,1] \u8868\u793a global tensor \u4f7f\u7528\u7b2c 0\u30011 \u5f20\u663e\u5361\u4e0a\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) x . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x = flow . randn ( 4 , 5 , placement = placement , sbp = sbp ) x . shape \u8f93\u51fa\uff1a Terminal 0 oneflow.Size([4, 5]) Terminal 1 oneflow.Size([4, 5])","title":"\u76f4\u63a5\u521b\u5efa global tensor"},{"location":"parallelism/03_consistent_tensor.html#global-tensor-local-tensor","text":"\u901a\u8fc7 to_local \u65b9\u6cd5\u53ef\u4ee5\u67e5\u770b\u7269\u7406\u8bbe\u5907\u4e0a\u7684 local tensor\uff1a Terminal 0 x . to_local () tensor ([[ 2.9186e-01 , - 3.9442e-01 , 4.7072e-04 , - 3.2216e-01 , 1.7788e-01 ], [ - 4.5284e-01 , 1.2361e-01 , - 3.5962e-01 , 2.6651e-01 , 1.2951e+00 ]], device = 'cuda:0' , dtype = oneflow . float32 ) Terminal 1 x . to_local () tensor ([[ - 0.4363 , 0.9985 , - 2.5387 , 0.3003 , 0.3803 ], [ 0.0556 , - 0.8077 , 1.1191 , - 2.1278 , 0.1468 ]], device = 'cuda:1' , dtype = oneflow . float32 )","title":"\u7531 global tensor \u5f97\u5230 local tensor"},{"location":"parallelism/03_consistent_tensor.html#local-tensor-global-tensor","text":"\u53ef\u4ee5\u5148\u521b\u5efa local tensor\uff0c\u518d\u5229\u7528 Tensor.to_global \u65b9\u6cd5\uff0c\u5c06 local tensor \u8f6c\u4e3a global tensor\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u57282\u53f0\u8bbe\u5907\u4e0a\u5206\u522b\u521b\u5efa\u4e86 shape=(2,5) \u76842\u4e2a local tensor\u3002 \u6ce8\u610f\u7ecf\u8fc7 to_global \u65b9\u6cd5\u540e\uff0c\u5f97\u5230\u7684 global tensor \u7684 shape \u4e3a (4,5) \u3002 \u8fd9\u662f\u56e0\u4e3a\u9009\u62e9\u7684 sbp=flow.sbp.split(0) \uff0c2\u4e2a\u5f62\u72b6\u4e3a (2,5) \u7684 local tensor\uff0c\u9700\u8981\u5728\u7b2c0\u7ef4\u62fc\u63a5\uff0c\u5f97\u5230 (4,5) \u7684 global tensor\u3002 Terminal 0 import oneflow as flow x = flow . randn ( 2 , 5 ) placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) x_global . shape Terminal 1 import oneflow as flow x = flow . randn ( 2 , 5 ) placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) sbp = flow . sbp . split ( 0 ) x_global = x . to_global ( placement = placement , sbp = sbp ) x_global . shape","title":"\u7531 local tensor \u8f6c\u6362\u5f97\u5230 global tensor"},{"location":"parallelism/03_consistent_tensor.html#sbp-signature","text":"","title":"\u5b9e\u8df5 SBP Signature \u7684\u4f5c\u7528"},{"location":"parallelism/03_consistent_tensor.html#_2","text":"\u4ee5\u4e0b\u7684\u4ee3\u7801\u5bf9\u5e94\u4e86 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u7b56\u7565 \u7684\u6570\u636e\u5e76\u884c\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) y . sbp y . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . split ( 0 )) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . broadcast ) y = flow . matmul ( x , w ) y . sbp y . shape \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c flow.matmul \u6839\u636e\u8f93\u5165 x \u4e0e w \u7684 SBP \u5206\u522b\u4e3a split(0) \u3001 broadcast \u3002OneFlow \u81ea\u52a8\u63a8\u5bfc\u51fa\u8f93\u51fa y \u7684 SBP \u5e94\u8be5\u4e3a split(0) \uff0c\u5b8c\u6210\u8ba1\u7b97\uff0c\u5f97\u5230 shape=(4,8) \u7684\u77e9\u9635\u3002\u8f93\u51fa\uff1a Terminal 0 (oneflow.sbp.split(dim=0),) oneflow.Size([4, 8]) Terminal 1 (oneflow.sbp.split(dim=0),) oneflow.Size([4, 8])","title":"\u6570\u636e\u5e76\u884c"},{"location":"parallelism/03_consistent_tensor.html#_3","text":"\u4ee5\u4e0b\u7684\u4ee3\u7801\u5bf9\u5e94\u4e86 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u7b56\u7565 \u7684\u6a21\u578b\u5e76\u884c\u3002 Terminal 0 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( 1 )) y = flow . matmul ( x , w ) y . sbp y . shape Terminal 1 import oneflow as flow placement = flow . placement ( \"cuda\" , [ 0 , 1 ]) x = flow . randn ( 4 , 5 , placement = placement , sbp = flow . sbp . broadcast ) w = flow . randn ( 5 , 8 , placement = placement , sbp = flow . sbp . split ( 1 )) y = flow . matmul ( x , w ) y . sbp y . shape \u53ef\u4ee5\u89c2\u5bdf\u5230\uff0c flow.matmul \u6839\u636e\u8f93\u5165 x \u4e0e w \u7684 SBP \u5206\u522b\u4e3a broadcast \u3001 split(1) \u3002OneFlow \u81ea\u52a8\u63a8\u5bfc\u51fa\u8f93\u51fa y \u7684 SBP \u5e94\u8be5\u4e3a split(1) \uff0c\u5b8c\u6210\u8ba1\u7b97\uff0c\u5f97\u5230 shape=(4,8) \u7684\u77e9\u9635\u3002\u8f93\u51fa\uff1a Terminal 0 (oneflow.sbp.split(dim=1),) oneflow.Size([4, 8]) Terminal 1 (oneflow.sbp.split(dim=1),) oneflow.Size([4, 8])","title":"\u6a21\u578b\u5e76\u884c"},{"location":"parallelism/03_consistent_tensor.html#_4","text":"","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"parallelism/03_consistent_tensor.html#_5","text":"\u672c\u6587\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5728\u4ea4\u4e92\u5f0f Python \u73af\u5883\u4e0b\u65b9\u4fbf\u67e5\u770b\u5b9e\u9a8c\u6548\u679c\u3002 \u5982\u679c\u4e0d\u662f\u5b66\u4e60\u3001\u8bd5\u9a8c\u76ee\u7684\uff0c\u800c\u662f\u751f\u4ea7\u9700\u6c42\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 oneflow.distributed.launch \u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u8be5\u6a21\u5757\u5185\u90e8\u6839\u636e\u547d\u4ee4\u884c\u53c2\u6570\u81ea\u52a8\u8bbe\u7f6e\u4e86\u5fc5\u8981\u7684\u73af\u5883\u53d8\u91cf\u3002 MASTER_ADDR \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c0\u53f7\u673a\u5668\u7684 IP MASTER_PORT \uff1a\u591a\u673a\u8bad\u7ec3\u7684\u7b2c0\u53f7\u673a\u5668\u7684\u76d1\u542c\u7aef\u53e3\uff0c\u4e0d\u4e0e\u5df2\u7ecf\u5360\u7528\u7684\u7aef\u53e3\u51b2\u7a81\u5373\u53ef WORLD_SIZE \uff1a\u6574\u4e2a\u96c6\u7fa4\u4e2d\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff0c\u56e0\u4e3a\u76ee\u524d\u8fd8\u4e0d\u652f\u6301\u5404\u4e2a\u673a\u5668\u4e0a\u663e\u5361\u6570\u76ee\u4e0d\u4e00\u81f4\uff0c\u56e0\u6b64 WORLD_SIZE \u7684\u6570\u76ee\u5b9e\u9645\u4e0a\u662f \\(\u673a\u5668\u6570\u76ee \\times \u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u663e\u5361\u6570\u76ee\\) \u3002\u5982\u6211\u4eec\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u662f\u5355\u673a2\u5361\u7684\u60c5\u51b5\uff0c\u56e0\u6b64 WORLD_SIZE=2 RANK \u548c LOCAL_RANK \u90fd\u662f\u5bf9\u8ba1\u7b97\u8bbe\u5907\u7684\u7f16\u53f7\uff0c\u4e0d\u540c\u7684\u662f RANK \u662f\u201c\u5168\u5c40\u89c6\u89d2\u201d\u7684\u7f16\u53f7\uff0c LOCAL_RANK \u67d0\u4e2a\u7279\u5b9a\u673a\u5668\u4e0a\u7684\u201c\u5c40\u90e8\u89c6\u89d2\u201d\u7684\u7f16\u53f7\u3002\u5f53\u662f\u5355\u673a\u8bad\u7ec3\uff08\u5355\u673a\u5355\u5361\u6216\u5355\u673a\u591a\u5361\uff09\u65f6\uff0c\u4e24\u8005\u662f\u6ca1\u6709\u533a\u522b\u7684\u3002\u4ee5\u4e0a\u7684\u4f8b\u5b50\u4e2d\uff0c\u6709\u4e24\u4e2a\u663e\u5361\uff0c\u5206\u522b\u662f0\u53f7\u548c1\u53f7\u3002 \u5f53\u662f\u591a\u673a\u8bad\u7ec3\u65f6\uff0c\u6bcf\u53f0\u673a\u5668\u4e0a\u7684 LOCAL_RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6bcf\u53f0\u673a\u5668\u4e0a\u7684\u8ba1\u7b97\u8bbe\u5907\u7684\u6570\u76ee\uff1b RANK \u7684\u4e0a\u9650\uff0c\u5c31\u662f\u6240\u6709\u673a\u5668\u4e0a\u6240\u6709\u8ba1\u7b97\u8bbe\u5907\u7684\u603b\u548c\uff0c\u5b83\u4eec\u7684\u7f16\u53f7\u5747\u4ece0\u5f00\u59cb\u3002\uff08\u56e0\u4e3a\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u6240\u4ee5\u4e0d\u5305\u542b\u4e0a\u9650\uff09 \u4ee5\u4e24\u53f0\u673a\u5668\u3001\u6bcf\u53f0\u673a\u5668\u4e0a\u6709\u4e24\u5f20\u663e\u5361\u4e3a\u4f8b\uff0c\u53ef\u4ee5\u6574\u7406\u51fa\u6bcf\u5f20\u663e\u5361\u7684 LOCAL_RANK \u4e0e RANK \u5bf9\u5e94\u60c5\u51b5\uff1a RANK LOCAL_RANK \u673a\u56680\u7684\u7b2c0\u5f20\u663e\u5361 0 0 \u673a\u56680\u7684\u7b2c1\u5f20\u663e\u5361 1 1 \u673a\u56681\u7684\u7b2c0\u5f20\u663e\u5361 2 0 \u673a\u56681\u7684\u7b2c1\u5f20\u663e\u5361 3 1","title":"\u591a\u673a\u8bad\u7ec3\u65f6\u7684\u73af\u5883\u53d8\u91cf"},{"location":"parallelism/03_consistent_tensor.html#boxing-sbp","text":"\u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u4ee5\u4e0a\u4ee3\u7801\u7684\u4f8b\u5b50\uff0c\u77e5\u9053\u4e00\u4e2a\u7b97\u5b50\u4f1a\u6839\u636e\u8f93\u5165 tensor \u7684 SBP \u5c5e\u6027\u4ee5\u53ca\u7b97\u5b50\u5185\u7f6e\u7684 SBP Signature\uff0c\u81ea\u52a8\u8bbe\u7f6e\u8f93\u51fa tensor \u7684 SBP\u3002 \u4f46\u662f\uff0c\u7ec6\u5fc3\u7684\u7528\u6237\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u601d\u8003\uff0c\u5982\u679c\u4e0a\u6e38\u7b97\u5b50\u8f93\u51fa tensor \u7684 SBP\uff0c\u4e0e\u4e0b\u6e38\u7b97\u5b50\u8f93\u5165\u7684\u9700\u8981\u4e0d\u4e00\u81f4\u65f6\uff0c\u600e\u4e48\u529e\u5462\uff1f \u6bd4\u5982\uff0c\u5047\u8bbe\u5728\u6a21\u578b\u5e76\u884c\u4e2d\uff0c\u67092\u5c42\u77e9\u9635\u4e58\u6cd5\uff0c\u5728\u7b2c\u4e00\u5c42\u548c\u548c\u7b2c\u4e8c\u5c42\u90fd\u505a\u6a21\u578b\u5e76\u884c\u3002 \u56e0\u4e3a\u7b2c\u4e00\u5c42\u7684\u8f93\u51fa\u7684 SBP\uff08 split(1) \uff09\uff0c\u5e76\u4e0d\u662f\u7b2c\u4e8c\u5c42\u8f93\u5165\u6240\u671f\u5f85\u7684\uff08 broadcast \uff09\uff0c\u8fd9\u65f6\u5019\uff0cOneFlow \u4f1a\u81ea\u52a8\u5728\u4e0a\u4e00\u5c42\u7684\u8f93\u51fa\u548c\u4e0b\u4e00\u5c42\u7684\u8f93\u51fa\u4e4b\u95f4\uff0c\u63d2\u5165 Boxing \u64cd\u4f5c\uff0c\u5229\u7528\u96c6\u5408\u901a\u4fe1\u8fdb\u884c\u5fc5\u8981\u7684\u6570\u636e\u8f6c\u6362\u3002 \u4ece split(1) \u8f6c\u6362\u4e3a broadcast \uff0c\u76f8\u5f53\u4e8e\u505a\u4e86\u4e00\u6b21 AllGather \u64cd\u4f5c\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u56e0\u4e3a\u6709 Boxing \u673a\u5236\u7684\u5b58\u5728\uff0c\u4f7f\u5f97\u7528\u6237\u53ea\u7528\u5173\u5fc3\u5c11\u6570\u5173\u952e\u5730\u65b9\uff08\u5982 source \u7b97\u5b50\uff09\u7684 SBP \u8bbe\u7f6e\uff0c\u5269\u4e0b\u7684\u5168\u90e8\u90fd\u53ef\u4ee5\u4ea4\u7ed9 OneFlow \u6846\u67b6\u3002","title":"Boxing\uff08\u81ea\u52a8\u8f6c\u6362 SBP\uff09"},{"location":"parallelism/04_2d-sbp.html","text":"2D SBP \u00b6 \u9605\u8bfb \u96c6\u7fa4\u7684\u5168\u5c40\u89c6\u89d2 \u548c Global Tensor \u4e4b\u540e\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u638c\u63e1\u4e86 SBP \u548c SBP Signature \u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5e76\u4e14\u80fd\u591f\u4e0a\u624b\u76f8\u5173\u7684\u7f16\u7a0b\u4efb\u52a1\u3002\u5b9e\u9645\u4e0a\uff0c\u4ee5\u4e0a\u8d44\u6599\u4e2d\u6d89\u53ca\u90fd\u662f 1D SBP \u3002 \u672c\u6587\u5c06\u5728\u8bfb\u8005\u638c\u63e1 1D SBP \u7684\u57fa\u7840\u4e0a\uff0c\u4ecb\u7ecd 2D SBP\uff0c\u5b83\u80fd\u591f\u66f4\u7075\u6d3b\u5730\u5e94\u5bf9\u66f4\u590d\u6742\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u573a\u666f\u3002 2D \u8bbe\u5907\u9635\u5217 \u00b6 \u6211\u4eec\u5df2\u7ecf\u719f\u6089 1D SBP \u7684 placement \u914d\u7f6e\uff0c\u5728 1D SBP \u7684\u573a\u666f\u4e0b\uff0c\u901a\u8fc7 oneflow.placement \u63a5\u53e3\u914d\u7f6e\u96c6\u7fa4\uff0c\u6bd4\u5982\u4f7f\u7528\u96c6\u7fa4\u4e2d\u7684\u7b2c 0~3 \u53f7 GPU \u663e\u5361\uff1a >>> placement1 = flow . placement ( \"cuda\" , ranks = [ 0 , 1 , 2 , 3 ]) \u4ee5\u4e0a\u7684 \"cuda\" \u6307\u5b9a\u4e86\u8bbe\u5907\u7c7b\u578b\uff0c ranks=[0, 1, 2, 3] \u6307\u5b9a\u4e86\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u8bbe\u5907\u3002\u5176\u5b9e\uff0c ranks \u4e0d\u4ec5\u53ef\u4ee5\u662f\u4e00\u7ef4\u7684int list\uff0c\u8fd8\u53ef\u4ee5\u662f\u591a\u7ef4\u7684int\u6570\u7ec4\uff1a placement2 = flow . placement ( \"cuda\" , ranks = [[ 0 , 1 ], [ 2 , 3 ]]) \u5f53 ranks \u662f ranks=[0, 1, 2, 3] \u8fd9\u79cd\u4e00\u7ef4list\u7684\u5f62\u5f0f\u65f6\uff0c\u96c6\u7fa4\u4e2d\u7684\u6240\u6709\u8bbe\u5907\u7ec4\u6210\u4e86\u4e00\u4e2a 1D \u8bbe\u5907\u5411\u91cf\uff0c\u8fd9\u4e5f\u662f 1D SBP \u540d\u79f0\u7684\u7531\u6765\u3002 \u5f53 ranks \u662f\u591a\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u65f6\uff0c\u96c6\u7fa4\u4e2d\u7684\u8bbe\u5907\u88ab\u5206\u7ec4\u4e3a\u4e00\u4e2a\u591a\u7ef4\u7684\u8bbe\u5907\u9635\u5217\u3002 ranks=[[0, 1], [2, 3]] \u8868\u793a\u96c6\u7fa4\u4e2d\u7684\u56db\u4e2a\u8ba1\u7b97\u8bbe\u5907\u88ab\u5212\u5206\u4e3a\u4e86 \\(2 \\times 2\\) \u7684\u8bbe\u5907\u9635\u5217\u3002 2D SBP \u00b6 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u6784\u9020 Global Tensor \u65f6\uff0c\u9700\u8981\u540c\u65f6\u6307\u5b9a placement \u4e0e SBP \u3002\u5f53 placement \u4e2d\u7684\u96c6\u7fa4\u662f 2 \u7ef4\u7684\u8bbe\u5907\u9635\u5217\u65f6\uff1bSBP \u4e5f\u5fc5\u987b\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684 tuple \uff0c\u8fd9\u4e2a tuple \u4e2d\u7684\u7b2c 0 \u4e2a\u3001\u7b2c 1 \u4e2a \u5143\u7d20\uff0c\u5206\u522b\u63cf\u8ff0\u4e86 Global Tensor \u5f20\u91cf\u5728\u8bbe\u5907\u9635\u5217\u7b2c 0 \u7ef4\u3001\u7b2c 1 \u7ef4\u7684\u5206\u5e03\u3002 \u6bd4\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u914d\u7f6e\u4e86 \\(2 \\times 2\\) \u7684\u8bbe\u5907\u9635\u5217\uff0c\u5e76\u4e14\u8bbe\u7f6e 2D SBP \u4e3a (broadcast, split(0)) \u3002 >>> a = flow . Tensor ([[ 1 , 2 ],[ 3 , 4 ]]) >>> placement = flow . placement ( \"cuda\" , ranks = [[ 0 , 1 ], [ 2 , 3 ]]) >>> sbp = ( flow . sbp . broadcast , flow . sbp . split ( 0 )) >>> a_to_global = a . to_global ( placement = placement , sbp = sbp ) \u5b83\u610f\u5473\u7740\uff0c\u903b\u8f91\u4e0a\u7684\u6570\u636e\uff0c\u5728\u6574\u4e2a\u8bbe\u5907\u9635\u5217\u4e0a\uff0c\u5728\u7b2c 0 \u7ef4\u5ea6\uff08\u201c\u7ad6\u7740\u770b\u201d\uff09\u505a broadcast \uff1b\u5728\u7b2c 1 \u7ef4\u5ea6\uff08\u201c\u6a2a\u7740\u770b\u201d\uff09\u505a split(0) \u3002 \u6211\u4eec\u901a\u8fc7\u4e0b\u56fe\u505a\u9610\u8ff0\uff1a \u6b64\u56fe\u7684\u6700\u5de6\u8fb9\u662f\u5168\u5c40\u89c6\u89d2\u7684\u6570\u636e\uff0c\u6700\u53f3\u8fb9\u662f\u8bbe\u5907\u9635\u5217\u4e0a\u5404\u4e2a\u8bbe\u5907\u7684\u6570\u636e\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u4ece\u7b2c 0 \u7ef4\u7684\u89d2\u5ea6\u770b\uff0c\u5b83\u4eec\u90fd\u662f broadcast \u7684\u5173\u7cfb\uff1a (group0, device0) \u4e0e (group1, device0) \u4e2d\u6570\u636e\u4e00\u81f4\uff0c\u4e92\u4e3a broadcast \u5173\u7cfb (group0, device1) \u4e0e (group1, device1) \u4e2d\u6570\u636e\u4e00\u81f4\uff0c\u4e92\u4e3a broadcast \u5173\u7cfb \u800c\u4ece\u7b2c 1 \u7ef4\u7684\u89d2\u5ea6\u770b\uff0c\u5b83\u4eec\u90fd\u662f split(0) \u7684\u5173\u7cfb\uff1a (group0, device0) \u4e0e (group0, device1) \u4e92\u4e3a split(0) \u5173\u7cfb (group1, device0) \u4e0e (group1, device1) \u4e92\u4e3a split(0) \u5173\u7cfb \u76f4\u63a5\u7406\u89e3\u903b\u8f91\u6570\u636e\u548c\u6700\u7ec8\u7684\u8bbe\u5907\u9635\u5217\u4e2d\u7684\u7269\u7406\u6570\u636e\u5bf9\u5e94\u5173\u7cfb\u53ef\u80fd\u6709\u4e00\u5b9a\u96be\u5ea6\uff0c\u5927\u5bb6\u5728\u601d\u8003 2D SBP \u65f6\uff0c\u53ef\u4ee5\u5047\u60f3\u4e00\u4e2a\u4e2d\u95f4\u72b6\u6001\uff08\u4e0a\u56fe\u4e2d\u7070\u8272\u90e8\u5206\uff09\uff0c\u4ee5 (broadcast, split(0)) \u4e3a\u4f8b\uff1a \u539f\u59cb\u903b\u8f91\u5f20\u91cf\uff0c\u5148\u7ecf\u8fc7 broadcast \uff0c\u5e7f\u64ad\u5230 2 \u4e2a group \u4e0a\uff0c\u5f97\u5230\u4e2d\u95f4\u7684\u72b6\u6001 \u5728\u4e2d\u95f4\u72b6\u6001\u7684\u57fa\u7840\u4e0a\uff0c\u7ee7\u7eed\u5728\u5404\u81ea\u7684 group \u4e0a\uff0c\u505a split(0) \uff0c\u5f97\u5230\u6700\u7ec8\u8bbe\u5907\u9635\u5217\u4e2d\u5404\u4e2a\u7269\u7406\u5f20\u91cf\u7684\u72b6\u6001 2D SBP Signature \u00b6 \u7c7b\u4f3c 1D SBP \u6709 SBP Signature \u7684\u6982\u5ff5\uff0c\u7b97\u5b50\u4e5f\u6709 2D SBP Signature\uff0c\u5728\u638c\u63e1\u4e86 1D SBP \u53ca\u5176 Signature \u6982\u5ff5\u7684\u57fa\u7840\u4e0a\uff0c2D SBP Signature \u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u9075\u5faa\u4e00\u6761\u539f\u5219\uff1a \u5728\u5404\u81ea\u7684\u7ef4\u5ea6\u4e0a\u72ec\u7acb\u63a8\u5bfc\u5373\u53ef \u6211\u4eec\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u5148\u56de\u987e 1D SBP \u7684\u60c5\u51b5\uff0c\u5047\u5b9a\u6709 \\(x \\times w = y\\) \u53ef\u4ee5\u6709\u4ee5\u4e0b\u7684 SBP Signature\uff1a \\[ broadcast \\times split(1) = split(1) \\] \u4ee5\u53ca \\[ split(0) \\times broadcast = split(0) \\] \u73b0\u5728\uff0c\u5047\u5b9a\u6211\u4eec\u7ed9 \\(x\\) \u8bbe\u7f6e\u4e86 2D SBP \u4e3a\uff1a \\((broadcast, split(0))\\) \uff0c \u7ed9 \\(w\\) \u8bbe\u7f6e 2D SBP \u4e3a \\((split(1), broadcast)\\) \uff0c\u90a3\u4e48\uff0c\u5728 2D SBP \u7684\u80cc\u666f\u4e0b\uff0c \\(x \\times w = y\\) \u8fd0\u7b97\uff0c\u5f97\u5230 \\(y\\) \u7684 SBP \u5c5e\u6027\u4e3a \\((split(1), split(0))\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee5\u4e0b\u51e0\u4e2a 2D SBP\uff0c\u6784\u6210\u77e9\u9635\u4e58\u6cd5\u7684 2D SBP Signature\uff1a \\[ (broadcast, split(0)) \\times (split(1), broadcast) = (split(1), split(0)) \\] 2D SBP \u4f7f\u7528\u793a\u4f8b \u00b6 \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6f14\u793a\u5982\u4f55\u4f7f\u7528 2D SBP \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u540c\u4e0a\u6587\u4e2d\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a \\(2 \\times 2\\) \u7684\u8bbe\u5907\u9635\u5217\uff0c\u9274\u4e8e\u8bfb\u8005\u53ef\u80fd\u76ee\u524d\u5e76\u6ca1\u6709\u591a\u4e2a GPU \u8bbe\u5907\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 CPU \u6765\u6a21\u62df \\(2 \\times 2\\) \u8bbe\u5907\u9635\u5217\u7684\u60c5\u5f62\uff0c\u5bf9\u8f93\u5165\u5f20\u91cf\u91c7\u7528\u4e0a\u6587\u56fe\u4e2d (broadcast, split(0)) \u7684\u5e76\u884c\u7b56\u7565\u3002 \u9996\u5148\uff0c\u5bfc\u5165\u4f9d\u8d56\uff1a import oneflow as flow import oneflow.nn as nn \u7136\u540e\uff0c\u5b9a\u4e49\u8981\u4f7f\u7528\u5230\u7684 placement \u548c sbp\uff1a PLACEMENT = flow . placement ( \"cpu\" , [[ 0 , 1 ], [ 2 , 3 ]]) BROADCAST = ( flow . sbp . broadcast , flow . sbp . broadcast ) BS0 = ( flow . sbp . broadcast , flow . sbp . split ( 0 )) PLACEMENT \u7684 ranks \u53c2\u6570\u662f\u4e00\u4e2a\u4e8c\u7ef4 list\uff0c\u4ee3\u8868\u5c06\u96c6\u7fa4\u4e2d\u7684\u8bbe\u5907\u5212\u5206\u6210 \\(2 \\times 2\\) \u7684\u8bbe\u5907\u9635\u5217\u3002\u5982\u524d\u6587\u6240\u8ff0\uff0cSBP \u9700\u8981\u4e0e\u5176\u5bf9\u5e94\uff0c\u6307\u5b9a\u4e3a\u957f\u5ea6\u4e3a 2 \u7684 tuple\u3002\u5176\u4e2d\uff0c BROADCAST \u8868\u793a\u5728\u8bbe\u5907\u9635\u5217\u7684\u7b2c 0 \u7ef4\u548c\u7b2c 1 \u7ef4\u90fd\u8fdb\u884c\u5e7f\u64ad\uff0c BS0 \u7684\u542b\u4e49\u4e0e\u524d\u6587\u7684\u63cf\u8ff0\u76f8\u540c\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u6a21\u578b\uff1a model = nn . Sequential ( nn . Linear ( 8 , 4 ), nn . ReLU (), nn . Linear ( 4 , 2 )) \u5c06\u6a21\u578b\u5728\u96c6\u7fa4\u4e0a\u5e7f\u64ad\uff1a model = model . to_global ( placement = PLACEMENT , sbp = BROADCAST ) \u7136\u540e\u6784\u9020\u6570\u636e\u5e76\u8fdb\u884c\u524d\u5411\u63a8\u7406\uff1a x = flow . randn ( 1 , 2 , 8 ) global_x = x . to_global ( placement = PLACEMENT , sbp = BS0 ) pred = model ( global_x ) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5f62\u72b6\u4e3a (1, 2, 8) \u7684 local tensor\uff0c\u7136\u540e\u901a\u8fc7 Tensor.to_global \u65b9\u6cd5\u83b7\u53d6\u5bf9\u5e94\u7684 global tensor\uff0c\u6700\u540e\u5c06\u5176\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u8fdb\u884c\u63a8\u7406\u3002 \u901a\u8fc7 Tensor.to_local \u65b9\u6cd5\u83b7\u53d6\u5f53\u524d\u7269\u7406\u8bbe\u5907\u4e0a\u7684 local tensor \u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f93\u51fa\u5176\u5f62\u72b6\u548c\u503c\u6765\u9a8c\u8bc1\u6570\u636e\u662f\u5426\u88ab\u6b63\u786e\u5904\u7406\uff1a local_x = global_x . to_local () print ( f ' { local_x . device } , { local_x . shape } , \\n { local_x } ' ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a cpu:2, oneflow.Size([1, 2, 8]), tensor([[[ 0.6068, 0.1986, -0.6363, -0.5572, -0.2388, 1.1607, -0.7186, 1.2161], [-0.1632, -1.5293, -0.6637, -1.0219, 0.1464, 1.1574, -0.0811, -1.6568]]], dtype=oneflow.float32) cpu:3, oneflow.Size([1, 2, 8]), tensor([[[-0.7676, 0.4519, -0.8810, 0.5648, 1.5428, 0.5752, 0.2466, -0.7708], [-1.2131, 1.4590, 0.2749, 0.8824, -0.8286, 0.9989, 0.5599, -0.5099]]], dtype=oneflow.float32) cpu:1, oneflow.Size([1, 2, 8]), tensor([[[-0.7676, 0.4519, -0.8810, 0.5648, 1.5428, 0.5752, 0.2466, -0.7708], [-1.2131, 1.4590, 0.2749, 0.8824, -0.8286, 0.9989, 0.5599, -0.5099]]], dtype=oneflow.float32) cpu:0, oneflow.Size([1, 2, 8]), tensor([[[ 0.6068, 0.1986, -0.6363, -0.5572, -0.2388, 1.1607, -0.7186, 1.2161], [-0.1632, -1.5293, -0.6637, -1.0219, 0.1464, 1.1574, -0.0811, -1.6568]]], dtype=oneflow.float32) \u901a\u8fc7\u6bd4\u8f83\u8fd9\u4e9b\u4e0d\u540c\u201c\u8bbe\u5907\u201d\u4e0a local tensor \u53ef\u4ee5\u770b\u5230\uff0c\u7b26\u5408\u4e0a\u6587\u56fe\u4e2d\u63cf\u8ff0\u7684\u72b6\u6001\uff0c\u8bc1\u660e\u6570\u636e\u5df2\u88ab\u6b63\u786e\u5206\u5e03\u5230\u5404\u4e2a\u8bbe\u5907\u4e0a\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7 python xxx.py \u7684\u65b9\u5f0f\u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\uff0c\u800c\u9700\u8981\u901a\u8fc7 oneflow.distributed.launch \u542f\u52a8\u3002\u6b64\u6a21\u5757\u53ef\u4ee5\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u5728\u7ec8\u7aef\u4e2d\u6267\u884c\u4e0b\u5217\u547d\u4ee4 \uff08\u5047\u8bbe\u4e0a\u8ff0\u4ee3\u7801\u5df2\u7ecf\u4fdd\u5b58\u81f3\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u540d\u4e3a \"2d_sbp.py\" \u7684\u6587\u4ef6\u4e2d\uff09\uff1a python3 -m oneflow.distributed.launch --nproc_per_node = 4 2d_sbp.py \u5728\u6b64\uff0c\u901a\u8fc7\u5c06\u53c2\u6570 nproc_per_node \u6307\u5b9a\u4e3a 4 \u6765\u521b\u5efa 4 \u4e2a\u8fdb\u7a0b\uff0c\u6a21\u62df\u5171\u6709 4 \u4e2a GPU \u7684\u60c5\u5f62\u3002\u5173\u4e8e\u6b64\u6a21\u5757\u7684\u8be6\u7ec6\u7528\u6cd5\uff0c\u8bf7\u53c2\u89c1\uff1a \u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3 \u3002 \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a Code PLACEMENT = flow . placement ( \"cpu\" , [[ 0 , 1 ], [ 2 , 3 ]]) BROADCAST = ( flow . sbp . broadcast , flow . sbp . broadcast ) BS0 = ( flow . sbp . broadcast , flow . sbp . split ( 0 )) model = nn . Sequential ( nn . Linear ( 8 , 4 ), nn . ReLU (), nn . Linear ( 4 , 2 )) model = model . to_global ( placement = PLACEMENT , sbp = BROADCAST ) x = flow . randn ( 1 , 2 , 8 ) global_x = x . to_global ( placement = PLACEMENT , sbp = BS0 ) pred = model ( global_x ) local_x = global_x . to_local () print ( f ' { local_x . device } , { local_x . shape } , \\n { local_x } ' )","title":"2D SBP"},{"location":"parallelism/04_2d-sbp.html#2d-sbp","text":"\u9605\u8bfb \u96c6\u7fa4\u7684\u5168\u5c40\u89c6\u89d2 \u548c Global Tensor \u4e4b\u540e\uff0c\u76f8\u4fe1\u4f60\u5df2\u7ecf\u638c\u63e1\u4e86 SBP \u548c SBP Signature \u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5e76\u4e14\u80fd\u591f\u4e0a\u624b\u76f8\u5173\u7684\u7f16\u7a0b\u4efb\u52a1\u3002\u5b9e\u9645\u4e0a\uff0c\u4ee5\u4e0a\u8d44\u6599\u4e2d\u6d89\u53ca\u90fd\u662f 1D SBP \u3002 \u672c\u6587\u5c06\u5728\u8bfb\u8005\u638c\u63e1 1D SBP \u7684\u57fa\u7840\u4e0a\uff0c\u4ecb\u7ecd 2D SBP\uff0c\u5b83\u80fd\u591f\u66f4\u7075\u6d3b\u5730\u5e94\u5bf9\u66f4\u590d\u6742\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u573a\u666f\u3002","title":"2D SBP"},{"location":"parallelism/04_2d-sbp.html#2d","text":"\u6211\u4eec\u5df2\u7ecf\u719f\u6089 1D SBP \u7684 placement \u914d\u7f6e\uff0c\u5728 1D SBP \u7684\u573a\u666f\u4e0b\uff0c\u901a\u8fc7 oneflow.placement \u63a5\u53e3\u914d\u7f6e\u96c6\u7fa4\uff0c\u6bd4\u5982\u4f7f\u7528\u96c6\u7fa4\u4e2d\u7684\u7b2c 0~3 \u53f7 GPU \u663e\u5361\uff1a >>> placement1 = flow . placement ( \"cuda\" , ranks = [ 0 , 1 , 2 , 3 ]) \u4ee5\u4e0a\u7684 \"cuda\" \u6307\u5b9a\u4e86\u8bbe\u5907\u7c7b\u578b\uff0c ranks=[0, 1, 2, 3] \u6307\u5b9a\u4e86\u96c6\u7fa4\u4e2d\u7684\u8ba1\u7b97\u8bbe\u5907\u3002\u5176\u5b9e\uff0c ranks \u4e0d\u4ec5\u53ef\u4ee5\u662f\u4e00\u7ef4\u7684int list\uff0c\u8fd8\u53ef\u4ee5\u662f\u591a\u7ef4\u7684int\u6570\u7ec4\uff1a placement2 = flow . placement ( \"cuda\" , ranks = [[ 0 , 1 ], [ 2 , 3 ]]) \u5f53 ranks \u662f ranks=[0, 1, 2, 3] \u8fd9\u79cd\u4e00\u7ef4list\u7684\u5f62\u5f0f\u65f6\uff0c\u96c6\u7fa4\u4e2d\u7684\u6240\u6709\u8bbe\u5907\u7ec4\u6210\u4e86\u4e00\u4e2a 1D \u8bbe\u5907\u5411\u91cf\uff0c\u8fd9\u4e5f\u662f 1D SBP \u540d\u79f0\u7684\u7531\u6765\u3002 \u5f53 ranks \u662f\u591a\u7ef4\u6570\u7ec4\u7684\u5f62\u5f0f\u65f6\uff0c\u96c6\u7fa4\u4e2d\u7684\u8bbe\u5907\u88ab\u5206\u7ec4\u4e3a\u4e00\u4e2a\u591a\u7ef4\u7684\u8bbe\u5907\u9635\u5217\u3002 ranks=[[0, 1], [2, 3]] \u8868\u793a\u96c6\u7fa4\u4e2d\u7684\u56db\u4e2a\u8ba1\u7b97\u8bbe\u5907\u88ab\u5212\u5206\u4e3a\u4e86 \\(2 \\times 2\\) \u7684\u8bbe\u5907\u9635\u5217\u3002","title":"2D \u8bbe\u5907\u9635\u5217"},{"location":"parallelism/04_2d-sbp.html#2d-sbp_1","text":"\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u6784\u9020 Global Tensor \u65f6\uff0c\u9700\u8981\u540c\u65f6\u6307\u5b9a placement \u4e0e SBP \u3002\u5f53 placement \u4e2d\u7684\u96c6\u7fa4\u662f 2 \u7ef4\u7684\u8bbe\u5907\u9635\u5217\u65f6\uff1bSBP \u4e5f\u5fc5\u987b\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a 2 \u7684 tuple \uff0c\u8fd9\u4e2a tuple \u4e2d\u7684\u7b2c 0 \u4e2a\u3001\u7b2c 1 \u4e2a \u5143\u7d20\uff0c\u5206\u522b\u63cf\u8ff0\u4e86 Global Tensor \u5f20\u91cf\u5728\u8bbe\u5907\u9635\u5217\u7b2c 0 \u7ef4\u3001\u7b2c 1 \u7ef4\u7684\u5206\u5e03\u3002 \u6bd4\u5982\uff0c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u914d\u7f6e\u4e86 \\(2 \\times 2\\) \u7684\u8bbe\u5907\u9635\u5217\uff0c\u5e76\u4e14\u8bbe\u7f6e 2D SBP \u4e3a (broadcast, split(0)) \u3002 >>> a = flow . Tensor ([[ 1 , 2 ],[ 3 , 4 ]]) >>> placement = flow . placement ( \"cuda\" , ranks = [[ 0 , 1 ], [ 2 , 3 ]]) >>> sbp = ( flow . sbp . broadcast , flow . sbp . split ( 0 )) >>> a_to_global = a . to_global ( placement = placement , sbp = sbp ) \u5b83\u610f\u5473\u7740\uff0c\u903b\u8f91\u4e0a\u7684\u6570\u636e\uff0c\u5728\u6574\u4e2a\u8bbe\u5907\u9635\u5217\u4e0a\uff0c\u5728\u7b2c 0 \u7ef4\u5ea6\uff08\u201c\u7ad6\u7740\u770b\u201d\uff09\u505a broadcast \uff1b\u5728\u7b2c 1 \u7ef4\u5ea6\uff08\u201c\u6a2a\u7740\u770b\u201d\uff09\u505a split(0) \u3002 \u6211\u4eec\u901a\u8fc7\u4e0b\u56fe\u505a\u9610\u8ff0\uff1a \u6b64\u56fe\u7684\u6700\u5de6\u8fb9\u662f\u5168\u5c40\u89c6\u89d2\u7684\u6570\u636e\uff0c\u6700\u53f3\u8fb9\u662f\u8bbe\u5907\u9635\u5217\u4e0a\u5404\u4e2a\u8bbe\u5907\u7684\u6570\u636e\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u4ece\u7b2c 0 \u7ef4\u7684\u89d2\u5ea6\u770b\uff0c\u5b83\u4eec\u90fd\u662f broadcast \u7684\u5173\u7cfb\uff1a (group0, device0) \u4e0e (group1, device0) \u4e2d\u6570\u636e\u4e00\u81f4\uff0c\u4e92\u4e3a broadcast \u5173\u7cfb (group0, device1) \u4e0e (group1, device1) \u4e2d\u6570\u636e\u4e00\u81f4\uff0c\u4e92\u4e3a broadcast \u5173\u7cfb \u800c\u4ece\u7b2c 1 \u7ef4\u7684\u89d2\u5ea6\u770b\uff0c\u5b83\u4eec\u90fd\u662f split(0) \u7684\u5173\u7cfb\uff1a (group0, device0) \u4e0e (group0, device1) \u4e92\u4e3a split(0) \u5173\u7cfb (group1, device0) \u4e0e (group1, device1) \u4e92\u4e3a split(0) \u5173\u7cfb \u76f4\u63a5\u7406\u89e3\u903b\u8f91\u6570\u636e\u548c\u6700\u7ec8\u7684\u8bbe\u5907\u9635\u5217\u4e2d\u7684\u7269\u7406\u6570\u636e\u5bf9\u5e94\u5173\u7cfb\u53ef\u80fd\u6709\u4e00\u5b9a\u96be\u5ea6\uff0c\u5927\u5bb6\u5728\u601d\u8003 2D SBP \u65f6\uff0c\u53ef\u4ee5\u5047\u60f3\u4e00\u4e2a\u4e2d\u95f4\u72b6\u6001\uff08\u4e0a\u56fe\u4e2d\u7070\u8272\u90e8\u5206\uff09\uff0c\u4ee5 (broadcast, split(0)) \u4e3a\u4f8b\uff1a \u539f\u59cb\u903b\u8f91\u5f20\u91cf\uff0c\u5148\u7ecf\u8fc7 broadcast \uff0c\u5e7f\u64ad\u5230 2 \u4e2a group \u4e0a\uff0c\u5f97\u5230\u4e2d\u95f4\u7684\u72b6\u6001 \u5728\u4e2d\u95f4\u72b6\u6001\u7684\u57fa\u7840\u4e0a\uff0c\u7ee7\u7eed\u5728\u5404\u81ea\u7684 group \u4e0a\uff0c\u505a split(0) \uff0c\u5f97\u5230\u6700\u7ec8\u8bbe\u5907\u9635\u5217\u4e2d\u5404\u4e2a\u7269\u7406\u5f20\u91cf\u7684\u72b6\u6001","title":"2D SBP"},{"location":"parallelism/04_2d-sbp.html#2d-sbp-signature","text":"\u7c7b\u4f3c 1D SBP \u6709 SBP Signature \u7684\u6982\u5ff5\uff0c\u7b97\u5b50\u4e5f\u6709 2D SBP Signature\uff0c\u5728\u638c\u63e1\u4e86 1D SBP \u53ca\u5176 Signature \u6982\u5ff5\u7684\u57fa\u7840\u4e0a\uff0c2D SBP Signature \u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u9075\u5faa\u4e00\u6761\u539f\u5219\uff1a \u5728\u5404\u81ea\u7684\u7ef4\u5ea6\u4e0a\u72ec\u7acb\u63a8\u5bfc\u5373\u53ef \u6211\u4eec\u4ee5\u77e9\u9635\u4e58\u6cd5\u4e3a\u4f8b\uff0c\u5148\u56de\u987e 1D SBP \u7684\u60c5\u51b5\uff0c\u5047\u5b9a\u6709 \\(x \\times w = y\\) \u53ef\u4ee5\u6709\u4ee5\u4e0b\u7684 SBP Signature\uff1a \\[ broadcast \\times split(1) = split(1) \\] \u4ee5\u53ca \\[ split(0) \\times broadcast = split(0) \\] \u73b0\u5728\uff0c\u5047\u5b9a\u6211\u4eec\u7ed9 \\(x\\) \u8bbe\u7f6e\u4e86 2D SBP \u4e3a\uff1a \\((broadcast, split(0))\\) \uff0c \u7ed9 \\(w\\) \u8bbe\u7f6e 2D SBP \u4e3a \\((split(1), broadcast)\\) \uff0c\u90a3\u4e48\uff0c\u5728 2D SBP \u7684\u80cc\u666f\u4e0b\uff0c \\(x \\times w = y\\) \u8fd0\u7b97\uff0c\u5f97\u5230 \\(y\\) \u7684 SBP \u5c5e\u6027\u4e3a \\((split(1), split(0))\\) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u4ee5\u4e0b\u51e0\u4e2a 2D SBP\uff0c\u6784\u6210\u77e9\u9635\u4e58\u6cd5\u7684 2D SBP Signature\uff1a \\[ (broadcast, split(0)) \\times (split(1), broadcast) = (split(1), split(0)) \\]","title":"2D SBP Signature"},{"location":"parallelism/04_2d-sbp.html#2d-sbp_2","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6f14\u793a\u5982\u4f55\u4f7f\u7528 2D SBP \u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u540c\u4e0a\u6587\u4e2d\u7684\u4f8b\u5b50\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a \\(2 \\times 2\\) \u7684\u8bbe\u5907\u9635\u5217\uff0c\u9274\u4e8e\u8bfb\u8005\u53ef\u80fd\u76ee\u524d\u5e76\u6ca1\u6709\u591a\u4e2a GPU \u8bbe\u5907\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 CPU \u6765\u6a21\u62df \\(2 \\times 2\\) \u8bbe\u5907\u9635\u5217\u7684\u60c5\u5f62\uff0c\u5bf9\u8f93\u5165\u5f20\u91cf\u91c7\u7528\u4e0a\u6587\u56fe\u4e2d (broadcast, split(0)) \u7684\u5e76\u884c\u7b56\u7565\u3002 \u9996\u5148\uff0c\u5bfc\u5165\u4f9d\u8d56\uff1a import oneflow as flow import oneflow.nn as nn \u7136\u540e\uff0c\u5b9a\u4e49\u8981\u4f7f\u7528\u5230\u7684 placement \u548c sbp\uff1a PLACEMENT = flow . placement ( \"cpu\" , [[ 0 , 1 ], [ 2 , 3 ]]) BROADCAST = ( flow . sbp . broadcast , flow . sbp . broadcast ) BS0 = ( flow . sbp . broadcast , flow . sbp . split ( 0 )) PLACEMENT \u7684 ranks \u53c2\u6570\u662f\u4e00\u4e2a\u4e8c\u7ef4 list\uff0c\u4ee3\u8868\u5c06\u96c6\u7fa4\u4e2d\u7684\u8bbe\u5907\u5212\u5206\u6210 \\(2 \\times 2\\) \u7684\u8bbe\u5907\u9635\u5217\u3002\u5982\u524d\u6587\u6240\u8ff0\uff0cSBP \u9700\u8981\u4e0e\u5176\u5bf9\u5e94\uff0c\u6307\u5b9a\u4e3a\u957f\u5ea6\u4e3a 2 \u7684 tuple\u3002\u5176\u4e2d\uff0c BROADCAST \u8868\u793a\u5728\u8bbe\u5907\u9635\u5217\u7684\u7b2c 0 \u7ef4\u548c\u7b2c 1 \u7ef4\u90fd\u8fdb\u884c\u5e7f\u64ad\uff0c BS0 \u7684\u542b\u4e49\u4e0e\u524d\u6587\u7684\u63cf\u8ff0\u76f8\u540c\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u4ee5\u4e0b\u6a21\u578b\uff1a model = nn . Sequential ( nn . Linear ( 8 , 4 ), nn . ReLU (), nn . Linear ( 4 , 2 )) \u5c06\u6a21\u578b\u5728\u96c6\u7fa4\u4e0a\u5e7f\u64ad\uff1a model = model . to_global ( placement = PLACEMENT , sbp = BROADCAST ) \u7136\u540e\u6784\u9020\u6570\u636e\u5e76\u8fdb\u884c\u524d\u5411\u63a8\u7406\uff1a x = flow . randn ( 1 , 2 , 8 ) global_x = x . to_global ( placement = PLACEMENT , sbp = BS0 ) pred = model ( global_x ) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5f62\u72b6\u4e3a (1, 2, 8) \u7684 local tensor\uff0c\u7136\u540e\u901a\u8fc7 Tensor.to_global \u65b9\u6cd5\u83b7\u53d6\u5bf9\u5e94\u7684 global tensor\uff0c\u6700\u540e\u5c06\u5176\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u8fdb\u884c\u63a8\u7406\u3002 \u901a\u8fc7 Tensor.to_local \u65b9\u6cd5\u83b7\u53d6\u5f53\u524d\u7269\u7406\u8bbe\u5907\u4e0a\u7684 local tensor \u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f93\u51fa\u5176\u5f62\u72b6\u548c\u503c\u6765\u9a8c\u8bc1\u6570\u636e\u662f\u5426\u88ab\u6b63\u786e\u5904\u7406\uff1a local_x = global_x . to_local () print ( f ' { local_x . device } , { local_x . shape } , \\n { local_x } ' ) \u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a cpu:2, oneflow.Size([1, 2, 8]), tensor([[[ 0.6068, 0.1986, -0.6363, -0.5572, -0.2388, 1.1607, -0.7186, 1.2161], [-0.1632, -1.5293, -0.6637, -1.0219, 0.1464, 1.1574, -0.0811, -1.6568]]], dtype=oneflow.float32) cpu:3, oneflow.Size([1, 2, 8]), tensor([[[-0.7676, 0.4519, -0.8810, 0.5648, 1.5428, 0.5752, 0.2466, -0.7708], [-1.2131, 1.4590, 0.2749, 0.8824, -0.8286, 0.9989, 0.5599, -0.5099]]], dtype=oneflow.float32) cpu:1, oneflow.Size([1, 2, 8]), tensor([[[-0.7676, 0.4519, -0.8810, 0.5648, 1.5428, 0.5752, 0.2466, -0.7708], [-1.2131, 1.4590, 0.2749, 0.8824, -0.8286, 0.9989, 0.5599, -0.5099]]], dtype=oneflow.float32) cpu:0, oneflow.Size([1, 2, 8]), tensor([[[ 0.6068, 0.1986, -0.6363, -0.5572, -0.2388, 1.1607, -0.7186, 1.2161], [-0.1632, -1.5293, -0.6637, -1.0219, 0.1464, 1.1574, -0.0811, -1.6568]]], dtype=oneflow.float32) \u901a\u8fc7\u6bd4\u8f83\u8fd9\u4e9b\u4e0d\u540c\u201c\u8bbe\u5907\u201d\u4e0a local tensor \u53ef\u4ee5\u770b\u5230\uff0c\u7b26\u5408\u4e0a\u6587\u56fe\u4e2d\u63cf\u8ff0\u7684\u72b6\u6001\uff0c\u8bc1\u660e\u6570\u636e\u5df2\u88ab\u6b63\u786e\u5206\u5e03\u5230\u5404\u4e2a\u8bbe\u5907\u4e0a\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7 python xxx.py \u7684\u65b9\u5f0f\u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\uff0c\u800c\u9700\u8981\u901a\u8fc7 oneflow.distributed.launch \u542f\u52a8\u3002\u6b64\u6a21\u5757\u53ef\u4ee5\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u5728\u7ec8\u7aef\u4e2d\u6267\u884c\u4e0b\u5217\u547d\u4ee4 \uff08\u5047\u8bbe\u4e0a\u8ff0\u4ee3\u7801\u5df2\u7ecf\u4fdd\u5b58\u81f3\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u540d\u4e3a \"2d_sbp.py\" \u7684\u6587\u4ef6\u4e2d\uff09\uff1a python3 -m oneflow.distributed.launch --nproc_per_node = 4 2d_sbp.py \u5728\u6b64\uff0c\u901a\u8fc7\u5c06\u53c2\u6570 nproc_per_node \u6307\u5b9a\u4e3a 4 \u6765\u521b\u5efa 4 \u4e2a\u8fdb\u7a0b\uff0c\u6a21\u62df\u5171\u6709 4 \u4e2a GPU \u7684\u60c5\u5f62\u3002\u5173\u4e8e\u6b64\u6a21\u5757\u7684\u8be6\u7ec6\u7528\u6cd5\uff0c\u8bf7\u53c2\u89c1\uff1a \u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3 \u3002 \u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a Code PLACEMENT = flow . placement ( \"cpu\" , [[ 0 , 1 ], [ 2 , 3 ]]) BROADCAST = ( flow . sbp . broadcast , flow . sbp . broadcast ) BS0 = ( flow . sbp . broadcast , flow . sbp . split ( 0 )) model = nn . Sequential ( nn . Linear ( 8 , 4 ), nn . ReLU (), nn . Linear ( 4 , 2 )) model = model . to_global ( placement = PLACEMENT , sbp = BROADCAST ) x = flow . randn ( 1 , 2 , 8 ) global_x = x . to_global ( placement = PLACEMENT , sbp = BS0 ) pred = model ( global_x ) local_x = global_x . to_local () print ( f ' { local_x . device } , { local_x . shape } , \\n { local_x } ' )","title":"2D SBP \u4f7f\u7528\u793a\u4f8b"},{"location":"parallelism/04_launch.html","text":"\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3 \u00b6 OneFlow \u63d0\u4f9b\u4e86 oneflow.distributed.launch \u6a21\u5757\u5e2e\u52a9\u7528\u6237\u66f4\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u7528\u6237\u53ef\u4ee5\u501f\u52a9\u4ee5\u4e0b\u7684\u5f62\u5f0f\uff0c\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1a python3 -m oneflow.distributed.launch [ \u542f\u52a8\u9009\u9879 ] \u8bad\u7ec3\u811a\u672c.py \u6bd4\u5982\uff0c\u542f\u52a8\u5355\u673a\u4e24\u5361\u7684\u8bad\u7ec3\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./script.py \u518d\u6bd4\u5982\uff0c\u542f\u52a8\u4e24\u53f0\u673a\u5668\uff0c\u6bcf\u53f0\u673a\u5668\u6709\u4e24\u5f20\u663e\u5361\u7684\u8bad\u7ec3\u3002 \u57280\u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 0 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ --master_port = 7788 \\ script.py \u57281\u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 1 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ --master_port = 7788 \\ script.py \u5e38\u89c1\u9009\u9879\u8bf4\u660e \u00b6 \u901a\u8fc7 python3 -m oneflow.distributed.launch -h \u53ef\u4ee5\u67e5\u770b launch \u6a21\u5757\u7684\u9009\u9879\u8bf4\u660e\uff0c\u4ee5\u4e0b\u662f\u90e8\u5206\u5e38\u89c1\u9009\u9879\u3002 --nnodes \uff1a\u673a\u5668\u7684\u6570\u76ee(number of nodes) --node_rank \uff1a \u673a\u5668\u7684\u7f16\u53f7\uff0c\u4ece0\u5f00\u59cb --nproc_per_node \uff1a\u6bcf\u53f0\u673a\u5668\u4e0a\u8981\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u76ee(number of processes per node)\uff0c\u63a8\u8350\u4e0e GPU \u6570\u76ee\u4e00\u81f4 --logdir \uff1a\u5b50\u8fdb\u7a0b\u65e5\u5fd7\u7684\u76f8\u5bf9\u5b58\u50a8\u8def\u5f84 launch \u6a21\u5757\u4e0e\u5e76\u884c\u7b56\u7565\u7684\u5173\u7cfb \u00b6 \u6ce8\u610f oneflow.distributed.launch \u7684\u4e3b\u8981\u4f5c\u7528\uff0c\u662f\u5f85\u7528\u6237\u5b8c\u6210\u5206\u5e03\u5f0f\u7a0b\u5e8f\u540e\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u5b83\u7701\u53bb\u4e86\u914d\u7f6e\u96c6\u7fa4\u4e2d \u73af\u5883\u53d8\u91cf \u7684\u7e41\u7410\u3002 \u4f46\u662f oneflow.distributed.launch \u5e76\u4e0d\u51b3\u5b9a \u5e76\u884c\u7b56\u7565 \uff0c\u5e76\u884c\u7b56\u7565\u662f\u7531\u8bbe\u7f6e\u6570\u636e\u3001\u6a21\u578b\u7684\u5206\u53d1\u65b9\u5f0f\u3001\u5728\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u653e\u7f6e\u4f4d\u7f6e\u51b3\u5b9a\u7684\u3002 OneFlow \u63d0\u4f9b\u7684 \u5168\u5c40\u89c6\u89d2 \u548c Global Tensor \u53ef\u4ee5\u7075\u6d3b\u5730\u914d\u7f6e\u5e76\u884c\u7b56\u7565\u3002\u5e76\u4e14\u9488\u5bf9\u6570\u636e\u5e76\u884c\uff0cOneFlow \u63d0\u4f9b\u4e86 DistributedDataParallel \u6a21\u5757\uff0c\u53ef\u4ee5\u5728\u6781\u5c11\u4fee\u6539\u4ee3\u7801\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5355\u673a\u5355\u5361\u7684\u811a\u672c\u6539\u4e3a\u6570\u636e\u5e76\u884c\u7684\u811a\u672c\u3002","title":"\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"parallelism/04_launch.html#launch","text":"OneFlow \u63d0\u4f9b\u4e86 oneflow.distributed.launch \u6a21\u5757\u5e2e\u52a9\u7528\u6237\u66f4\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002 \u7528\u6237\u53ef\u4ee5\u501f\u52a9\u4ee5\u4e0b\u7684\u5f62\u5f0f\uff0c\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\uff1a python3 -m oneflow.distributed.launch [ \u542f\u52a8\u9009\u9879 ] \u8bad\u7ec3\u811a\u672c.py \u6bd4\u5982\uff0c\u542f\u52a8\u5355\u673a\u4e24\u5361\u7684\u8bad\u7ec3\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./script.py \u518d\u6bd4\u5982\uff0c\u542f\u52a8\u4e24\u53f0\u673a\u5668\uff0c\u6bcf\u53f0\u673a\u5668\u6709\u4e24\u5f20\u663e\u5361\u7684\u8bad\u7ec3\u3002 \u57280\u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 0 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ --master_port = 7788 \\ script.py \u57281\u53f7\u673a\u5668\u4e0a\u8fd0\u884c\uff1a python3 -m oneflow.distributed.launch \\ --nnodes = 2 \\ --node_rank = 1 \\ --nproc_per_node = 2 \\ --master_addr = \"192.168.1.1\" \\ --master_port = 7788 \\ script.py","title":"\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"parallelism/04_launch.html#_1","text":"\u901a\u8fc7 python3 -m oneflow.distributed.launch -h \u53ef\u4ee5\u67e5\u770b launch \u6a21\u5757\u7684\u9009\u9879\u8bf4\u660e\uff0c\u4ee5\u4e0b\u662f\u90e8\u5206\u5e38\u89c1\u9009\u9879\u3002 --nnodes \uff1a\u673a\u5668\u7684\u6570\u76ee(number of nodes) --node_rank \uff1a \u673a\u5668\u7684\u7f16\u53f7\uff0c\u4ece0\u5f00\u59cb --nproc_per_node \uff1a\u6bcf\u53f0\u673a\u5668\u4e0a\u8981\u542f\u52a8\u7684\u8fdb\u7a0b\u6570\u76ee(number of processes per node)\uff0c\u63a8\u8350\u4e0e GPU \u6570\u76ee\u4e00\u81f4 --logdir \uff1a\u5b50\u8fdb\u7a0b\u65e5\u5fd7\u7684\u76f8\u5bf9\u5b58\u50a8\u8def\u5f84","title":"\u5e38\u89c1\u9009\u9879\u8bf4\u660e"},{"location":"parallelism/04_launch.html#launch_1","text":"\u6ce8\u610f oneflow.distributed.launch \u7684\u4e3b\u8981\u4f5c\u7528\uff0c\u662f\u5f85\u7528\u6237\u5b8c\u6210\u5206\u5e03\u5f0f\u7a0b\u5e8f\u540e\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u66f4\u65b9\u4fbf\u5730\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\u5b83\u7701\u53bb\u4e86\u914d\u7f6e\u96c6\u7fa4\u4e2d \u73af\u5883\u53d8\u91cf \u7684\u7e41\u7410\u3002 \u4f46\u662f oneflow.distributed.launch \u5e76\u4e0d\u51b3\u5b9a \u5e76\u884c\u7b56\u7565 \uff0c\u5e76\u884c\u7b56\u7565\u662f\u7531\u8bbe\u7f6e\u6570\u636e\u3001\u6a21\u578b\u7684\u5206\u53d1\u65b9\u5f0f\u3001\u5728\u7269\u7406\u8bbe\u5907\u4e0a\u7684\u653e\u7f6e\u4f4d\u7f6e\u51b3\u5b9a\u7684\u3002 OneFlow \u63d0\u4f9b\u7684 \u5168\u5c40\u89c6\u89d2 \u548c Global Tensor \u53ef\u4ee5\u7075\u6d3b\u5730\u914d\u7f6e\u5e76\u884c\u7b56\u7565\u3002\u5e76\u4e14\u9488\u5bf9\u6570\u636e\u5e76\u884c\uff0cOneFlow \u63d0\u4f9b\u4e86 DistributedDataParallel \u6a21\u5757\uff0c\u53ef\u4ee5\u5728\u6781\u5c11\u4fee\u6539\u4ee3\u7801\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u5355\u673a\u5355\u5361\u7684\u811a\u672c\u6539\u4e3a\u6570\u636e\u5e76\u884c\u7684\u811a\u672c\u3002","title":"launch \u6a21\u5757\u4e0e\u5e76\u884c\u7b56\u7565\u7684\u5173\u7cfb"},{"location":"parallelism/05_ddp.html","text":"\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u00b6 \u5728 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e00\u6587\u4e2d\u4ecb\u7ecd\u4e86\u6570\u636e\u5e76\u884c\u7684\u7279\u70b9\u3002 \u5728 OneFlow \u4e2d\uff0c\u63d0\u4f9b\u4e86\u4e24\u79cd\u505a\u6570\u636e\u5e76\u884c\u7684\u65b9\u5f0f\u3002 \u4e00\u79cd\u662f\u4f7f\u7528 OneFlow \u7684\u539f\u751f\u7684 SBP \u6982\u5ff5\uff0c\u901a\u8fc7\u8bbe\u7f6e global \u5f20\u91cf\uff0c\u8fdb\u884c\u6570\u636e\u5e76\u884c\u8bad\u7ec3\uff0c\u8fd9\u4e5f\u662f\u7528 OneFlow \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u7684 \u63a8\u8350\u65b9\u5f0f \u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4ece PyTorch \u8fc1\u79fb\u5230 OneFlow \u7684\u7528\u6237\uff0cOneFlow \u63d0\u4f9b\u4e86\u4e0e torch.nn.parallel.DistributedDataParallel \u5bf9\u9f50\u4e00\u81f4\u7684\u63a5\u53e3 oneflow.nn.parallel.DistributedDataParallel \uff0c\u5b83\u4e5f\u80fd\u8ba9\u7528\u6237\u65b9\u4fbf\u5730\u4ece\u5355\u673a\u8bad\u7ec3\u811a\u672c\uff0c\u6269\u5c55\u4e3a\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002 \u901a\u8fc7\u8bbe\u7f6e SBP \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u00b6 \u4ee5\u4e0b\u4ee3\u7801\uff0c\u662f\u901a\u8fc7\u914d\u7f6e\u8bbe\u7f6e global \u5f20\u91cf\uff0c\u5b8c\u6210\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 PLACEMENT = flow . placement ( \"cuda\" , [ 0 , 1 ]) S0 = flow . sbp . split ( 0 ) B = flow . sbp . broadcast DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model = model . to_global ( placement = PLACEMENT , sbp = B ) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to_global ( placement = PLACEMENT , sbp = S0 ) y = y . to_global ( placement = PLACEMENT , sbp = S0 ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u811a\u672c\u7684\u4e0e\u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u811a\u672c\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u5c11\u6570\u7684\u533a\u522b\u5728\u4e8e\u51e0\u884c\u4e0e global tensor \u6709\u5173\u7684\u914d\u7f6e\u4ee3\u7801\u5916\uff0c\u5b83\u4eec\u662f\uff1a \u8bbe\u7f6e placement\uff0c\u8ba9\u8bad\u7ec3\u653e\u7f6e\u5728\u96c6\u7fa4\u7b2c 0\u53f7\u30011\u53f7 GPU \u4e0a\uff1a PLACEMENT = flow . placement ( \"cuda\" , [ 0 , 1 ]) \u6a21\u578b\u5728\u96c6\u7fa4\u4e0a\u505a\u5e7f\u64ad model = model . to_global ( placement = PLACEMENT , sbp = B ) \u6570\u636e\u5728\u96c6\u7fa4\u4e0a\u6309 split(0) \u505a\u5207\u5206\uff1a x = x . to_global ( placement = PLACEMENT , sbp = S0 ) y = y . to_global ( placement = PLACEMENT , sbp = S0 ) \u8fd9\u6837\uff0c\u6309\u7167 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e2d\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5c31\u901a\u8fc7\u5bf9\u6570\u636e\u8fdb\u884c split(0) \u5207\u5206\uff0c\u5bf9\u6a21\u578b\u8fdb\u884c\u5e7f\u64ad\uff0c\u8fdb\u884c\u4e86\u5206\u5e03\u5f0f\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002 \u4f7f\u7528 DistributedDataParallel \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u00b6 \u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u5feb\u901f\u4f53\u9a8c oneflow.nn.parallel.DistributedDataParallel \u505a\u6570\u636e\u5e76\u884c\uff1a wget https://docs.oneflow.org/master/code/parallelism/ddp_train.py #\u4e0b\u8f7d\u811a\u672c python3 -m oneflow.distributed.launch --nproc_per_node 2 ./ddp_train.py #\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u8f93\u51fa\uff1a 50/500 loss:0.004111831542104483 50/500 loss:0.00025336415274068713 ... 500/500 loss:6.184563972055912e-11 500/500 loss:4.547473508864641e-12 w:tensor([[2.0000], [3.0000]], device='cuda:1', dtype=oneflow.float32, grad_fn=<accumulate_grad>) w:tensor([[2.0000], [3.0000]], device='cuda:0', dtype=oneflow.float32, grad_fn=<accumulate_grad>) \u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u53ef\u4ee5\u5c55\u5f00\u4ee5\u4e0a\u8fd0\u884c\u811a\u672c\u7684\u4ee3\u7801\u3002 Code import oneflow as flow from oneflow.nn.parallel import DistributedDataParallel as ddp train_x = [ flow . tensor ([[ 1 , 2 ], [ 2 , 3 ]], dtype = flow . float32 ), flow . tensor ([[ 4 , 6 ], [ 3 , 1 ]], dtype = flow . float32 ), ] train_y = [ flow . tensor ([[ 8 ], [ 13 ]], dtype = flow . float32 ), flow . tensor ([[ 26 ], [ 9 ]], dtype = flow . float32 ), ] class Model ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . lr = 0.01 self . iter_count = 500 self . w = flow . nn . Parameter ( flow . tensor ([[ 0 ], [ 0 ]], dtype = flow . float32 )) def forward ( self , x ): x = flow . matmul ( x , self . w ) return x m = Model () . to ( \"cuda\" ) m = ddp ( m ) loss = flow . nn . MSELoss ( reduction = \"sum\" ) optimizer = flow . optim . SGD ( m . parameters (), m . lr ) for i in range ( 0 , m . iter_count ): rank = flow . env . get_rank () x = train_x [ rank ] . to ( \"cuda\" ) y = train_y [ rank ] . to ( \"cuda\" ) y_pred = m ( x ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { m . iter_count } loss: { l } \" ) optimizer . zero_grad () l . backward () optimizer . step () print ( f \" \\n w: { m . w } \" ) \u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u4e0e\u5355\u673a\u5355\u5361\u811a\u672c\u7684\u4e0d\u540c\u53ea\u67092\u4e2a\uff1a \u4f7f\u7528 DistributedDataParallel \u5904\u7406\u4e00\u4e0b module \u5bf9\u8c61\uff08 m = ddp(m) ) \u4f7f\u7528 get_rank \u83b7\u53d6\u5f53\u524d\u8bbe\u5907\u7f16\u53f7\uff0c\u5e76\u9488\u5bf9\u8bbe\u5907\u5206\u53d1\u6570\u636e \u7136\u540e\u4f7f\u7528 launcher \u542f\u52a8\u811a\u672c\uff0c\u628a\u5269\u4e0b\u7684\u4e00\u5207\u90fd\u4ea4\u7ed9 OneFlow\uff0c\u8ba9\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u50cf\u5355\u673a\u5355\u5361\u8bad\u7ec3\u4e00\u6837\u7b80\u5355\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./ddp_train.py DistributedSampler \u00b6 \u672c\u6587\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u7a81\u51fa DistributedDataParallel \uff0c\u56e0\u6b64\u4f7f\u7528\u7684\u6570\u636e\u662f\u624b\u5de5\u5206\u53d1\u7684\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 DistributedSampler \u914d\u5408\u6570\u636e\u5e76\u884c\u4f7f\u7528\u3002 DistributedSampler \u4f1a\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u5b9e\u4f8b\u5316 Dataloader\uff0c\u6bcf\u4e2a Dataloader \u5b9e\u4f8b\u4f1a\u52a0\u8f7d\u5b8c\u6574\u6570\u636e\u7684\u4e00\u90e8\u5206\uff0c\u81ea\u52a8\u5b8c\u6210\u6570\u636e\u7684\u5206\u53d1\u3002","title":"\u6570\u636e\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/05_ddp.html#_1","text":"\u5728 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e00\u6587\u4e2d\u4ecb\u7ecd\u4e86\u6570\u636e\u5e76\u884c\u7684\u7279\u70b9\u3002 \u5728 OneFlow \u4e2d\uff0c\u63d0\u4f9b\u4e86\u4e24\u79cd\u505a\u6570\u636e\u5e76\u884c\u7684\u65b9\u5f0f\u3002 \u4e00\u79cd\u662f\u4f7f\u7528 OneFlow \u7684\u539f\u751f\u7684 SBP \u6982\u5ff5\uff0c\u901a\u8fc7\u8bbe\u7f6e global \u5f20\u91cf\uff0c\u8fdb\u884c\u6570\u636e\u5e76\u884c\u8bad\u7ec3\uff0c\u8fd9\u4e5f\u662f\u7528 OneFlow \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u7684 \u63a8\u8350\u65b9\u5f0f \u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4ece PyTorch \u8fc1\u79fb\u5230 OneFlow \u7684\u7528\u6237\uff0cOneFlow \u63d0\u4f9b\u4e86\u4e0e torch.nn.parallel.DistributedDataParallel \u5bf9\u9f50\u4e00\u81f4\u7684\u63a5\u53e3 oneflow.nn.parallel.DistributedDataParallel \uff0c\u5b83\u4e5f\u80fd\u8ba9\u7528\u6237\u65b9\u4fbf\u5730\u4ece\u5355\u673a\u8bad\u7ec3\u811a\u672c\uff0c\u6269\u5c55\u4e3a\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002","title":"\u6570\u636e\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/05_ddp.html#sbp","text":"\u4ee5\u4e0b\u4ee3\u7801\uff0c\u662f\u901a\u8fc7\u914d\u7f6e\u8bbe\u7f6e global \u5f20\u91cf\uff0c\u5b8c\u6210\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002\u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u67e5\u770b\u8be6\u7ec6\u4ee3\u7801\u3002 Code import oneflow as flow import oneflow.nn as nn import flowvision import flowvision.transforms as transforms BATCH_SIZE = 64 EPOCH_NUM = 1 PLACEMENT = flow . placement ( \"cuda\" , [ 0 , 1 ]) S0 = flow . sbp . split ( 0 ) B = flow . sbp . broadcast DEVICE = \"cuda\" if flow . cuda . is_available () else \"cpu\" print ( \"Using {} device\" . format ( DEVICE )) training_data = flowvision . datasets . CIFAR10 ( root = \"data\" , train = True , transform = transforms . ToTensor (), download = True , ) train_dataloader = flow . utils . data . DataLoader ( training_data , BATCH_SIZE , shuffle = True ) model = flowvision . models . mobilenet_v2 () . to ( DEVICE ) model . classifer = nn . Sequential ( nn . Dropout ( 0.2 ), nn . Linear ( model . last_channel , 10 )) model = model . to_global ( placement = PLACEMENT , sbp = B ) loss_fn = nn . CrossEntropyLoss () . to ( DEVICE ) optimizer = flow . optim . SGD ( model . parameters (), lr = 1e-3 ) for t in range ( EPOCH_NUM ): print ( f \"Epoch { t + 1 } \\n -------------------------------\" ) size = len ( train_dataloader . dataset ) for batch , ( x , y ) in enumerate ( train_dataloader ): x = x . to_global ( placement = PLACEMENT , sbp = S0 ) y = y . to_global ( placement = PLACEMENT , sbp = S0 ) # Compute prediction error pred = model ( x ) loss = loss_fn ( pred , y ) # Backpropagation optimizer . zero_grad () loss . backward () optimizer . step () current = batch * BATCH_SIZE if batch % 5 == 0 : print ( f \"loss: { loss : >7f } [ { current : >5d } / { size : >5d } ]\" ) \u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e2a\u811a\u672c\u7684\u4e0e\u5355\u673a\u5355\u5361\u7684\u8bad\u7ec3\u811a\u672c\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u5c11\u6570\u7684\u533a\u522b\u5728\u4e8e\u51e0\u884c\u4e0e global tensor \u6709\u5173\u7684\u914d\u7f6e\u4ee3\u7801\u5916\uff0c\u5b83\u4eec\u662f\uff1a \u8bbe\u7f6e placement\uff0c\u8ba9\u8bad\u7ec3\u653e\u7f6e\u5728\u96c6\u7fa4\u7b2c 0\u53f7\u30011\u53f7 GPU \u4e0a\uff1a PLACEMENT = flow . placement ( \"cuda\" , [ 0 , 1 ]) \u6a21\u578b\u5728\u96c6\u7fa4\u4e0a\u505a\u5e7f\u64ad model = model . to_global ( placement = PLACEMENT , sbp = B ) \u6570\u636e\u5728\u96c6\u7fa4\u4e0a\u6309 split(0) \u505a\u5207\u5206\uff1a x = x . to_global ( placement = PLACEMENT , sbp = S0 ) y = y . to_global ( placement = PLACEMENT , sbp = S0 ) \u8fd9\u6837\uff0c\u6309\u7167 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e2d\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5c31\u901a\u8fc7\u5bf9\u6570\u636e\u8fdb\u884c split(0) \u5207\u5206\uff0c\u5bf9\u6a21\u578b\u8fdb\u884c\u5e7f\u64ad\uff0c\u8fdb\u884c\u4e86\u5206\u5e03\u5f0f\u6570\u636e\u5e76\u884c\u8bad\u7ec3\u3002","title":"\u901a\u8fc7\u8bbe\u7f6e SBP \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/05_ddp.html#distributeddataparallel","text":"\u53ef\u4ee5\u7528\u4ee5\u4e0b\u547d\u4ee4\u5feb\u901f\u4f53\u9a8c oneflow.nn.parallel.DistributedDataParallel \u505a\u6570\u636e\u5e76\u884c\uff1a wget https://docs.oneflow.org/master/code/parallelism/ddp_train.py #\u4e0b\u8f7d\u811a\u672c python3 -m oneflow.distributed.launch --nproc_per_node 2 ./ddp_train.py #\u6570\u636e\u5e76\u884c\u8bad\u7ec3 \u8f93\u51fa\uff1a 50/500 loss:0.004111831542104483 50/500 loss:0.00025336415274068713 ... 500/500 loss:6.184563972055912e-11 500/500 loss:4.547473508864641e-12 w:tensor([[2.0000], [3.0000]], device='cuda:1', dtype=oneflow.float32, grad_fn=<accumulate_grad>) w:tensor([[2.0000], [3.0000]], device='cuda:0', dtype=oneflow.float32, grad_fn=<accumulate_grad>) \u70b9\u51fb\u4ee5\u4e0b \u201cCode\u201d \u53ef\u4ee5\u5c55\u5f00\u4ee5\u4e0a\u8fd0\u884c\u811a\u672c\u7684\u4ee3\u7801\u3002 Code import oneflow as flow from oneflow.nn.parallel import DistributedDataParallel as ddp train_x = [ flow . tensor ([[ 1 , 2 ], [ 2 , 3 ]], dtype = flow . float32 ), flow . tensor ([[ 4 , 6 ], [ 3 , 1 ]], dtype = flow . float32 ), ] train_y = [ flow . tensor ([[ 8 ], [ 13 ]], dtype = flow . float32 ), flow . tensor ([[ 26 ], [ 9 ]], dtype = flow . float32 ), ] class Model ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . lr = 0.01 self . iter_count = 500 self . w = flow . nn . Parameter ( flow . tensor ([[ 0 ], [ 0 ]], dtype = flow . float32 )) def forward ( self , x ): x = flow . matmul ( x , self . w ) return x m = Model () . to ( \"cuda\" ) m = ddp ( m ) loss = flow . nn . MSELoss ( reduction = \"sum\" ) optimizer = flow . optim . SGD ( m . parameters (), m . lr ) for i in range ( 0 , m . iter_count ): rank = flow . env . get_rank () x = train_x [ rank ] . to ( \"cuda\" ) y = train_y [ rank ] . to ( \"cuda\" ) y_pred = m ( x ) l = loss ( y_pred , y ) if ( i + 1 ) % 50 == 0 : print ( f \" { i + 1 } / { m . iter_count } loss: { l } \" ) optimizer . zero_grad () l . backward () optimizer . step () print ( f \" \\n w: { m . w } \" ) \u53ef\u4ee5\u53d1\u73b0\uff0c\u5b83\u4e0e\u5355\u673a\u5355\u5361\u811a\u672c\u7684\u4e0d\u540c\u53ea\u67092\u4e2a\uff1a \u4f7f\u7528 DistributedDataParallel \u5904\u7406\u4e00\u4e0b module \u5bf9\u8c61\uff08 m = ddp(m) ) \u4f7f\u7528 get_rank \u83b7\u53d6\u5f53\u524d\u8bbe\u5907\u7f16\u53f7\uff0c\u5e76\u9488\u5bf9\u8bbe\u5907\u5206\u53d1\u6570\u636e \u7136\u540e\u4f7f\u7528 launcher \u542f\u52a8\u811a\u672c\uff0c\u628a\u5269\u4e0b\u7684\u4e00\u5207\u90fd\u4ea4\u7ed9 OneFlow\uff0c\u8ba9\u5206\u5e03\u5f0f\u8bad\u7ec3\uff0c\u50cf\u5355\u673a\u5355\u5361\u8bad\u7ec3\u4e00\u6837\u7b80\u5355\uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./ddp_train.py","title":"\u4f7f\u7528 DistributedDataParallel \u505a\u6570\u636e\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/05_ddp.html#distributedsampler","text":"\u672c\u6587\u4e3a\u4e86\u7b80\u5316\u95ee\u9898\uff0c\u7a81\u51fa DistributedDataParallel \uff0c\u56e0\u6b64\u4f7f\u7528\u7684\u6570\u636e\u662f\u624b\u5de5\u5206\u53d1\u7684\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 DistributedSampler \u914d\u5408\u6570\u636e\u5e76\u884c\u4f7f\u7528\u3002 DistributedSampler \u4f1a\u5728\u6bcf\u4e2a\u8fdb\u7a0b\u4e2d\u5b9e\u4f8b\u5316 Dataloader\uff0c\u6bcf\u4e2a Dataloader \u5b9e\u4f8b\u4f1a\u52a0\u8f7d\u5b8c\u6574\u6570\u636e\u7684\u4e00\u90e8\u5206\uff0c\u81ea\u52a8\u5b8c\u6210\u6570\u636e\u7684\u5206\u53d1\u3002","title":"DistributedSampler"},{"location":"parallelism/06_pipeline.html","text":"\u6d41\u6c34\u5e76\u884c\u8bad\u7ec3 \u00b6 \u5728 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e00\u6587\u4e2d\u4ecb\u7ecd\u4e86\u6d41\u6c34\u5e76\u884c\u7684\u7279\u70b9\u3002 \u5728 OneFlow \u7684 \u5168\u5c40\u89c6\u89d2 \u4e0b\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u8bbe\u7f6e Tensor \u7684 placement \u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u3002 \u4ee5\u4e0b\u4ee3\u7801\u662f\u7b80\u5355\u7684\u793a\u8303\uff0c\u5b83\u5c06 \u5feb\u901f\u4e0a\u624b \u4e2d\u7684\u7f51\u7edc\uff0c\u4ee5\u6d41\u6c34\u5e76\u884c\u7684\u65b9\u5f0f\u8fd0\u884c\u3002\u524d\u51e0\u5c42\u7684 Module nn.Flatten \u3001 nn.Linear(28*28, 512) \u3001 nn.ReLU() \u5728 GPU0 \u4e0a\u8fd0\u884c\uff1b\u5269\u4f59\u7684\u7f51\u7edc\u90e8\u5206\u5728 GPU1 \u4e0a\u8fd0\u884c\u3002 Code import oneflow as flow BATCH_SIZE = 16 BROADCAST = [ flow . sbp . broadcast ] P0 = flow . placement ( \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 1 ]) class Stage0Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . flatten = flow . nn . Flatten () self . linear0 = flow . nn . Linear ( 28 * 28 , 512 ) self . relu0 = flow . nn . ReLU () def forward ( self , x ): out = self . flatten ( x ) out = self . linear0 ( out ) out = self . relu0 ( out ) return out class Stage1Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear1 = flow . nn . Linear ( 512 , 512 ) self . relu1 = flow . nn . ReLU () self . linear2 = flow . nn . Linear ( 512 , 10 ) self . relu2 = flow . nn . ReLU () def forward ( self , x ): out = self . linear1 ( x ) out = self . relu1 ( out ) out = self . linear2 ( out ) out = self . relu2 ( out ) return out class PipelineModule ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . m_stage0 = Stage0Module () self . m_stage1 = Stage1Module () self . m_stage0 . to_global ( placement = P0 , sbp = BROADCAST ) self . m_stage1 . to_global ( placement = P1 , sbp = BROADCAST ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage1 module_pipeline = PipelineModule () sgd = flow . optim . SGD ( module_pipeline . parameters (), lr = 0.001 ) class PipelineGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . module_pipeline = module_pipeline self . module_pipeline . m_stage0 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 0 , placement = P0 ) self . module_pipeline . m_stage1 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 1 , placement = P1 ) self . loss_fn = flow . nn . CrossEntropyLoss () self . config . set_gradient_accumulation_steps ( 2 ) self . add_optimizer ( sgd ) def build ( self , x , y ): out = self . module_pipeline ( x ) loss = self . loss_fn ( out , y ) loss . backward () return loss graph_pipeline = PipelineGraph () x = flow . randn ( BATCH_SIZE , 1 , 28 , 28 ) x = x . to_global ( P0 , BROADCAST ) y = flow . randint ( 0 , 10 , ( BATCH_SIZE ,)) y = y . to_global ( P1 , BROADCAST ) for i in range ( 20 ): loss = graph_pipeline ( x , y ) print ( loss . to_local ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u4fdd\u5b58\u4e3a\u811a\u672c\uff08\u5982 pipeline.py \uff09\u540e\uff0c\u4f7f\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3 \uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./pipeline.py \u4ee3\u7801\u89e3\u8bfb \u00b6 \u8bbe\u7f6e placement \u4e0e sbp \u00b6 \u5c06\u9700\u8981\u4f7f\u7528\u7684 placement \u4e0e sbp \u8bbe\u7f6e\u63d0\u524d\u51c6\u5907\u597d\uff1a BROADCAST = [ flow . sbp . broadcast ] P0 = flow . placement ( \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 1 ]) P0 \u3001 P1 \u5206\u522b\u4ee3\u8868\u96c6\u7fa4\u7684\u7b2c 0 \u4e2a GPU \u548c\u7b2c 1 \u4e2a GPU\u3002 \u901a\u8fc7\u8c03\u7528 nn.Module.to_global \u6216 Tensor.to_global \u5c31\u53ef\u4ee5\u5c06\u6a21\u578b\u6216\u5f20\u91cf\u5206\u914d\u5230\u6307\u5b9a\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\u8fd0\u884c\uff0c\u5c06\u4e00\u4e2a\u7f51\u7edc\u62c6\u5206\u4e3a\u591a\u4e2a\u6d41\u6c34\u9636\u6bb5\uff08stage\uff09\u3002 \u5728\u6b64\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a PipelineModule \u4e13\u95e8\u8bbe\u7f6e\u5404\u9636\u6bb5\u7684\u6d41\u6c34\u3002 class PipelineModule ( flow . nn . Module ): def __init__ ( self ): #... self . m_stage0 . to_global ( placement = P0 , sbp = BROADCAST ) self . m_stage1 . to_global ( placement = P1 , sbp = BROADCAST ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage1 Local Tensor \u4e0e Global Tensor \u7684\u8f6c\u6362 \u00b6 \u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u968f\u673a\u751f\u6210\u7684\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002 x = flow . randn ( BATCH_SIZE , 1 , 28 , 28 ) x = x . to_global ( P0 , BROADCAST ) \u5f53\u4f7f\u7528 launch \u6a21\u5757\u542f\u52a8\u8bad\u7ec3\u65f6\uff0c\u56e0\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u4e3a --nproc_per_node 2 \uff0c launch \u4f1a\u542f\u52a8 2 \u4e2a\u8fdb\u7a0b\u3002\u4e24\u4e2a\u8fdb\u7a0b\u5747\u4e3a\u6267\u884c\u811a\u672c\u4e2d\u7684\u4ee3\u7801\u3002 \u5176\u4e2d x = flow.randn(BATCH_SIZE, 1, 28, 28) \u8fd4\u56de\u7684\u662f Local Tensor\uff08\u53ea\u5728\u672c\u8fdb\u7a0b\u4e2d\u6709\u6548\u7684\u672c\u5730\u6570\u636e\uff09\uff0c\u5f53\u8fd0\u884c x = x.to_global(P0, BROADCAST) \u65f6\uff0cOneFlow \u4f1a\u81ea\u52a8\u5c06\u6240\u6709\u8fdb\u7a0b\u4e2d\u7684 Local Tensor \u6574\u5408\u4e3a Global Tensor\u3002 \u5728\u5b9e\u9645\u8bad\u7ec3\u4e2d\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e5f\u53ef\u4ee5\u52a0\u8f7d\u5c5e\u4e8e\u5404\u81ea\u7684\u672c\u5730\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 to_global \u5b9e\u73b0 Local Tensor \u5230 Global Tensor \u7684\u8f6c\u5316\u3002 Stage ID \u53ca\u68af\u5ea6\u7d2f\u79ef\u8bbe\u7f6e \u00b6 \u5f53 nn.Module \u7684\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7f51\u7edc\u5c42\u4f5c\u4e3a\u5c5e\u6027\u52a0\u5165\u7ee7\u627f\u4e8e nn.Graph \u7684\u65b0\u7c7b\u65f6\uff0c\u5185\u90e8\u4f1a\u5c06\u8be5\u7f51\u7edc\u5c42\u7528 ProxyModule \u8fdb\u884c\u5305\u88c5\uff0c\u5229\u7528\u65b9\u6cd5 .to \u5f97\u5230\u4e00\u4e2a nn.graph.GraphModule \u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528\u65b9\u6cd5 stage_id \u8bbe\u7f6e\u6d41\u6c34\u7ebf Stage ID \u548c Stage \u5bf9\u5e94\u7684 Placement\uff0cStage ID \u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u4f9d\u6b21\u52a0 1\u3002 \u8c03\u7528 config.set_gradient_accumulation_steps \u65b9\u6cd5\uff0c\u8bbe\u7f6e\u68af\u5ea6\u7d2f\u79ef\u7684\u6b65\u957f\u3002 OneFlow \u901a\u8fc7\u8fd9\u4e24\u9879\u914d\u7f6e\uff0c\u83b7\u53d6\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u4e2d\u7684 micro batch \u6280\u672f\u6240\u9700\u7684\u4fe1\u606f\u3002 self . module_pipeline . m_stage0 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 0 , placement = P0 ) self . module_pipeline . m_stage1 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 1 , placement = P1 ) self . config . set_gradient_accumulation_steps ( 2 )","title":"\u6d41\u6c34\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/06_pipeline.html#_1","text":"\u5728 \u5e38\u89c1\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u7b56\u7565 \u4e00\u6587\u4e2d\u4ecb\u7ecd\u4e86\u6d41\u6c34\u5e76\u884c\u7684\u7279\u70b9\u3002 \u5728 OneFlow \u7684 \u5168\u5c40\u89c6\u89d2 \u4e0b\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u8bbe\u7f6e Tensor \u7684 placement \u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u3002 \u4ee5\u4e0b\u4ee3\u7801\u662f\u7b80\u5355\u7684\u793a\u8303\uff0c\u5b83\u5c06 \u5feb\u901f\u4e0a\u624b \u4e2d\u7684\u7f51\u7edc\uff0c\u4ee5\u6d41\u6c34\u5e76\u884c\u7684\u65b9\u5f0f\u8fd0\u884c\u3002\u524d\u51e0\u5c42\u7684 Module nn.Flatten \u3001 nn.Linear(28*28, 512) \u3001 nn.ReLU() \u5728 GPU0 \u4e0a\u8fd0\u884c\uff1b\u5269\u4f59\u7684\u7f51\u7edc\u90e8\u5206\u5728 GPU1 \u4e0a\u8fd0\u884c\u3002 Code import oneflow as flow BATCH_SIZE = 16 BROADCAST = [ flow . sbp . broadcast ] P0 = flow . placement ( \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 1 ]) class Stage0Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . flatten = flow . nn . Flatten () self . linear0 = flow . nn . Linear ( 28 * 28 , 512 ) self . relu0 = flow . nn . ReLU () def forward ( self , x ): out = self . flatten ( x ) out = self . linear0 ( out ) out = self . relu0 ( out ) return out class Stage1Module ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . linear1 = flow . nn . Linear ( 512 , 512 ) self . relu1 = flow . nn . ReLU () self . linear2 = flow . nn . Linear ( 512 , 10 ) self . relu2 = flow . nn . ReLU () def forward ( self , x ): out = self . linear1 ( x ) out = self . relu1 ( out ) out = self . linear2 ( out ) out = self . relu2 ( out ) return out class PipelineModule ( flow . nn . Module ): def __init__ ( self ): super () . __init__ () self . m_stage0 = Stage0Module () self . m_stage1 = Stage1Module () self . m_stage0 . to_global ( placement = P0 , sbp = BROADCAST ) self . m_stage1 . to_global ( placement = P1 , sbp = BROADCAST ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage1 module_pipeline = PipelineModule () sgd = flow . optim . SGD ( module_pipeline . parameters (), lr = 0.001 ) class PipelineGraph ( flow . nn . Graph ): def __init__ ( self ): super () . __init__ () self . module_pipeline = module_pipeline self . module_pipeline . m_stage0 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 0 , placement = P0 ) self . module_pipeline . m_stage1 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 1 , placement = P1 ) self . loss_fn = flow . nn . CrossEntropyLoss () self . config . set_gradient_accumulation_steps ( 2 ) self . add_optimizer ( sgd ) def build ( self , x , y ): out = self . module_pipeline ( x ) loss = self . loss_fn ( out , y ) loss . backward () return loss graph_pipeline = PipelineGraph () x = flow . randn ( BATCH_SIZE , 1 , 28 , 28 ) x = x . to_global ( P0 , BROADCAST ) y = flow . randint ( 0 , 10 , ( BATCH_SIZE ,)) y = y . to_global ( P1 , BROADCAST ) for i in range ( 20 ): loss = graph_pipeline ( x , y ) print ( loss . to_local ()) \u4ee5\u4e0a\u4ee3\u7801\uff0c\u4fdd\u5b58\u4e3a\u811a\u672c\uff08\u5982 pipeline.py \uff09\u540e\uff0c\u4f7f\u7528 launch \u6a21\u5757\u542f\u52a8\u5206\u5e03\u5f0f\u8bad\u7ec3 \uff1a python3 -m oneflow.distributed.launch --nproc_per_node 2 ./pipeline.py","title":"\u6d41\u6c34\u5e76\u884c\u8bad\u7ec3"},{"location":"parallelism/06_pipeline.html#_2","text":"","title":"\u4ee3\u7801\u89e3\u8bfb"},{"location":"parallelism/06_pipeline.html#placement-sbp","text":"\u5c06\u9700\u8981\u4f7f\u7528\u7684 placement \u4e0e sbp \u8bbe\u7f6e\u63d0\u524d\u51c6\u5907\u597d\uff1a BROADCAST = [ flow . sbp . broadcast ] P0 = flow . placement ( \"cuda\" , ranks = [ 0 ]) P1 = flow . placement ( \"cuda\" , ranks = [ 1 ]) P0 \u3001 P1 \u5206\u522b\u4ee3\u8868\u96c6\u7fa4\u7684\u7b2c 0 \u4e2a GPU \u548c\u7b2c 1 \u4e2a GPU\u3002 \u901a\u8fc7\u8c03\u7528 nn.Module.to_global \u6216 Tensor.to_global \u5c31\u53ef\u4ee5\u5c06\u6a21\u578b\u6216\u5f20\u91cf\u5206\u914d\u5230\u6307\u5b9a\u7684\u8ba1\u7b97\u8bbe\u5907\u4e0a\u8fd0\u884c\uff0c\u5c06\u4e00\u4e2a\u7f51\u7edc\u62c6\u5206\u4e3a\u591a\u4e2a\u6d41\u6c34\u9636\u6bb5\uff08stage\uff09\u3002 \u5728\u6b64\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a PipelineModule \u4e13\u95e8\u8bbe\u7f6e\u5404\u9636\u6bb5\u7684\u6d41\u6c34\u3002 class PipelineModule ( flow . nn . Module ): def __init__ ( self ): #... self . m_stage0 . to_global ( placement = P0 , sbp = BROADCAST ) self . m_stage1 . to_global ( placement = P1 , sbp = BROADCAST ) def forward ( self , x ): out_stage0 = self . m_stage0 ( x ) in_stage1 = out_stage0 . to_global ( placement = P1 , sbp = BROADCAST ) out_stage1 = self . m_stage1 ( in_stage1 ) return out_stage1","title":"\u8bbe\u7f6e placement \u4e0e sbp"},{"location":"parallelism/06_pipeline.html#local-tensor-global-tensor","text":"\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86\u968f\u673a\u751f\u6210\u7684\u6570\u636e\u4f5c\u4e3a\u8f93\u5165\u3002 x = flow . randn ( BATCH_SIZE , 1 , 28 , 28 ) x = x . to_global ( P0 , BROADCAST ) \u5f53\u4f7f\u7528 launch \u6a21\u5757\u542f\u52a8\u8bad\u7ec3\u65f6\uff0c\u56e0\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u4e3a --nproc_per_node 2 \uff0c launch \u4f1a\u542f\u52a8 2 \u4e2a\u8fdb\u7a0b\u3002\u4e24\u4e2a\u8fdb\u7a0b\u5747\u4e3a\u6267\u884c\u811a\u672c\u4e2d\u7684\u4ee3\u7801\u3002 \u5176\u4e2d x = flow.randn(BATCH_SIZE, 1, 28, 28) \u8fd4\u56de\u7684\u662f Local Tensor\uff08\u53ea\u5728\u672c\u8fdb\u7a0b\u4e2d\u6709\u6548\u7684\u672c\u5730\u6570\u636e\uff09\uff0c\u5f53\u8fd0\u884c x = x.to_global(P0, BROADCAST) \u65f6\uff0cOneFlow \u4f1a\u81ea\u52a8\u5c06\u6240\u6709\u8fdb\u7a0b\u4e2d\u7684 Local Tensor \u6574\u5408\u4e3a Global Tensor\u3002 \u5728\u5b9e\u9645\u8bad\u7ec3\u4e2d\uff0c\u5404\u4e2a\u8ba1\u7b97\u8bbe\u5907\u4e5f\u53ef\u4ee5\u52a0\u8f7d\u5c5e\u4e8e\u5404\u81ea\u7684\u672c\u5730\u6570\u636e\uff0c\u7136\u540e\u901a\u8fc7 to_global \u5b9e\u73b0 Local Tensor \u5230 Global Tensor \u7684\u8f6c\u5316\u3002","title":"Local Tensor \u4e0e Global Tensor \u7684\u8f6c\u6362"},{"location":"parallelism/06_pipeline.html#stage-id","text":"\u5f53 nn.Module \u7684\u4e00\u4e2a\u5b9e\u4f8b\u5316\u7f51\u7edc\u5c42\u4f5c\u4e3a\u5c5e\u6027\u52a0\u5165\u7ee7\u627f\u4e8e nn.Graph \u7684\u65b0\u7c7b\u65f6\uff0c\u5185\u90e8\u4f1a\u5c06\u8be5\u7f51\u7edc\u5c42\u7528 ProxyModule \u8fdb\u884c\u5305\u88c5\uff0c\u5229\u7528\u65b9\u6cd5 .to \u5f97\u5230\u4e00\u4e2a nn.graph.GraphModule \u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u7136\u540e\u4f7f\u7528\u65b9\u6cd5 stage_id \u8bbe\u7f6e\u6d41\u6c34\u7ebf Stage ID \u548c Stage \u5bf9\u5e94\u7684 Placement\uff0cStage ID \u4ece 0 \u5f00\u59cb\u7f16\u53f7\uff0c\u4f9d\u6b21\u52a0 1\u3002 \u8c03\u7528 config.set_gradient_accumulation_steps \u65b9\u6cd5\uff0c\u8bbe\u7f6e\u68af\u5ea6\u7d2f\u79ef\u7684\u6b65\u957f\u3002 OneFlow \u901a\u8fc7\u8fd9\u4e24\u9879\u914d\u7f6e\uff0c\u83b7\u53d6\u5b9e\u73b0\u6d41\u6c34\u5e76\u884c\u4e2d\u7684 micro batch \u6280\u672f\u6240\u9700\u7684\u4fe1\u606f\u3002 self . module_pipeline . m_stage0 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 0 , placement = P0 ) self . module_pipeline . m_stage1 . to ( nn . graph . GraphModule ) . set_stage ( stage_id = 1 , placement = P1 ) self . config . set_gradient_accumulation_steps ( 2 )","title":"Stage ID \u53ca\u68af\u5ea6\u7d2f\u79ef\u8bbe\u7f6e"}]}